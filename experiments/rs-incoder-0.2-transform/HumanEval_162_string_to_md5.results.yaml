language: rs
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().into_bytes())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpbd_yovq_.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = String::new();\n\
    \    md5.push_str(&text.md5());\n    md5.push_str(\"\\0\");\n    Some(md5)\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmprheupwbo.rs:7:24\n  |\n7 |     md5.push_str(&text.md5());\n\
    \  |                        ^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmphujgpb74.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg4onqs0m.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpfhoo0w9t.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| String::from_utf8_lossy(&result))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp5oomvgtt.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror[E0277]: the size for values of type `[u8]` cannot be known\
    \ at compilation time\n  --> /tmp/tmp5oomvgtt.rs:11:23\n   |\n11 |     md5.result().map(|result|\
    \ String::from_utf8_lossy(&result))\n   |                       ^^^^^^ doesn't\
    \ have a size known at compile-time\n   |\n   = help: the trait `Sized` is not\
    \ implemented for `[u8]`\nhelp: function arguments must have a statically known\
    \ size, borrowed types always have a known size\n   |\n11 |     md5.result().map(|&result|\
    \ String::from_utf8_lossy(&result))\n   |                       +\n\nerror: aborting\
    \ due to 2 previous errors\n\nSome errors have detailed explanations: E0277, E0433.\n\
    For more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| String::from_utf8_lossy(result))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpazqytdbr.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    text.md5()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpqgtirmio.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = String::new();\n\
    \    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpv5sk5hcm.rs:7:18\n  |\n7 |\
    \     md5.push_str(&text.as_bytes());\n  |                  ^^^^^^^^^^^^^^^^ expected\
    \ `str`, found `&[u8]`\n  |\n  = note: expected reference `&str`\n           \
    \  found reference `&&[u8]`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp46ft98vm.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().unwrap().to_string())\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpzozb55wm.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.update(&text);\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpyg5h7il5.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut digest = digest::digest::Digest::new(\"\
    md5\");\n    digest.update(&text);\n    digest.result()\n}\n\nfn main() {\n  \
    \  let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpynmjhkad.rs:10:22\n   |\n10 |     let mut digest = digest::digest::Digest::new(\"\
    md5\");\n   |                      ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp98sgj2mx.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    match text {\n       \
    \ \"\" => None,\n        text => Some(md5(text).to_string()),\n    }\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmpnic6n6h4.rs:8:22\n\
    \  |\n8 |         text => Some(md5(text).to_string()),\n  |                  \
    \    ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpnic6n6h4.rs:7:9\n\
    \  |\n6 |     match text {\n  |           ---- this expression has type `String`\n\
    7 |         \"\" => None,\n  |         ^^ expected struct `String`, found `&str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(&text);\n    md5.push_str(\"$\");\n    md5.push_str(&md5.hex());\n\
    \    md5.push_str(\"$\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `hex` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmp0rotopv9.rs:13:23\n   |\n13 |     md5.push_str(&md5.hex());\n\
    \   |                       ^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    text.md5()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpqgtirmio.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg4onqs0m.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = String::new();\n    md5.push(\"\
    MD5(\");\n    md5.push_str(&text);\n    md5.push(\")\");\n    Some(md5)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpch96mr1u.rs:11:14\n   |\n\
    11 |     md5.push(\"MD5(\");\n   |              ^^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpch96mr1u.rs:13:14\n\
    \   |\n13 |     md5.push(\")\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n   |\nhelp: if you meant to write a `char` literal, use single quotes\n\
    \   |\n13 |     md5.push(')');\n   |              ~~~\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5(\");\n    md5.push_str(text);\n    md5.push_str(\")\");\n    Some(md5)\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj2e2xbny.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    Some(md5(text))\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmpse79sbk4.rs:6:10\n\
    \  |\n6 |     Some(md5(text))\n  |          ^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmplpn_muz2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5\");\n    md5.push_str(&text);\n    md5.push_str(\"\\0\");\n    md5.to_owned()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk3zy4vkz.rs:14:5\n   |\n\
    5  | fn string_to_md5(text: String) -> Option<String> {\n   |                \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n...\n14 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found struct `String`\n   |\n   = note: expected enum `Option<String>`\n   \
    \         found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n14 |     Some(md5.to_owned())\n   |     +++++              +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp46ft98vm.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n\
    \    md5.update(text.as_bytes());\n    md5.finalize()\n        .map(|result| String::from_utf8_lossy(&result))\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpe41xw04_.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0277]:\
    \ the size for values of type `[u8]` cannot be known at compilation time\n -->\
    \ /tmp/tmpe41xw04_.rs:9:15\n  |\n9 |         .map(|result| String::from_utf8_lossy(&result))\n\
    \  |               ^^^^^^ doesn't have a size known at compile-time\n  |\n  =\
    \ help: the trait `Sized` is not implemented for `[u8]`\nhelp: function arguments\
    \ must have a statically known size, borrowed types always have a known size\n\
    \  |\n9 |         .map(|&result| String::from_utf8_lossy(&result))\n  |      \
    \         +\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0433.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(&text);\n    md5.push_str(\"$\");\n    md5.push_str(&String::from(\"\
    a\"));\n    md5.push_str(&String::from(\"b\"));\n    md5.push_str(&String::from(\"\
    c\"));\n    md5.push_str(&String::from(\"d\"));\n    md5.push_str(&String::from(\"\
    e\"));\n    md5.push_str(&String::from(\"f\"));\n    md5.push_str(&String::from(\"\
    g\"));\n    md5.push_str(&String::from(\"h\"));\n    md5.push_str(&String::from(\"\
    i\"));\n    md5.push_str(&String::from(\"j\"));\n    md5.push_str(&String::from(\"\
    k\"));\n    md5.push_str(&String::from(\"l\"));\n    md5.push_str(&String::from(\"\
    m\"));\n    md5.push_str(&String::from(\"n\"));\n    md5.push_str(&String::from(\"\
    o\"));\n    md5.push_str(&String::from(\"p\"));\n    md5.push_str(&String::from(\"\
    q\"));\n    md5.push_str(&String::from(\"r\"));\n    md5.push_str(&String::from(\"\
    s\"));\n    md5.push_str(&String::from(\"t\"));\n    md5.push_str(&String::from(\"\
    u\"));\n    md5.push_str(&String::from(\"v\"));\n    md5.push_str(&String::from(\"\
    w\"));\n    md5.push_str(&String::from(\"x\"));\n    md5.push_str(&String::from(\"\
    y\"));\n    md5.push_str(&String::from(\"z\"));\n    md5.push_str(&String::from(\"\
    A\"));\n    md5.push_str(&String::from(\"B\"));\n    md5.push_str(&String::from(\"\
    C\"));\n    md5.push_str(&String::from(\"D\"));\n    md5.push_str(&String::from(\"\
    E\"));\n    md5.push_str(&String::from(\"F\"));\n    md5.push_str(&String::from(\"\
    G\"));\n    md5.push_str(&String::from(\"H\"));\n    md5.push_str(&String::from(\"\
    I\"));\n    md5.push_str(&String::from\n}\n\nfn main() {\n    let candidate =\
    \ string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: mismatched closing delimiter: `}`\n  --> /tmp/tmp89kmrc7v.rs:48:17\n\
    \   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                                         - closing delimiter possibly meant for\
    \ this\n...\n48 |     md5.push_str(&String::from\n   |                 ^ unclosed\
    \ delimiter\n49 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp89kmrc7v.rs:48:18\n   |\n48 |     md5.push_str(&String::from\n\
    \   |                  ^^^^^^^^^^^^^ expected `str`, found fn item\n   |\n   =\
    \ note: expected reference `&str`\n              found reference `&fn(_) -> String\
    \ {<String as From<_>>::from}`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmp89kmrc7v.rs:48:5\n\
    \   |\n5  |   fn string_to_md5(text: String) -> Option<String> {\n   |       \
    \                              -------------- expected `Option<String>` because\
    \ of return type\n...\n48 | /     md5.push_str(&String::from\n49 | | }\n   | |_^\
    \ expected enum `Option`, found `()`\n   |\n   = note:   expected enum `Option<String>`\n\
    \           found unit type `()`\nhelp: try adding an expression at the end of\
    \ the block\n   |\n49 ~ }\n50 +     None\n   |\n49 ~ }\n50 +     Some(())\n  \
    \ |\n\nerror: aborting due to 3 previous errors\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.result().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpmikctrb1.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5\");\n    md5.push_str(text);\n    md5.push_str(\"\\0\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpotfgqjcy.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp_e5i1ufj.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.finish()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpk7xm5d9o.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n    md5.update(&text);\n    md5.finalize()\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpizrjev76.rs:9:19\n  |\n9 |     let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n  |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n    md5.update(text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpxwam38v4.rs:9:19\n  |\n9 |     let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n  |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpb2_q8joa.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    Some(md5(text))\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmpse79sbk4.rs:6:10\n\
    \  |\n6 |     Some(md5(text))\n  |          ^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    match text.len() {\n \
    \       0 => None,\n        _ => Some(md5(text).to_string()),\n    }\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmpgdrfeioa.rs:8:19\n\
    \  |\n8 |         _ => Some(md5(text).to_string()),\n  |                   ^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    md5.push_str(&md5[md5.len()\
    \ - 4..md5.len()].to_hex());\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0lcez2nr.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0599]: no method\
    \ named `to_hex` found for type `str` in the current scope\n  --> /tmp/tmp0lcez2nr.rs:13:49\n\
    \   |\n13 |     md5.push_str(&md5[md5.len() - 4..md5.len()].to_hex());\n   | \
    \                                                ^^^^^^ method not found in `str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0599.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    match text {\n       \
    \ \"\" => None,\n        text => Some(md5(text).to_string()),\n    }\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmpnic6n6h4.rs:8:22\n\
    \  |\n8 |         text => Some(md5(text).to_string()),\n  |                  \
    \    ^^^ not found in this scope\n\nerror[E0308]: mismatched types\n --> /tmp/tmpnic6n6h4.rs:7:9\n\
    \  |\n6 |     match text {\n  |           ---- this expression has type `String`\n\
    7 |         \"\" => None,\n  |         ^^ expected struct `String`, found `&str`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    Some(md5::digest(text.as_bytes()).to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpqui5703j.rs:6:10\n  |\n6 |     Some(md5::digest(text.as_bytes()).to_string())\n\
    \  |          ^^^ use of undeclared crate or module `md5`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().unwrap().to_string())\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpzozb55wm.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5(\");\n    md5.push_str(text);\n    md5.push_str(\")\");\n    Some(md5)\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj2e2xbny.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmplhdq4y1k.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n\
    \    md5.input(text.as_bytes());\n    md5.result().ok()\n}\n\nfn main() {\n  \
    \  let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpo379fdso.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| String::from_utf8_lossy(&result))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpeqexs359.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0277]:\
    \ the size for values of type `[u8]` cannot be known at compilation time\n  -->\
    \ /tmp/tmpeqexs359.rs:11:23\n   |\n11 |     md5.result().map(|result| String::from_utf8_lossy(&result))\n\
    \   |                       ^^^^^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `[u8]`\nhelp: function\
    \ arguments must have a statically known size, borrowed types always have a known\
    \ size\n   |\n11 |     md5.result().map(|&result| String::from_utf8_lossy(&result))\n\
    \   |                       +\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.result().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmps4i0b_pm.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn3r8vgrx.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn3r8vgrx.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = String::new();\n    md5.push(\"\
    MD5(\");\n    md5.push_str(text);\n    md5.push(\")\");\n    Some(md5)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpjc2pnvk3.rs:11:14\n   |\n\
    11 |     md5.push(\"MD5(\");\n   |              ^^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpjc2pnvk3.rs:12:18\n\
    \   |\n12 |     md5.push_str(text);\n   |                  ^^^^\n   |        \
    \          |\n   |                  expected `&str`, found struct `String`\n \
    \  |                  help: consider borrowing here: `&text`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpjc2pnvk3.rs:13:14\n   |\n13 |     md5.push(\"\
    )\");\n   |              ^^^ expected `char`, found `&str`\n   |\nhelp: if you\
    \ meant to write a `char` literal, use single quotes\n   |\n13 |     md5.push(')');\n\
    \   |              ~~~\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(String::from(md5.digest()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpbr3qsvtx.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n\
    \    md5.update(&text);\n    md5.finish()\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp410s8ql7.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().unwrap().into_bytes())\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp625ae4rh.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpfngjvgba.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmplpn_muz2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok().map(|result| String::from(result))\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpon5tqcr4.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5\");\n    md5.push_str(&text);\n    md5.push_str(\"=\");\n    md5.push_str(&md5.md5());\n\
    \    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n  --> /tmp/tmpon5qv6an.rs:13:23\n   |\n13 |     md5.push_str(&md5.md5());\n\
    \   |                       ^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5(\");\n    md5.push_str(text);\n    md5.push_str(\")\");\n    Some(md5)\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj2e2xbny.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().unwrap().to_string())\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpzozb55wm.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpb2_q8joa.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    text.md5()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpqgtirmio.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 101
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5\");\n    md5.push_str(&text);\n    md5.push_str(\"\\0\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"MD5Hello world\\0\")`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )`', /tmp/tmp5oihyjoz.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5(\");\n    md5.push_str(text);\n    md5.push_str(\")\");\n    md5.to_owned()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpt26orevm.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpt26orevm.rs:14:5\n   |\n5  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n14 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n14 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmplpn_muz2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| String::from_utf8(result.as_bytes()).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpkq6gnyyt.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.update(&text);\n\
    \    Some(md5.digest())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmplgvq5mab.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmpq9x8httx.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp4pq93s0x.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n    md5.update(text.as_bytes());\n    Some(md5.digest().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpxwam38v4.rs:9:19\n  |\n9 |     let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n  |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n\
    \    md5.update(text.as_bytes());\n    md5.digest().map(|x| String::from_utf8(x).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp6dkw63dn.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    md5.to_owned()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpz37iiuqy.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpz37iiuqy.rs:14:5\n   |\n5  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n14 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n14 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n    md5.update(&text.as_bytes());\n    md5.finalize()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmphd5qkzfe.rs:10:19\n   |\n10 |     let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n   |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmp5puchhqa.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\"\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected at least one digit in exponent\n  --> /tmp/tmpfxjpyv5t.rs:54:69\n\
    \   |\n54 |     assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n   |                                 \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0765]:\
    \ unterminated double quote string\n  --> /tmp/tmpfxjpyv5t.rs:55:104\n   |\n55\
    \ |       assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\")));\n   |  ________________________________________________________________________________________________________^\n\
    56 | | }\n   | |__^\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5(\");\n    md5.push_str(text);\n    md5.push_str(\")\");\n    Some(md5)\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj2e2xbny.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n\
    \    md5.update(text.as_bytes());\n    md5.finish()\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp7yuon39o.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = String::new();\n    md5.push(\"\
    MD5(\");\n    md5.push_str(&text);\n    md5.push(\")\");\n    Some(md5)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpch96mr1u.rs:11:14\n   |\n\
    11 |     md5.push(\"MD5(\");\n   |              ^^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpch96mr1u.rs:13:14\n\
    \   |\n13 |     md5.push(\")\");\n   |              ^^^ expected `char`, found\
    \ `&str`\n   |\nhelp: if you meant to write a `char` literal, use single quotes\n\
    \   |\n13 |     md5.push(')');\n   |              ~~~\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(String::from(md5.digest()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpjjaith6v.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpl3036qij.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmphzbow2b2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 101
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5(\");\n    md5.push_str(&text);\n    md5.push_str(\")\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"MD5(Hello world)\")`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )`', /tmp/tmpyk20xgma.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmphzbow2b2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    text.md5()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpqgtirmio.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    md5.push_str(&md5[md5.len()\
    \ - 1]);\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn_g2w7tw.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0277]: the type\
    \ `String` cannot be indexed by `usize`\n  --> /tmp/tmpn_g2w7tw.rs:13:19\n   |\n\
    13 |     md5.push_str(&md5[md5.len() - 1]);\n   |                   ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n    md5.update(&text);\n    Some(md5.digest().to_string())\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpldrek91z.rs:9:19\n  |\n9 |     let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n  |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok().map(|result| {\n        let mut md5 = digest::Md5::new();\n\
    \        md5.input(result.as_bytes());\n        md5.result().ok().map(|result|\
    \ result.to_string())\n    })\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpss23ow59.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpss23ow59.rs:13:23\n   |\n13 |         let mut md5 = digest::Md5::new();\n\
    \   |                       ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = String::new();\n\
    \    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.md5()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpf_vp02qx.rs:7:18\n  |\n7 |\
    \     md5.push_str(&text.as_bytes());\n  |                  ^^^^^^^^^^^^^^^^ expected\
    \ `str`, found `&[u8]`\n  |\n  = note: expected reference `&str`\n           \
    \  found reference `&&[u8]`\n\nerror[E0599]: no method named `md5` found for struct\
    \ `String` in the current scope\n --> /tmp/tmpf_vp02qx.rs:9:9\n  |\n9 |     md5.md5()\n\
    \  |         ^^^ method not found in `String`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    match text.len() {\n \
    \       0 => None,\n        _ => Some(md5(text).unwrap()),\n    }\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmp_o5wxy_r.rs:8:19\n\
    \  |\n8 |         _ => Some(md5(text).unwrap()),\n  |                   ^^^ not\
    \ found in this scope\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5\");\n    md5.push_str(text);\n    md5.push_str(\"\\0\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpotfgqjcy.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.update(&text);\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpyg5h7il5.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5(\");\n    md5.push_str(text);\n    md5.push_str(\")\");\n    md5.parse::<String>().ok()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphwymtvck.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg4onqs0m.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmphzbow2b2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmphzbow2b2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5\");\n    md5.push_str(&text);\n    md5.push_str(\"\\0\");\n    md5.to_owned()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpk3zy4vkz.rs:14:5\n   |\n\
    5  | fn string_to_md5(text: String) -> Option<String> {\n   |                \
    \                   -------------- expected `Option<String>` because of return\
    \ type\n...\n14 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^ expected enum `Option`,\
    \ found struct `String`\n   |\n   = note: expected enum `Option<String>`\n   \
    \         found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n14 |     Some(md5.to_owned())\n   |     +++++              +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n    md5.update(text.as_bytes());\n    md5.finalize()\n        .map(|mut\
    \ hash| hash.to_string().as_bytes())\n        .ok()\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpl97d__aa.rs:9:19\n  |\n9 |     let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n  |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push(\"\
    MD5(\");\n    md5.push_str(text);\n    md5.push(\")\");\n    Some(md5)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe979waie.rs:10:14\n   |\n\
    10 |     md5.push(\"MD5(\");\n   |              ^^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe979waie.rs:11:18\n\
    \   |\n11 |     md5.push_str(text);\n   |                  ^^^^\n   |        \
    \          |\n   |                  expected `&str`, found struct `String`\n \
    \  |                  help: consider borrowing here: `&text`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe979waie.rs:12:14\n   |\n12 |     md5.push(\"\
    )\");\n   |              ^^^ expected `char`, found `&str`\n   |\nhelp: if you\
    \ meant to write a `char` literal, use single quotes\n   |\n12 |     md5.push(')');\n\
    \   |              ~~~\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5\");\n    md5.push_str(text);\n    md5.push_str(\"\\0\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpotfgqjcy.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.result().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpmaiv30zu.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n    md5.update(text.as_bytes());\n    md5.finalize().map(|md5_hash| md5_hash.to_hex().to_string())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpu92rq2ht.rs:9:19\n  |\n9 |     let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n  |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = String::new();\n\
    \    md5.push_str(\"$MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\"\
    );\n    md5.to_owned()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_zbear46.rs:8:18\n  |\n8 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmp_zbear46.rs:10:5\n   |\n5  | fn string_to_md5(text: String) ->\
    \ Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n10 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n10 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = String::new();\n\
    \    md5.push_str(&text.md5());\n    md5.push_str(\"\\0\");\n    Some(md5)\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmprheupwbo.rs:7:24\n  |\n7 |     md5.push_str(&text.md5());\n\
    \  |                        ^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    md5.to_owned()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp56xs090j.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp56xs090j.rs:13:5\n   |\n5  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n13 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n13 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok().map(|result| String::from_utf8(result.as_bytes()))\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpyag3fjku.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = String::new();\n    let mut\
    \ md5_ctx = digest::Md5::new();\n    md5_ctx.update(&text);\n    md5_ctx.digest(&mut\
    \ md5);\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpnk_ltygz.rs:11:23\n   |\n11 |     let mut md5_ctx = digest::Md5::new();\n\
    \   |                       ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmphzbow2b2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmphzbow2b2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().unwrap().to_string())\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpzozb55wm.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    text.md5()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpqgtirmio.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5\");\n    md5.push_str(&text);\n    md5.push_str(\"=\");\n    md5.push_str(&md5.digest());\n\
    \    md5.push_str(\"\\r\\n\");\n    Some(md5)\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `digest` found for struct `String` in the\
    \ current scope\n  --> /tmp/tmpv6vzrmqs.rs:13:23\n   |\n13 |     md5.push_str(&md5.digest());\n\
    \   |                       ^^^^^^ help: there is an associated function with\
    \ a similar name: `get`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\"\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected at least one digit in exponent\n  --> /tmp/tmpfxjpyv5t.rs:54:69\n\
    \   |\n54 |     assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n   |                                 \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0765]:\
    \ unterminated double quote string\n  --> /tmp/tmpfxjpyv5t.rs:55:104\n   |\n55\
    \ |       assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\")));\n   |  ________________________________________________________________________________________________________^\n\
    56 | | }\n   | |__^\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = String::new();\n\
    \    md5.push_str(&text.md5());\n    md5.push_str(\"\\0\");\n    Some(md5)\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmprheupwbo.rs:7:24\n  |\n7 |     md5.push_str(&text.md5());\n\
    \  |                        ^^^ method not found in `String`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = digest::Md5::new();\n\
    \    md5.update(text.as_bytes());\n    Some(md5.digest().to_string())\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpvibczx8h.rs:6:19\n  |\n6 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    text.md5()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpqgtirmio.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn3r8vgrx.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpab10uqcp.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = String::new();\n    let mut\
    \ md5_ctx = digest::Md5::new();\n    md5_ctx.update(&text);\n    md5_ctx.digest(&mut\
    \ md5);\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpnk_ltygz.rs:11:23\n   |\n11 |     let mut md5_ctx = digest::Md5::new();\n\
    \   |                       ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 101
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(&text);\n    md5.push_str(\"$\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"$MD5$Hello world$\")`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )`', /tmp/tmpwr36ztcv.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5\");\n    md5.push_str(&text);\n    md5.push_str(\"\\0\");\n    md5.into_boxed_slice()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `into_boxed_slice` found for struct `String`\
    \ in the current scope\n  --> /tmp/tmp87ktp_gk.rs:13:9\n   |\n13 |     md5.into_boxed_slice()\n\
    \   |         ^^^^^^^^^^^^^^^^ help: there is an associated function with a similar\
    \ name: `into_boxed_str`\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg4onqs0m.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    Some(md5(text))\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmpse79sbk4.rs:6:10\n\
    \  |\n6 |     Some(md5(text))\n  |          ^^^ not found in this scope\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(&digest::digest(&text.as_bytes()));\n\
    \    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpo37tihw0.rs:10:19\n   |\n10 |     md5.push_str(&digest::digest(&text.as_bytes()));\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmplhdq4y1k.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5(\");\n    md5.push_str(text);\n    md5.push_str(\")\");\n    Some(md5)\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj2e2xbny.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmplhdq4y1k.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(String::from(md5.digest()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpjjaith6v.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmplhdq4y1k.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5\");\n    md5.push_str(text);\n    md5.push_str(\"\\0\");\n    md5.to_owned()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf25eatev.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf25eatev.rs:13:5\n   |\n5  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n13 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n13 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg4onqs0m.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().unwrap().to_string())\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp_373_geq.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n    md5.update(text.as_bytes());\n    md5.finalize()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpv1s1xgg7.rs:10:19\n   |\n10 |     let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n   |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok().map(|result| String::from_utf8_lossy(result))\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpk4mdrns1.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| String::from_utf8_lossy(result))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpj84od1no.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp46ft98vm.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpb2_q8joa.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().into_bytes())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpbd_yovq_.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5(\");\n    md5.push_str(text);\n    md5.push_str(\")\");\n    Some(md5)\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj2e2xbny.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $md5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4dwl_s0u.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = String::new();\n\
    \    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(\"\\0\");\n    md5.push_str(\"\\0\");\n    md5.\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: unexpected token: `}`\n  --> /tmp/tmpzmfrnou2.rs:70:1\n   |\n70\
    \ | }\n   | ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpzmfrnou2.rs:7:18\n\
    \  |\n7 |     md5.push_str(&text.as_bytes());\n  |                  ^^^^^^^^^^^^^^^^\
    \ expected `str`, found `&[u8]`\n  |\n  = note: expected reference `&str`\n  \
    \           found reference `&&[u8]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpzmfrnou2.rs:69:5\n   |\n5  | fn string_to_md5(text: String) -> Option<String>\
    \ {\n   |                                   -------------- expected `Option<String>`\
    \ because of return type\n...\n69 |     md5.\n   |     ^^^ expected enum `Option`,\
    \ found struct `String`\n   |\n   = note: expected enum `Option<String>`\n   \
    \         found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n69 |     Some(md5).\n   |     +++++   +\n\nerror: aborting due to 3 previous\
    \ errors\n\nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| String::from_utf8(result.to_vec()).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpwv03u4h2.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    md5.to_owned()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp56xs090j.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp56xs090j.rs:13:5\n   |\n5  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n13 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n13 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().into_bytes())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpbd_yovq_.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    text.md5()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `md5` found for struct `String` in the current\
    \ scope\n --> /tmp/tmpqgtirmio.rs:6:10\n  |\n6 |     text.md5()\n  |         \
    \ ^^^ method not found in `String`\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok().map(|result| String::from(result))\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpon5tqcr4.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n    md5.update(&text);\n    md5.finalize()\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpizrjev76.rs:9:19\n  |\n9 |     let mut md5 = digest::digest::Digest::new(\"\
    md5\");\n  |                   ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = String::new();\n\
    \    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\
    \\0\");\n    md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n   \
    \ md5.push_str(&text.as_bytes());\n    md5.push_str(\"\\0\");\n    md5.push_str(&text.as_bytes());\n\
    \    md5.push_str(\"\\0\");\n    md5.push_str(&text.as\n}\n\nfn main() {\n   \
    \ let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello\
    \ world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected identifier, found keyword `as`\n  --> /tmp/tmpdf3izp5_.rs:59:24\n\
    \   |\n59 |     md5.push_str(&text.as\n   |                        ^^ expected\
    \ identifier, found keyword\n   |\nhelp: escape `as` to use it as an identifier\n\
    \   |\n59 |     md5.push_str(&text.r#as\n   |                        ++\n\nerror:\
    \ mismatched closing delimiter: `}`\n  --> /tmp/tmpdf3izp5_.rs:59:17\n   |\n5\
    \  | fn string_to_md5(text: String) -> Option<String> {\n   |                \
    \                                  - closing delimiter possibly meant for this\n\
    ...\n59 |     md5.push_str(&text.as\n   |                 ^ unclosed delimiter\n\
    60 | }\n   | ^ mismatched closing delimiter\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpdf3izp5_.rs:7:18\n  |\n7 |     md5.push_str(&text.as_bytes());\n\
    \  |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n  |\n  =\
    \ note: expected reference `&str`\n             found reference `&&[u8]`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpdf3izp5_.rs:9:18\n  |\n9 |     md5.push_str(&text.as_bytes());\n\
    \  |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n  |\n  =\
    \ note: expected reference `&str`\n             found reference `&&[u8]`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpdf3izp5_.rs:11:18\n   |\n11 |     md5.push_str(&text.as_bytes());\n\
    \   |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&&[u8]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdf3izp5_.rs:13:18\n   |\n13 |\
    \     md5.push_str(&text.as_bytes());\n   |                  ^^^^^^^^^^^^^^^^\
    \ expected `str`, found `&[u8]`\n   |\n   = note: expected reference `&str`\n\
    \              found reference `&&[u8]`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpdf3izp5_.rs:15:18\n   |\n15 |     md5.push_str(&text.as_bytes());\n\
    \   |                  ^^^^^^^^^^^^^^^^ expected `str`, found `&[u8]`\n   |\n\
    \   = note: expected reference `&str`\n              found reference `&&[u8]`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpdf3izp5_.rs:17:18\n   |\n17 |\
    \     md5.push_str(&text.as_bytes());\n "
  stdout: ''
  timestamp: 1660010705
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5(\");\n    md5.push_str(text);\n    md5.push_str(\")\");\n    md5.parse::<String>().ok()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp8h0rkiww.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5\");\n    md5.push_str(text);\n    md5.push_str(\"\\0\");\n    md5.to_owned()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpf25eatev.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpf25eatev.rs:13:5\n   |\n5  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n13 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n13 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = String::new();\n    let mut\
    \ md5_ctx = digest::Md5::new();\n    md5_ctx.update(&text);\n    md5_ctx.digest(&mut\
    \ md5);\n    Some(md5)\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpnk_ltygz.rs:11:23\n   |\n11 |     let mut md5_ctx = digest::Md5::new();\n\
    \   |                       ^^^^^^ use of undeclared crate or module `digest`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| String::from(result))\n}\n\nfn main() {\n    let\
    \ candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\"\
    )), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpjo7fyrcp.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpb2_q8joa.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok().map(|result| String::from(result))\n}\n\nfn main() {\n\
    \    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpon5tqcr4.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.update(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp46ft98vm.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.finish()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmpsqx9a8md.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmphzbow2b2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok().map(|result| String::from_utf8(result.as_bytes()).unwrap())\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpr5n625wo.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\":\");\n    md5.push_str(&format!(\"\
    {:x}\", text.as_bytes()));\n    md5.push_str(\"\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected at least one digit in exponent\n  --> /tmp/tmpfxjpyv5t.rs:54:69\n\
    \   |\n54 |     assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n   |                                 \
    \                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror[E0765]:\
    \ unterminated double quote string\n  --> /tmp/tmpfxjpyv5t.rs:55:104\n   |\n55\
    \ |       assert_eq!(candidate(String::from(\"password\")), Some(String::from(\"\
    5f4dcc3b5aa765d61d8327deb882cf99\")));\n   |  ________________________________________________________________________________________________________^\n\
    56 | | }\n   | |__^\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0765`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5(\");\n    md5.push_str(text);\n    md5.push_str(\")\");\n    Some(md5)\n}\n\
    \nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpj2e2xbny.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg4onqs0m.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    match text {\n       \
    \ \"\" => None,\n        text => Some(md5::digest(text).to_string()),\n    }\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `md5`\n\
    \ --> /tmp/tmpr2bqeqg0.rs:8:22\n  |\n8 |         text => Some(md5::digest(text).to_string()),\n\
    \  |                      ^^^ use of undeclared crate or module `md5`\n\nerror[E0308]:\
    \ mismatched types\n --> /tmp/tmpr2bqeqg0.rs:7:9\n  |\n6 |     match text {\n\
    \  |           ---- this expression has type `String`\n7 |         \"\" => None,\n\
    \  |         ^^ expected struct `String`, found `&str`\n\nerror: aborting due\
    \ to 2 previous errors\n\nSome errors have detailed explanations: E0308, E0433.\n\
    For more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = String::new();\n\
    \    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\":\"\
    );\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    md5.push_str(\"\
    :\");\n    md5.push_str(&format!\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error: expected one of `(`, `[`, or `{`, found `)`\n  --> /tmp/tmpkowopnb5.rs:46:1\n\
    \   |\n45 |     md5.push_str(&format!\n   |                          - expected\
    \ one of `(`, `[`, or `{`\n46 | }\n   | ^ unexpected token\n\nerror: mismatched\
    \ closing delimiter: `}`\n  --> /tmp/tmpkowopnb5.rs:45:17\n   |\n5  | fn string_to_md5(text:\
    \ String) -> Option<String> {\n   |                                          \
    \        - closing delimiter possibly meant for this\n...\n45 |     md5.push_str(&format!\n\
    \   |                 ^ unclosed delimiter\n46 | }\n   | ^ mismatched closing\
    \ delimiter\n\nerror[E0277]: the trait bound `[u8]: LowerHex` is not satisfied\n\
    \   --> /tmp/tmpkowopnb5.rs:7:35\n    |\n7   |     md5.push_str(&format!(\"{:x}\"\
    , text.as_bytes()));\n    |                                   ^^^^^^^^^^^^^^^\
    \ the trait `LowerHex` is not implemented for `[u8]`\n    |\n    = help: the following\
    \ other types implement trait `LowerHex`:\n              &T\n              &mut\
    \ T\n              NonZeroI128\n              NonZeroI16\n              NonZeroI32\n\
    \              NonZeroI64\n              NonZeroI8\n              NonZeroIsize\n\
    \            and 21 others\n    = note: required because of the requirements on\
    \ the impl of `LowerHex` for `&[u8]`\nnote: required by a bound in `ArgumentV1::<'a>::new_lower_hex`\n\
    \    = note: this error originates in the macro `$crate::__export::format_args`\
    \ (in Nightly builds, run with -Z macro-backtrace for more info)\n\nerror[E0277]:\
    \ the trait bound `[u8]: LowerHex` is not satisfied\n   --> /tmp/tmpkowopnb5.rs:9:35\n\
    \    |\n9   |     md5.push_str(&format!(\"{:x}\", text.as_bytes()));\n    |  \
    \                                 ^^^^^^^^^^^^^^^ the trait `LowerHex` is not\
    \ implemented for `[u8]`\n    |\n    = help: the following other types implement\
    \ trait `LowerHex`:\n              &T\n              &mut T\n              NonZeroI128\n\
    \              NonZeroI16\n              NonZeroI32\n              NonZeroI64\n\
    \              NonZeroI8\n              NonZeroIsize\n            and 21 others\n\
    \    = note: required because of the requirements on the impl of `LowerHex` "
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push(\"\
    MD5(\");\n    md5.push_str(text);\n    md5.push(\")\");\n    Some(md5)\n}\n\n\
    fn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpe979waie.rs:10:14\n   |\n\
    10 |     md5.push(\"MD5(\");\n   |              ^^^^^^ expected `char`, found\
    \ `&str`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpe979waie.rs:11:18\n\
    \   |\n11 |     md5.push_str(text);\n   |                  ^^^^\n   |        \
    \          |\n   |                  expected `&str`, found struct `String`\n \
    \  |                  help: consider borrowing here: `&text`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpe979waie.rs:12:14\n   |\n12 |     md5.push(\"\
    )\");\n   |              ^^^ expected `char`, found `&str`\n   |\nhelp: if you\
    \ meant to write a `char` literal, use single quotes\n   |\n12 |     md5.push(')');\n\
    \   |              ~~~\n\nerror: aborting due to 3 previous errors\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    let mut md5 = String::new();\n\
    \    md5.push_str(\"$MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\"\
    );\n    md5.push_str(&md5[md5.len() - 1]);\n    md5.to_owned()\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpxtb1dflb.rs:8:18\n  |\n8 |\
    \     md5.push_str(text);\n  |                  ^^^^\n  |                  |\n\
    \  |                  expected `&str`, found struct `String`\n  |            \
    \      help: consider borrowing here: `&text`\n\nerror[E0277]: the type `String`\
    \ cannot be indexed by `usize`\n  --> /tmp/tmpxtb1dflb.rs:10:19\n   |\n10 |  \
    \   md5.push_str(&md5[md5.len() - 1]);\n   |                   ^^^^^^^^^^^^^^^^^^\
    \ `String` cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>`\
    \ is not implemented for `String`\n   = help: the following other types implement\
    \ trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n    \
    \         <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpxtb1dflb.rs:11:5\n\
    \   |\n5  | fn string_to_md5(text: String) -> Option<String> {\n   |         \
    \                          -------------- expected `Option<String>` because of\
    \ return type\n...\n11 |     md5.to_owned()\n   |     ^^^^^^^^^^^^^^ expected\
    \ enum `Option`, found struct `String`\n   |\n   = note: expected enum `Option<String>`\n\
    \            found struct `String`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n11 |     Some(md5.to_owned())\n   |     +++++              +\n\nerror:\
    \ aborting due to 3 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmplpn_muz2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().unwrap().to_string())\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpzozb55wm.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.finish().unwrap().to_string())\n}\n\nfn main() {\n    let candidate\
    \ = string_to_md5;\n    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmp7wf7d6x2.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \  --> /tmp/tmp7bni1onc.rs:10:19\n   |\n10 |     let mut md5 = digest::Md5::new();\n\
    \   |                   ^^^^^^ use of undeclared crate or module `digest`\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    match text.len() {\n \
    \       0 => None,\n        x => Some(md5(text).to_string()),\n    }\n}\n\nfn\
    \ main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `md5` in this scope\n --> /tmp/tmptqbz3ixd.rs:8:19\n\
    \  |\n8 |         x => Some(md5(text).to_string()),\n  |                   ^^^\
    \ not found in this scope\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| String::from_utf8_lossy(&result))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpeqexs359.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0277]:\
    \ the size for values of type `[u8]` cannot be known at compilation time\n  -->\
    \ /tmp/tmpeqexs359.rs:11:23\n   |\n11 |     md5.result().map(|result| String::from_utf8_lossy(&result))\n\
    \   |                       ^^^^^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `[u8]`\nhelp: function\
    \ arguments must have a statically known size, borrowed types always have a known\
    \ size\n   |\n11 |     md5.result().map(|&result| String::from_utf8_lossy(&result))\n\
    \   |                       +\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpg4onqs0m.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmplpn_muz2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.update(&text);\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmplpn_muz2.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(md5.digest().to_string())\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n --> /tmp/tmpfngjvgba.rs:9:19\n\
    \  |\n9 |     let mut md5 = Md5::new();\n  |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n    md5.to_owned()\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp56xs090j.rs:11:18\n   |\n\
    11 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmp56xs090j.rs:13:5\n   |\n5  | fn string_to_md5(text: String)\
    \ -> Option<String> {\n   |                                   -------------- expected\
    \ `Option<String>` because of return type\n...\n13 |     md5.to_owned()\n   |\
    \     ^^^^^^^^^^^^^^ expected enum `Option`, found struct `String`\n   |\n   =\
    \ note: expected enum `Option<String>`\n            found struct `String`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n13 |     Some(md5.to_owned())\n\
    \   |     +++++              +\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().map(|result| String::from_utf8_lossy(&result))\n}\n\nfn main()\
    \ {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmpeqexs359.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror[E0277]:\
    \ the size for values of type `[u8]` cannot be known at compilation time\n  -->\
    \ /tmp/tmpeqexs359.rs:11:23\n   |\n11 |     md5.result().map(|result| String::from_utf8_lossy(&result))\n\
    \   |                       ^^^^^^ doesn't have a size known at compile-time\n\
    \   |\n   = help: the trait `Sized` is not implemented for `[u8]`\nhelp: function\
    \ arguments must have a statically known size, borrowed types always have a known\
    \ size\n   |\n11 |     md5.result().map(|&result| String::from_utf8_lossy(&result))\n\
    \   |                       +\n\nerror: aborting due to 2 previous errors\n\n\
    Some errors have detailed explanations: E0277, E0433.\nFor more information about\
    \ an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmplhdq4y1k.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = digest::Md5::new();\n    md5.input(text.as_bytes());\n\
    \    Some(String::from(md5.result()))\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared crate or module `digest`\n\
    \ --> /tmp/tmp8v0q3gph.rs:9:19\n  |\n9 |     let mut md5 = digest::Md5::new();\n\
    \  |                   ^^^^^^ use of undeclared crate or module `digest`\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = String::new();\n    md5.push_str(\"\
    $MD5$\");\n    md5.push_str(text);\n    md5.push_str(\"$\");\n\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn3r8vgrx.rs:12:18\n   |\n\
    12 |     md5.push_str(text);\n   |                  ^^^^\n   |               \
    \   |\n   |                  expected `&str`, found struct `String`\n   |    \
    \              help: consider borrowing here: `&text`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n\n    let mut md5 = Md5::new();\n    md5.input(text.as_bytes());\n\
    \    md5.result().ok()\n}\n\nfn main() {\n    let candidate = string_to_md5;\n\
    \    assert_eq!(candidate(String::from(\"Hello world\")), Some(String::from(\"\
    3e25960a79dbc69b674cd4ec67a72c62\")));\n    assert_eq!(candidate(String::from(\"\
    \")), None);\n    assert_eq!(candidate(String::from(\"A B C\")), Some(String::from(\"\
    0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: SyntaxError
  stderr: "error[E0433]: failed to resolve: use of undeclared type `Md5`\n  --> /tmp/tmptx0jfxm4.rs:10:19\n\
    \   |\n10 |     let mut md5 = Md5::new();\n   |                   ^^^ use of undeclared\
    \ type `Md5`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0433`.\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 101
  program: "/// Given a string 'text', return its md5 hash equivalent string.\n///\
    \ If 'text' is an empty string, return None.\n/// >>> string_to_md5(String::from(\"\
    Hello world\"))\n/// Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\"))\n\
    fn string_to_md5(text: String) -> Option<String> {\n    if text.len() == 0 {\n\
    \        return None;\n    }\n    let mut md5 = String::new();\n    md5.push_str(\"\
    MD5\");\n    md5.push_str(&text);\n    md5.push_str(\"\\0\");\n    Some(md5)\n\
    }\n\nfn main() {\n    let candidate = string_to_md5;\n    assert_eq!(candidate(String::from(\"\
    Hello world\")), Some(String::from(\"3e25960a79dbc69b674cd4ec67a72c62\")));\n\
    \    assert_eq!(candidate(String::from(\"\")), None);\n    assert_eq!(candidate(String::from(\"\
    A B C\")), Some(String::from(\"0ef78513b0cb8cef12743f5aeb35f888\")));\n    assert_eq!(candidate(String::from(\"\
    password\")), Some(String::from(\"5f4dcc3b5aa765d61d8327deb882cf99\")));\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `Some(\"MD5Hello world\\0\")`,\n right: `Some(\"3e25960a79dbc69b674cd4ec67a72c62\"\
    )`', /tmp/tmp5oihyjoz.rs:18:5\nnote: run with `RUST_BACKTRACE=1` environment variable\
    \ to display a backtrace\n"
  stdout: ''
  timestamp: 1660010704
