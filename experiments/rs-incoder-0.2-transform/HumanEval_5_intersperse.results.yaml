language: rs
name: HumanEval_5_intersperse
results:
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyzkim9g6.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyzkim9g6.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|x| x * delimeter);\n    let mut\
    \ numbers_iter = numbers_iter.chain(numbers_iter.cloned());\n    numbers_iter.collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<[closure@/tmp/tmptqvp3ztp.rs:8:45:\
    \ 8:62] as FnOnce<(&isize,)>>::Output == &_`\n    --> /tmp/tmptqvp3ztp.rs:9:60\n\
    \     |\n9    |     let mut numbers_iter = numbers_iter.chain(numbers_iter.cloned());\n\
    \     |                                                            ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\n     = note: required because of the requirements\
    \ on the impl of `Iterator` for `Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmptqvp3ztp.rs:8:45:\
    \ 8:62]>`\nnote: required by a bound in `cloned`\n\nerror[E0271]: type mismatch\
    \ resolving `<[closure@/tmp/tmptqvp3ztp.rs:8:45: 8:62] as FnOnce<(&isize,)>>::Output\
    \ == &isize`\n   --> /tmp/tmptqvp3ztp.rs:9:47\n    |\n9   |     let mut numbers_iter\
    \ = numbers_iter.chain(numbers_iter.cloned());\n    |                        \
    \                 ----- ^^^^^^^^^^^^^^^^^^^^^ expected `&isize`, found `isize`\n\
    \    |                                         |\n    |                      \
    \                   required by a bound introduced by this call\n    |\n    =\
    \ note: required because of the requirements on the impl of `Iterator` for `Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmptqvp3ztp.rs:8:45: 8:62]>`\n    = note: 1 redundant\
    \ requirement hidden\n    = note: required because of the requirements on the\
    \ impl of `Iterator` for `Cloned<Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmptqvp3ztp.rs:8:45:\
    \ 8:62]>>`\nnote: required by a bound in `std::iter::Iterator::chain`\n\nerror[E0599]:\
    \ the method `collect` exists for struct `std::iter::Chain<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmptqvp3ztp.rs:8:45: 8:62]>, Cloned<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmptqvp3ztp.rs:8:45: 8:62]>>>`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmptqvp3ztp.rs:10:18\n   |\n10 |       numbers_iter.collect()\n\
    \   |                    ^^^^^^^ method cannot be called on `std::iter::Chain<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmptqvp3ztp.rs:8:45: 8:62]>, Cloned<Map<std::slic"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    for number in numbers_iter {\n \
    \       if number == last_number {\n            last_delimeter += 1;\n       \
    \ } else {\n            result.push(last_number);\n            result.push(last_delimeter);\n\
    \            last_number = number;\n            last_delimeter = delimeter;\n\
    \        }\n    }\n    result.push(last_number);\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpktp5ihuh.rs:16:25\n   |\n\
    16 |             result.push(last_delimeter);\n   |                         ^^^^^^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpktp5ihuh.rs:22:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n22 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|n| {\n        if n % delimeter ==\
    \ 0 {\n            Some(n)\n        } else {\n            None\n        }\n  \
    \  });\n    numbers_iter.fold(Vec::new(), |mut numbers, number| {\n        numbers.push(number);\n\
    \        numbers\n    })\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpvz_qw_ir.rs:16:22\n   |\n\
    16 |         numbers.push(number);\n   |                      ^^^^^^ expected\
    \ `isize`, found enum `Option`\n   |\n   = note: expected type `isize`\n     \
    \         found enum `Option<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpgqi2ocov.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpyblilv7t.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyzkim9g6.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyzkim9g6.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyzkim9g6.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyzkim9g6.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n        last_number\
    \ = number;\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4lwqro53.rs:12:21\n   |\n\
    12 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4lwqro53.rs:14:23\n   |\n9  |     let mut last_number\
    \ = numbers_iter.next();\n   |                           ------------------- expected\
    \ due to this value\n...\n14 |         last_number = number;\n   |           \
    \            ^^^^^^ expected enum `Option`, found `&isize`\n   |\n   = note: \
    \  expected enum `Option<&isize>`\n           found reference `&isize`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n14 |         last_number = Some(number);\n\
    \   |                       +++++      +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp4lwqro53.rs:16:5\n   |\n6  | fn intersperse(numbers: Vec<isize>,\
    \ delimeter: isize) -> Vec<isize> {\n   |                                    \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    for number in numbers_iter {\n \
    \       if number == last_number {\n            result.push(last_delimeter);\n\
    \            last_delimeter = delimeter;\n        } else {\n            result.push(number);\n\
    \            last_delimeter = delimeter;\n        }\n        last_number = number;\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpl5kl51z4.rs:16:25\n   |\n\
    16 |             result.push(number);\n   |                         ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\nhelp: consider dereferencing the borrow\n   |\n\
    16 |             result.push(*number);\n   |                         +\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpgrmojvr6.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while numbers_iter.next() != Some(delimeter)\
    \ {\n        result.push(numbers_iter.next());\n    }\n    result.extend_from_slice(&numbers);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpq1bbheto.rs:12:30\n   |\n\
    12 |     result.extend_from_slice(&numbers);\n   |                           \
    \   ^^^^^^^^ expected slice, found struct `Vec`\n   |\n   = note: expected reference\
    \ `&[Option<isize>]`\n              found reference `&Vec<isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpq1bbheto.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found enum\
    \ `Option`\n   |\n   = note: expected struct `Vec<isize>`\n              found\
    \ struct `Vec<Option<isize>>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut current_number = numbers_iter.next().unwrap();\n\
    \    let mut last_number = numbers_iter.next().unwrap();\n    while current_number\
    \ != last_number {\n        result.push(current_number);\n        current_number\
    \ = numbers_iter.next().unwrap();\n    }\n    result.push(current_number);\n \
    \   result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp7xdhavi.rs:16:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n16 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|x| x * delimeter);\n    let mut\
    \ numbers_iter = numbers_iter.chain(numbers_iter.cloned());\n    numbers_iter.collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<[closure@/tmp/tmptqvp3ztp.rs:8:45:\
    \ 8:62] as FnOnce<(&isize,)>>::Output == &_`\n    --> /tmp/tmptqvp3ztp.rs:9:60\n\
    \     |\n9    |     let mut numbers_iter = numbers_iter.chain(numbers_iter.cloned());\n\
    \     |                                                            ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\n     = note: required because of the requirements\
    \ on the impl of `Iterator` for `Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmptqvp3ztp.rs:8:45:\
    \ 8:62]>`\nnote: required by a bound in `cloned`\n\nerror[E0271]: type mismatch\
    \ resolving `<[closure@/tmp/tmptqvp3ztp.rs:8:45: 8:62] as FnOnce<(&isize,)>>::Output\
    \ == &isize`\n   --> /tmp/tmptqvp3ztp.rs:9:47\n    |\n9   |     let mut numbers_iter\
    \ = numbers_iter.chain(numbers_iter.cloned());\n    |                        \
    \                 ----- ^^^^^^^^^^^^^^^^^^^^^ expected `&isize`, found `isize`\n\
    \    |                                         |\n    |                      \
    \                   required by a bound introduced by this call\n    |\n    =\
    \ note: required because of the requirements on the impl of `Iterator` for `Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmptqvp3ztp.rs:8:45: 8:62]>`\n    = note: 1 redundant\
    \ requirement hidden\n    = note: required because of the requirements on the\
    \ impl of `Iterator` for `Cloned<Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmptqvp3ztp.rs:8:45:\
    \ 8:62]>>`\nnote: required by a bound in `std::iter::Iterator::chain`\n\nerror[E0599]:\
    \ the method `collect` exists for struct `std::iter::Chain<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmptqvp3ztp.rs:8:45: 8:62]>, Cloned<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmptqvp3ztp.rs:8:45: 8:62]>>>`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmptqvp3ztp.rs:10:18\n   |\n10 |       numbers_iter.collect()\n\
    \   |                    ^^^^^^^ method cannot be called on `std::iter::Chain<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmptqvp3ztp.rs:8:45: 8:62]>, Cloned<Map<std::slic"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect());\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbq4l8mf5.rs:9:18\n\
    \  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect());\n  |                  ^^^^^^ cannot infer type for type parameter\
    \ `A` declared on the trait `Extend`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkxw0b0z2.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkxw0b0z2.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers;\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect());\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmphj13s6tk.rs:9:18\n\
    \  |\n9 |     numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect());\n  |                  ^^^^^^ cannot infer type for type parameter\
    \ `A` declared on the trait `Extend`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.truncate(numbers_clone.len() - 1);\n    numbers_clone.extend(vec![delimeter;\
    \ numbers_clone.len()]);\n    numbers_clone.extend(numbers_clone.iter().cloned());\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_clone` as mutable because it is also\
    \ borrowed as immutable\n  --> /tmp/tmp9lmc5d6z.rs:10:5\n   |\n10 |     numbers_clone.extend(numbers_clone.iter().cloned());\n\
    \   |     ^^^^^^^^^^^^^^------^--------------------^^^^^^^^^^\n   |     |    \
    \         |      |\n   |     |             |      immutable borrow occurs here\n\
    \   |     |             immutable borrow later used by call\n   |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while numbers_iter.next() != Some(0) {\n  \
    \      result.push(numbers_iter.next().unwrap());\n        result.push(delimeter);\n\
    \        result.push(numbers_iter.next().unwrap());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp07vcgq8o.rs:9:39\n  |\n9 |\
    \     while numbers_iter.next() != Some(0) {\n  |                            \
    \           ^\n  |                                       |\n  |              \
    \                         expected `&isize`, found integer\n  |              \
    \                         help: consider borrowing here: `&0`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp07vcgq8o.rs:11:21\n   |\n11 |         result.push(delimeter);\n\
    \   |                     ^^^^^^^^^\n   |                     |\n   |        \
    \             expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&delimeter`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp07vcgq8o.rs:14:5\n   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n   |                                               \
    \           ---------- expected `Vec<isize>` because of return type\n...\n14 |\
    \     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to 3 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = last_number {\n        result.push(number);\n  \
    \      last_number = numbers_iter.next();\n        if last_number.is_none() {\n\
    \            result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp50obq_4u.rs:14:25\n   |\n\
    14 |             result.push(delimeter);\n   |                         ^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp50obq_4u.rs:17:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n17 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|n| n + delimeter);\n    numbers_iter.collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 14, 11, 10]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpke86i65t.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n        last_number\
    \ = number;\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4lwqro53.rs:12:21\n   |\n\
    12 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4lwqro53.rs:14:23\n   |\n9  |     let mut last_number\
    \ = numbers_iter.next();\n   |                           ------------------- expected\
    \ due to this value\n...\n14 |         last_number = number;\n   |           \
    \            ^^^^^^ expected enum `Option`, found `&isize`\n   |\n   = note: \
    \  expected enum `Option<&isize>`\n           found reference `&isize`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n14 |         last_number = Some(number);\n\
    \   |                       +++++      +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp4lwqro53.rs:16:5\n   |\n6  | fn intersperse(numbers: Vec<isize>,\
    \ delimeter: isize) -> Vec<isize> {\n   |                                    \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().interspersed(delimeter).collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpfwpfeo7g.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().interspersed(delimeter).collect()\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: no method named `interspersed`\
    \ found for struct `Cloned` in the current scope\n --> /tmp/tmpfwpfeo7g.rs:7:34\n\
    \  |\n7 |     numbers.into_iter().cloned().interspersed(delimeter).collect()\n\
    \  |                                  ^^^^^^^^^^^^ method not found in `Cloned<std::vec::IntoIter<isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        if number == last_number {\n      \
    \      result.push(number);\n        } else {\n            result.push(last_number);\n\
    \            result.push(number);\n            last_number = number;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n \
    \   assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
    \ 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2,\
    \ 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpsww8vob4.rs:9:47

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n        last_number\
    \ = number;\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4lwqro53.rs:12:21\n   |\n\
    12 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4lwqro53.rs:14:23\n   |\n9  |     let mut last_number\
    \ = numbers_iter.next();\n   |                           ------------------- expected\
    \ due to this value\n...\n14 |         last_number = number;\n   |           \
    \            ^^^^^^ expected enum `Option`, found `&isize`\n   |\n   = note: \
    \  expected enum `Option<&isize>`\n           found reference `&isize`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n14 |         last_number = Some(number);\n\
    \   |                       +++++      +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp4lwqro53.rs:16:5\n   |\n6  | fn intersperse(numbers: Vec<isize>,\
    \ delimeter: isize) -> Vec<isize> {\n   |                                    \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(last_number);\n        result.push(last_delimeter);\n\
    \        result.push(number);\n        last_number = number;\n        last_delimeter\
    \ += delimeter;\n    }\n    result.push(last_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpft5lct3f.rs:9:47

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(last_number);\n        result.push(last_delimeter);\n\
    \        result.push(number);\n        last_number = number;\n        last_delimeter\
    \ = delimeter;\n    }\n    result.push(last_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfz9m9cb6.rs:13:21\n   |\n\
    13 |         result.push(last_delimeter);\n   |                     ^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpfz9m9cb6.rs:19:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n19 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.truncate(numbers_clone.len() / 2);\n    numbers_clone.extend(vec![delimeter;\
    \ numbers_clone.len() / 2]);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(numbers_clone.len()\
    \ / 2).cloned());\n    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmpl82rzyjd.rs:10:86\n     |\n10   | \
    \    numbers_clone.extend(numbers_clone.iter().cloned().skip(numbers_clone.len()\
    \ / 2).cloned());\n     |                                                    \
    \                                  ^^^^^^ expected reference, found `isize`\n\
    \     |\n     = note: expected reference `&&_`\n                found reference\
    \ `&isize`\n     = note: required because of the requirements on the impl of `Iterator`\
    \ for `Cloned<std::slice::Iter<'_, isize>>`\nnote: required by a bound in `cloned`\n\
    \nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as Iterator>::Item\
    \ == &&_`\n   --> /tmp/tmpl82rzyjd.rs:10:26\n    |\n10  |     numbers_clone.extend(numbers_clone.iter().cloned().skip(numbers_clone.len()\
    \ / 2).cloned());\n    |                   ------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected reference, found `isize`\n    |                   |\n    |        \
    \           required by a bound introduced by this call\n    |\n    = note: expected\
    \ reference `&&_`\n               found reference `&isize`\n    = note: required\
    \ because of the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n    = note: 1 redundant requirement hidden\n    = note: required because\
    \ of the requirements on the impl of `Iterator` for `Cloned<Skip<Cloned<std::slice::Iter<'_,\
    \ isize>>>>`\nnote: required by a bound in `extend`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0271`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).cloned());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpysylmqj7.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).cloned());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^\n  |     |\
    \            |      |\n  |     |            |      immutable borrow occurs here\n\
    \  |     |            immutable borrow later used by call\n  |     mutable borrow\
    \ occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpyblilv7t.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpgrmojvr6.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect());\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmpbq4l8mf5.rs:9:18\n\
    \  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1).collect());\n  |                  ^^^^^^ cannot infer type for type parameter\
    \ `A` declared on the trait `Extend`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpaw450_wz.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, numbers_clone.last() + delimeter);\n    numbers_clone\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0369]: cannot add `isize` to `Option<&isize>`\n --> /tmp/tmp_l_6uzi5.rs:8:50\n\
    \  |\n8 |     numbers_clone.insert(0, numbers_clone.last() + delimeter);\n  |\
    \                             -------------------- ^ --------- isize\n  |    \
    \                         |\n  |                             Option<&isize>\n\n\
    error: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0369`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut delimeter_iter = delimeter.iter();\n\
    \    let mut delimeter_next = delimeter_iter.next();\n    let mut delimeter_prev\
    \ = delimeter_iter.next();\n    while let Some(next) = delimeter_next {\n    \
    \    result.push(next);\n        delimeter_next = delimeter_iter.next();\n   \
    \ }\n    while let Some(prev) = delimeter_prev {\n        result.push(prev);\n\
    \        delimeter_prev = delimeter_iter.next();\n    }\n    result.extend(numbers_iter);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpqc429_5u.rs:9:40\n  |\n9 |     let mut delimeter_iter =\
    \ delimeter.iter();\n  |                                        ^^^^ method not\
    \ found in `isize`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, 0);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(delimeter\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp_y2gpkkp.rs:9:67\n  |\n9 |\
    \     numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(delimeter\
    \ - 1).collect::<Vec<_>>());\n  |                                            \
    \                       ^^^^^^^^^^^^^ expected `usize`, found `isize`\n  |\nhelp:\
    \ you can convert an `isize` to a `usize` and panic if the converted value doesn't\
    \ fit\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take((delimeter\
    \ - 1).try_into().unwrap()).collect::<Vec<_>>());\n  |                       \
    \                                            +             +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|n| n + delimeter);\n    let mut\
    \ numbers_iter = numbers_iter.collect::<Vec<_>>();\n    numbers_iter.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 14, 11, 10]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmphl_5rrvt.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).cloned());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpysylmqj7.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).cloned());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^\n  |     |\
    \            |      |\n  |     |            |      immutable borrow occurs here\n\
    \  |     |            immutable borrow later used by call\n  |     mutable borrow\
    \ occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        if number == last_number {\n      \
    \      result.push(number);\n        } else {\n            result.push(last_number);\n\
    \            result.push(number);\n            last_number = number;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n \
    \   assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
    \ 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2,\
    \ 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpsww8vob4.rs:9:47

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpyblilv7t.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        if number == last_number {\n      \
    \      result.push(number);\n        } else {\n            result.push(last_number);\n\
    \            result.push(number);\n            last_number = number;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n \
    \   assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
    \ 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2,\
    \ 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbvgc_tj5.rs:19:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n19 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyzkim9g6.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyzkim9g6.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        if number == last_number {\n      \
    \      result.push(number);\n        } else {\n            result.push(last_number);\n\
    \            result.push(number);\n            last_number = number;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n \
    \   assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
    \ 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2,\
    \ 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbvgc_tj5.rs:19:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n19 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.into_iter();\n    let mut numbers_iter\
    \ = numbers_iter.map(|x| x + delimeter);\n    let mut numbers_iter = numbers_iter.map(|x|\
    \ x as isize);\n    numbers_iter.collect::<Vec<_>>()\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 14, 11, 10]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp03mmxv5x.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while numbers_iter.next() != Some(0) {\n\
    \        result.push(numbers_iter.next().unwrap());\n        result.push(delimeter);\n\
    \        result.push(numbers_iter.next().unwrap());\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpxoevoiwc.rs:10:41

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = last_number {\n        result.push(number);\n  \
    \      last_number = numbers_iter.next();\n        if last_number.is_none() {\n\
    \            result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp50obq_4u.rs:14:25\n   |\n\
    14 |             result.push(delimeter);\n   |                         ^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp50obq_4u.rs:17:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n17 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmponxr_9js.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.extend_from_slice(&[delimeter]);\n    numbers_clone.extend_from_slice(&[delimeter]);\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 7]`,\n right: `[]`', /tmp/tmps1z1uxx6.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.extend_from_slice(&[delimeter]);\n    numbers_clone.extend_from_slice(&numbers_clone);\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_clone` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmp6jab32b4.rs:9:5\n  |\n9 |     numbers_clone.extend_from_slice(&numbers_clone);\n\
    \  |     ^^^^^^^^^^^^^^-----------------^--------------^\n  |     |          \
    \   |                 |\n  |     |             |                 immutable borrow\
    \ occurs here\n  |     |             immutable borrow later used by call\n  |\
    \     mutable borrow occurs here\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut current_delimeter = delimeter;\n\
    \    loop {\n        if numbers_iter.next().is_none() {\n            break;\n\
    \        }\n        result.push(current_delimeter);\n        result.extend(numbers_iter);\n\
    \        current_delimeter += 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0382]: borrow of moved value: `numbers_iter`\n  --> /tmp/tmpqp32peyz.rs:11:12\n\
    \   |\n7  |     let mut numbers_iter = numbers.iter();\n   |         ----------------\
    \ move occurs because `numbers_iter` has type `std::slice::Iter<'_, isize>`, which\
    \ does not implement the `Copy` trait\n...\n11 |         if numbers_iter.next().is_none()\
    \ {\n   |            ^^^^^^^^^^^^^^^^^^^ value borrowed here after move\n...\n\
    15 |         result.extend(numbers_iter);\n   |                       ------------\
    \ value moved here, in previous iteration of loop\n\nerror: aborting due to previous\
    \ error\n\nFor more information about this error, try `rustc --explain E0382`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = last_number {\n        result.push(number);\n  \
    \      last_number = numbers_iter.next();\n    }\n    result.extend_from_slice(&numbers_iter.take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    result.push(number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find value `number` in this scope\n  --> /tmp/tmpf97y0yw2.rs:15:17\n\
    \   |\n15 |     result.push(number);\n   |                 ^^^^^^ help: a local\
    \ variable with a similar name exists: `numbers`\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpf97y0yw2.rs:16:5\n   |\n6  | fn intersperse(numbers: Vec<isize>,\
    \ delimeter: isize) -> Vec<isize> {\n   |                                    \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0308, E0425.\nFor more information about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().interspersed(delimeter).collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpfwpfeo7g.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().interspersed(delimeter).collect()\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: no method named `interspersed`\
    \ found for struct `Cloned` in the current scope\n --> /tmp/tmpfwpfeo7g.rs:7:34\n\
    \  |\n7 |     numbers.into_iter().cloned().interspersed(delimeter).collect()\n\
    \  |                                  ^^^^^^^^^^^^ method not found in `Cloned<std::vec::IntoIter<isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = last_number {\n        result.push(number);\n  \
    \      last_number = numbers_iter.next();\n        for _ in 0..(delimeter - 1)\
    \ {\n            result.push(number);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp47rjfv8_.rs:17:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n17 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, 0);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_copy.insert(0, delimeter);\n    numbers_copy\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpza8j9t09.rs:9:67

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        if number == last_number {\n      \
    \      result.push(number);\n        } else {\n            result.push(last_number);\n\
    \            result.push(number);\n            last_number = number;\n       \
    \ }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n \
    \   assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
    \ 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2,\
    \ 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpsww8vob4.rs:9:47

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut delimeter_iter = delimeter.iter();\n\
    \    let mut delimeter_next = delimeter_iter.next();\n    let mut delimeter_prev\
    \ = delimeter_iter.next();\n    while let Some(next) = delimeter_next {\n    \
    \    result.push(next);\n        delimeter_next = delimeter_iter.next();\n   \
    \ }\n    while let Some(prev) = delimeter_prev {\n        result.push(prev);\n\
    \        delimeter_prev = delimeter_iter.next();\n    }\n    while let Some(next)\
    \ = numbers_iter.next() {\n        result.push(next);\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n --> /tmp/tmptzftwff3.rs:9:40\n  |\n9 |     let mut delimeter_iter =\
    \ delimeter.iter();\n  |                                        ^^^^ method not\
    \ found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmptzftwff3.rs:23:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n23 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpgrmojvr6.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut current_number = numbers_iter.next();\n\
    \    while let Some(number) = current_number {\n        result.push(number);\n\
    \        result.push(delimeter);\n        current_number = numbers_iter.next();\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmppd6n80qh.rs:12:21\n   |\n\
    12 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmppd6n80qh.rs:15:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n15 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.truncate(numbers_clone.len() - 1);\n    numbers_clone.extend(vec![delimeter;\
    \ numbers_clone.len()]);\n    numbers_clone\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmpmc1_ijkl.rs:8:28

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(last_number);\n\
    \        result.push(number);\n        last_number = number;\n    }\n    result.push(last_number);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpezvo4y25.rs:9:47

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n        last_number\
    \ = number;\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4lwqro53.rs:12:21\n   |\n\
    12 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4lwqro53.rs:14:23\n   |\n9  |     let mut last_number\
    \ = numbers_iter.next();\n   |                           ------------------- expected\
    \ due to this value\n...\n14 |         last_number = number;\n   |           \
    \            ^^^^^^ expected enum `Option`, found `&isize`\n   |\n   = note: \
    \  expected enum `Option<&isize>`\n           found reference `&isize`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n14 |         last_number = Some(number);\n\
    \   |                       +++++      +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp4lwqro53.rs:16:5\n   |\n6  | fn intersperse(numbers: Vec<isize>,\
    \ delimeter: isize) -> Vec<isize> {\n   |                                    \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while numbers_iter.next() != Some(0) {\n\
    \        result.push(numbers_iter.next().unwrap());\n        result.push(delimeter);\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpgu7prhhe.rs:10:41

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyzkim9g6.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyzkim9g6.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut current_delimeter = delimeter;\n\
    \    loop {\n        if numbers_iter.next().is_none() {\n            break;\n\
    \        }\n        result.push(current_delimeter);\n        result.push(numbers_iter.next().unwrap());\n\
    \        current_delimeter += 1;\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwzi0ukpf.rs:15:21\n   |\n\
    15 |         result.push(numbers_iter.next().unwrap());\n   |                \
    \     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found `&isize`\n   |\nhelp:\
    \ consider dereferencing the borrow\n   |\n15 |         result.push(*numbers_iter.next().unwrap());\n\
    \   |                     +\n\nerror: aborting due to previous error\n\nFor more\
    \ information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|&x| x * delimeter);\n    let mut\
    \ numbers_iter = numbers_iter.chain(numbers_iter.cloned());\n    numbers_iter.collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<[closure@/tmp/tmpip7u17_r.rs:8:45:\
    \ 8:63] as FnOnce<(&isize,)>>::Output == &_`\n    --> /tmp/tmpip7u17_r.rs:9:60\n\
    \     |\n9    |     let mut numbers_iter = numbers_iter.chain(numbers_iter.cloned());\n\
    \     |                                                            ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\n     = note: required because of the requirements\
    \ on the impl of `Iterator` for `Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmpip7u17_r.rs:8:45:\
    \ 8:63]>`\nnote: required by a bound in `cloned`\n\nerror[E0271]: type mismatch\
    \ resolving `<[closure@/tmp/tmpip7u17_r.rs:8:45: 8:63] as FnOnce<(&isize,)>>::Output\
    \ == &isize`\n   --> /tmp/tmpip7u17_r.rs:9:47\n    |\n9   |     let mut numbers_iter\
    \ = numbers_iter.chain(numbers_iter.cloned());\n    |                        \
    \                 ----- ^^^^^^^^^^^^^^^^^^^^^ expected `&isize`, found `isize`\n\
    \    |                                         |\n    |                      \
    \                   required by a bound introduced by this call\n    |\n    =\
    \ note: required because of the requirements on the impl of `Iterator` for `Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpip7u17_r.rs:8:45: 8:63]>`\n    = note: 1 redundant\
    \ requirement hidden\n    = note: required because of the requirements on the\
    \ impl of `Iterator` for `Cloned<Map<std::slice::Iter<'_, isize>, [closure@/tmp/tmpip7u17_r.rs:8:45:\
    \ 8:63]>>`\nnote: required by a bound in `std::iter::Iterator::chain`\n\nerror[E0599]:\
    \ the method `collect` exists for struct `std::iter::Chain<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpip7u17_r.rs:8:45: 8:63]>, Cloned<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpip7u17_r.rs:8:45: 8:63]>>>`, but its trait bounds were\
    \ not satisfied\n  --> /tmp/tmpip7u17_r.rs:10:18\n   |\n10 |       numbers_iter.collect()\n\
    \   |                    ^^^^^^^ method cannot be called on `std::iter::Chain<Map<std::slice::Iter<'_,\
    \ isize>, [closure@/tmp/tmpip7u17_r.rs:8:45: 8:63]>, Cloned<Map<std::slic"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpbh6bd8fv.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpbh6bd8fv.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpbh6bd8fv.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0271, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpgqi2ocov.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyzkim9g6.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyzkim9g6.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while numbers_iter.any() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n        result.push(numbers_iter.next().unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpbe8nqfw6.rs:9:24\n     |\n9    |     while numbers_iter.any()\
    \ {\n     |                        ^^^- supplied 0 arguments\n     |         \
    \               |\n     |                        expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n        last_number\
    \ = number;\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4lwqro53.rs:12:21\n   |\n\
    12 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4lwqro53.rs:14:23\n   |\n9  |     let mut last_number\
    \ = numbers_iter.next();\n   |                           ------------------- expected\
    \ due to this value\n...\n14 |         last_number = number;\n   |           \
    \            ^^^^^^ expected enum `Option`, found `&isize`\n   |\n   = note: \
    \  expected enum `Option<&isize>`\n           found reference `&isize`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n14 |         last_number = Some(number);\n\
    \   |                       +++++      +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp4lwqro53.rs:16:5\n   |\n6  | fn intersperse(numbers: Vec<isize>,\
    \ delimeter: isize) -> Vec<isize> {\n   |                                    \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while numbers_iter.next() != Some(delimeter)\
    \ {\n        result.push(numbers_iter.next());\n    }\n    result.extend_from_slice(&numbers_iter);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn1096me9.rs:12:30\n   |\n\
    12 |     result.extend_from_slice(&numbers_iter);\n   |                      \
    \        ^^^^^^^^^^^^^ expected slice, found struct `Cloned`\n   |\n   = note:\
    \ expected reference `&[Option<isize>]`\n              found reference `&Cloned<std::slice::Iter<'_,\
    \ isize>>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpn1096me9.rs:13:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n13 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\nerror: aborting\
    \ due to 2 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(last_number);\n\
    \        result.push(number);\n        last_number = number;\n    }\n    result.push(last_number);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpbl455d4m.rs:12:21\n   |\n\
    12 |         result.push(number);\n   |                     ^^^^^^ expected enum\
    \ `Option`, found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n\
    \           found reference `&isize`\nhelp: try wrapping the expression in `Some`\n\
    \   |\n12 |         result.push(Some(number));\n   |                     +++++\
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbl455d4m.rs:13:23\n\
    \   |\n9  |     let mut last_number = numbers_iter.next();\n   |             \
    \              ------------------- expected due to this value\n...\n13 |     \
    \    last_number = number;\n   |                       ^^^^^^ expected enum `Option`,\
    \ found `&isize`\n   |\n   = note:   expected enum `Option<&isize>`\n        \
    \   found reference `&isize`\nhelp: try wrapping the expression in `Some`\n  \
    \ |\n13 |         last_number = Some(number);\n   |                       +++++\
    \      +\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpbl455d4m.rs:16:5\n \
    \  |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n16 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found enum `Option`\n   |\n   = note: expected struct\
    \ `Vec<isize>`\n              found struct `Vec<Option<&isize>>`\n\nerror: aborting\
    \ due to 3 previous errors\n\nFor more information about this error, try `rustc\
    \ --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpbh6bd8fv.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpbh6bd8fv.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpbh6bd8fv.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned()).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0271, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyzkim9g6.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyzkim9g6.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpyblilv7t.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|x| x.clone());\n    let mut numbers_iter\
    \ = numbers_iter.zip(numbers_iter);\n    let mut numbers_iter = numbers_iter.map(|(mut\
    \ x, mut y)| {\n        if x == y {\n            (x, y)\n        } else {\n  \
    \          (x.clone(), y.clone())\n        }\n    });\n    let mut numbers_iter\
    \ = numbers_iter.map(|(mut x, mut y)| {\n        if x == y {\n            (x,\
    \ y)\n        } else {\n            (x.clone(), y.clone())\n        }\n    });\n\
    \    let mut numbers_iter = numbers_iter.map(|(mut x, mut y)| {\n        if x\
    \ == y {\n            (x, y)\n        } else {\n            (x.clone(), y.clone())\n\
    \        }\n    });\n    let mut numbers_iter = numbers_iter.map(|(mut x, mut\
    \ y)| {\n        if x == y {\n            (x, y)\n        } else {\n         \
    \   (x.clone(), y.clone())\n        }\n    });\n    let mut numbers_iter = numbers_iter.map(|(mut\
    \ x, mut y)| {\n        if x == y {\n            (x, y)\n        } else {\n  \
    \          (x.clone(), y.clone())\n        }\n    });\n    let mut numbers_iter\
    \ = numbers_iter.map(|(mut x, mut y)| {\n        if x == y {\n            (x,\
    \ y)\n        } else {\n            (x.clone(), y.clone())\n        }\n    });\n\
    \    let mut numbers_iter = numbers_iter.map(|(mut x, mut y)| {\n        if x\
    \ == y {\n            (x, y)\n        } else {\n            (x.clone(), y.clone())\n\
    \        }\n    });\n    let mut numbers_iter = numbers_iter.map(|(mut x, mut\
    \ y)| {\n        if x == y {\n            (x, y)\n        } else {\n         \
    \   (x.clone(), y.clone())\n        }\n    });\n    let mut numbers_iter = numbers_iter.map(|(mut\
    \ x, mut y)| {\n        if x == y {\n            (x, y)\n        } else {\n  \
    \          (x.clone(), y.clone())\n        }\n    });\n    let mut numbers_iter\
    \ = numbers_iter.map(|(mut x, mut y)| {\n        if x == y {\n            (x,\
    \ y)\n        } else {\n            (x.clone(), y.clone())\n        }\n    });\n\
    \    let mut numbers_iter = numbers_iter.map(|(mut x, mut y)| {\n        if x\
    \ == y {\n            (x, y)\n        } else {\n            (x.clone(), y.clone())\n\
    \        }\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpsbxn3otb.rs:93:3\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                                    \
    \ - unclosed delimiter\n...\n80 |     let mut numbers_iter = numbers_iter.map(|(mut\
    \ x, mut y)| {\n   |                                            - unclosed delimiter\n\
    ...\n93 | }\n   |   ^\n\nerror: expected one of `)`, `,`, `.`, `?`, or an operator,\
    \ found keyword `fn`\n  --> /tmp/tmpsbxn3otb.rs:88:1\n   |\n86 | }\n   |  - expected\
    \ one of `)`, `,`, `.`, `?`, or an operator\n87 | \n88 | fn main() {\n   | ^^\
    \ unexpected token\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|&x| x);\n    let mut numbers_iter\
    \ = numbers_iter.zip(0..).map(|(mut x, _)| x);\n    let mut numbers_iter = numbers_iter.map(|x|\
    \ x.join(delimeter));\n    let mut numbers_iter = numbers_iter.map(|x| x.to_string());\n\
    \    let mut numbers_iter = numbers_iter.map(|x| x.parse::<isize>().unwrap());\n\
    \    numbers_iter.collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `join` found for type `isize` in the current\
    \ scope\n  --> /tmp/tmp6cz2d83q.rs:10:51\n   |\n10 |     let mut numbers_iter\
    \ = numbers_iter.map(|x| x.join(delimeter));\n   |                           \
    \                        ^^^^ method not found in `isize`\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while numbers_iter.any() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n        result.push(numbers_iter.next().unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpgj2mx903.rs:9:24\n     |\n9    |     while numbers_iter.any()\
    \ {\n     |                        ^^^- supplied 0 arguments\n     |         \
    \               |\n     |                        expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpgj2mx903.rs:11:21\n   |\n11 |         result.push(delimeter);\n   |\
    \                     ^^^^^^^^^\n   |                     |\n   |            \
    \         expected `&isize`, found `isize`\n   |                     help: consider\
    \ borrowing here: `&delimeter`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgj2mx903.rs:14:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n14 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    for _ in 0..(numbers.len() / delimeter)\
    \ {\n        result.push(numbers_iter.next().unwrap());\n        result.push(delimeter);\n\
    \    }\n    result.extend_from_slice(&numbers_iter);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpn7kn81pv.rs:9:34\n  |\n9 |\
    \     for _ in 0..(numbers.len() / delimeter) {\n  |                         \
    \         ^^^^^^^^^ expected `usize`, found `isize`\n\nerror[E0277]: cannot divide\
    \ `usize` by `isize`\n --> /tmp/tmpn7kn81pv.rs:9:32\n  |\n9 |     for _ in 0..(numbers.len()\
    \ / delimeter) {\n  |                                ^ no implementation for `usize\
    \ / isize`\n  |\n  = help: the trait `Div<isize>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Div<Rhs>`:\n           \
    \ <&'a f32 as Div<f32>>\n            <&'a f64 as Div<f64>>\n            <&'a i128\
    \ as Div<i128>>\n            <&'a i16 as Div<i16>>\n            <&'a i32 as Div<i32>>\n\
    \            <&'a i64 as Div<i64>>\n            <&'a i8 as Div<i8>>\n        \
    \    <&'a isize as Div<isize>>\n          and 54 others\n\nerror[E0308]: mismatched\
    \ types\n  --> /tmp/tmpn7kn81pv.rs:11:21\n   |\n11 |         result.push(delimeter);\n\
    \   |                     ^^^^^^^^^\n   |                     |\n   |        \
    \             expected `&isize`, found `isize`\n   |                     help:\
    \ consider borrowing here: `&delimeter`\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpn7kn81pv.rs:13:30\n   |\n13 |     result.extend_from_slice(&numbers_iter);\n\
    \   |                              ^^^^^^^^^^^^^ expected slice `[&isize]`, found\
    \ struct `std::slice::Iter`\n   |\n   = note: expected reference `&[&isize]`\n\
    \              found reference `&std::slice::Iter<'_, isize>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn7kn81pv.rs:14:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 5 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|n| {\n        if n % delimeter ==\
    \ 0 {\n            Some(n.clone())\n        } else {\n            None\n     \
    \   }\n    });\n    numbers_iter.fold(Vec::new(), |mut acc, n| {\n        acc.push(n);\n\
    \        acc\n    })\n}\n\nfn main() {\n    let candidate = intersperse;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
    \ 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2,\
    \ 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4804mohj.rs:16:18\n   |\n\
    16 |         acc.push(n);\n   |                  ^ expected `isize`, found enum\
    \ `Option`\n   |\n   = note: expected type `isize`\n              found enum `Option<isize>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyzkim9g6.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyzkim9g6.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.extend(vec![delimeter; numbers_copy.len()]);\n    numbers_copy\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 6, 3, 2, 8, 8, 8, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp_h4ut8b5.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(item) = numbers_iter.next()\
    \ {\n        result.push(item);\n        result.push(delimeter);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6yna6ijf.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp6yna6ijf.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, 0);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect());\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(numbers.len()\
    \ - 1).take(1).collect());\n    numbers_clone\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n --> /tmp/tmphntjxwa7.rs:9:19\n\
    \  |\n9 |     numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect());\n  |                   ^^^^^^ cannot infer type for type parameter\
    \ `A` declared on the trait `Extend`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpyblilv7t.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|n| n + delimeter);\n    numbers_iter.collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 14, 11, 10]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpke86i65t.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpkxw0b0z2.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpkxw0b0z2.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n    }\n    result\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpn1tks_cj.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpn1tks_cj.rs:14:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.extend_from_slice(&[delimeter]);\n    numbers_clone.extend_from_slice(&numbers[1..]);\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''range start index 1 out of range for slice
    of length 0'', library/core/src/slice/index.rs:52:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(last_number);\n        result.push(last_delimeter);\n\
    \        result.push(number);\n        last_number = number;\n        last_delimeter\
    \ += delimeter;\n    }\n    result.push(last_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9omxrfkt.rs:13:21\n   |\n\
    13 |         result.push(last_delimeter);\n   |                     ^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9omxrfkt.rs:19:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n19 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    for number in numbers_iter {\n        result.push(number);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp9xyd1_pl.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyzkim9g6.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyzkim9g6.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.truncate(numbers_copy.len() / 2);\n    numbers_copy.extend(vec![delimeter;\
    \ numbers_copy.len() / 2]);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(numbers_copy.len()\
    \ / 2).cloned());\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as\
    \ Iterator>::Item == &&_`\n    --> /tmp/tmp03s6tfp7.rs:10:83\n     |\n10   | \
    \    numbers_copy.extend(numbers_copy.iter().cloned().skip(numbers_copy.len()\
    \ / 2).cloned());\n     |                                                    \
    \                               ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&&_`\n                found reference `&isize`\n\
    \     = note: required because of the requirements on the impl of `Iterator` for\
    \ `Cloned<std::slice::Iter<'_, isize>>`\nnote: required by a bound in `cloned`\n\
    \nerror[E0271]: type mismatch resolving `<std::slice::Iter<'_, isize> as Iterator>::Item\
    \ == &&_`\n   --> /tmp/tmp03s6tfp7.rs:10:25\n    |\n10  |     numbers_copy.extend(numbers_copy.iter().cloned().skip(numbers_copy.len()\
    \ / 2).cloned());\n    |                  ------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\
    \ expected reference, found `isize`\n    |                  |\n    |         \
    \         required by a bound introduced by this call\n    |\n    = note: expected\
    \ reference `&&_`\n               found reference `&isize`\n    = note: required\
    \ because of the requirements on the impl of `Iterator` for `Cloned<std::slice::Iter<'_,\
    \ isize>>`\n    = note: 1 redundant requirement hidden\n    = note: required because\
    \ of the requirements on the impl of `Iterator` for `Cloned<Skip<Cloned<std::slice::Iter<'_,\
    \ isize>>>>`\nnote: required by a bound in `extend`\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0271`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n        last_number\
    \ = number;\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4lwqro53.rs:12:21\n   |\n\
    12 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4lwqro53.rs:14:23\n   |\n9  |     let mut last_number\
    \ = numbers_iter.next();\n   |                           ------------------- expected\
    \ due to this value\n...\n14 |         last_number = number;\n   |           \
    \            ^^^^^^ expected enum `Option`, found `&isize`\n   |\n   = note: \
    \  expected enum `Option<&isize>`\n           found reference `&isize`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n14 |         last_number = Some(number);\n\
    \   |                       +++++      +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp4lwqro53.rs:16:5\n   |\n6  | fn intersperse(numbers: Vec<isize>,\
    \ delimeter: isize) -> Vec<isize> {\n   |                                    \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpyblilv7t.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyzkim9g6.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyzkim9g6.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().intersperse(&delimeter).collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpaaq2gc5i.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().intersperse(&delimeter).collect()\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `intersperse`\
    \ exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpaaq2gc5i.rs:7:34\n   |\n7  |       numbers.into_iter().cloned().intersperse(&delimeter).collect()\n\
    \   |                                    ^^^^^^^^^^^ method cannot be called on\
    \ `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        result.push(last_number);\n       \
    \ result.push(number);\n        last_number = number;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0n2nwbmb.rs:15:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n15 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().interspersed(delimeter).collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpfwpfeo7g.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().interspersed(delimeter).collect()\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: no method named `interspersed`\
    \ found for struct `Cloned` in the current scope\n --> /tmp/tmpfwpfeo7g.rs:7:34\n\
    \  |\n7 |     numbers.into_iter().cloned().interspersed(delimeter).collect()\n\
    \  |                                  ^^^^^^^^^^^^ method not found in `Cloned<std::vec::IntoIter<isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|n| {\n        if n % delimeter ==\
    \ 0 {\n            Some(n / delimeter)\n        } else {\n            None\n \
    \       }\n    });\n    numbers_iter.collect::<Vec<_>>()\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfofjq9lc.rs:15:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n15 |     numbers_iter.collect::<Vec<_>>()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp2pc5t96.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp2pc5t96.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmponxr_9js.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut current_number = numbers_iter.next().unwrap();\n\
    \    let mut current_delimeter = delimeter;\n    while let Some(next_number) =\
    \ numbers_iter.next() {\n        result.push(current_number);\n        result.push(current_delimeter);\n\
    \        result.push(next_number);\n        current_delimeter = delimeter;\n \
    \       current_number = next_number;\n    }\n    result\n}\n\nfn main() {\n \
    \   let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpxcu7ujas.rs:13:21\n   |\n\
    13 |         result.push(current_delimeter);\n   |                     ^^^^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&current_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpxcu7ujas.rs:18:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n18 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n        last_number\
    \ = number;\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4lwqro53.rs:12:21\n   |\n\
    12 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4lwqro53.rs:14:23\n   |\n9  |     let mut last_number\
    \ = numbers_iter.next();\n   |                           ------------------- expected\
    \ due to this value\n...\n14 |         last_number = number;\n   |           \
    \            ^^^^^^ expected enum `Option`, found `&isize`\n   |\n   = note: \
    \  expected enum `Option<&isize>`\n           found reference `&isize`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n14 |         last_number = Some(number);\n\
    \   |                       +++++      +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp4lwqro53.rs:16:5\n   |\n6  | fn intersperse(numbers: Vec<isize>,\
    \ delimeter: isize) -> Vec<isize> {\n   |                                    \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    for x in numbers_iter.next() {\n        result.push(x);\n\
    \        result.push(delimeter);\n        result.push(numbers_iter.next());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw_5nwvpb.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw_5nwvpb.rs:12:21\n   |\n12 |         result.push(numbers_iter.next());\n\
    \   |                     ^^^^^^^^^^^^^^^^^^^ expected `&isize`, found enum `Option`\n\
    \   |\n   = note: expected reference `&isize`\n                   found enum `Option<&isize>`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpw_5nwvpb.rs:14:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n14 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyzkim9g6.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyzkim9g6.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.truncate(numbers_clone.len() / 2);\n    numbers_clone.extend(vec![delimeter;\
    \ numbers_clone.len() / 2]);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(numbers_clone.len()\
    \ / 2));\n    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_clone` as mutable because it is also\
    \ borrowed as immutable\n  --> /tmp/tmp1s8gdvie.rs:10:5\n   |\n10 |     numbers_clone.extend(numbers_clone.iter().cloned().skip(numbers_clone.len()\
    \ / 2));\n   |     ^^^^^^^^^^^^^^------^--------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |     |             |      |\n   |     |             |      immutable borrow\
    \ occurs here\n   |     |             immutable borrow later used by call\n  \
    \ |     mutable borrow occurs here\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, delimeter);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpvljgszmr.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpgrmojvr6.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n        last_number\
    \ = number;\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4lwqro53.rs:12:21\n   |\n\
    12 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4lwqro53.rs:14:23\n   |\n9  |     let mut last_number\
    \ = numbers_iter.next();\n   |                           ------------------- expected\
    \ due to this value\n...\n14 |         last_number = number;\n   |           \
    \            ^^^^^^ expected enum `Option`, found `&isize`\n   |\n   = note: \
    \  expected enum `Option<&isize>`\n           found reference `&isize`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n14 |         last_number = Some(number);\n\
    \   |                       +++++      +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp4lwqro53.rs:16:5\n   |\n6  | fn intersperse(numbers: Vec<isize>,\
    \ delimeter: isize) -> Vec<isize> {\n   |                                    \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = last_number {\n        result.push(number);\n  \
    \      last_number = numbers_iter.next();\n        if let Some(number) = numbers_iter.next()\
    \ {\n            result.push(delimeter);\n            result.push(number);\n \
    \       }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp75banq87.rs:14:25\n   |\n\
    14 |             result.push(delimeter);\n   |                         ^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp75banq87.rs:18:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n18 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        if number == last_number {\n            last_delimeter += 1;\n  \
    \      } else {\n            result.push(last_number);\n            result.push(last_delimeter);\n\
    \            last_number = number;\n            last_delimeter = delimeter;\n\
    \        }\n    }\n    result.push(last_number);\n    result\n}\n\nfn main() {\n\
    \    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmp15jrsh2d.rs:9:47

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, 0);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(numbers.len()\
    \ - 1).collect::<Vec<_>>());\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to subtract with overflow'', /tmp/tmphxcc5d7w.rs:9:69

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut numbers_iter = numbers_iter.into_iter();\n    let mut numbers_iter\
    \ = numbers_iter.map(|x| x + delimeter);\n    let mut numbers_iter = numbers_iter.map(|x|\
    \ x as isize);\n    numbers_iter.collect::<Vec<_>>()\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 14, 11, 10]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp2ogzrxbr.rs:17:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010234
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpgrmojvr6.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().intersperse(&delimeter).collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpaaq2gc5i.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().intersperse(&delimeter).collect()\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `intersperse`\
    \ exists for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds\
    \ were not satisfied\n  --> /tmp/tmpaaq2gc5i.rs:7:34\n   |\n7  |       numbers.into_iter().cloned().intersperse(&delimeter).collect()\n\
    \   |                                    ^^^^^^^^^^^ method cannot be called on\
    \ `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied trait bounds\n   |\n\
    \   = note: the following trait bounds were not satisfied:\n           `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item = &_`\n           which is required by `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           `Cloned<std::vec::IntoIter<isize>>: Iterator`\n      \
    \     which is required by `&mut Cloned<std::vec::IntoIter<isize>>: Iterator`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.truncate(numbers_clone.len() / 2);\n    numbers_clone.extend(vec![delimeter,\
    \ delimeter]);\n    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 7]`,\n right: `[]`', /tmp/tmp2nd9uxz7.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010234
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp2pc5t96.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp2pc5t96.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(last_number);\n\
    \        result.push(number);\n        last_number = number;\n    }\n    result.push(last_number);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpezvo4y25.rs:9:47

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut numbers_iter = numbers_iter.map(|x| x + delimeter);\n    numbers_iter.collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 14, 11, 10]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmp06cy4oh4.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010234
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        result.push(last_number);\n       \
    \ result.push(number);\n        last_number = number;\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp0n2nwbmb.rs:15:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n15 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        result.push(delimeter);\n        result.push(number);\n        last_number\
    \ = number;\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp4lwqro53.rs:12:21\n   |\n\
    12 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmp4lwqro53.rs:14:23\n   |\n9  |     let mut last_number\
    \ = numbers_iter.next();\n   |                           ------------------- expected\
    \ due to this value\n...\n14 |         last_number = number;\n   |           \
    \            ^^^^^^ expected enum `Option`, found `&isize`\n   |\n   = note: \
    \  expected enum `Option<&isize>`\n           found reference `&isize`\nhelp:\
    \ try wrapping the expression in `Some`\n   |\n14 |         last_number = Some(number);\n\
    \   |                       +++++      +\n\nerror[E0308]: mismatched types\n \
    \ --> /tmp/tmp4lwqro53.rs:16:5\n   |\n6  | fn intersperse(numbers: Vec<isize>,\
    \ delimeter: isize) -> Vec<isize> {\n   |                                    \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n16 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n\
    \   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 3 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpaw450_wz.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 2));\n  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.extend_from_slice(&[delimeter]);\n    numbers_clone.extend_from_slice(&numbers.iter().cloned());\n\
    \    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmphbuh6ee3.rs:9:37\n  |\n9 |\
    \     numbers_clone.extend_from_slice(&numbers.iter().cloned());\n  |        \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^ expected slice `[isize]`,\
    \ found struct `Cloned`\n  |\n  = note: expected reference `&[isize]`\n      \
    \       found reference `&Cloned<std::slice::Iter<'_, isize>>`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpyzkim9g6.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpyzkim9g6.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|x| {\n        if x == delimeter\
    \ * 2 {\n            delimeter\n        } else {\n            x\n        }\n \
    \   });\n    numbers_iter.collect::<Vec<_>>()\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: `if` and `else` have incompatible types\n  --> /tmp/tmpsg31ewwz.rs:12:13\n\
    \   |\n9  | /         if x == delimeter * 2 {\n10 | |             delimeter\n\
    \   | |             --------- expected because of this\n11 | |         } else\
    \ {\n12 | |             x\n   | |             ^ expected `isize`, found `&isize`\n\
    13 | |         }\n   | |_________- `if` and `else` have incompatible types\n \
    \  |\nhelp: consider dereferencing the borrow\n   |\n12 |             *x\n   |\
    \             +\n\nerror[E0277]: can't compare `&isize` with `isize`\n --> /tmp/tmpsg31ewwz.rs:9:14\n\
    \  |\n9 |         if x == delimeter * 2 {\n  |              ^^ no implementation\
    \ for `&isize == isize`\n  |\n  = help: the trait `PartialEq<isize>` is not implemented\
    \ for `&isize`\n  = help: the following other types implement trait `PartialEq<Rhs>`:\n\
    \            f32\n            f64\n            i128\n            i16\n       \
    \     i32\n            i64\n            i8\n            isize\n          and 6\
    \ others\n\nerror: aborting due to 2 previous errors\n\nSome errors have detailed\
    \ explanations: E0277, E0308.\nFor more information about an error, try `rustc\
    \ --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut current_number = 0;\n    let mut\
    \ last_number = 0;\n    while let Some(number) = numbers_iter.next() {\n     \
    \   if number == delimeter {\n            result.push(current_number);\n     \
    \       current_number = 0;\n            last_number = number;\n        } else\
    \ {\n            current_number += number;\n        }\n    }\n    result.push(current_number);\n\
    \    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp6oo9vb7j.rs:12:19\n\
    \   |\n12 |         if number == delimeter {\n   |                   ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp6oo9vb7j.rs:15:27\n   |\n10 |     let mut last_number = 0;\n   |   \
    \                        - expected due to this value\n...\n15 |             last_number\
    \ = number;\n   |                           ^^^^^^ expected integer, found `&isize`\n\
    \   |\nhelp: consider dereferencing the borrow\n   |\n15 |             last_number\
    \ = *number;\n   |                           +\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        if number != last_number + 1 {\n  \
    \          result.push(last_number);\n            last_number = number;\n    \
    \    }\n        result.push(number);\n    }\n    result.push(last_number);\n \
    \   result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp329fm_mp.rs:11:19\n\
    \   |\n11 |         if number != last_number + 1 {\n   |                   ^^\
    \ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp329fm_mp.rs:18:5\n   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n   |                                               \
    \           ---------- expected `Vec<isize>` because of return type\n...\n18 |\
    \     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.truncate(numbers_clone.len() / 2);\n    numbers_clone.extend(vec![delimeter,\
    \ delimeter]);\n    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7, 7]`,\n right: `[]`', /tmp/tmp2nd9uxz7.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010234
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpgrmojvr6.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).collect::<Vec<_>>());\n\
    \  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    for number in numbers_iter {\n \
    \       if number != last_number {\n            result.push(last_number);\n  \
    \          last_number = number;\n            last_delimeter = delimeter;\n  \
    \      }\n        last_delimeter += 1;\n        result.push(last_delimeter);\n\
    \    }\n    result.push(last_number);\n    result\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''called `Option::unwrap()` on a `None` value'',
    /tmp/tmpplf4dse3.rs:9:47

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010234
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().cloned().skip(1).collect::<Vec<_>>());\n\
    \    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[7]`,\n right: `[]`', /tmp/tmpgqi2ocov.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while numbers_iter.next() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpzdfyxder.rs:9:11\n  |\n9 |\
    \     while numbers_iter.next() {\n  |           ^^^^^^^^^^^^^^^^^^^ expected\
    \ `bool`, found enum `Option`\n  |\n  = note: expected type `bool`\n         \
    \    found enum `Option<&isize>`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpzdfyxder.rs:11:21\n\
    \   |\n11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmpzdfyxder.rs:13:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_copy = numbers.clone();\n\
    \    numbers_copy.insert(0, delimeter);\n    numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n    numbers_copy\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_copy` as mutable because it is also\
    \ borrowed as immutable\n --> /tmp/tmpyblilv7t.rs:9:5\n  |\n9 |     numbers_copy.extend(numbers_copy.iter().skip(1).take(numbers.len()\
    \ - 1));\n  |     ^^^^^^^^^^^^^------^-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \  |     |            |      |\n  |     |            |      immutable borrow occurs\
    \ here\n  |     |            immutable borrow later used by call\n  |     mutable\
    \ borrow occurs here\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut delimeter_iter = delimeter.iter();\n\
    \    while numbers_iter.any() || delimeter_iter.any() {\n        if numbers_iter.any()\
    \ {\n            result.push(numbers_iter.next().unwrap());\n        }\n     \
    \   if delimeter_iter.any() {\n            result.push(delimeter_iter.next().unwrap());\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n --> /tmp/tmpait5kegn.rs:9:40\n  |\n9 |     let mut delimeter_iter =\
    \ delimeter.iter();\n  |                                        ^^^^ method not\
    \ found in `isize`\n\nerror[E0061]: this function takes 1 argument but 0 arguments\
    \ were supplied\n    --> /tmp/tmpait5kegn.rs:10:24\n     |\n10   |     while numbers_iter.any()\
    \ || delimeter_iter.any() {\n     |                        ^^^- supplied 0 arguments\n\
    \     |                        |\n     |                        expected 1 argument\n\
    \     |\nnote: associated function defined here\n\nerror[E0061]: this function\
    \ takes 1 argument but 0 arguments were supplied\n    --> /tmp/tmpait5kegn.rs:11:25\n\
    \     |\n11   |         if numbers_iter.any() {\n     |                      \
    \   ^^^- supplied 0 arguments\n     |                         |\n     |      \
    \                   expected 1 argument\n     |\nnote: associated function defined\
    \ here\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpait5kegn.rs:18:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n18 |     result\n   |     ^^^^^^ expected\
    \ `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n   \
    \           found struct `Vec<&isize>`\n\nerror: aborting due to 4 previous errors\n\
    \nSome errors have detailed explanations: E0061, E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|n| n + delimeter);\n    numbers_iter.collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 14, 11, 10]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpke86i65t.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    for number in numbers_iter {\n        if number != last_number + 1 {\n  \
    \          result.push(last_number);\n            last_number = number;\n    \
    \    }\n        result.push(number);\n    }\n    result.push(last_number);\n \
    \   result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmp329fm_mp.rs:11:19\n\
    \   |\n11 |         if number != last_number + 1 {\n   |                   ^^\
    \ no implementation for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>`\
    \ is not implemented for `&isize`\n   = help: the following other types implement\
    \ trait `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n\
    \             i16\n             i32\n             i64\n             i8\n     \
    \        isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmp329fm_mp.rs:18:5\n   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter:\
    \ isize) -> Vec<isize> {\n   |                                               \
    \           ---------- expected `Vec<isize>` because of return type\n...\n18 |\
    \     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note:\
    \ expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\nerror:\
    \ aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().interspersed(delimeter).collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpfwpfeo7g.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().interspersed(delimeter).collect()\n\
    \     |                         ^^^^^^ expected reference, found `isize`\n   \
    \  |\n     = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: no method named `interspersed`\
    \ found for struct `Cloned` in the current scope\n --> /tmp/tmpfwpfeo7g.rs:7:34\n\
    \  |\n7 |     numbers.into_iter().cloned().interspersed(delimeter).collect()\n\
    \  |                                  ^^^^^^^^^^^^ method not found in `Cloned<std::vec::IntoIter<isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nSome errors have detailed explanations:\
    \ E0271, E0599.\nFor more information about an error, try `rustc --explain E0271`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|x| {\n        if x % delimeter ==\
    \ 0 {\n            Some(x)\n        } else {\n            None\n        }\n  \
    \  });\n    let mut numbers_iter = numbers_iter.collect();\n    let mut numbers_iter\
    \ = numbers_iter.into_iter();\n    numbers_iter.for_each(|x| {\n        if x.is_some()\
    \ {\n            numbers.insert(numbers.len() - 1, x.unwrap());\n        }\n \
    \   });\n    numbers\n}\n\nfn main() {\n    let candidate = intersperse;\n   \
    \ assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5,\
    \ 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2,\
    \ 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmpqtcvxrxs.rs:16:28\n\
    \   |\n15 |     let mut numbers_iter = numbers_iter.collect();\n   |         ----------------\
    \ consider giving `numbers_iter` a type\n16 |     let mut numbers_iter = numbers_iter.into_iter();\n\
    \   |                            ^^^^^^^^^^^^ cannot infer type\n   |\n   = note:\
    \ type must be known at this point\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|&n| {\n        if n % delimeter\
    \ == 0 {\n            Some(n)\n        } else {\n            None\n        }\n\
    \    });\n    let mut numbers_iter = numbers_iter.collect();\n    numbers_iter.into_iter().collect()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0282]: type annotations needed\n  --> /tmp/tmph3vfwn10.rs:16:5\n\
    \   |\n15 |     let mut numbers_iter = numbers_iter.collect();\n   |         ----------------\
    \ consider giving `numbers_iter` a type\n16 |     numbers_iter.into_iter().collect()\n\
    \   |     ^^^^^^^^^^^^ cannot infer type\n   |\n   = note: type must be known\
    \ at this point\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0282`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.truncate(numbers_clone.len() - delimeter);\n    numbers_clone.extend(vec![delimeter;\
    \ delimeter]);\n    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmp9qra338l.rs:8:50\n  |\n8 |\
    \     numbers_clone.truncate(numbers_clone.len() - delimeter);\n  |          \
    \                                        ^^^^^^^^^ expected `usize`, found `isize`\n\
    \nerror[E0277]: cannot subtract `isize` from `usize`\n --> /tmp/tmp9qra338l.rs:8:48\n\
    \  |\n8 |     numbers_clone.truncate(numbers_clone.len() - delimeter);\n  |  \
    \                                              ^ no implementation for `usize\
    \ - isize`\n  |\n  = help: the trait `Sub<isize>` is not implemented for `usize`\n\
    \  = help: the following other types implement trait `Sub<Rhs>`:\n           \
    \ <&'a f32 as Sub<f32>>\n            <&'a f64 as Sub<f64>>\n            <&'a i128\
    \ as Sub<i128>>\n            <&'a i16 as Sub<i16>>\n            <&'a i32 as Sub<i32>>\n\
    \            <&'a i64 as Sub<i64>>\n            <&'a i8 as Sub<i8>>\n        \
    \    <&'a isize as Sub<isize>>\n          and 48 others\n\nerror[E0308]: mismatched\
    \ types\n --> /tmp/tmp9qra338l.rs:9:42\n  |\n9 |     numbers_clone.extend(vec![delimeter;\
    \ delimeter]);\n  |                                          ^^^^^^^^^ expected\
    \ `usize`, found `isize`\n  |\nhelp: you can convert an `isize` to a `usize` and\
    \ panic if the converted value doesn't fit\n  |\n9 |     numbers_clone.extend(vec![delimeter;\
    \ delimeter.try_into().unwrap()]);\n  |                                      \
    \             ++++++++++++++++++++\n\nerror: aborting due to 3 previous errors\n\
    \nSome errors have detailed explanations: E0277, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut current_number = 0;\n    while\
    \ let Some(number) = numbers_iter.next() {\n        result.push(number);\n   \
    \     if number == delimeter {\n            result.push(delimeter);\n        \
    \    current_number = 0;\n        } else {\n            result.push(current_number);\n\
    \            current_number += 1;\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpwzhmv1pr.rs:13:25\n   |\n\
    13 |             result.push(delimeter);\n   |                         ^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&delimeter`\n\
    \nerror[E0277]: can't compare `&isize` with `isize`\n  --> /tmp/tmpwzhmv1pr.rs:12:19\n\
    \   |\n12 |         if number == delimeter {\n   |                   ^^ no implementation\
    \ for `&isize == isize`\n   |\n   = help: the trait `PartialEq<isize>` is not\
    \ implemented for `&isize`\n   = help: the following other types implement trait\
    \ `PartialEq<Rhs>`:\n             f32\n             f64\n             i128\n \
    \            i16\n             i32\n             i64\n             i8\n      \
    \       isize\n           and 6 others\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpwzhmv1pr.rs:16:25\n   |\n16 |             result.push(current_number);\n\
    \   |                         ^^^^^^^^^^^^^^\n   |                         |\n\
    \   |                         expected `&isize`, found integer\n   |         \
    \                help: consider borrowing here: `&current_number`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpwzhmv1pr.rs:20:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n20 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 4 previous errors\n\nSome errors have detailed explanations:\
    \ E0277, E0308.\nFor more information about an error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|n| n + delimeter);\n    numbers_iter.collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 14, 11, 10]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmpke86i65t.rs:15:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpp2pc5t96.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpp2pc5t96.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    for n in numbers_iter {\n        result.push(n);\n\
    \        result.push(delimeter);\n    }\n    result\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpw2cugyow.rs:11:21\n   |\n\
    11 |         result.push(delimeter);\n   |                     ^^^^^^^^^\n   |\
    \                     |\n   |                     expected `&isize`, found `isize`\n\
    \   |                     help: consider borrowing here: `&delimeter`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpw2cugyow.rs:13:5\n   |\n6  | fn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |                        \
    \                                  ---------- expected `Vec<isize>` because of\
    \ return type\n...\n13 |     result\n   |     ^^^^^^ expected `isize`, found `&isize`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<&isize>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(last_number);\n        result.push(last_delimeter);\n\
    \        result.push(number);\n        last_number = number;\n        last_delimeter\
    \ += delimeter;\n    }\n    result.push(last_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9omxrfkt.rs:13:21\n   |\n\
    13 |         result.push(last_delimeter);\n   |                     ^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9omxrfkt.rs:19:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n19 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut current = Vec::new();\n    let\
    \ mut last_delimeter = delimeter;\n    while let Some(item) = numbers_iter.next()\
    \ {\n        current.push(item);\n        if current.len() == delimeter {\n  \
    \          result.push(current);\n            current = Vec::new();\n        }\n\
    \    }\n    if current.len() > 0 {\n        result.push(current);\n    }\n   \
    \ result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpx8es4x2z.rs:13:29\n   |\n\
    13 |         if current.len() == delimeter {\n   |                           \
    \  ^^^^^^^^^ expected `usize`, found `isize`\n   |\nhelp: you can convert an `isize`\
    \ to a `usize` and panic if the converted value doesn't fit\n   |\n13 |      \
    \   if current.len() == delimeter.try_into().unwrap() {\n   |                \
    \                      ++++++++++++++++++++\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpx8es4x2z.rs:21:5\n   |\n6  | fn intersperse(numbers: Vec<isize>,\
    \ delimeter: isize) -> Vec<isize> {\n   |                                    \
    \                      ---------- expected `Vec<isize>` because of return type\n\
    ...\n21 |     result\n   |     ^^^^^^ expected `isize`, found struct `Vec`\n \
    \  |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Vec<&isize>>`\n\
    \nerror: aborting due to 2 previous errors\n\nFor more information about this\
    \ error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut delimeter_iter = delimeter.iter();\n\
    \    while let Some(number) = numbers_iter.next() {\n        result.push(number);\n\
    \        if let Some(delimeter) = delimeter_iter.next() {\n            result.push(delimeter);\n\
    \        }\n    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for type `isize` in the current\
    \ scope\n --> /tmp/tmphvp_wuad.rs:9:40\n  |\n9 |     let mut delimeter_iter =\
    \ delimeter.iter();\n  |                                        ^^^^ method not\
    \ found in `isize`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmphvp_wuad.rs:16:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n16 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous\
    \ errors\n\nSome errors have detailed explanations: E0308, E0599.\nFor more information\
    \ about an error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = vec![];\n    while numbers_iter.any() {\n        result.push(numbers_iter.next().unwrap());\n\
    \        result.push(delimeter);\n        result.push(numbers_iter.next().unwrap());\n\
    \    }\n    result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0061]: this function takes 1 argument but 0 arguments were supplied\n\
    \    --> /tmp/tmpgj2mx903.rs:9:24\n     |\n9    |     while numbers_iter.any()\
    \ {\n     |                        ^^^- supplied 0 arguments\n     |         \
    \               |\n     |                        expected 1 argument\n     |\n\
    note: associated function defined here\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpgj2mx903.rs:11:21\n   |\n11 |         result.push(delimeter);\n   |\
    \                     ^^^^^^^^^\n   |                     |\n   |            \
    \         expected `&isize`, found `isize`\n   |                     help: consider\
    \ borrowing here: `&delimeter`\n\nerror[E0308]: mismatched types\n  --> /tmp/tmpgj2mx903.rs:14:5\n\
    \   |\n6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize>\
    \ {\n   |                                                          ----------\
    \ expected `Vec<isize>` because of return type\n...\n14 |     result\n   |   \
    \  ^^^^^^ expected `isize`, found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n\
    \              found struct `Vec<&isize>`\n\nerror: aborting due to 3 previous\
    \ errors\n\nSome errors have detailed explanations: E0061, E0308.\nFor more information\
    \ about an error, try `rustc --explain E0061`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter().cloned();\n\
    \    let mut result = Vec::new();\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(number);\n        result.push(delimeter);\n    }\n  \
    \  result\n}\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[5, 8, 6, 8, 3, 8, 2, 8]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmponxr_9js.rs:19:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 101
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|n| n + delimeter);\n    let mut\
    \ numbers_iter = numbers_iter.map(|n| n as isize);\n    numbers_iter.collect::<Vec<_>>()\n\
    }\n\nfn main() {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `[13, 14, 11, 10]`,\n right: `[5, 8, 6, 8, 3, 8, 2]`', /tmp/tmphoajjir8.rs:16:5\n\
    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010234
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next();\n\
    \    while let Some(number) = last_number {\n        result.push(number);\n  \
    \      last_number = numbers_iter.next();\n        if last_number.is_none() {\n\
    \            result.push(delimeter);\n        }\n    }\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp50obq_4u.rs:14:25\n   |\n\
    14 |             result.push(delimeter);\n   |                         ^^^^^^^^^\n\
    \   |                         |\n   |                         expected `&isize`,\
    \ found `isize`\n   |                         help: consider borrowing here: `&delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp50obq_4u.rs:17:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n17 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut numbers_iter = numbers_iter.map(|n| {\n        if n % delimeter ==\
    \ 0 {\n            Some(n.clone())\n        } else {\n            None\n     \
    \   }\n    });\n    numbers_iter.collect::<Vec<_>>()\n}\n\nfn main() {\n    let\
    \ candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7),\
    \ Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpgidakhow.rs:15:5\n   |\n\
    6  | fn intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n \
    \  |                                                          ---------- expected\
    \ `Vec<isize>` because of return type\n...\n15 |     numbers_iter.collect::<Vec<_>>()\n\
    \   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `isize`, found enum `Option`\n\
    \   |\n   = note: expected struct `Vec<isize>`\n              found struct `Vec<Option<isize>>`\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_iter = numbers.iter();\n\
    \    let mut result = Vec::new();\n    let mut last_number = numbers_iter.next().unwrap();\n\
    \    let mut last_delimeter = delimeter;\n    while let Some(number) = numbers_iter.next()\
    \ {\n        result.push(last_number);\n        result.push(last_delimeter);\n\
    \        result.push(number);\n        last_number = number;\n        last_delimeter\
    \ += delimeter;\n    }\n    result.push(last_number);\n    result\n}\n\nfn main()\
    \ {\n    let candidate = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(),\
    \ 7), Vec::<isize>::new());\n    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5,\
    \ 8, 6, 8, 3, 8, 2]);\n    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2,\
    \ 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp9omxrfkt.rs:13:21\n   |\n\
    13 |         result.push(last_delimeter);\n   |                     ^^^^^^^^^^^^^^\n\
    \   |                     |\n   |                     expected `&isize`, found\
    \ `isize`\n   |                     help: consider borrowing here: `&last_delimeter`\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp9omxrfkt.rs:19:5\n   |\n6  | fn\
    \ intersperse(numbers: Vec<isize>, delimeter: isize) -> Vec<isize> {\n   |   \
    \                                                       ---------- expected `Vec<isize>`\
    \ because of return type\n...\n19 |     result\n   |     ^^^^^^ expected `isize`,\
    \ found `&isize`\n   |\n   = note: expected struct `Vec<isize>`\n            \
    \  found struct `Vec<&isize>`\n\nerror: aborting due to 2 previous errors\n\n\
    For more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.truncate(numbers_clone.len() / 2);\n    numbers_clone.extend(vec![delimeter;\
    \ numbers_clone.len() / 2]);\n    numbers_clone.extend(numbers_clone.iter().skip(numbers_clone.len()\
    \ / 2).cloned());\n    numbers_clone\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0502]: cannot borrow `numbers_clone` as mutable because it is also\
    \ borrowed as immutable\n  --> /tmp/tmp0ia6ekpm.rs:10:5\n   |\n10 |     numbers_clone.extend(numbers_clone.iter().skip(numbers_clone.len()\
    \ / 2).cloned());\n   |     ^^^^^^^^^^^^^^------^--------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \   |     |             |      |\n   |     |             |      immutable borrow\
    \ occurs here\n   |     |             immutable borrow later used by call\n  \
    \ |     mutable borrow occurs here\n\nerror: aborting due to previous error\n\n\
    For more information about this error, try `rustc --explain E0502`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    let mut numbers_clone = numbers.clone();\n\
    \    numbers_clone.insert(0, 0);\n    numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(delimeter\
    \ - 1).collect::<Vec<_>>());\n    numbers_clone\n}\n\nfn main() {\n    let candidate\
    \ = intersperse;\n    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n\
    \    assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n\
    \    assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmppo16umea.rs:9:69\n  |\n9 |\
    \     numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take(delimeter\
    \ - 1).collect::<Vec<_>>());\n  |                                            \
    \                         ^^^^^^^^^^^^^ expected `usize`, found `isize`\n  |\n\
    help: you can convert an `isize` to a `usize` and panic if the converted value\
    \ doesn't fit\n  |\n9 |     numbers_clone.extend(numbers_clone.iter().cloned().skip(1).take((delimeter\
    \ - 1).try_into().unwrap()).collect::<Vec<_>>());\n  |                       \
    \                                              +             +++++++++++++++++++++\n\
    \nerror: aborting due to previous error\n\nFor more information about this error,\
    \ try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010233
- exit_code: 1
  program: "/// Insert a number 'delimeter' between every two consecutive elements\
    \ of input list `numbers'\n/// >>> intersperse(vec![], 4)\n/// Vec::<isize>::new()\n\
    /// >>> intersperse(vec![1, 2, 3], 4)\n/// vec![1, 4, 2, 4, 3]\nfn intersperse(numbers:\
    \ Vec<isize>, delimeter: isize) -> Vec<isize> {\n    numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n}\n\nfn main() {\n    let candidate = intersperse;\n\
    \    assert_eq!(candidate(Vec::<isize>::new(), 7), Vec::<isize>::new());\n   \
    \ assert_eq!(candidate(vec![5, 6, 3, 2], 8), vec![5, 8, 6, 8, 3, 8, 2]);\n   \
    \ assert_eq!(candidate(vec![2, 2, 2], 2), vec![2, 2, 2, 2, 2]);\n}\n"
  status: SyntaxError
  stderr: "error[E0271]: type mismatch resolving `<std::vec::IntoIter<isize> as Iterator>::Item\
    \ == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:25\n     |\n7    |     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                         ^^^^^^ expected\
    \ reference, found `isize`\n     |\n     = note: expected reference `&_`\n   \
    \                  found type `isize`\nnote: required by a bound in `cloned`\n\
    \nerror[E0599]: the method `zip` exists for struct `Cloned<std::vec::IntoIter<isize>>`,\
    \ but its trait bounds were not satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:34\n  \
    \ |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                    ^^^\
    \ method cannot be called on `Cloned<std::vec::IntoIter<isize>>` due to unsatisfied\
    \ trait bounds\n   |\n   = note: the following trait bounds were not satisfied:\n\
    \           `<std::vec::IntoIter<isize> as Iterator>::Item = &_`\n           which\
    \ is required by `Cloned<std::vec::IntoIter<isize>>: Iterator`\n           `Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n           which is required by `&mut Cloned<std::vec::IntoIter<isize>>:\
    \ Iterator`\n\nerror[E0271]: type mismatch resolving `<std::vec::IntoIter<isize>\
    \ as Iterator>::Item == &_`\n    --> /tmp/tmpby7qfdrx.rs:7:58\n     |\n7    |\
    \     numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n     |                                   \
    \                       ^^^^^^ expected reference, found `isize`\n     |\n   \
    \  = note: expected reference `&_`\n                     found type `isize`\n\
    note: required by a bound in `cloned`\n\nerror[E0599]: the method `skip` exists\
    \ for struct `Cloned<std::vec::IntoIter<isize>>`, but its trait bounds were not\
    \ satisfied\n  --> /tmp/tmpby7qfdrx.rs:7:67\n   |\n7  |       numbers.into_iter().cloned().zip(numbers.into_iter().cloned().skip(1)).map(|(a,\
    \ b)| a + delimeter + b).collect()\n   |                                     \
    \              "
  stdout: ''
  timestamp: 1660010233
