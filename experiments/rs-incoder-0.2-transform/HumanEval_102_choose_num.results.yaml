language: rs
name: HumanEval_102_choose_num
results:
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x: isize = x;\n    let mut y: isize\
    \ = y;\n    while x > y {\n        if x % 2 == 0 {\n            x = x / 2;\n \
    \       } else {\n            y = y / 2;\n        }\n    }\n    if x == y {\n\
    \        x\n    } else {\n        x\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpbcvfhq45.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    \n    let mut num: isize = 0;\n    \n    while num < x {\n        num <<=\
    \ 1;\n        num |= 1;\n    }\n    \n    while num < y {\n        num <<= 1;\n\
    \        num |= 1;\n    }\n    \n    num\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmphvsmek56.rs:11:10\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n10 |     if x > y {\n11\
    \ |         (x, y) = (y, x)\n   |          ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmphvsmek56.rs:11:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n10 |     if\
    \ x > y {\n11 |         (x, y) = (y, x)\n   |             ^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = 1;\n       \
    \ while z < y {\n            if x % z == 0 {\n                x /= z;\n      \
    \      } else {\n                y /= z;\n            }\n            z <<= 1;\n\
    \        }\n        x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp2c3tlm5k.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x = x;\n        let mut y = y;\n        let mut z =\
    \ 1;\n        while z < y {\n            if x % z == 0 {\n                x /=\
    \ z;\n            } else {\n                y /= z;\n            }\n         \
    \   z <<= 1;\n        }\n        if x == y {\n            x\n        } else {\n\
    \            -1\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmprpjnbr7o.rs:34:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if y >\
    \ x {\n        x\n    } else {\n        y + (x % y)\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpae8k1y2q.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut max_num = x;\n        let mut min_num = y;\n        while min_num\
    \ < max_num {\n            if max_num % 2 == 0 {\n                max_num += 1;\n\
    \            } else {\n                min_num += 1;\n            }\n        }\n\
    \        max_num\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpf5gh937b.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x: isize = x;\n    let mut y: isize\
    \ = y;\n    loop {\n        if x % 2 == 0 && y % 2 == 0 {\n            return\
    \ x;\n        }\n        if x % 2 == 0 {\n            x /= 2;\n        } else\
    \ {\n            y /= 2;\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut i = x;\n        let mut j = y;\n        let mut max_num = -1;\n\
    \        while i <= j {\n            if i % 2 == 0 {\n                i += 1;\n\
    \            } else {\n                j -= 1;\n            }\n            if\
    \ j == i {\n                max_num = i;\n            }\n        }\n        max_num\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpkq2vhp34.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        let mut z:\
    \ isize = x;\n        while z < y {\n            if z % 2 == 0 {\n           \
    \     z = z + 2;\n            } else {\n                z = z + 1;\n         \
    \   }\n        }\n        if z == y {\n            x\n        } else {\n     \
    \       -1\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpumcqpqhl.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        z\n    }\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmps5z2su2v.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut even: isize = 0;\n\
    \        let mut odd: isize = 0;\n        while x > y {\n            if x % 2\
    \ == 0 {\n                even += 1;\n                x /= 2;\n            } else\
    \ {\n                odd += 1;\n                y /= 2;\n            }\n     \
    \   }\n        if even > odd {\n            even\n        } else {\n         \
    \   odd\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpflwpejcv.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    while\
    \ x < y {\n        if x % 2 == 0 {\n            x = x + 1;\n        } else {\n\
    \            x = x - 1;\n        }\n    }\n    if x == y {\n        x\n    } else\
    \ {\n        -1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n  \
    \  assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        loop {\n            if x\
    \ % 2 == 0 {\n                x /= 2;\n            } else {\n                y\
    \ /= 2;\n            }\n            if x == y {\n                return x;\n \
    \           }\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpzhznj96d.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if x ==\
    \ y {\n        x\n    } else {\n        let mut x = x;\n        let mut y = y;\n\
    \        while x > y {\n            x = x - y;\n            y = y + x;\n     \
    \   }\n        x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpd9ly8mlx.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        let mut z:\
    \ isize = 0;\n        while z < x && z < y {\n            if x % z == 0 {\n  \
    \              z = z + 1;\n            } else {\n                z = z + 1;\n\
    \            }\n        }\n        if z == x {\n            return x;\n      \
    \  } else if z == y {\n            return y;\n        } else {\n            return\
    \ -1;\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpvmmbqwbu.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x > y {\n        \
    \    x = x - y;\n            y = y + x;\n        }\n        x\n    }\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpuz7dw6qc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x // 2\n        } else {\n    \
    \        choose_num(y - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x = x;\n        let mut y = y;\n        loop {\n   \
    \         if x % 2 == 0 {\n                x /= 2;\n            } else {\n   \
    \             y /= 2;\n            }\n            if x == y {\n              \
    \  return x;\n            }\n        }\n    }\n    -1\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpfwmcwgwp.rs:11:9\n   |\n\
    10 | /     if x < y {\n11 | |         choose_num(y, x)\n   | |         ^^^^^^^^^^^^^^^^\
    \ expected `()`, found `isize`\n12 | |     } else {\n13 | |         let mut x\
    \ = x;\n...  |\n24 | |         }\n25 | |     }\n   | |_____- expected this to\
    \ be `()`\n   |\nhelp: consider using a semicolon here\n   |\n11 |         choose_num(y,\
    \ x);\n   |                         +\nhelp: consider using a semicolon here\n\
    \   |\n25 |     };\n   |      +\nhelp: you might have meant to return this value\n\
    \   |\n11 |         return choose_num(y, x);\n   |         ++++++            \
    \     +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x\n        } else {\n         \
    \   choose_num(y - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    \n    let mut num: isize = 0;\n    \n    while num < x {\n        num <<=\
    \ 1;\n        num |= 1;\n    }\n    \n    while num < y {\n        num <<= 1;\n\
    \        num |= 1;\n    }\n    \n    num\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmphvsmek56.rs:11:10\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n10 |     if x > y {\n11\
    \ |         (x, y) = (y, x)\n   |          ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmphvsmek56.rs:11:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n10 |     if\
    \ x > y {\n11 |         (x, y) = (y, x)\n   |             ^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        if x % 2 == 0 {\n    \
    \        x\n        } else {\n            y\n        }\n    } else {\n       \
    \ if y % 2 == 0 {\n            y\n        } else {\n            x\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpx31vb94q.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpku2my1nx.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut max_num = x;\n        let mut min_num = y;\n        loop {\n   \
    \         if max_num % 2 == 0 {\n                max_num -= 1;\n            }\
    \ else {\n                max_num += 1;\n            }\n            if min_num\
    \ % 2 == 0 {\n                min_num -= 1;\n            } else {\n          \
    \      min_num += 1;\n            }\n            if max_num < min_num {\n    \
    \            return -1;\n            }\n        }\n    }\n}\n\nfn main() {\n \
    \   let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpa6ndoned.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut i = x;\n        let mut j = y;\n        let mut biggest = -1;\n\
    \        while i <= j {\n            if i % 2 == 0 {\n                if biggest\
    \ < i {\n                    biggest = i;\n                }\n               \
    \ i += 1;\n            } else {\n                if biggest < j {\n          \
    \          biggest = j;\n                }\n                j -= 1;\n        \
    \    }\n        }\n        biggest\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpqwqcmc6q.rs:35:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            if z % 2 == 0 {\n                z = z + 2;\n   \
    \         } else {\n                z = z + 1;\n            }\n        }\n   \
    \     x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpnbk8n19e.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = 1;\n       \
    \ while z < y {\n            let mut z = z * x + y;\n            y = z % y;\n\
    \        }\n        if z == y {\n            x\n        } else {\n           \
    \ -1\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n  \
    \  assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp49wvyjhw.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    let mut x: isize = 0;\n    let mut y: isize = 0;\n    let mut z: isize =\
    \ 0;\n    let mut even: isize = 0;\n    let mut odd: isize = 0;\n    let mut x:\
    \ isize = x;\n    let mut y: isize = y;\n    while x < y {\n        z = x % y;\n\
    \        if z == 0 {\n            even = x;\n            x += 1;\n        } else\
    \ {\n            odd = x;\n            x += 1;\n        }\n    }\n    if even\
    \ > 0 {\n        even\n    } else {\n        odd\n    }\n}\n\nfn main() {\n  \
    \  let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `x` is never read\n  --> /tmp/tmpeezgai4q.rs:11:10\n\
    \   |\n11 |         (x, y) = (y, x)\n   |          ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ value assigned to `y` is never read\n  --> /tmp/tmpeezgai4q.rs:11:13\n   |\n\
    11 |         (x, y) = (y, x)\n   |             ^\n   |\n   = help: maybe it is\
    \ overwritten before being read?\n\nwarning: value assigned to `z` is never read\n\
    \  --> /tmp/tmpeezgai4q.rs:15:13\n   |\n15 |     let mut z: isize = 0;\n   | \
    \            ^\n   |\n   = help: maybe it is overwritten before being read?\n\n\
    warning: variable does not need to be mutable\n  --> /tmp/tmpeezgai4q.rs:13:9\n\
    \   |\n13 |     let mut x: isize = 0;\n   |         ----^\n   |         |\n  \
    \ |         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on\
    \ by default\n\nwarning: variable does not need to be mutable\n  --> /tmp/tmpeezgai4q.rs:14:9\n\
    \   |\n14 |     let mut y: isize = 0;\n   |         ----^\n   |         |\n  \
    \ |         help: remove this `mut`\n\nwarning: variable does not need to be mutable\n\
    \  --> /tmp/tmpeezgai4q.rs:19:9\n   |\n19 |     let mut y: isize = y;\n   |  \
    \       ----^\n   |         |\n   |         help: remove this `mut`\n\nerror[E0384]:\
    \ cannot assign to immutable argument `x`\n  --> /tmp/tmpeezgai4q.rs:11:10\n \
    \  |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n10 |     if x > y {\n11\
    \ |         (x, y) = (y, x)\n   |          ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmpeezgai4q.rs:11:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n10 |     if\
    \ x > y {\n11 |         (x, y) = (y, x)\n   |             ^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors; 6 warnings emitted\n\n\
    For more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = 1;\n       \
    \ while z < y {\n            z = z * x + y;\n            y = z % y;\n        }\n\
    \        z\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp5gayu63v.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    if x <= y {\n        return -1\n    }\n    let mut x = x;\n    let mut y\
    \ = y;\n    let mut even: isize = 0;\n    while x <= y {\n        if x % 2 ==\
    \ 0 {\n            even += 1;\n        }\n        x += 1;\n    }\n    if even\
    \ > y {\n        even = -1\n    }\n    even\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpwnck9ta7.rs:17:9\n\
    \   |\n17 |     let mut y = y;\n   |         ----^\n   |         |\n   |     \
    \    help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpwnck9ta7.rs:11:10\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n10 |     if x > y {\n11\
    \ |         (x, y) = (y, x)\n   |          ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmpwnck9ta7.rs:11:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n10 |     if\
    \ x > y {\n11 |         (x, y) = (y, x)\n   |             ^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        loop {\n \
    \           if x % 2 == 0 {\n                x /= 2;\n                y += 1;\n\
    \            } else {\n                x /= 2;\n            }\n            if\
    \ y % 2 == 0 {\n                y /= 2;\n                x += 1;\n           \
    \ } else {\n                y /= 2;\n            }\n            if x == y {\n\
    \                return x;\n            }\n        }\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpejxgey2f.rs:37:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        (x, y)\n    } else {\n\
    \        (y, x)\n    }\n    .iter()\n    .fold(-1, |a, b| {\n        if a % 2\
    \ == 0 {\n            a\n        } else {\n            b\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for tuple `(isize, isize)` in\
    \ the current scope\n  --> /tmp/tmpnx28ws0o.rs:15:6\n   |\n15 |     .iter()\n\
    \   |      ^^^^ method not found in `(isize, isize)`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x > y {\n        \
    \    let mut tmp = x;\n            x = y;\n            y = tmp;\n        }\n \
    \       x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp1tocmkrr.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpku2my1nx.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x: isize = x;\n        let mut y: isize = y;\n     \
    \   loop {\n            if x % 2 == 0 {\n                x /= 2;\n           \
    \ } else {\n                y /= 2;\n            }\n            if x == y {\n\
    \                return x;\n            }\n        }\n    }\n    -1\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphaca4tpl.rs:11:9\n   |\n\
    10 | /     if x < y {\n11 | |         choose_num(y, x)\n   | |         ^^^^^^^^^^^^^^^^\
    \ expected `()`, found `isize`\n12 | |     } else {\n13 | |         let mut x:\
    \ isize = x;\n...  |\n24 | |         }\n25 | |     }\n   | |_____- expected this\
    \ to be `()`\n   |\nhelp: consider using a semicolon here\n   |\n11 |        \
    \ choose_num(y, x);\n   |                         +\nhelp: consider using a semicolon\
    \ here\n   |\n25 |     };\n   |      +\nhelp: you might have meant to return this\
    \ value\n   |\n11 |         return choose_num(y, x);\n   |         ++++++    \
    \             +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x = x;\n        let mut y = y;\n        let mut z: isize\
    \ = 0;\n        while z < x {\n            z = z + y;\n        }\n        z\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `24`,\n right: `14`', /tmp/tmpzb3vblkz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = 1;\n       \
    \ while z < y {\n            if x % z == 0 {\n                x /= z;\n      \
    \      } else {\n                y /= z;\n            }\n            z <<= 1;\n\
    \        }\n        x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp2c3tlm5k.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x: isize = x;\n    let mut y: isize\
    \ = y;\n    loop {\n        if x % 2 == 0 {\n            x = x / 2;\n        }\
    \ else {\n            x = x * 3 + 1;\n        }\n        if y % 2 == 0 {\n   \
    \         y = y / 2;\n        } else {\n            y = y * 3 + 1;\n        }\n\
    \        if x == y {\n            return x;\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x = x;\n        let mut y = y;\n        let mut z =\
    \ 1;\n        while z < y {\n            if x % z == 0 {\n                x /=\
    \ z;\n            } else {\n                y /= z;\n            }\n         \
    \   z <<= 1;\n        }\n        x\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmp_76_hio6.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x > y {\n        \
    \    if x % 2 == 0 {\n                x /= 2;\n            } else {\n        \
    \        y /= 2;\n            }\n        }\n        x\n    }\n}\n\nfn main() {\n\
    \    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n   \
    \ assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n\
    \    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6, 29),\
    \ 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7, 7),\
    \ -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpr00ae961.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpku2my1nx.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut i = x;\n        let mut j = y;\n        let mut even: isize = 0;\n\
    \        let mut odd: isize = 0;\n        while i <= j {\n            if i % 2\
    \ == 0 {\n                even += 1;\n            } else {\n                odd\
    \ += 1;\n            }\n            i += 1;\n            j += 1;\n        }\n\
    \        if even > odd {\n            even\n        } else {\n            odd\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp61zygzd2.rs:36:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = x;\n    let mut x = x;\n \
    \   let mut y = y;\n    while x >= y {\n        if x % 2 == 0 {\n            x\
    \ /= 2;\n        } else {\n            y /= 2;\n        }\n    }\n    while y\
    \ > 0 {\n        if y % 2 == 0 {\n            y /= 2;\n        } else {\n    \
    \        result = y;\n            break;\n        }\n    }\n    result\n}\n\n\
    fn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmphswi4aob.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x: isize = 0;\n        let mut y: isize = 0;\n     \
    \   let mut z: isize = 0;\n        let mut a: isize = 0;\n        let mut b: isize\
    \ = 0;\n        let mut c: isize = 0;\n        let mut d: isize = 0;\n       \
    \ let mut e: isize = 0;\n        let mut f: isize = 0;\n        let mut g: isize\
    \ = 0;\n        let mut h: isize = 0;\n        let mut i: isize = 0;\n       \
    \ let mut j: isize = 0;\n        let mut k: isize = 0;\n        let mut l: isize\
    \ = 0;\n        let mut m: isize = 0;\n        let mut n: isize = 0;\n       \
    \ let mut o: isize = 0;\n        let mut p: isize = 0;\n        let mut q: isize\
    \ = 0;\n        let mut r: isize = 0;\n        let mut s: isize = 0;\n       \
    \ let mut t: isize = 0;\n        let mut u: isize = 0;\n        let mut v: isize\
    \ = 0;\n        let mut w: isize = 0;\n        let mut x: isize = 0;\n       \
    \ let mut y: isize = 0;\n        let mut z: isize = 0;\n        let mut a: isize\
    \ = 0;\n        let mut b: isize = 0;\n        let mut c: isize = 0;\n       \
    \ let mut d: isize = 0;\n        let mut e: isize = 0;\n        let mut f: isize\
    \ = 0;\n        let mut g: isize = 0;\n        let mut h: isize = 0;\n       \
    \ let mut i: isize = 0;\n        let mut j: isize = 0;\n        let mut k: isize\
    \ = 0;\n        let mut l: isize = 0;\n        let mut m: isize = 0;\n       \
    \ let mut n: isize = 0;\n        let mut o: isize = 0;\n        let mut p: isize\
    \ = 0;\n        let mut q: isize = 0;\n        let mut r: isize = 0;\n       \
    \ let mut s: isize = 0;\n        let mut t: isize = 0;\n        let mut u: isize\
    \ = 0;\n        let mut v: isize = 0;\n        let mut w: isize = 0;\n       \
    \ let mut x: isize = 0;\n        let mut y: isize = 0;\n        let mut z: isize\
    \ = 0;\n        let mut a: isize = 0;\n        let mut b: isize = 0;\n       \
    \ let mut c: isize = 0;\n        let mut d: isize = 0;\n        let mut e: isize\
    \ = 0;\n        let mut \n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpcv8y0gyu.rs:86:3\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \                             - unclosed delimiter\n...\n12 |     } else {\n \
    \  |            - this delimiter might not be properly closed...\n...\n74 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n86 | }\n\
    \   |   ^\n\nerror: expected identifier, found `}`\n  --> /tmp/tmpcv8y0gyu.rs:74:1\n\
    \   |\n74 | }\n   | ^ expected identifier\n\nerror[E0308]: mismatched types\n\
    \  --> /tmp/tmpcv8y0gyu.rs:11:9\n   |\n10 | /     if x < y {\n11 | |         choose_num(y,\
    \ x)\n   | |         ^^^^^^^^^^^^^^^^ expected `()`, found `isize`\n12 | |   \
    \  } else {\n13 | |         let mut x: isize = 0;\n...  |\n73 | |         let\
    \ mut \n74 | | }\n   | |_- expected this to be `()`\n   |\nhelp: consider using\
    \ a semicolon here\n   |\n11 |         choose_num(y, x);\n   |               \
    \          +\nhelp: consider using a semicolon here\n   |\n74 | };\n   |  +\n\
    help: you might have meant to return this value\n   |\n11 |         return choose_num(y,\
    \ x);\n   |         ++++++                 +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpcv8y0gyu.rs:9:38\n  |\n9 | fn choose_num(x: isize, y: isize) ->\
    \ isize {\n  |    ----------                        ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2;\n        }\n        if z == y {\n    \
    \        x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpdiddkuvo.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpku2my1nx.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x = x;\n        let mut y = y;\n        loop {\n   \
    \         if x % 2 == 0 {\n                x /= 2;\n                y += 1;\n\
    \            } else {\n                x /= 2;\n                x -= 1;\n    \
    \        }\n            if y >= x {\n                return x;\n            }\n\
    \        }\n    }\n    -1\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpu9oa835u.rs:11:9\n   |\n\
    10 | /     if x < y {\n11 | |         choose_num(y, x)\n   | |         ^^^^^^^^^^^^^^^^\
    \ expected `()`, found `isize`\n12 | |     } else {\n13 | |         let mut x\
    \ = x;\n...  |\n26 | |         }\n27 | |     }\n   | |_____- expected this to\
    \ be `()`\n   |\nhelp: consider using a semicolon here\n   |\n11 |         choose_num(y,\
    \ x);\n   |                         +\nhelp: consider using a semicolon here\n\
    \   |\n27 |     };\n   |      +\nhelp: you might have meant to return this value\n\
    \   |\n11 |         return choose_num(y, x);\n   |         ++++++            \
    \     +\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x\n        } else {\n         \
    \   choose_num(y - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x\n        } else {\n         \
    \   choose_num(y - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x > y {\n        \
    \    x -= y;\n            y *= 2;\n        }\n        x\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp2andyhaa.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut max_num = x;\n        let mut min_num = y;\n        while max_num\
    \ < min_num {\n            max_num += 2;\n            min_num -= 2;\n        }\n\
    \        max_num\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpz8uzkgd3.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x > y {\n        \
    \    x -= y;\n            y *= 2;\n        }\n        x\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp2andyhaa.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        if x % 2 == 0 {\n    \
    \        x\n        } else {\n            y\n        }\n    } else {\n       \
    \ if y % 2 == 0 {\n            y\n        } else {\n            x\n        }\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpx31vb94q.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    if x == y {\n        x\n    } else {\n        let mut x = x;\n        let\
    \ mut y = y;\n        while x > y {\n            x = x + y;\n            y = x\
    \ % y;\n        }\n        x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpjea03x0l.rs:11:10\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n10 |     if x > y {\n11\
    \ |         (x, y) = (y, x)\n   |          ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmpjea03x0l.rs:11:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n10 |     if\
    \ x > y {\n11 |         (x, y) = (y, x)\n   |             ^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2;\n        }\n        if z == y {\n    \
    \        x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpdiddkuvo.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x // 2\n        } else {\n    \
    \        choose_num(y - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    \n    let mut x = x;\n    let mut y = y;\n    \n    while x >= y {\n    \
    \    if x % 2 == 0 {\n            x = x / 2;\n        } else {\n            x\
    \ = x * 3 + 1;\n        }\n    }\n    \n    while y >= x {\n        if y % 2 ==\
    \ 0 {\n            y = y / 2;\n        } else {\n            y = y * 3 + 1;\n\
    \        }\n    }\n    \n    x\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmptex9k4wp.rs:11:10\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n10 |     if x > y {\n11\
    \ |         (x, y) = (y, x)\n   |          ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmptex9k4wp.rs:11:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n10 |     if\
    \ x > y {\n11 |         (x, y) = (y, x)\n   |             ^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z: isize = 0;\n\
    \        while x <= y {\n            z = z * x + y;\n            if z % 2 == 0\
    \ {\n                return z;\n            }\n            x += 1\n        }\n\
    \        -1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp9dhmfhcq.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x > y {\n        \
    \    x = x - y;\n            y = y + x;\n        }\n        x\n    }\n}\n\nfn\
    \ main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpuz7dw6qc.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        let mut z:\
    \ isize = 0;\n        while z < x {\n            if x % z == 0 {\n           \
    \     z = z + 1;\n            } else {\n                z = z + y;\n         \
    \   }\n        }\n        x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpajtivskj.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = 0;\n       \
    \ while z < y {\n            if x % 2 == 0 {\n                x /= 2;\n      \
    \      } else {\n                y /= 2;\n            }\n            z += 1\n\
    \        }\n        x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp3yey8xaj.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x = x;\n        let mut y = y;\n        let mut z =\
    \ x;\n        while z < y {\n            z = z * 2 + 1;\n        }\n        if\
    \ z == y {\n            x\n        } else {\n            -1\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpz5fpif16.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y)\n    } else {\n\
    \        (y, x)\n    }\n    .iter()\n    .fold(-1, |a, b| {\n        if a % 2\
    \ == 0 {\n            a\n        } else {\n            b\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for tuple `(isize, isize)` in\
    \ the current scope\n  --> /tmp/tmp3xlqasbt.rs:15:6\n   |\n15 |     .iter()\n\
    \   |      ^^^^ method not found in `(isize, isize)`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        (x, y)\n    } else {\n\
    \        (y, x)\n    }\n    .iter()\n    .fold(-1, |a, b| {\n        if a % 2\
    \ == 0 {\n            a\n        } else {\n            b\n        }\n    })\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for tuple `(isize, isize)` in\
    \ the current scope\n  --> /tmp/tmpnx28ws0o.rs:15:6\n   |\n15 |     .iter()\n\
    \   |      ^^^^ method not found in `(isize, isize)`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x: isize = x;\n    let mut y: isize\
    \ = y;\n    while x > y {\n        if x % 2 == 0 {\n            x = x / 2;\n \
    \       } else {\n            y = y / 2;\n        }\n    }\n    if x == y {\n\
    \        x\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmprx8ghpy3.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            if z % 2 == 0 {\n                z = z + 2;\n   \
    \         } else {\n                z = z + 1;\n            }\n        }\n   \
    \     x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpnbk8n19e.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z: isize = 0;\n\
    \        while x <= y {\n            z = z * x + y;\n            if z % 2 == 0\
    \ {\n                return z;\n            }\n            x += 1;\n         \
    \   y += 1;\n        }\n        -1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpscd3grup.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x\n        } else {\n         \
    \   choose_num(x / 2, y)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpix8p2i3y.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        (x, y)\n    } else {\n\
    \        (y, x)\n    }\n    .iter()\n    .find(|&x| x % 2 == 0)\n    .unwrap_or(-1)\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `iter` found for tuple `(isize, isize)` in\
    \ the current scope\n  --> /tmp/tmpt51b5mc2.rs:15:6\n   |\n15 |     .iter()\n\
    \   |      ^^^^ method not found in `(isize, isize)`\n\nerror: aborting due to\
    \ previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0599`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x: isize = x;\n        let mut y: isize = y;\n     \
    \   loop {\n            if x % 2 == 0 {\n                x /= 2;\n           \
    \ } else {\n                y /= 2;\n            }\n            if x == y {\n\
    \                return x;\n            }\n        }\n    }\n    -1\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmphaca4tpl.rs:11:9\n   |\n\
    10 | /     if x < y {\n11 | |         choose_num(y, x)\n   | |         ^^^^^^^^^^^^^^^^\
    \ expected `()`, found `isize`\n12 | |     } else {\n13 | |         let mut x:\
    \ isize = x;\n...  |\n24 | |         }\n25 | |     }\n   | |_____- expected this\
    \ to be `()`\n   |\nhelp: consider using a semicolon here\n   |\n11 |        \
    \ choose_num(y, x);\n   |                         +\nhelp: consider using a semicolon\
    \ here\n   |\n25 |     };\n   |      +\nhelp: you might have meant to return this\
    \ value\n   |\n11 |         return choose_num(y, x);\n   |         ++++++    \
    \             +\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    let mut x: isize = 1;\n    let mut y: isize = 1;\n    while x <= y {\n  \
    \      if x % 2 == 0 {\n            x = x + 1;\n        } else {\n           \
    \ y = y + 1;\n        }\n    }\n    if x == y {\n        x\n    } else {\n   \
    \     -1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `x` is never read\n  --> /tmp/tmpc8j8h9pu.rs:11:10\n\
    \   |\n11 |         (x, y) = (y, x)\n   |          ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ value assigned to `y` is never read\n  --> /tmp/tmpc8j8h9pu.rs:11:13\n   |\n\
    11 |         (x, y) = (y, x)\n   |             ^\n   |\n   = help: maybe it is\
    \ overwritten before being read?\n\nerror[E0384]: cannot assign to immutable argument\
    \ `x`\n  --> /tmp/tmpc8j8h9pu.rs:11:10\n   |\n9  | fn choose_num(x: isize, y:\
    \ isize) -> isize {\n   |               - help: consider making this binding mutable:\
    \ `mut x`\n10 |     if x > y {\n11 |         (x, y) = (y, x)\n   |          ^\
    \ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to immutable\
    \ argument `y`\n  --> /tmp/tmpc8j8h9pu.rs:11:13\n   |\n9  | fn choose_num(x: isize,\
    \ y: isize) -> isize {\n   |                         - help: consider making this\
    \ binding mutable: `mut y`\n10 |     if x > y {\n11 |         (x, y) = (y, x)\n\
    \   |             ^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to 2 previous errors; 2 warnings emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        let mut z:\
    \ isize = 0;\n        while z < x {\n            if x % z == 0 {\n           \
    \     z += y;\n            }\n            x /= z;\n        }\n        z\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp_2jaqa8m.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x: isize = x;\n        let mut y: isize = y;\n     \
    \   while x > y {\n            x -= y;\n            y *= 2;\n        }\n     \
    \   x\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `3`,\n right: `14`', /tmp/tmpkd3p549g.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        let mut z:\
    \ isize = 0;\n        while z < x {\n            x -= y;\n            y *= 2;\n\
    \            z += y;\n        }\n        if z == x {\n            x\n        }\
    \ else {\n            -1\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpf6g8sr67.rs:31:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            z\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpk70szbnj.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    \n    let mut x: isize = 0;\n    let mut y: isize = 0;\n    \n    while x\
    \ < y {\n        let mut z = x + y;\n        if z % 2 == 0 {\n            x =\
    \ z;\n        } else {\n            y = z;\n        }\n    }\n    \n    if x ==\
    \ y {\n        x\n    } else {\n        -1\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `x` is never read\n  --> /tmp/tmpkivnv3xm.rs:11:10\n\
    \   |\n11 |         (x, y) = (y, x)\n   |          ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ value assigned to `y` is never read\n  --> /tmp/tmpkivnv3xm.rs:11:13\n   |\n\
    11 |         (x, y) = (y, x)\n   |             ^\n   |\n   = help: maybe it is\
    \ overwritten before being read?\n\nwarning: variable does not need to be mutable\n\
    \  --> /tmp/tmpkivnv3xm.rs:18:13\n   |\n18 |         let mut z = x + y;\n   |\
    \             ----^\n   |             |\n   |             help: remove this `mut`\n\
    \   |\n   = note: `#[warn(unused_mut)]` on by default\n\nerror[E0384]: cannot\
    \ assign to immutable argument `x`\n  --> /tmp/tmpkivnv3xm.rs:11:10\n   |\n9 \
    \ | fn choose_num(x: isize, y: isize) -> isize {\n   |               - help: consider\
    \ making this binding mutable: `mut x`\n10 |     if x > y {\n11 |         (x,\
    \ y) = (y, x)\n   |          ^ cannot assign to immutable argument\n\nerror[E0384]:\
    \ cannot assign to immutable argument `y`\n  --> /tmp/tmpkivnv3xm.rs:11:13\n \
    \  |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |                \
    \         - help: consider making this binding mutable: `mut y`\n10 |     if x\
    \ > y {\n11 |         (x, y) = (y, x)\n   |             ^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors; 3 warnings emitted\n\n\
    For more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z: isize = 0;\n\
    \        while z < x {\n            z = z * 2 + y;\n        }\n        z\n   \
    \ }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpn0rmrdhi.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2;\n        }\n        if z == y {\n    \
    \        x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpdiddkuvo.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x = x;\n        let mut y = y;\n        let mut z =\
    \ 1;\n        while z < y {\n            if x % z == 0 {\n                x /=\
    \ z;\n            } else {\n                y /= z;\n            }\n         \
    \   z <<= 1;\n        }\n        x\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `15`,\n right: `14`', /tmp/tmp_76_hio6.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    let mut x = x;\n    let mut y = y;\n    while x < y {\n        let mut z\
    \ = x;\n        while z < y {\n            if z % 2 == 0 {\n                return\
    \ z;\n            }\n            z += 1\n        }\n        x += 1\n    }\n  \
    \  -1\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpujsymsxc.rs:14:9\n\
    \   |\n14 |     let mut y = y;\n   |         ----^\n   |         |\n   |     \
    \    help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by default\n\
    \nerror[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpujsymsxc.rs:11:10\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n10 |     if x > y {\n11\
    \ |         (x, y) = (y, x)\n   |          ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmpujsymsxc.rs:11:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n10 |     if\
    \ x > y {\n11 |         (x, y) = (y, x)\n   |             ^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors; 1 warning emitted\n\n\
    For more information about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        while x >\
    \ y {\n            x = x + 1;\n            y = y + 1;\n        }\n        x\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpcdfsz9ts.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x\n        } else {\n         \
    \   choose_num(y - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    let mut x = x;\n    let mut y = y;\n    while x < y {\n        if x % 2 ==\
    \ 0 {\n            x = x + 1;\n        } else {\n            y = y - 1;\n    \
    \    }\n    }\n    if x == y {\n        x\n    } else {\n        -1\n    }\n}\n\
    \nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15),\
    \ 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmpwy8pne46.rs:11:10\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n10 |     if x > y {\n11\
    \ |         (x, y) = (y, x)\n   |          ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmpwy8pne46.rs:11:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n10 |     if\
    \ x > y {\n11 |         (x, y) = (y, x)\n   |             ^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            z\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpk70szbnj.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut x = x;\n    let mut y = y;\n    loop\
    \ {\n        if x % 2 == 0 && y % 2 == 0 {\n            return x;\n        }\n\
    \        if x % 2 == 0 {\n            x /= 2;\n        } else {\n            y\
    \ /= 2;\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    let mut x: isize = 0;\n    let mut y: isize = 0;\n    while x < y {\n   \
    \     if x % 2 == 0 {\n            x += 1;\n        } else {\n            y +=\
    \ 1;\n        }\n    }\n    if x == y {\n        x\n    } else {\n        -1\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "warning: value assigned to `x` is never read\n  --> /tmp/tmp9166rqz0.rs:11:10\n\
    \   |\n11 |         (x, y) = (y, x)\n   |          ^\n   |\n   = note: `#[warn(unused_assignments)]`\
    \ on by default\n   = help: maybe it is overwritten before being read?\n\nwarning:\
    \ value assigned to `y` is never read\n  --> /tmp/tmp9166rqz0.rs:11:13\n   |\n\
    11 |         (x, y) = (y, x)\n   |             ^\n   |\n   = help: maybe it is\
    \ overwritten before being read?\n\nerror[E0384]: cannot assign to immutable argument\
    \ `x`\n  --> /tmp/tmp9166rqz0.rs:11:10\n   |\n9  | fn choose_num(x: isize, y:\
    \ isize) -> isize {\n   |               - help: consider making this binding mutable:\
    \ `mut x`\n10 |     if x > y {\n11 |         (x, y) = (y, x)\n   |          ^\
    \ cannot assign to immutable argument\n\nerror[E0384]: cannot assign to immutable\
    \ argument `y`\n  --> /tmp/tmp9166rqz0.rs:11:13\n   |\n9  | fn choose_num(x: isize,\
    \ y: isize) -> isize {\n   |                         - help: consider making this\
    \ binding mutable: `mut y`\n10 |     if x > y {\n11 |         (x, y) = (y, x)\n\
    \   |             ^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to 2 previous errors; 2 warnings emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        while x >\
    \ y {\n            x -= y;\n            y *= 2;\n        }\n        x\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpzf6e8nmz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x\n        } else {\n         \
    \   choose_num(x / 2, y)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpix8p2i3y.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        let mut z:\
    \ isize = 0;\n        while z < x || z < y {\n            if z % 2 == 0 {\n  \
    \              z += 1;\n            } else {\n                z += 2;\n      \
    \      }\n        }\n        z\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp_nvpitra.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        while x > y {\n        \
    \    x -= y;\n            y *= 2;\n        }\n        x\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp2andyhaa.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut i = x;\n        let mut j = y;\n        while i <= j {\n       \
    \     if i % 2 == 0 {\n                i += 1;\n            } else {\n       \
    \         j -= 1;\n            }\n        }\n        i\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpxt0ipult.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x: isize = 0;\n        let mut y: isize = 0;\n     \
    \   let mut z: isize = 0;\n        let mut w: isize = 0;\n        let mut v: isize\
    \ = 0;\n        let mut u: isize = 0;\n        let mut t: isize = 0;\n       \
    \ let mut f: isize = 0;\n        let mut g: isize = 0;\n        let mut b: isize\
    \ = 0;\n        let mut c: isize = 0;\n        let mut d: isize = 0;\n       \
    \ let mut e: isize = 0;\n        let mut f: isize = 0;\n        let mut g: isize\
    \ = 0;\n        let mut h: isize = 0;\n        let mut i: isize = 0;\n       \
    \ let mut j: isize = 0;\n        let mut k: isize = 0;\n        let mut l: isize\
    \ = 0;\n        let mut m: isize = 0;\n        let mut n: isize = 0;\n       \
    \ let mut o: isize = 0;\n        let mut p: isize = 0;\n        let mut q: isize\
    \ = 0;\n        let mut r: isize = 0;\n        let mut s: isize = 0;\n       \
    \ let mut t: isize = 0;\n        let mut u: isize = 0;\n        let mut v: isize\
    \ = 0;\n        let mut w: isize = 0;\n        let mut x: isize = 0;\n       \
    \ let mut y: isize = 0;\n        let mut z: isize = 0;\n        let mut a: isize\
    \ = 0;\n        let mut b: isize = 0;\n        let mut c: isize = 0;\n       \
    \ let mut d: isize = 0;\n        let mut e: isize = 0;\n        let mut f: isize\
    \ = 0;\n        let mut g: isize = 0;\n        let mut h: isize = 0;\n       \
    \ let mut i: isize = 0;\n        let mut j: isize = 0;\n        let mut k: isize\
    \ = 0;\n        let mut l: isize = 0;\n        let mut m: isize = 0;\n       \
    \ let mut n: isize = 0;\n        let mut o: isize = 0;\n        let mut p: isize\
    \ = 0;\n        let mut q: isize = 0;\n        let mut r: isize = 0;\n       \
    \ let mut s: isize = 0;\n        let mut t: isize = 0;\n        let mut u: isize\
    \ = 0;\n        let mut v: isize = 0;\n        let mut w: isize = 0;\n       \
    \ let mut x: isize = 0;\n        let mut y: isize = 0;\n        let mut z: isize\
    \ = 0;\n        let \n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpk556kfz7.rs:86:3\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \                             - unclosed delimiter\n...\n12 |     } else {\n \
    \  |            - this delimiter might not be properly closed...\n...\n74 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n86 | }\n\
    \   |   ^\n\nerror: expected pattern, found `}`\n  --> /tmp/tmpk556kfz7.rs:74:1\n\
    \   |\n74 | }\n   | ^ expected pattern\n\nerror[E0308]: mismatched types\n  -->\
    \ /tmp/tmpk556kfz7.rs:11:9\n   |\n10 | /     if x < y {\n11 | |         choose_num(y,\
    \ x)\n   | |         ^^^^^^^^^^^^^^^^ expected `()`, found `isize`\n12 | |   \
    \  } else {\n13 | |         let mut x: isize = 0;\n...  |\n73 | |         let\
    \ \n74 | | }\n   | |_- expected this to be `()`\n   |\nhelp: consider using a\
    \ semicolon here\n   |\n11 |         choose_num(y, x);\n   |                 \
    \        +\nhelp: consider using a semicolon here\n   |\n74 | };\n   |  +\nhelp:\
    \ you might have meant to return this value\n   |\n11 |         return choose_num(y,\
    \ x);\n   |         ++++++                 +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmpk556kfz7.rs:9:38\n  |\n9 | fn choose_num(x: isize, y: isize) ->\
    \ isize {\n  |    ----------                        ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut max_num = x;\n        let mut min_num = y;\n        while max_num\
    \ < min_num {\n            max_num += 2;\n            min_num -= 2;\n        }\n\
    \        max_num\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n \
    \   assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpz8uzkgd3.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        while x >\
    \ y {\n            x = x + y;\n            y = x % y;\n        }\n        x\n\
    \    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpmwayt21t.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut num: isize = 0;\n        let mut max_num: isize = 0;\n        let\
    \ mut max_num_x: isize = 0;\n        let mut max_num_y: isize = 0;\n        let\
    \ mut max_num_x_y: isize = 0;\n        let mut max_num_x_y_num: isize = 0;\n \
    \       let mut max_num_x_y_num_x: isize = 0;\n        let mut max_num_x_y_num_y:\
    \ isize = 0;\n        let mut max_num_x_y_num_x_y: isize = 0;\n        let mut\
    \ max_num_x_y_num_x_y_num: isize = 0;\n        let mut max_num_x_y_num_x_y_num_x:\
    \ isize = 0;\n        let mut max_num_x_y_num_x_y_num_y: isize = 0;\n        let\
    \ mut max_num_x_y_num_x_y_num_x_y: isize = 0;\n        let mut max_num_x_y_num_x_y_num_x_y_num:\
    \ isize = 0;\n        let mut max_num_x_y_num_x_y_num_x_y_num_x: isize = 0;\n\
    \        let mut max_num_x_y_num_x_y_num_x_y_num_y: isize = 0;\n        let mut\
    \ max_num_x_y_num_x_y_num_x_y_num_x_y: isize = 0;\n        let mut max_num_x_y_num_x_y_num_x_y_num_x_y_num:\
    \ isize = 0;\n        let mut max_num_x_y_num_x_y_num_x_y_num_x_y_num_x: isize\
    \ = 0;\n        let mut max_num_x_y_num_x_y_num_x_y_num_x_y_num_y: isize = 0;\n\
    \        let mut max_num_x_y_num_x_y_num_x_y_num_x_y_num_x_y: isize = 0;\n   \
    \     let mut max_num_x_y_num_x_y_num_x_y_num_x_y_num_x_y_num: isize = 0;\n  \
    \      let mut max_num_x_y_num_x_y_num_x_y_num_x_y_num_x_y_num_x: isize = 0;\n\
    \        let mut max_num_x_y_num_x_y_num_x_y_num_x_y_num_x_y_num_y: isize = 0;\n\
    \        let mut max_num_x_y_num_x_y_num_x_y_num_x_y_num_x_y_num_x_y: isize =\
    \ 0;\n        let mut max_num_x_y_num_x_y_num_x_y_num_x_y_num_x_y_num_x_y_num:\
    \ isize = 0;\n        let mut max_num_x_y_num_x_y_num_x_y_num_x_y_num_x_y_num_x_y_num_x:\
    \ isize = 0;\n        let mut max_num_x_y_num_x_y_num_\n}\n\nfn main() {\n   \
    \ let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmp0kix0i0b.rs:53:3\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \                             - unclosed delimiter\n...\n12 |     } else {\n \
    \  |            - this delimiter might not be properly closed...\n...\n41 | }\n\
    \   | - ...as it matches this but it has different indentation\n...\n53 | }\n\
    \   |   ^\n\nerror: expected `;`, found `}`\n  --> /tmp/tmp0kix0i0b.rs:40:41\n\
    \   |\n40 |         let mut max_num_x_y_num_x_y_num_\n   |                   \
    \                      ^ help: add `;` here\n41 | }\n   | - unexpected token\n\
    \nerror[E0308]: mismatched types\n  --> /tmp/tmp0kix0i0b.rs:11:9\n   |\n10 | /\
    \     if x <= y {\n11 | |         -1\n   | |         ^^ expected `()`, found integer\n\
    12 | |     } else {\n13 | |         let mut num: isize = 0;\n...  |\n40 | |  \
    \       let mut max_num_x_y_num_x_y_num_\n41 | | }\n   | |_- expected this to\
    \ be `()`\n   |\nhelp: you might have meant to return this value\n   |\n11 | \
    \        return -1;\n   |         ++++++   +\n\nerror[E0308]: mismatched types\n\
    \ --> /tmp/tmp0kix0i0b.rs:9:38\n  |\n9 | fn choose_num(x: isize, y: isize) ->\
    \ isize {\n  |    ----------                        ^^^^^ expected `isize`, found\
    \ `()`\n  |    |\n  |    implicitly returns `()` as its body has no tail or `return`\
    \ expression\n\nerror: aborting due to 4 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            z\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpk70szbnj.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut even = x;\n    let mut odd = y;\n \
    \   loop {\n        if even % 2 == 0 {\n            even /= 2;\n        } else\
    \ {\n            odd *= 2;\n        }\n        if even >= y {\n            return\
    \ even;\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''attempt to multiply with overflow'', /tmp/tmpd058jxl3.rs:16:13

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else if x ==\
    \ y {\n        x\n    } else {\n        x + 1\n    }\n}\n\nfn main() {\n    let\
    \ candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpees5tx79.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        while x >\
    \ y {\n            x -= y;\n            y *= 2;\n        }\n        x\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpzf6e8nmz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        if y % 2 == 0 {\n    \
    \        return y\n        } else {\n            return -1\n        }\n    } else\
    \ {\n        if x % 2 == 0 {\n            return x\n        } else {\n       \
    \     return -1\n        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpxw_7i530.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        while x >\
    \ y {\n            x -= y;\n            y *= 2;\n        }\n        x\n    }\n\
    }\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpzf6e8nmz.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2;\n        }\n        if z == y {\n    \
    \        x\n        } else {\n            -1\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpdiddkuvo.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = x;\n    let mut remainder\
    \ = y;\n    while remainder > 0 {\n        if remainder % 2 == 0 {\n         \
    \   result = result + 1;\n        }\n        remainder = remainder / 2;\n    }\n\
    \    result\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpqd1bhs6b.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    let mut result = x;\n    let mut remainder\
    \ = y;\n    while remainder > 0 {\n        if remainder & 1 == 0 {\n         \
    \   result = result + 1;\n        }\n        remainder = remainder >> 1;\n   \
    \ }\n    result\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `12`,\n right: `14`', /tmp/tmpcogqax8_.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x > y {\n        (x, y) = (y, x)\n    }\n\
    \    if x <= 0 {\n        return -1\n    }\n    let mut even = x;\n    let mut\
    \ odd = y;\n    while even > 0 && odd > 0 {\n        if even % 2 == 0 {\n    \
    \        even /= 2;\n        } else {\n            odd /= 2;\n        }\n    }\n\
    \    if even > 0 {\n        even\n    } else {\n        odd\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `x`\n  --> /tmp/tmp88v9w2qx.rs:11:10\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               -\
    \ help: consider making this binding mutable: `mut x`\n10 |     if x > y {\n11\
    \ |         (x, y) = (y, x)\n   |          ^ cannot assign to immutable argument\n\
    \nerror[E0384]: cannot assign to immutable argument `y`\n  --> /tmp/tmp88v9w2qx.rs:11:13\n\
    \   |\n9  | fn choose_num(x: isize, y: isize) -> isize {\n   |               \
    \          - help: consider making this binding mutable: `mut y`\n10 |     if\
    \ x > y {\n11 |         (x, y) = (y, x)\n   |             ^ cannot assign to immutable\
    \ argument\n\nerror: aborting due to 2 previous errors\n\nFor more information\
    \ about this error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        let mut x = x;\n        let mut y = y;\n        let mut z =\
    \ x;\n        while z < y {\n            if z % 2 == 0 {\n                z =\
    \ z + 2;\n            } else {\n                z = z + 1;\n            }\n  \
    \      }\n        if z == y {\n            x\n        } else {\n            -1\n\
    \        }\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n    assert_eq!(candidate(12,\
    \ 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33,\
    \ 12354), 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmp0x5td3r_.rs:33:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x = x;\n        let mut y = y;\n        let mut z = x;\n       \
    \ while z < y {\n            z = z * 2 + 1;\n        }\n        if z == y {\n\
    \            x\n        } else {\n            z\n        }\n    }\n}\n\nfn main()\
    \ {\n    let candidate = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n\
    \    assert_eq!(candidate(13, 12), -1);\n    assert_eq!(candidate(33, 12354),\
    \ 12354);\n    assert_eq!(candidate(5234, 5233), -1);\n    assert_eq!(candidate(6,\
    \ 29), 28);\n    assert_eq!(candidate(27, 10), -1);\n    assert_eq!(candidate(7,\
    \ 7), -1);\n    assert_eq!(candidate(546, 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmpk70szbnj.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: 101
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x <= y {\n        -1\n    } else {\n   \
    \     let mut x: isize = x;\n        let mut y: isize = y;\n        let mut z:\
    \ isize = 0;\n        while z < x && z < y {\n            if x % z == 0 && y %\
    \ z == 0 {\n                return z;\n            }\n            z += 1\n   \
    \     }\n        -1\n    }\n}\n\nfn main() {\n    let candidate = choose_num;\n\
    \    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13, 12), -1);\n\
    \    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `-1`,\n right: `14`', /tmp/tmph53nj36a.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660010238
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        if x % 2 == 0 {\n            x\n        } else {\n         \
    \   choose_num(y - 1, x)\n        }\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
- exit_code: -1
  program: "/// This function takes two positive numbers x and y and returns the\n\
    /// biggest even integer number that is in the range [x, y] inclusive. If \n///\
    \ there's no such number, then the function should return -1.\n/// For example:\n\
    /// >>> choose_num(12, 15)\n/// 14\n/// >>> choose_num(13, 12)\n/// -1\nfn choose_num(x:\
    \ isize, y: isize) -> isize {\n    if x < y {\n        choose_num(y, x)\n    }\
    \ else {\n        choose_num(x, y)\n    }\n}\n\nfn main() {\n    let candidate\
    \ = choose_num;\n    assert_eq!(candidate(12, 15), 14);\n    assert_eq!(candidate(13,\
    \ 12), -1);\n    assert_eq!(candidate(33, 12354), 12354);\n    assert_eq!(candidate(5234,\
    \ 5233), -1);\n    assert_eq!(candidate(6, 29), 28);\n    assert_eq!(candidate(27,\
    \ 10), -1);\n    assert_eq!(candidate(7, 7), -1);\n    assert_eq!(candidate(546,\
    \ 546), 546);\n}\n"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660010243
