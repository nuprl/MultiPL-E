language: rs
name: HumanEval_83_starts_one_ends
results:
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 1 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    let mut i = 1;\n    while i <= n {\n        if i / 10 == 1 {\n          \
    \  i += 1;\n            count += 1;\n        } else {\n            i += 1;\n \
    \       }\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp9i825yds.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        count += n /\
    \ 10;\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmps0_dkgz_.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n   \
    \ let mut count = 0;\n    while n > 0 {\n        count += n / 10;\n        n /=\
    \ 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpjpv8jncz.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends: n must be positive\"\
    );\n    }\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 == 1 {\n\
    \            count += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp9qvzu_5d.rs:12:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n12 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n\n \
    \   let mut count = 0;\n    let mut i = 1;\n    while i <= n {\n        if i %\
    \ 10 == 1 {\n            i += 1;\n            count += 1;\n        }\n       \
    \ i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''assertion failed: n % 10 == 1'', /tmp/tmprtzz9i5e.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpggl6ru_0.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ / 10),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpjc18g9fi.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n   \
    \ let mut n = 0;\n    while n > 0 {\n        n /= 10;\n        n += n % 10 ==\
    \ 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n \
    \   assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmpbwt8hfc9.rs:9:11\n\
    \  |\n9 |         n += n % 10 == 1;\n  |           ^^ no implementation for `{integer}\
    \ += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n    let\
    \ mut count = 0;\n    let mut i = 1;\n    while i <= n {\n        if i / 10 ==\
    \ 1 {\n            i += 1;\n        } else {\n            i += 2;\n        }\n\
    \        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpb4c1ah2k.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => if n % 10 == 1 {\n\
    \            1\n        } else {\n            1 + starts_one_ends(n / 10)\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpp8ouxsmf.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        1 => 1,\n        _ => n,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpcucfjsf1.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n   \
    \ let mut n = 0;\n    while n > 0 {\n        n /= 10;\n        n += n % 2 == 1;\n\
    \    }\n    n\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmpm6fgaohq.rs:9:11\n\
    \  |\n9 |         n += n % 2 == 1;\n  |           ^^ no implementation for `{integer}\
    \ += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n      \
    \  n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp_x__ftd9.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => n,\n\
    \    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpkhap7q87.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 0);\n   \
    \ let mut count = 0;\n    while n > 0 {\n        n /= 10;\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpjzhdgqab.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends called with negative\
    \ n\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n \
    \       return 1;\n    }\n    if n == 2 {\n        return 2;\n    }\n    if n\
    \ == 3 {\n        return 3;\n    }\n    if n == 4 {\n        return 4;\n    }\n\
    \    if n == 5 {\n        return 5;\n    }\n    if n == 6 {\n        return 6;\n\
    \    }\n    if n == 7 {\n        return 7;\n    }\n    if n == 8 {\n        return\
    \ 8;\n    }\n    if n == 9 {\n        return 9;\n    }\n    if n == 10 {\n   \
    \     return 10;\n    }\n    if n == 11 {\n        return 11;\n    }\n    if n\
    \ == 12 {\n        return 12;\n    }\n    if n == 13 {\n        return 13;\n \
    \   }\n    if n == 14 {\n        return 14;\n    }\n    if n == 15 {\n       \
    \ return 15;\n    }\n    if n == 16 {\n        return 16;\n    }\n    if n ==\
    \ 17 {\n        return 17;\n    }\n    if n == 18 {\n        return 18;\n    }\n\
    \    if n == 19 {\n        return 19;\n    }\n    if n == 20 {\n        return\
    \ 20;\n    }\n    if n == 21 {\n        return 21;\n    }\n    if n == 22 {\n\
    \        return 22;\n    }\n    if n == 23 {\n        return 23;\n    }\n    if\
    \ n == 24 {\n        return 24;\n    }\n    if n == 25 {\n        return 25;\n\
    \    }\n    if n == 26 {\n        return 26;\n    }\n    if n == 27 {\n      \
    \  return 27;\n    }\n    if n == 28 {\n        return 28;\n    }\n    if n ==\
    \ 29 {\n        return 29;\n    }\n    if n == 30 {\n        return 30;\n    }\n\
    \    if n == 31 {\n        return 31;\n    }\n    if n == 32 {\n        return\
    \ 32;\n    }\n    if n == 33 {\n        return 33;\n    }\n    if n == 34 {\n\
    \        return 34;\n    }\n    if n == 35 {\n        return 35;\n    }\n    if\
    \ n == 36 {\n        return 36;\n    }\n    if n == 37 {\n        return 37;\n\
    \    }\n    if n == 38 {\n        return 38;\n    }\n    if n == 39 {\n      \
    \  return 39;\n    }\n    if n == 40 {\n        return 40;\n    }\n    if n ==\
    \ 41 {\n        return 41;\n    }\n    if n == 42 {\n        return 42;\n    }\n\
    \    if n == 43 {\n        return 43;\n    }\n    if n == 44 {\n        return\
    \ 44;\n    }\n    if n == 45 {\n        return 45;\n    }\n    if n == 46 {\n\
    \        return 46;\n\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n   --> /tmp/tmptcfy2luz.rs:157:3\n\
    \    |\n3   | fn starts_one_ends(n: isize) -> isize {\n    |                 \
    \                      - unclosed delimiter\n...\n145 |     if n == 46 {\n   \
    \ |                - this delimiter might not be properly closed...\n...\n148\
    \ | }\n    | - ...as it matches this but it has different indentation\n...\n157\
    \ | }\n    |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmptcfy2luz.rs:3:33\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |    ---------------    \
    \          ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpggl6ru_0.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n.checked_mul(10).unwrap().checked_sub(1isize).unwrap()\n}\n\
    \nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `9`,\n right: `1`', /tmp/tmphnty44xr.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpo4x8976c.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp401v5prw.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => n,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpwavanzi9.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpdwwrd3cx.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp9xqpu1sq.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 1 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    while n > 0 {\n        if n % 10 == 1 {\n            count += 1;\n      \
    \  }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpi9atje11.rs:12:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n12 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        count += n / 10;\n        n /= 10;\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp__grskev.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp401v5prw.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        count += n / 10;\n        n /= 10;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpeox57d7i.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpggl6ru_0.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n / 10 + 1\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpqjptaymy.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ / 10),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpjc18g9fi.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    let mut i = 1;\n    while i <= n {\n        if i % 10 == 1 {\n          \
    \  count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n\
    \    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmptn35qk36.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n    let\
    \ mut count = 0;\n    while n > 0 {\n        if n % 10 == 1 {\n            count\
    \ += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpfomi73da.rs:11:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n11 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpdwwrd3cx.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpemsfrdwi.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut n = 0;\n    while n <= n\
    \ / 10 {\n        n += 1;\n    }\n    n\n}\n\nfn main() {\n    let candidate =\
    \ starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpwwvmr024.rs:15:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp401v5prw.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp401v5prw.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpggl6ru_0.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n.checked_mul(10).unwrap().checked_div(10).unwrap().checked_div(10).unwrap()\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp8g4rsv2j.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp9xqpu1sq.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpggl6ru_0.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends called with negative\
    \ n\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n \
    \       return 1;\n    }\n    let mut count = 0;\n    let mut i = 1;\n    while\
    \ i <= n {\n        if i % 10 == 1 {\n            count += 1;\n        }\n   \
    \     i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpk7v02tp5.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n.checked_mul(10).unwrap().checked_add((n - 1).checked_mul(10).unwrap()).unwrap()\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `1`', /tmp/tmpv8t2q297.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 0);\n   \
    \ let mut count = 0;\n    while n != 0 {\n        n /= 10;\n        count += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp1ykervnw.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return 1;\n    }\n    if n < 100 {\n  \
    \      return 2;\n    }\n    if n < 1000 {\n        return 3;\n    }\n    if n\
    \ < 10000 {\n        return 4;\n    }\n    if n < 100000 {\n        return 5;\n\
    \    }\n    if n < 1000000 {\n        return 6;\n    }\n    if n < 10000000 {\n\
    \        return 7;\n    }\n    if n < 100000000 {\n        return 8;\n    }\n\
    \    if n < 1000000000 {\n        return 9;\n    }\n    if n < 10000000000 {\n\
    \        return 10;\n    }\n    if n < 100000000000 {\n        return 11;\n  \
    \  }\n    if n < 1000000000000 {\n        return 12;\n    }\n    if n < 10000000000000\
    \ {\n        return 13;\n    }\n    if n < 100000000000000 {\n        return 14;\n\
    \    }\n    if n < 1000000000000000 {\n        return 15;\n    }\n    if n < 10000000000000000\
    \ {\n        return 16;\n    }\n    if n < 100000000000000000 {\n        return\
    \ 17;\n    }\n    if n < 1000000000000000000 {\n        return 18;\n    }\n  \
    \  if n < 10000000000000000000 {\n        return 19;\n    }\n    if n < 1000000000000000000\
    \ {\n        return 20;\n    }\n    if n < 10000000000000000000 {\n        return\
    \ 21;\n    }\n    if n < 100000000000000000000 {\n        return 22;\n    }\n\
    \    if n < 1000000000000000000000 {\n        return 23;\n    }\n    if n < 10000000000000000000000\
    \ {\n        return 24;\n    }\n    if n < 100000000000000000000000 {\n      \
    \  return 25;\n    }\n    if n < 1000000000000000000000000 {\n        return 26;\n\
    \    }\n    if n < 10000000000000000000000000 {\n        return 27;\n    }\n \
    \   if n < 100000000000000000000000000 {\n        return 28;\n    }\n    if n\
    \ < 1000000000000000000000000000 {\n        return 29;\n    }\n    if n < 10000000000000000000000000000\
    \ {\n        return 30;\n    }\n    if n < 100000000000000000000000000000 {\n\
    \        return 31;\n    }\n    if n < 1000000000000000000000000000000 {\n   \
    \     return 32;\n    }\n    if n < 10000000000000000000000000000000 {\n     \
    \   return 33;\n    }\n    if n < 100000000000000000000000000000000 {\n      \
    \  return 34;\n    }\n    if n < 1000000000000000000000000000000000 {\n      \
    \  return 35;\n    }\n    if n < 10000000000000000000000000000000000 {\n     \
    \   return 36;\n    }\n    if n < 100000000000000000000000000000000000 {\n   \
    \     return 37;\n    }\n    if n < 1000000000000000000000000000000000000 {\n\
    \        return 38;\n    }\n    if n < 10000000000000000000000000000000000000\
    \ {\n        return 39;\n    }\n    if n < 100000000000000000000000000000000000000\
    \ {\n        return 40;\n    }\n    if n < 1000000000000000000000000000000000000000\
    \ {\n        return 41;\n    }\n    if n < \n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error: integer literal is too large\n   --> /tmp/tmp42__fq9z.rs:124:12\n\
    \    |\n124 |     if n < 1000000000000000000000000000000000000000 {\n    |   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: expected expression,\
    \ found `}`\n   --> /tmp/tmp42__fq9z.rs:128:1\n    |\n128 | }\n    | ^ expected\
    \ expression\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    let mut last_digit = n % 10;\n    while n > 0 {\n        if last_digit ==\
    \ 1 {\n            count += 1;\n        }\n        last_digit = n % 10;\n    \
    \    n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpr51g97uh.rs:14:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n14 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 1 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpsc_05w_w.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        1 => 1,\n        _ => n,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpcucfjsf1.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n.checked_mul(10).unwrap().checked_add((n - 1).checked_mul(10).unwrap()).unwrap()\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `1`', /tmp/tmpv8t2q297.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ / 10),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpjc18g9fi.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp9xqpu1sq.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends called with negative\
    \ n\");\n    }\n    let mut count = 0;\n    let mut i = 1;\n    while i <= n {\n\
    \        if i % 10 == 1 {\n            i += 1;\n            count += 1;\n    \
    \    } else {\n            i += 1;\n        }\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpya1hy64t.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n / 10 + 1\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpqjptaymy.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        count += n / 10;\n        n /= 10;\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp__grskev.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 9);\n    let\
    \ mut count = 0;\n    while n != 0 {\n        if n % 10 == 1 {\n            count\
    \ += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp207ecsv7.rs:11:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n11 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 1 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpmismyhl9.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends called with negative\
    \ n\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    let mut count =\
    \ 0;\n    let mut i = 1;\n    while i <= n {\n        if i / 10 == 1 {\n     \
    \       i += 1;\n        } else {\n            i += 2;\n        }\n        count\
    \ += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpsstolh_v.rs:26:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n   \
    \ let mut count = 0;\n    while n > 0 {\n        count += n / 10;\n        n /=\
    \ 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpjpv8jncz.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 1 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    while n != 0 {\n        if n % 10 == 1 {\n            count += 1;\n     \
    \   }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpgivkwic1.rs:12:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n12 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends: n must be positive\"\
    );\n    }\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 == 1\
    \ {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp6pzyqyi_.rs:12:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n12 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp9xqpu1sq.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    let mut i = 1;\n    while i <= n {\n        if i / 10 == 1 {\n          \
    \  i += 1;\n        } else {\n            i += 2;\n        }\n        count +=\
    \ 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmphp1l7bic.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => n,\n\
    \    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpkhap7q87.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp401v5prw.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp9xqpu1sq.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpdwwrd3cx.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return 1;\n    }\n    if n % 10 == 1 {\n\
    \        return starts_one_ends(n / 10) + 1;\n    }\n    if n % 10 == 0 {\n  \
    \      return starts_one_ends(n / 10) + 1;\n    }\n    if n % 10 == 2 {\n    \
    \    return starts_one_ends(n / 10) + 2;\n    }\n    if n % 10 == 3 {\n      \
    \  return starts_one_ends(n / 10) + 3;\n    }\n    if n % 10 == 4 {\n        return\
    \ starts_one_ends(n / 10) + 4;\n    }\n    if n % 10 == 5 {\n        return starts_one_ends(n\
    \ / 10) + 5;\n    }\n    if n % 10 == 6 {\n        return starts_one_ends(n /\
    \ 10) + 6;\n    }\n    if n % 10 == 7 {\n        return starts_one_ends(n / 10)\
    \ + 7;\n    }\n    if n % 10 == 8 {\n        return starts_one_ends(n / 10) +\
    \ 8;\n    }\n    if n % 10 == 9 {\n        return starts_one_ends(n / 10) + 9;\n\
    \    }\n    if n % 10 == 10 {\n        return starts_one_ends(n / 10) + 10;\n\
    \    }\n    if n % 10 == 11 {\n        return starts_one_ends(n / 10) + 11;\n\
    \    }\n    if n % 10 == 12 {\n        return starts_one_ends(n / 10) + 12;\n\
    \    }\n    if n % 10 == 13 {\n        return starts_one_ends(n / 10) + 13;\n\
    \    }\n    if n % 10 == 14 {\n        return starts_one_ends(n / 10) + 14;\n\
    \    }\n    if n % 10 == 15 {\n        return starts_one_ends(n / 10) + 15;\n\
    \    }\n    if n % 10 == 16 {\n        return starts_one_ends(n / 10) + 16;\n\
    \    }\n    if n % 10 == 17 {\n        return starts_one_ends(n / 10) + 17;\n\
    \    }\n    if n % 10 == 18 {\n        return starts_one_ends(n / 10) + 18;\n\
    \    }\n    if n % 10 == 19 {\n        return starts_one_ends(n / 10) + 19;\n\
    \    }\n    if n % 10 == 20 {\n        return starts_one_ends(n / 10) + 20;\n\
    \    }\n    if n % 10 == 21 {\n        return starts_one_ends(n / 10) + 21;\n\
    \    }\n    if n % 10 == 22 {\n        return starts_one_ends(n / 10) + 22;\n\
    \    }\n    if n % 10 == 23 {\n        return starts_one_ends(n / 10) + 23;\n\
    \    }\n    if n % 10 == 24\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmp10ijdo9j.rs:80:1\n   |\n\
    79 |     if n % 10 == 24\n   |     -- this `if` expression has a condition, but\
    \ no block\n80 | }\n   | ^ expected `{`\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n.checked_mul(10).unwrap().checked_add((n - 1).checked_mul(10).unwrap()).unwrap()\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `1`', /tmp/tmpv8t2q297.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpz8i3jqsk.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return 0;\n    }\n    if n % 10 == 1 {\n\
    \        return 1;\n    }\n    if n % 10 == 0 {\n        return 1 + starts_one_ends(n\
    \ / 10);\n    }\n    return 1 + starts_one_ends(n / 10) + starts_one_ends(n %\
    \ 10);\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpnknv9c85.rs:18:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp401v5prw.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n   \
    \     return 1;\n    }\n    if n % 2 == 0 {\n        return starts_one_ends(n\
    \ / 2) + 1;\n    }\n    if n % 3 == 0 {\n        return starts_one_ends(n / 3)\
    \ + 1;\n    }\n    if n % 5 == 0 {\n        return starts_one_ends(n / 5) + 1;\n\
    \    }\n    if n % 7 == 0 {\n        return starts_one_ends(n / 7) + 1;\n    }\n\
    \    if n % 11 == 0 {\n        return starts_one_ends(n / 11) + 1;\n    }\n  \
    \  if n % 13 == 0 {\n        return starts_one_ends(n / 13) + 1;\n    }\n    if\
    \ n % 17 == 0 {\n        return starts_one_ends(n / 17) + 1;\n    }\n    if n\
    \ % 19 == 0 {\n        return starts_one_ends(n / 19) + 1;\n    }\n    if n %\
    \ 23 == 0 {\n        return starts_one_ends(n / 23) + 1;\n    }\n    if n % 29\
    \ == 0 {\n        return starts_one_ends(n / 29) + 1;\n    }\n    if n % 37 ==\
    \ 0 {\n        return starts_one_ends(n / 37) + 1;\n    }\n    if n % 41 == 0\
    \ {\n        return starts_one_ends(n / 41) + 1;\n    }\n    if n % 43 == 0 {\n\
    \        return starts_one_ends(n / 43) + 1;\n    }\n    if n % 47 == 0 {\n  \
    \      return starts_one_ends(n / 47) + 1;\n    }\n    if n % 53 == 0 {\n    \
    \    return starts_one_ends(n / 53) + 1;\n    }\n    if n % 59 == 0 {\n      \
    \  return starts_one_ends(n / 59) + 1;\n    }\n    if n % 61 == 0 {\n        return\
    \ starts_one_ends(n / 61) + 1;\n    }\n    if n % 67 == 0 {\n        return starts_one_ends(n\
    \ / 67) + 1;\n    }\n    if n % 71 == 0 {\n        return starts_one_ends(n /\
    \ 71) + 1;\n    }\n    if n % 73 == 0 {\n        return starts_one_ends(n / 73)\
    \ + 1;\n    }\n    if n % 79 == 0 {\n        return starts_one_ends(n / 79) +\
    \ 1;\n    }\n    if n % 83 == 0 {\n        return starts_one_ends(n / 83) + 1;\n\
    \    }\n    if n % 89 == 0 {\n        return starts_one_ends(n / 89) + 1;\n  \
    \  }\n    if n % 97 == 0 {\n        return starts_one_ends(n / 97) + 1;\n    }\n\
    \    if n % 101 == 0 {\n        return starts_one_ends(n / 101) + 1;\n\n}\n\n\
    fn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error: this file contains an unclosed delimiter\n  --> /tmp/tmpvve8xr91.rs:94:3\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    \
    \                   - unclosed delimiter\n...\n82 |     if n % 101 == 0 {\n  \
    \ |                     - this delimiter might not be properly closed...\n...\n\
    85 | }\n   | - ...as it matches this but it has different indentation\n...\n94\
    \ | }\n   |   ^\n\nerror[E0308]: mismatched types\n --> /tmp/tmpvve8xr91.rs:3:33\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |    ---------------    \
    \          ^^^^^ expected `isize`, found `()`\n  |    |\n  |    implicitly returns\
    \ `()` as its body has no tail or `return` expression\n\nerror: aborting due to\
    \ 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n   \
    \ let mut count = 0;\n    while n != 0 {\n        if n % 10 == 1 {\n         \
    \   count += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpsf2o78sl.rs:11:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n11 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends called with negative\
    \ n\");\n    }\n    if n < 10 {\n        return 1;\n    }\n    if n < 100 {\n\
    \        return 2;\n    }\n    if n < 1000 {\n        return 3;\n    }\n    if\
    \ n < 10000 {\n        return 4;\n    }\n    if n < 100000 {\n        return 5;\n\
    \    }\n    if n < 1000000 {\n        return 6;\n    }\n    if n < 10000000 {\n\
    \        return 7;\n    }\n    if n < 100000000 {\n        return 8;\n    }\n\
    \    if n < 1000000000 {\n        return 9;\n    }\n    if n < 10000000000 {\n\
    \        return 10;\n    }\n    if n < 100000000000 {\n        return 11;\n  \
    \  }\n    if n < 1000000000000 {\n        return 12;\n    }\n    if n < 10000000000000\
    \ {\n        return 13;\n    }\n    if n < 100000000000000 {\n        return 14;\n\
    \    }\n    if n < 1000000000000000 {\n        return 15;\n    }\n    if n < 10000000000000000\
    \ {\n        return 16;\n    }\n    if n < 100000000000000000 {\n        return\
    \ 17;\n    }\n    if n < 100000000000000001 {\n        return 18;\n    }\n   \
    \ if n < 1000000000000000010 {\n        return 19;\n    }\n    if n < 10000000000000000100\
    \ {\n        return 20;\n    }\n    if n < 100000000000000001000 {\n        return\
    \ 21;\n    }\n    if n < 1000000000000000010000 {\n        return 22;\n    }\n\
    \    if n < 10000000000000000100000 {\n        return 23;\n    }\n    if n < 100000000000000001000000\
    \ {\n        return 24;\n    }\n    if n < 1000000000000000010000000 {\n     \
    \   return 25;\n    }\n    if n < 10000000000000000100000000 {\n        return\
    \ 26;\n    }\n    if n < 100000000000000001000000000 {\n        return 27;\n \
    \   }\n    if n < 1000000000000000010000000000 {\n        return 28;\n    }\n\
    \    if n < 10000000000000000100000000000 {\n        return 29;\n    }\n    if\
    \ n < 100000000000000001000000000000 {\n        return 30;\n    }\n    if n <\
    \ 1000000000000000010000000000000 {\n        return 31;\n    }\n    if n < 10000000000000000100000000000000\
    \ {\n        return 32;\n    }\n    if n < 100000000000000001000000000000000 {\n\
    \        return 33;\n    }\n    if n < 1000000000000000010000000000000000 {\n\
    \        return 34;\n    }\n    if n < 10000000000000000100000000000000000 {\n\
    \        return 35;\n    }\n    if n < 100000000000000001000000000000000000 {\n\
    \        return 36;\n    }\n    if n < 1000000000000000010000000000000000000 {\n\
    \        return 37;\n    }\n    if n < 10000000000000000100\n}\n\nfn main() {\n\
    \    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmp2xd2w0no.rs:119:1\n    |\n\
    118 |     if n < 10000000000000000100\n    |     -- this `if` expression has a\
    \ condition, but no block\n119 | }\n    | ^ expected `{`\n\nerror: aborting due\
    \ to previous error\n\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n.checked_mul(10).unwrap().checked_div(10).unwrap().checked_div(10).unwrap()\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp8g4rsv2j.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        1 => 1,\n        _ => n * (n - 1) / 2,\n\
    \    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmphwuz6nlx.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => if n % 10 == 1 {\n\
    \            n / 10 + 1\n        } else {\n            n / 10 + 1\n        } *\
    \ starts_one_ends(n / 10)\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected pattern, found `*`\n  --> /tmp/tmp9u2gr0yx.rs:10:11\n \
    \  |\n10 |         } * starts_one_ends(n / 10)\n   |           ^ expected pattern\n\
    \   |\nhelp: parentheses are required to parse this as an expression\n   |\n6\
    \  ~         _ => (if n % 10 == 1 {\n7  |             n / 10 + 1\n8  |       \
    \  } else {\n9  |             n / 10 + 1\n10 ~         }) * starts_one_ends(n\
    \ / 10)\n   |\n\nerror: aborting due to previous error\n\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends called with negative\
    \ n\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n \
    \       return 1;\n    }\n    let mut count = 0;\n    for d in 1..=n {\n     \
    \   if n % d == 0 {\n            count += 1;\n        }\n    }\n    count\n}\n\
    \nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmp26wnyvf0.rs:25:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends: n must be positive\"\
    );\n    }\n    if n == 0 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    let mut last = 1;\n    while n > 0 {\n        if n % 10 == 1 {\n        \
    \    count += 1;\n        }\n        n /= 10;\n    }\n    if n == 0 {\n      \
    \  count += 1;\n    }\n    count += last;\n    count\n}\n\nfn main() {\n    let\
    \ candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "warning: variable does not need to be mutable\n  --> /tmp/tmpnbw8oxg3.rs:11:9\n\
    \   |\n11 |     let mut last = 1;\n   |         ----^^^^\n   |         |\n   |\
    \         help: remove this `mut`\n   |\n   = note: `#[warn(unused_mut)]` on by\
    \ default\n\nerror[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpnbw8oxg3.rs:16:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n16 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error; 1 warning emitted\n\nFor more information about this\
    \ error, try `rustc --explain E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n.checked_mul(10).unwrap().checked_div(10).unwrap().checked_div(10).unwrap()\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp8g4rsv2j.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpdwwrd3cx.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends called with negative\
    \ n\");\n    }\n    let mut count = 0;\n    while n != 0 {\n        n /= 10;\n\
    \        count += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate =\
    \ starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmppdpqdz6v.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 1 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpjyhq7mu0.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp9xqpu1sq.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpggl6ru_0.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        count += n / 10;\n        n /= 10;\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp__grskev.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    let mut i = 1;\n    while i <= n {\n        if i % 10 == 1 {\n          \
    \  i += 1;\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpkrviczc5.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    let mut i\
    \ = 1;\n    while i <= n {\n        if n % i == 0 {\n            count += 1;\n\
    \            i += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp1tclp4mp.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    let mut i = 1;\n    while i <= n {\n        if i / 10 == 1 {\n          \
    \  i += 1;\n            count += 1;\n        }\n        i += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpc4acqn47.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => if n % 10 == 1 {\n\
    \            n / 10 + 1\n        } else {\n            n - 1\n        }\n    }\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpt63s1atk.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpggl6ru_0.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ / 10),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpjc18g9fi.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends called with negative\
    \ n\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    let mut count =\
    \ 0;\n    let mut last = 1;\n    while n > 0 {\n        if n % 10 == 1 {\n   \
    \         count += 1;\n        }\n        if n % 10 == 0 {\n            count\
    \ += 1;\n            last = last * 10;\n        }\n        n /= 10;\n    }\n \
    \   count += last == 1;\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n  --> /tmp/tmp11bda30p.rs:22:11\n\
    \   |\n22 |     count += last == 1;\n   |           ^^ no implementation for `{integer}\
    \ += bool`\n   |\n   = help: the trait `AddAssign<bool>` is not implemented for\
    \ `{integer}`\n   = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \             <f32 as AddAssign<&f32>>\n             <f32 as AddAssign>\n    \
    \         <f64 as AddAssign<&f64>>\n             <f64 as AddAssign>\n        \
    \     <i128 as AddAssign<&i128>>\n             <i128 as AddAssign>\n         \
    \    <i16 as AddAssign<&i16>>\n             <i16 as AddAssign>\n           and\
    \ 20 others\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n   \
    \     return 1;\n    }\n    if n % 2 == 0 {\n        return starts_one_ends(n\
    \ / 2) + 1;\n    }\n    return starts_one_ends(n / 2) + 1;\n}\n\nfn main() {\n\
    \    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpyajjrnyx.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        count += n /\
    \ 10;\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmps0_dkgz_.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    let mut i\
    \ = 1;\n    while i <= n {\n        if i % 10 == 1 {\n            count += 1;\n\
    \        }\n        i += 1;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmp_mghz0ey.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n   \
    \ let mut count = 0;\n    for i in 1..n {\n        if i % 10 == 1 {\n        \
    \    count += 1;\n        }\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmpkwlwxvpv.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => n,\n\
    \    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpkhap7q87.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n   \
    \ (n / 10).floor() as isize\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `floor` found for type `isize` in the current\
    \ scope\n --> /tmp/tmptdbv3w3z.rs:6:14\n  |\n6 |     (n / 10).floor() as isize\n\
    \  |              ^^^^^ help: there is an associated function with a similar name:\
    \ `div_floor`\n\nerror: aborting due to previous error\n\nFor more information\
    \ about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp9xqpu1sq.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    let mut\
    \ i = 1;\n    while i <= n {\n        if i % 10 == 1 {\n            i += 1;\n\
    \            count += 1;\n        } else {\n            i += 1;\n        }\n \
    \   }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n   \
    \ assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmppnj3iz6e.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n / 10 + 1\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpqjptaymy.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp401v5prw.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        count += n /\
    \ 10;\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmps0_dkgz_.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut n1 = n - 1;\n    let mut\
    \ n2 = n - 1;\n    while n1 != 0 || n2 != 0 {\n        if n1 == 0 {\n        \
    \    n1 += 1;\n        } else if n2 == 0 {\n            n2 += 1;\n        } else\
    \ {\n            n1 -= 1;\n            n2 -= 1;\n        }\n    }\n    n\n}\n\n\
    fn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpj78id_0d.rs:23:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpo4x8976c.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => n,\n\
    \    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpkhap7q87.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpo4x8976c.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n >= 10 {\n        count += n\
    \ % 10 == 1;\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmphskn_2ku.rs:6:15\n\
    \  |\n6 |         count += n % 10 == 1;\n  |               ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends called with negative\
    \ n\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    let mut count =\
    \ 0;\n    let mut i = 1;\n    while i <= n {\n        if i % 10 == 1 {\n     \
    \       count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpm2978rti.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n      \
    \  n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp_x__ftd9.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp401v5prw.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 1 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    for _ in 0..n {\n        if n % 10 == 1 {\n            count += 1;\n    \
    \    }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpfupwmb7l.rs:12:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n12 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends called with negative\
    \ n\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    let mut count =\
    \ 0;\n    let mut i = 1;\n    while i <= n {\n        if i % 10 == 1 {\n     \
    \       count += 1;\n        }\n        i += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpm2978rti.rs:24:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        count += n / 10;\n        n /= 10;\n    }\n    count\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmp__grskev.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n    let\
    \ mut count = 0;\n    let mut i = 1;\n    while i <= n {\n        if i % 10 ==\
    \ 1 {\n            i += 1;\n            count += 1;\n        }\n        i += 1;\n\
    \    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n  \
    \  assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpsv0d1bi4.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n    let\
    \ mut n = 0;\n    while n <= 10 {\n        if n % 10 == 1 {\n            n +=\
    \ 1;\n        } else {\n            n += 1;\n        }\n    }\n    n\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `11`,\n right: `1`', /tmp/tmpc5wza0ki.rs:19:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n    let\
    \ mut count = 0;\n    while n > 0 {\n        count += n / 10;\n        n -= n\
    \ % 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmprnxs3328.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n -= n % 10;\n\
    \  |         ^^^^^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n    let\
    \ mut count = 0;\n    while n > 0 {\n        if n % 10 == 1 {\n            count\
    \ += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpfomi73da.rs:11:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n11 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 || n > 100 {\n        return 0;\n    }\n    let mut\
    \ count = 0;\n    let mut i = 1;\n    while i <= n {\n        if i % 10 == 1 {\n\
    \            i += 1;\n            count += 1;\n        }\n        i += 1;\n  \
    \  }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmprv85yost.rs:21:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends: n must be positive\"\
    );\n    }\n    if n == 0 {\n        return 0;\n    }\n    let mut count = 0;\n\
    \    while n != 1 {\n        n >>= 1;\n        count += 1;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpiwcce3j5.rs:12:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n12 |         n >>=\
    \ 1;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpo4x8976c.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        count += n /\
    \ 10;\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmps0_dkgz_.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        count += n /\
    \ 10;\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmps0_dkgz_.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n.checked_mul(10).unwrap().checked_div(10).unwrap().checked_sub(1isize).unwrap()\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `1`', /tmp/tmp4dl0j4sd.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n / 10 + 1\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpqjptaymy.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 1 {\n        n /= 10;\n        count += 1;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpjyhq7mu0.rs:7:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n7 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n    let\
    \ mut count = 0;\n    while n != 0 {\n        if n % 10 == 1 {\n            count\
    \ += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpzc4ute_b.rs:11:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n11 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends called with negative\
    \ n\");\n    }\n    if n == 0 {\n        return 0;\n    }\n    let mut count =\
    \ 0;\n    let mut last_digit = n % 10;\n    while n > 0 {\n        if last_digit\
    \ == 1 {\n            count += 1;\n        }\n        last_digit = n % 10;\n \
    \       n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp762okpxq.rs:17:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n17 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp401v5prw.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        count += n / 10;\n        n /= 10;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpeox57d7i.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 9);\n    let\
    \ mut count = 0;\n    while n != 0 {\n        if n % 10 == 1 {\n            count\
    \ += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp207ecsv7.rs:11:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n11 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        1 => 1,\n        _ => n,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpcucfjsf1.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n !=\
    \ 1 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpz8i3jqsk.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n == 0 {\n        return 0;\n    }\n    if n == 1 {\n   \
    \     return 1;\n    }\n    let mut count = 0;\n    for i in 1..=n {\n       \
    \ if i / 10 == 1 {\n            count += 1;\n        }\n    }\n    count\n}\n\n\
    fn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `0`,\n right: `18`', /tmp/tmpi4vl00at.rs:22:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        count += n / 10;\n        n /= 10;\n    }\n    count\n}\n\nfn main()\
    \ {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n\
    \    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4),\
    \ 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpeox57d7i.rs:8:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n8 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n.checked_mul(10).unwrap().checked_add((n - 1).checked_mul(10).unwrap()).unwrap()\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `10`,\n right: `1`', /tmp/tmpv8t2q297.rs:9:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 0);\n   \
    \ let mut count = 0;\n    while n > 0 {\n        count += n / 10;\n        n /=\
    \ 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpw3cz7r5s.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    let mut count = 0;\n    while n >\
    \ 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp401v5prw.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return n;\n    }\n    if n % 10 == 1 {\n\
    \        return starts_one_ends(n / 10) + 1;\n    }\n    if n % 10 == 0 {\n  \
    \      return starts_one_ends(n / 10) + 1;\n    }\n    if n % 10 == 2 {\n    \
    \    return starts_one_ends(n / 10) + 2;\n    }\n    if n % 10 == 3 {\n      \
    \  return starts_one_ends(n / 10) + 3;\n    }\n    if n % 10 == 4 {\n        return\
    \ starts_one_ends(n / 10) + 4;\n    }\n    if n % 10 == 5 {\n        return starts_one_ends(n\
    \ / 10) + 5;\n    }\n    if n % 10 == 6 {\n        return starts_one_ends(n /\
    \ 10) + 6;\n    }\n    if n % 10 == 7 {\n        return starts_one_ends(n / 10)\
    \ + 7;\n    }\n    if n % 10 == 8 {\n        return starts_one_ends(n / 10) +\
    \ 8;\n    }\n    if n % 10 == 9 {\n        return starts_one_ends(n / 10) + 9;\n\
    \    }\n    if n % 10 == 10 {\n        return starts_one_ends(n / 10) + 10;\n\
    \    }\n    if n % 10 == 11 {\n        return starts_one_ends(n / 10) + 11;\n\
    \    }\n    if n % 10 == 12 {\n        return starts_one_ends(n / 10) + 12;\n\
    \    }\n    if n % 10 == 13 {\n        return starts_one_ends(n / 10) + 13;\n\
    \    }\n    if n % 10 == 14 {\n        return starts_one_ends(n / 10) + 14;\n\
    \    }\n    if n % 10 == 15 {\n        return starts_one_ends(n / 10) + 15;\n\
    \    }\n    if n % 10 == 16 {\n        return starts_one_ends(n / 10) + 16;\n\
    \    }\n    if n % 10 == 17 {\n        return starts_one_ends(n / 10) + 17;\n\
    \    }\n    if n % 10 == 18 {\n        return starts_one_ends(n / 10) + 18;\n\
    \    }\n    if n % 10 == 19 {\n        return starts_one_ends(n / 10) + 19;\n\
    \    }\n    if n % 10 == 20 {\n        return starts_one_ends(n / 10) + 20;\n\
    \    }\n    if n % 10 == 21 {\n        return starts_one_ends(n / 10) + 21;\n\
    \    }\n    if n % 10 == 22 {\n        return starts_one_ends(n / 10) + 22;\n\
    \    }\n    if n % 10 == 23 {\n        return starts_one_ends(n / 10) + 23;\n\
    \    }\n    if n % 10 == 24\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n  --> /tmp/tmpfopxc5we.rs:80:1\n   |\n\
    79 |     if n % 10 == 24\n   |     -- this `if` expression has a condition, but\
    \ no block\n80 | }\n   | ^ expected `{`\n\nerror: aborting due to previous error\n\
    \n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ != 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n     \
    \   n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmpo4x8976c.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 9);\n    let\
    \ mut count = 0;\n    while n != 0 {\n        if n % 10 == 1 {\n            count\
    \ += 1;\n        }\n        n /= 10;\n    }\n    count\n}\n\nfn main() {\n   \
    \ let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp207ecsv7.rs:11:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n11 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpdwwrd3cx.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        1 => 1,\n        _ => n,\n    }\n}\n\nfn\
    \ main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpcucfjsf1.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    let mut count = 0;\n    while n\
    \ > 0 {\n        if n % 10 == 1 {\n            count += 1;\n        }\n      \
    \  n /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n  --> /tmp/tmp_x__ftd9.rs:10:9\n\
    \   |\n3  | fn starts_one_ends(n: isize) -> isize {\n   |                    -\
    \ help: consider making this binding mutable: `mut n`\n...\n10 |         n /=\
    \ 10;\n   |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n >= 0);\n    debug_assert!(n <= 10);\n    let\
    \ mut count = 0;\n    while n > 0 {\n        count += n % 10 == 1;\n        n\
    \ /= 10;\n    }\n    count\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0277]: cannot add-assign `bool` to `{integer}`\n --> /tmp/tmpx8madf4u.rs:8:15\n\
    \  |\n8 |         count += n % 10 == 1;\n  |               ^^ no implementation\
    \ for `{integer} += bool`\n  |\n  = help: the trait `AddAssign<bool>` is not implemented\
    \ for `{integer}`\n  = help: the following other types implement trait `AddAssign<Rhs>`:\n\
    \            <f32 as AddAssign<&f32>>\n            <f32 as AddAssign>\n      \
    \      <f64 as AddAssign<&f64>>\n            <f64 as AddAssign>\n            <i128\
    \ as AddAssign<&i128>>\n            <i128 as AddAssign>\n            <i16 as AddAssign<&i16>>\n\
    \            <i16 as AddAssign>\n          and 20 others\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0277`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        0\n    } else {\n        (1..=n).filter(|x|\
    \ x % 10 == 1).count()\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n --> /tmp/tmpt87fxaz6.rs:7:9\n  |\n3 |\
    \ fn starts_one_ends(n: isize) -> isize {\n  |                               \
    \  ----- expected `isize` because of return type\n...\n7 |         (1..=n).filter(|x|\
    \ x % 10 == 1).count()\n  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected\
    \ `isize`, found `usize`\n  |\nhelp: you can convert a `usize` to an `isize` and\
    \ panic if the converted value doesn't fit\n  |\n7 |         (1..=n).filter(|x|\
    \ x % 10 == 1).count().try_into().unwrap()\n  |                              \
    \                  ++++++++++++++++++++\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0308`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    n / 10 + 1\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpqjptaymy.rs:10:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    debug_assert!(n > 0);\n    debug_assert!(n % 10 == 1);\n   \
    \ debug_assert!(n >= 1);\n    let mut n = 0;\n    while n <= n / 10 {\n      \
    \  if n % 10 == 1 {\n            n += 1;\n        } else {\n            n += 1;\n\
    \        }\n    }\n    n\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: 'thread ''main'' panicked at ''assertion failed: n % 10 == 1'', /tmp/tmpy7s_09kb.rs:5:5

    note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

    '
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => 1\
    \ + starts_one_ends(n - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n\
    \    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3),\
    \ 180);\n    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n\
    }\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpvx5q03q3.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => if n % 10 == 1 {\n\
    \            1\n        } else {\n            1 + starts_one_ends(n / 10)\n  \
    \      }\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `1`,\n right: `18`', /tmp/tmpp8ouxsmf.rs:17:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 {\n        return 1;\n    }\n    if n < 100 {\n  \
    \      return 2;\n    }\n    if n < 1000 {\n        return 3;\n    }\n    if n\
    \ < 10000 {\n        return 4;\n    }\n    if n < 100000 {\n        return 5;\n\
    \    }\n    if n < 1000000 {\n        return 6;\n    }\n    if n < 10000000 {\n\
    \        return 7;\n    }\n    if n < 100000000 {\n        return 8;\n    }\n\
    \    if n < 1000000000 {\n        return 9;\n    }\n    if n < 10000000000 {\n\
    \        return 10;\n    }\n    if n < 100000000000 {\n        return 11;\n  \
    \  }\n    if n < 1000000000000 {\n        return 12;\n    }\n    if n < 10000000000000\
    \ {\n        return 13;\n    }\n    if n < 100000000000000 {\n        return 14;\n\
    \    }\n    if n < 1000000000000000 {\n        return 15;\n    }\n    if n < 10000000000000000\
    \ {\n        return 16;\n    }\n    if n < 100000000000000000 {\n        return\
    \ 17;\n    }\n    if n < 1000000000000000000 {\n        return 18;\n    }\n  \
    \  if n < 10000000000000000000 {\n        return 19;\n    }\n    if n < 1000000000000000000\
    \ {\n        return 20;\n    }\n    if n < 10000000000000000000 {\n        return\
    \ 21;\n    }\n    if n < 100000000000000000000 {\n        return 22;\n    }\n\
    \    if n < 1000000000000000000000 {\n        return 23;\n    }\n    if n < 10000000000000000000000\
    \ {\n        return 24;\n    }\n    if n < 100000000000000000000000 {\n      \
    \  return 25;\n    }\n    if n < 1000000000000000000000000 {\n        return 26;\n\
    \    }\n    if n < 10000000000000000000000000 {\n        return 27;\n    }\n \
    \   if n < 100000000000000000000000000 {\n        return 28;\n    }\n    if n\
    \ < 1000000000000000000000000000 {\n        return 29;\n    }\n    if n < 10000000000000000000000000000\
    \ {\n        return 30;\n    }\n    if n < 100000000000000000000000000000 {\n\
    \        return 31;\n    }\n    if n < 1000000000000000000000000000000 {\n   \
    \     return 32;\n    }\n    if n < 10000000000000000000000000000000 {\n     \
    \   return 33;\n    }\n    if n < 100000000000000000000000000000000 {\n      \
    \  return 34;\n    }\n    if n < 1000000000000000000000000000000000 {\n      \
    \  return 35;\n    }\n    if n < 10000000000000000000000000000000000 {\n     \
    \   return 36;\n    }\n    if n < 100000000000000000000000000000000000 {\n   \
    \     return 37;\n    }\n    if n < 1000000000000000000000000000000000000 {\n\
    \        return 38;\n    }\n    if n < 10000000000000000000000000000000000000\
    \ {\n        return 39;\n    }\n    if n < 100000000000000000000000000000000000000\
    \ {\n        return 40;\n    }\n    if n < 1000000000000000000000000000000000000000\
    \ {\n        return 41;\n    }\n    if n < \n}\n\nfn main() {\n    let candidate\
    \ = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error: integer literal is too large\n   --> /tmp/tmp42__fq9z.rs:124:12\n\
    \    |\n124 |     if n < 1000000000000000000000000000000000000000 {\n    |   \
    \         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: expected expression,\
    \ found `}`\n   --> /tmp/tmp42__fq9z.rs:128:1\n    |\n128 | }\n    | ^ expected\
    \ expression\n\nerror: aborting due to 2 previous errors\n\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        1 => 1,\n        _ => n,\n\
    \    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpkhap7q87.rs:14:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n > 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmptl4p1x7f.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 10 { return n }\n    if n < 100 { return 1 }\n    if\
    \ n < 1000 { return 2 }\n    if n < 10000 { return 3 }\n    if n < 100000 { return\
    \ 4 }\n    if n < 1000000 { return 5 }\n    if n < 10000000 { return 6 }\n   \
    \ if n < 100000000 { return 7 }\n    if n < 1000000000 { return 8 }\n    if n\
    \ < 10000000000 { return 9 }\n    if n < 100000000000 { return 10 }\n    if n\
    \ < 1000000000000 { return 11 }\n    if n < 10000000000000 { return 12 }\n   \
    \ if n < 100000000000000 { return 13 }\n    if n < 1000000000000000 { return 14\
    \ }\n    if n < 10000000000000000 { return 15 }\n    if n < 100000000000000000\
    \ { return 16 }\n    if n < 1000000000000000000 { return 17 }\n    if n < 10000000000000000000\
    \ { return 18 }\n    if n < 100000000000000000000 { return 19 }\n    if n < 1000000000000000000000\
    \ { return 20 }\n    if n < 10000000000000000000000 { return 21 }\n    if n <\
    \ 100000000000000000000000 { return 22 }\n    if n < 1000000000000000000000000\
    \ { return 23 }\n    if n < 10000000000000000000000000 { return 24 }\n    if n\
    \ < 100000000000000000000000000 { return 25 }\n    if n < 1000000000000000000000000000\
    \ { return 26 }\n    if n < 10000000000000000000000000000 { return 27 }\n    if\
    \ n < 100000000000000000000000000000 { return 28 }\n    if n < 1000000000000000000000000000000\
    \ { return 29 }\n    if n < 10000000000000000000000000000000 { return 30 }\n \
    \   if n < 100000000000000000000000000000000 { return 31 }\n    if n < 1000000000000000000000000000000000\
    \ { return 32 }\n    if n < 10000000000000000000000000000000000 { return 33 }\n\
    \    if n < 100000000000000000000000000000000000 { return 34 }\n    if n < 1000000000000000000000000000000000000\
    \ { return 35 }\n    if n < 10000000000000000000000000000000000000 { return 36\
    \ }\n    if n < 100000000000000000000000000000000000000 { return 37 }\n    if\
    \ n < 1000000000000000000000000000000000000000 { return 38 }\n    if n < 10000000000000000000000000000000000000000\
    \ { return 39 }\n    if n < 100000000000000000000000000000000000000000 { return\
    \ 40 }\n    if n < 1000000000000000000000000000000000000000000 { return 41 }\n\
    \    if n < 10000000000000000000000000000000000000000000 { return 42 }\n    if\
    \ n < 100000000000000000000000000000000000000000000 { return 43 }\n    if n <\
    \ 1000000000000000000000000000000000000000000000 { return 44 }\n    if n < 1000000000000000000000000000000000000000\
    \ { return 45 }\n    if n < 10000000000000000000000000000000000000000 { return\
    \ 46 }\n    if n < 100000000000000000000000000000000000000000 { return 47 }\n\
    \    if n < 1000000000000000000000000000000000000000000 { return 48 }\n    if\
    \ n < 10000000000000000000000000000000000000000000 { return 49 }\n    if n < 10000000000000000000000000000000000\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error: integer literal is too large\n  --> /tmp/tmpjkk6e5cj.rs:42:12\n\
    \   |\n42 |     if n < 1000000000000000000000000000000000000000 { return 38 }\n\
    \   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal\
    \ is too large\n  --> /tmp/tmpjkk6e5cj.rs:43:12\n   |\n43 |     if n < 10000000000000000000000000000000000000000\
    \ { return 39 }\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\
    error: integer literal is too large\n  --> /tmp/tmpjkk6e5cj.rs:44:12\n   |\n44\
    \ |     if n < 100000000000000000000000000000000000000000 { return 40 }\n   |\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal\
    \ is too large\n  --> /tmp/tmpjkk6e5cj.rs:45:12\n   |\n45 |     if n < 1000000000000000000000000000000000000000000\
    \ { return 41 }\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: integer literal is too large\n  --> /tmp/tmpjkk6e5cj.rs:46:12\n   |\n\
    46 |     if n < 10000000000000000000000000000000000000000000 { return 42 }\n \
    \  |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer\
    \ literal is too large\n  --> /tmp/tmpjkk6e5cj.rs:47:12\n   |\n47 |     if n <\
    \ 100000000000000000000000000000000000000000000 { return 43 }\n   |          \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal is\
    \ too large\n  --> /tmp/tmpjkk6e5cj.rs:48:12\n   |\n48 |     if n < 1000000000000000000000000000000000000000000000\
    \ { return 44 }\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\
    \nerror: integer literal is too large\n  --> /tmp/tmpjkk6e5cj.rs:49:12\n   |\n\
    49 |     if n < 1000000000000000000000000000000000000000 { return 45 }\n   | \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror: integer literal\
    \ is too large\n  --> /tmp/tmpjkk6e5cj.rs:50:12\n   |\n50 |     if n < 10000000000000000000000000000000000000000\
    \ { return 46 }\n   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\
    error: integer literal is too large\n  --> /tmp/tmpjkk6e5cj.rs:51:12\n   |\n51\
    \ |     if n < 100000000000000000000000000000000000000000 { return 47 }\n   |\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660013023
- exit_code: 101
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    match n {\n        0 => 0,\n        _ => 1 + starts_one_ends(n\
    \ - 1),\n    }\n}\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `2`,\n right: `18`', /tmp/tmpfrvmyfrv.rs:13:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    let mut count = 0;\n    while n != 0 {\n        if n % 10 ==\
    \ 1 {\n            count += 1;\n        }\n        n /= 10;\n    }\n    count\n\
    }\n\nfn main() {\n    let candidate = starts_one_ends;\n    assert_eq!(candidate(1),\
    \ 1);\n    assert_eq!(candidate(2), 18);\n    assert_eq!(candidate(3), 180);\n\
    \    assert_eq!(candidate(4), 1800);\n    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error[E0384]: cannot assign to immutable argument `n`\n --> /tmp/tmpggl6ru_0.rs:9:9\n\
    \  |\n3 | fn starts_one_ends(n: isize) -> isize {\n  |                    - help:\
    \ consider making this binding mutable: `mut n`\n...\n9 |         n /= 10;\n \
    \ |         ^^^^^^^ cannot assign to immutable argument\n\nerror: aborting due\
    \ to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0384`.\n"
  stdout: ''
  timestamp: 1660013023
- exit_code: 1
  program: "/// Given a positive integer n, return the count of the numbers of n-digit\n\
    /// positive integers that start or end with 1.\nfn starts_one_ends(n: isize)\
    \ -> isize {\n    if n < 0 {\n        panic!(\"starts_one_ends called with negative\
    \ n\");\n    }\n    if n < 10 {\n        return 1;\n    }\n    if n < 100 {\n\
    \        return 2;\n    }\n    if n < 1000 {\n        return 3;\n    }\n    if\
    \ n < 10000 {\n        return 4;\n    }\n    if n < 100000 {\n        return 5;\n\
    \    }\n    if n < 1000000 {\n        return 6;\n    }\n    if n < 10000000 {\n\
    \        return 7;\n    }\n    if n < 100000000 {\n        return 8;\n    }\n\
    \    if n < 1000000000 {\n        return 9;\n    }\n    if n < 10000000000 {\n\
    \        return 10;\n    }\n    if n < 100000000000 {\n        return 11;\n  \
    \  }\n    if n < 1000000000000 {\n        return 12;\n    }\n    if n < 10000000000000\
    \ {\n        return 13;\n    }\n    if n < 100000000000000 {\n        return 14;\n\
    \    }\n    if n < 1000000000000000 {\n        return 15;\n    }\n    if n < 10000000000000000\
    \ {\n        return 16;\n    }\n    if n < 100000000000000000 {\n        return\
    \ 17;\n    }\n    if n < 100000000000000001 {\n        return 18;\n    }\n   \
    \ if n < 1000000000000000010 {\n        return 19;\n    }\n    if n < 10000000000000000100\
    \ {\n        return 20;\n    }\n    if n < 100000000000000001000 {\n        return\
    \ 21;\n    }\n    if n < 1000000000000000010000 {\n        return 22;\n    }\n\
    \    if n < 10000000000000000100000 {\n        return 23;\n    }\n    if n < 100000000000000001000000\
    \ {\n        return 24;\n    }\n    if n < 1000000000000000010000000 {\n     \
    \   return 25;\n    }\n    if n < 10000000000000000100000000 {\n        return\
    \ 26;\n    }\n    if n < 100000000000000001000000000 {\n        return 27;\n \
    \   }\n    if n < 1000000000000000010000000000 {\n        return 28;\n    }\n\
    \    if n < 10000000000000000100000000000 {\n        return 29;\n    }\n    if\
    \ n < 100000000000000001000000000000 {\n        return 30;\n    }\n    if n <\
    \ 1000000000000000010000000000000 {\n        return 31;\n    }\n    if n < 10000000000000000100000000000000\
    \ {\n        return 32;\n    }\n    if n < 100000000000000001000000000000000 {\n\
    \        return 33;\n    }\n    if n < 1000000000000000010000000000000000 {\n\
    \        return 34;\n    }\n    if n < 10000000000000000100000000000000000 {\n\
    \        return 35;\n    }\n    if n < 100000000000000001000000000000000000 {\n\
    \        return 36;\n    }\n    if n < 1000000000000000010000000000000000000 {\n\
    \        return 37;\n    }\n    if n < 10000000000000000100\n}\n\nfn main() {\n\
    \    let candidate = starts_one_ends;\n    assert_eq!(candidate(1), 1);\n    assert_eq!(candidate(2),\
    \ 18);\n    assert_eq!(candidate(3), 180);\n    assert_eq!(candidate(4), 1800);\n\
    \    assert_eq!(candidate(5), 18000);\n}\n"
  status: SyntaxError
  stderr: "error: expected `{`, found `}`\n   --> /tmp/tmp2xd2w0no.rs:119:1\n    |\n\
    118 |     if n < 10000000000000000100\n    |     -- this `if` expression has a\
    \ condition, but no block\n119 | }\n    | ^ expected `{`\n\nerror: aborting due\
    \ to previous error\n\n"
  stdout: ''
  timestamp: 1660013023
