name: HumanEval_84_solve
language: rs
prompt: "/// Given a positive integer N, return the total sum of its digits in binary.\n\
  /// Example\n/// >>> solve(1000)\n/// String::from(\"1\")\n/// >>> solve(150)\n\
  /// String::from(\"110\")\n/// >>> solve(147)\n/// String::from(\"1100\")\n/// Variables:\n\
  /// @N integer\n/// Constraints: 0 \u2264 N \u2264 10000.\n/// Output:\n/// a string\
  \ of binary number\nfn solve(N: isize) -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = solve;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ["    let mut result = String::new();\n    let mut remain = N;\n    while\
    \ remain > 0 {\n        let mut remain = remain % 10;\n        result.push(remain\
    \ as char);\n        remain /= 10;\n    }\n    result", "    let mut sum = 0;\n\
    \    let mut binary = String::new();\n    let mut remain = N;\n    while remain\
    \ > 0 {\n        let digit = remain % 10;\n        sum += digit;\n        remain\
    \ /= 10;\n        binary.push_str(&format!(\"{:0>b}\", digit));\n    }\n    binary.push_str(&format!(\"\
    {:0>b}\", sum));\n    binary", "    let mut s = String::new();\n    let mut carry\
    \ = 0;\n    for d in &N {\n        if d > 0 {\n            s += &format!(\"{:b}\"\
    , d % 2);\n            d /= 2;\n        } else {\n            s += &format!(\"\
    {:b}\", carry);\n            carry = 0;\n        }\n    }\n    s += &format!(\"\
    {:b}\", carry);\n    s", "    let mut result = String::new();\n    let mut carry\
    \ = 0;\n    for i in 0..N {\n        let mut digit = i as u8;\n        digit +=\
    \ carry;\n        carry = digit / 10;\n        digit %= 10;\n        result.push(digit\
    \ as char);\n    }\n    if carry > 0 {\n        result.push(carry as char);\n\
    \    }\n    result", "    let mut s = String::new();\n    let mut carry = 0;\n\
    \    for d in 0..N {\n        let mut digit = d.to_string();\n        while digit.len()\
    \ > 1 {\n            digit = digit.chars().nth(digit.len() - 1).unwrap().to_string();\n\
    \        }\n        let mut digit = digit.to_string();\n        while digit !=\
    \ \"0\" && digit != \"1\" && digit != \"2\" && digit != \"3\" {\n            digit\
    \ = digit.to_string();\n        }\n        if digit == \"0\" {\n            carry\
    \ = 1;\n        } else {\n            carry = 0;\n        }\n        s += digit;\n\
    \    }\n    if carry != 0 {\n        s += \"1\";\n    }\n    s", "    let mut\
    \ result = String::new();\n    let mut sum = 0;\n    while N > 0 {\n        sum\
    \ += N % 10;\n        N /= 10;\n    }\n    if sum > 0 {\n        result.push_str(&format!(\"\
    {}\", sum));\n    }\n    result", "    let mut result = String::new();\n    let\
    \ mut remain = N;\n    while remain > 0 {\n        let mut remaining = remain\
    \ % 2;\n        remain /= 2;\n        result.push(remaining);\n    }\n    result",
  "    let mut res = String::new();\n    let mut carry = 0;\n    for i in 0..N {\n\
    \        let digit = i as u8;\n        let digit = digit as usize;\n        let\
    \ digit = digit as u8;\n        let digit = digit as usize;\n        let digit\
    \ = digit as u8;\n        let digit = digit as u8;\n        let digit = digit\
    \ as u8;\n        let digit = digit as u8;\n        let digit = digit as u8;\n\
    \        let digit = digit as u8;\n        let digit = digit as u8;\n        let\
    \ digit = digit as u8;\n        let digit = digit as u8;\n        let digit =\
    \ digit as u8;\n        let digit = digit as u8;\n        let digit = digit as\
    \ u8;\n        let digit = digit as u8;\n        let digit = digit as u8;\n  \
    \      let digit = digit as u8;\n        let digit = digit as u8;\n        let\
    \ digit = digit as u8;\n        let digit = digit as u8;\n        let digit =\
    \ digit as u8;\n        let digit = digit as u8;\n        let digit = digit as\
    \ u8;\n        let digit = digit as u8;\n        let digit = digit as u8;\n  \
    \      let digit = digit as u8;\n        let digit = digit as u8;\n        let\
    \ digit = digit as u8;\n        let digit = digit as u8;\n        let digit =\
    \ digit as u8;\n        let digit = digit as u8;\n        let digit = digit as\
    \ u8;\n        let digit = digit as u8;\n        let digit = digit as u8;\n  \
    \      let digit = digit as u8;\n        let digit = digit as u8;\n        let\
    \ digit = digit as u8;\n        let digit = digit as u8;\n        let digit =\
    \ digit as u8;\n        let digit = digit as u8;\n        let digit = digit as\
    \ u8;\n        let digit = digit as u8;\n        let digit = digit as u8;\n  \
    \      let digit = digit as u8;\n        let digit = digit as u8;\n        let\
    \ digit = digit as u8;\n        let digit = digit as u8;\n        let digit =\
    \ digit as u8;\n        let digit = digit as u8;\n        let digit = digit as\
    \ u8;\n        let digit = digit as u8;\n        let digit = digit as u8;\n  \
    \      let digit = digit as u8;\n        let digit = digit as u8;\n        let\
    \ digit = digit as u8;\n        let digit = digit as u8;\n        let digit =\
    \ digit as u8;\n        let digit = digit as u8;\n        let digit = digit as\
    \ u8;\n        let digit = ", "    let mut result = String::new();\n    let mut\
    \ carry = 0;\n    for i in 0..N {\n        let digit = i as usize;\n        let\
    \ digit = digit + carry;\n        let digit = digit % 10;\n        let digit =\
    \ digit as char;\n        result += digit;\n        carry = digit / 10;\n    }\n\
    \    if carry > 0 {\n        result += '1';\n    }\n    result", "    let mut\
    \ result = String::new();\n    let mut sum = 0;\n    for i in 0..N {\n       \
    \ sum += i as isize;\n        result.push_str(&format!(\"{:b}\", i as isize));\n\
    \    }\n    if sum > 0 {\n        result.push_str(&format!(\"{:b}\", sum as isize));\n\
    \    }\n    result", "    let mut s = String::new();\n    let mut carry = 0;\n\
    \    for i in 0..N {\n        let mut digit = i as usize;\n        if digit >\
    \ 0 {\n            digit += carry;\n            carry = digit / 10;\n        \
    \    digit %= 10;\n        }\n        s += digit.to_string();\n    }\n    if carry\
    \ > 0 {\n        s += &format!(\"{}\", carry).to_string();\n    }\n    s", " \
    \   let mut result = String::new();\n    let mut remainder = N;\n    while remainder\
    \ > 0 {\n        remainder %= 10;\n        result.push(remainder);\n    }\n  \
    \  result", "    let mut result = String::new();\n    let mut carry = 0;\n   \
    \ for d in 0..N {\n        let mut digit = d % 10;\n        digit += carry;\n\
    \        carry = digit / 10;\n        result.push_str(&format!(\"{}\", digit));\n\
    \    }\n    if carry > 0 {\n        result.push_str(&format!(\"{}\", carry));\n\
    \    }\n    result", "    let mut res = String::new();\n    let mut sum = 0;\n\
    \    while N > 0 {\n        sum += N % 10;\n        N /= 10;\n    }\n    res.push_str(&format!(\"\
    {}\", sum));\n    res", "    let mut result = String::new();\n    let mut carry\
    \ = 0;\n    for i in 0..N {\n        let digit = i / 10;\n        let remainder\
    \ = i % 10;\n        let digits = String::from(\"0\".to_string());\n        if\
    \ remainder == 0 {\n            digits = digits.insert(0, digit.to_string());\n\
    \        } else {\n            digits = digits.insert(0, digit.to_string());\n\
    \            digits = digits.insert(0, remainder.to_string());\n        }\n  \
    \      result = result.insert(0, digits);\n        carry = 1;\n    }\n    if carry\
    \ != 0 {\n        result = result.insert(0, String::from(\"1\".to_string()));\n\
    \    }\n    result", "    let mut s = String::new();\n    let mut carry = 0;\n\
    \    for &d in &N {\n        let mut digit = d.to_digit(10);\n        digit +=\
    \ carry;\n        carry = digit / 10;\n        digit %= 10;\n        s += digit.to_string();\n\
    \    }\n    if carry > 0 {\n        s += \"1\".to_string();\n    }\n    s", " \
    \   let mut result = String::new();\n    let mut carry = 0;\n    let mut digits\
    \ = N;\n    while digits > 0 {\n        let digit = digits % 10;\n        digits\
    \ /= 10;\n        if digit > 0 {\n            result += &format!(\"{:b}\", digit).to_string();\n\
    \        }\n        carry += digit;\n        if carry > 0 {\n            result\
    \ += &format!(\"{:b}\", carry).to_string();\n        }\n    }\n    result", " \
    \   let mut res = String::new();\n    let mut digits = N;\n    while digits >\
    \ 0 {\n        res.push_str(&format!(\"{:b}\", digits));\n        digits /= 2;\n\
    \    }\n    res", "    let mut result = String::new();\n    let mut carry = 0;\n\
    \    for d in 0..N {\n        let mut digit = d % 10;\n        digit += carry;\n\
    \        carry = digit / 10;\n        result += String::from(&format!(\"{:0>b}\"\
    , digit));\n    }\n    if carry > 0 {\n        result += String::from(\"1\");\n\
    \    }\n    result", "    let mut s = String::new();\n    let mut carry = 0;\n\
    \    for i in 0..N {\n        let digit = i as u8;\n        let digit = digit\
    \ + carry;\n        carry = digit / 10;\n        digit %= 10;\n        s.push((digit\
    \ as char).to_string());\n    }\n    if carry != 0 {\n        s.push((carry as\
    \ char).to_string());\n    }\n    s"]
stop_tokens:
- "\n}"
