name: HumanEval_141_file_name_check
language: rs
prompt: "/// Create a function which takes a string representing a file's name, and\
  \ returns\n/// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  /// A file's name is considered to be valid if and only if all the following conditions\
  \ \n/// are met:\n/// - There should not be more than three digits ('0'-'9') in\
  \ the file's name.\n/// - The file's name contains exactly one dot '.'\n/// - The\
  \ substring before the dot should not be empty, and it starts with a letter from\
  \ \n/// the latin alphapet ('a'-'z' and 'A'-'Z').\n/// - The substring after the\
  \ dot should be one of these: ['txt', 'exe', 'dll']\n/// Examples:\n/// >>> file_name_check(String::from(\"\
  example.txt\"))\n/// String::from(\"Yes\")\n/// >>> file_name_check(String::from(\"\
  1example.dll\"))\n/// String::from(\"No\")\nfn file_name_check(file_name: String)\
  \ -> String {\n"
tests: "}\n\nfn main() {\n    let candidate = file_name_check;\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n}\n"
completions: ["    let mut file_name_chars = file_name.chars();\n    let mut dot_pos\
    \ = file_name_chars.find_first_of('.');\n    let mut dot_pos_end = file_name_chars.find_first_not_of('.',\
    \ dot_pos);\n    let mut dot_pos_start = dot_pos + 1;\n    let mut dot_pos_start_end\
    \ = dot_pos_end;\n    let mut dot_pos_start_end_end = dot_pos_start_end;\n   \
    \ let mut dot_pos_start_end_end_end = dot_pos_start_end_end;\n    let mut dot_pos_start_end_end_end_end\
    \ = dot_pos_start_end_end_end_end;\n    let mut dot_pos_start_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end;\n    let mut dot_pos_start_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end;\n    let mut dot_pos_start_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end;\n    let mut dot_pos_start_end_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end_end;\n    let mut dot_pos_start_end_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end_end_end;\n    let mut dot_pos_start_end_end_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end_end_end_end;\n    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end_end_end_end;\n    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end;\n    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end;\n    let mut\
    \ dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end;\n \
    \   let mut dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = dot_pos_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end;\n\
    \    let mut dot_pos_start_end_end_end_end_end_end_", "    let mut file_name =\
    \ file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos { \n        return String::from(\"No\");\n    }\n    \n    let\
    \ mut first_letter = String::from(\"\");\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    \n    for c in file_name.chars() {\n        if c.is_digit() {\n     \
    \       return String::from(\"No\");\n        }\n        if c.is_lowercase() {\n\
    \            if first_letter == String::from(\"\") {\n                first_letter\
    \ = String::from(c.to_lowercase());\n            }\n            else {\n     \
    \           if first_letter != String::from(c.to_lowercase()) {\n            \
    \        return String::from(\"No\");\n                }\n            }\n    \
    \    }\n        else if c.is_uppercase() {\n            if first_letter == String::from(\"\
    \") {\n                first_letter = String::from(c.to_uppercase());\n      \
    \      }\n            else {\n                if first_letter != String::from(c.to_uppercase())\
    \ {\n                    return String::from(\"No\");\n                }\n   \
    \         }\n        }\n    }\n    \n    if dot_pos == String::npos {\n      \
    \  return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos - 1] !=\
    \ '.' {\n        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos\
    \ - 2] != String::from(\"a\") && file_name[dot_pos - 2] != String::from(\"A\"\
    ) {\n        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos\
    \ - 3] != String::from(\"z\") && file_name[dot_pos - 3] != String::from(\"Z\"\
    ) {\n        return String::from(\"No\");\n    }\n    \n    if file_name[dot_pos\
    \ - 4] != String::from(\"0\") && file_name[dot_pos - 4] != String::from(\"9\"\
    ) {\n        return String::from(\"No\");\n    }\n    \n    return String::from(\"\
    Yes\");", "    if file_name.len() > 3 {\n        return String::from(\"No\");\n\
    \    }\n    if file_name.contains('.') {\n        return String::from(\"No\");\n\
    \    }\n    if file_name.starts_with(\"a\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"A\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"0\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\"9\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.starts_with(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n    if file_name.contains(\".\") {\n        return String::from(\"\
    No\");\n    }\n", "    if file_name.len() > 3 {\n        return String::from(\"\
    No\");\n    }\n    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut first_char = file_name[..dot_pos].chars().next().unwrap();\n\
    \    if first_char.len() != 1 || first_char != 'a' || first_char != 'z' || first_char\
    \ != 'A' {\n        return String::from(\"No\");\n    }\n    let mut dot_pos =\
    \ file_name.find('.')\n    if dot_pos == String::npos {\n        return String::from(\"\
    No\");\n    }\n    let mut dot_char = file_name[dot_pos + 1..].chars().next().unwrap();\n\
    \    if dot_char.len() != 1 || dot_char != 'txt' || dot_char != 'exe' || dot_char\
    \ != 'dll' {\n        return String::from(\"No\");\n    }\n    String::from(\"\
    Yes\")", "    if file_name.len() > 3 {\n        return String::from(\"No\");\n\
    \    }\n    if file_name.contains(\".\") {\n        return String::from(\"No\"\
    );\n    }\n    if file_name.starts_with(\"a\") || file_name.starts_with(\"A\"\
    ) {\n        return String::from(\"No\");\n    }\n    if file_name.starts_with(\"\
    0\") || file_name.starts_with(\"9\") {\n        return String::from(\"No\");\n\
    \    }\n    if file_name.starts_with(\".\") {\n        let mut dot_index = file_name.rfind('.')\n\
    \        if dot_index == String::npos {\n            return String::from(\"No\"\
    );\n        }\n        if dot_index == 0 {\n            return String::from(\"\
    No\");\n        }\n        let mut dot_string = file_name.clone();\n        dot_string.truncate(dot_index\
    \ - 1);\n        if dot_string.contains(\"txt\") || dot_string.contains(\"exe\"\
    ) || dot_string.contains(\"dll\") {\n            return String::from(\"Yes\");\n\
    \        }\n    }\n    return String::from(\"No\");", "    if file_name.len()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    if file_name.contains('.')\
    \ == false {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_letter()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_lowercase()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_uppercase()) {\n \
    \       return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_digit()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_punctuation()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_symbol()) {\n    \
    \    return String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_whitespace())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_control()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_newline()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_linefeed()) {\n  \
    \      return String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_formfeed())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_backspace()) {\n        return String::from(\"No\");\n    }\n  \
    \  if file_name.chars().any(|c| !c.is_ascii_formfeed()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_newline()) {\n   \
    \     return String::from(\"No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_linefeed())\
    \ {\n        return String::from(\"No\");\n    }\n    if file_name.chars().any(|c|\
    \ !c.is_ascii_control()) {\n        return String::from(\"No\");\n    }\n    if\
    \ file_name.chars().any(|c| !c.is_ascii_newline()) {\n        return String::from(\"\
    No\");\n    }\n    if file_name.chars().any(|c| !c.is_ascii_linefeed()) {\n  \
    \      return String::from(\"No\");\n    }", "    let mut file_name_split = file_name.split('.');\n\
    \    let mut file_name_split_len = file_name_split.len();\n    let mut file_name_split_index\
    \ = 0;\n    let mut file_name_split_chars = String::new();\n    let mut file_name_split_chars_len\
    \ = String::new();\n    let mut file_name_split_char_index = 0;\n    let mut file_name_split_chars_index\
    \ = 0;\n    let mut file_name_split_chars_len = file_name_split_chars.len();\n\
    \    let mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_split_chars.len();\n    let mut file_name_split_chars_index = 0;\n\
    \    let mut file_name_split_chars_len = file_name_split_chars.len();\n    let\
    \ mut file_name_split_chars_index = 0;\n    let mut file_name_split_chars_len\
    \ = file_name_", "    let mut file_name = file_name.to_string();\n    let mut\
    \ dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos = dot_pos + 1;\n    let mut\
    \ dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos {\n  \
    \      return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end_2 = file_name.find('.')\n    if dot_pos_end_2\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos_end_2 = dot_pos_end_2 + 1;\n    let mut dot_pos_end_3 = file_name.find('.')\n\
    \    if dot_pos_end_3 == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_end_3 = dot_pos_end_3 + 1;\n    let mut dot_pos_end_4\
    \ = file_name.find('.')\n    if dot_pos_end_4 == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end_4 = dot_pos_end_4 + 1;\n\
    \    let mut dot_pos_end_5 = file_name.find('.')\n    if dot_pos_end_5 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end_5 =\
    \ dot_pos_end_5 + 1;\n    let mut dot_pos_end_6 = file_name.find('.')\n    if\
    \ dot_pos_end_6 == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end_6 = dot_pos_end_6 + 1;\n    let mut dot_pos_end_7 = file_name.find('.')\n\
    \    if dot_pos_end_7 == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_end_7 = dot_pos_end_7 + 1;\n    let mut dot_pos_end_8\
    \ = file_name.find('.')\n    if dot_pos_end_8 == String::npos {\n        return\
    \ String::from(\"No\");\n    }\n    let mut dot_pos_end_8 = dot_pos_end_8 + 1;\n\
    \    let mut dot_pos_end_9 = file_name.find('.')\n    if dot_pos_end_9 == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end_9 =\
    \ dot_pos_end_9 + 1;\n    let mut dot_pos_end_10 = file_name.find('.')\n    if\
    \ dot_pos_end_10 == String::npos {\n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos_end_10 = dot_pos_end_10", "    if file_name.chars().count()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.rfind('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut first_char = file_name[dot_pos - 1..dot_pos].chars().next()\n   \
    \ if first_char.count() > 1 {\n        return String::from(\"No\");\n    }\n \
    \   if first_char.count() < 1 || first_char.first().unwrap() != 'a' || first_char.first().unwrap()\
    \ != 'z' {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ + 1..].chars().any(|c| !c.is_ascii_alphanumeric()) {\n        return String::from(\"\
    No\");\n    }\n    String::from(\"Yes\")", "    if file_name.chars().count() >\
    \ 3 {\n        String::from(\"No\")\n    } else {\n        let mut dot_pos = file_name.rfind('.')\n\
    \        let mut dot_pos_end = file_name.rfind('.')\n        let mut dot_pos_start\
    \ = dot_pos + 1;\n        let mut dot_pos_end = dot_pos_end - 1;\n        let\
    \ mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end\
    \ - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end\
    \ = dot_pos_end - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n   \
    \     let mut dot_pos_end = dot_pos_end - 1;\n        let mut dot_pos_start =\
    \ dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end - 1;\n       \
    \ let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end\
    \ - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end\
    \ = dot_pos_end - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n   \
    \     let mut dot_pos_end = dot_pos_end - 1;\n        let mut dot_pos_start =\
    \ dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end - 1;\n       \
    \ let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end\
    \ - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end\
    \ = dot_pos_end - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n   \
    \     let mut dot_pos_end = dot_pos_end - 1;\n        let mut dot_pos_start =\
    \ dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end - 1;\n       \
    \ let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end\
    \ - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end\
    \ = dot_pos_end - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n   \
    \     let mut dot_pos_end = dot_pos_end - 1;\n        let mut dot_pos_start =\
    \ dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end - 1;\n       \
    \ let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end = dot_pos_end\
    \ - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n        let mut dot_pos_end\
    \ = dot_pos_end - 1;\n        let mut dot_pos_start = dot_pos_start - 1;\n   \
    \     let mut dot_pos_end = dot_pos_end - 1;\n        let mut dot_pos_start =\
    \ dot_pos_start - 1;\n", "    let mut file_name = file_name.clone();\n    let\
    \ mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos { \n     \
    \   return String::from(\"No\");\n    }\n    let mut dot_pos_end = file_name.find('.')\n\
    \    if dot_pos_end == String::npos { \n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_start = dot_pos + 1;\n    let mut dot_pos_end = dot_pos_start\
    \ + 1;\n    let mut dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_start_letter = String::new();\n    let\
    \ mut dot_pos_end_letter = String::new();\n    let mut dot_pos_start_letter =\
    \ String::new();\n    let mut dot_pos_end_letter = String::new();\n    let mut\
    \ dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter = String::new();\n\
    \    let mut dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_start_letter = String::new();\n    let\
    \ mut dot_pos_end_letter = String::new();\n    let mut dot_pos_start_letter =\
    \ String::new();\n    let mut dot_pos_end_letter = String::new();\n    let mut\
    \ dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter = String::new();\n\
    \    let mut dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_start_letter = String::new();\n    let\
    \ mut dot_pos_end_letter = String::new();\n    let mut dot_pos_start_letter =\
    \ String::new();\n    let mut dot_pos_end_letter = String::new();\n    let mut\
    \ dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter = String::new();\n\
    \    let mut dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter\
    \ = String::new();\n    let mut dot_pos_start_letter = String::new();\n    let\
    \ mut dot_pos_end_letter = String::new();\n    let mut dot_pos_start_letter =\
    \ String::new();\n    let mut dot_pos_end_letter = String::new();\n    let mut\
    \ dot_pos_start_letter = String::new();\n    let mut dot_pos_end_letter = String::new();\n\
    \    let mut dot_", "    if file_name.chars().count() > 3 {\n        String::from(\"\
    No\")\n    } else {\n        let mut dot_pos = file_name.find('.')\n        if\
    \ dot_pos == String::npos {\n            String::from(\"No\")\n        } else\
    \ {\n            let mut first_letter = file_name.chars().next().unwrap();\n \
    \           if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_pos = file_name.find('.')\n\
    \                if dot_pos == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_pos = file_name.find('.')\n\
    \                    if dot_pos == String::npos {\n                        String::from(\"\
    No\")\n                    } else {\n                        let mut dot_pos =\
    \ file_name.find('.')\n                        if dot_pos == String::npos {\n\
    \                            String::from(\"No\")\n                        } else\
    \ {\n                            if dot_pos == dot_pos + 1 {\n               \
    \                 String::from(\"Yes\")\n                            } else {\n\
    \                                String::from(\"No\")\n                      \
    \      }\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }", "    let mut file_name_chars = file_name.chars();\n\
    \    let mut dot_pos = file_name_chars.next().unwrap().unwrap();\n    let mut\
    \ dot_pos_next = dot_pos.unwrap();\n    let mut dot_pos_next_next = dot_pos_next.unwrap();\n\
    \    let mut dot_pos_next_next_next = dot_pos_next_next.unwrap();\n    let mut\
    \ dot_pos_next_next_next_next = dot_pos_next_next_next.unwrap();\n    let mut\
    \ dot_pos_next_next_next_next_next = dot_pos_next_next_next_next.unwrap();\n \
    \   let mut dot_pos_next_next_next_next_next_next = dot_pos_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next = dot_pos_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next = dot_pos_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next = dot_pos_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next = dot_pos_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next = dot_pos_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next =\
    \ dot_pos_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n \
    \   let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next\
    \ = dot_pos_next_next_next_next_next_next_next_next_next_next_next_next_next_next.unwrap();\n\
    \    let mut dot_pos_next_next_next_", "    let mut file_name = file_name.clone();\n\
    \    let mut dot_pos = file_name.find('.')\n    if dot_pos == String::npos {\n\
    \        return String::from(\"No\");\n    }\n    let mut dot_pos = dot_pos +\
    \ 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String::from(\"No\");\n    }\n    let mut dot_pos_end = dot_pos_end\
    \ + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if dot_pos_end == String::npos\
    \ {\n        return String", "    if file_name.len() > 3 {\n        String::from(\"\
    No\")\n    } else {\n        let mut dot_pos = file_name.find('.')\n        if\
    \ dot_pos == String::npos {\n            String::from(\"No\")\n        } else\
    \ {\n            let mut first_letter = file_name[0..dot_pos].chars().next().unwrap();\n\
    \            if first_letter < 'a' || first_letter > 'z' {\n                String::from(\"\
    No\")\n            } else {\n                let mut dot_pos = file_name.find('.')\n\
    \                if dot_pos == String::npos {\n                    String::from(\"\
    No\")\n                } else {\n                    let mut dot_name = file_name[dot_pos\
    \ + 1..].chars().next().unwrap();\n                    if dot_name.contains('.')\
    \ {\n                        String::from(\"No\")\n                    } else\
    \ {\n                        let mut dot_name = file_name[dot_pos + 1..].chars().next().unwrap();\n\
    \                        if dot_name.contains('.') {\n                       \
    \     String::from(\"No\")\n                        } else {\n               \
    \             String::from(\"Yes\")\n                        }\n             \
    \       }\n                }\n            }\n        }\n    }", "    let mut file_name\
    \ = file_name.clone();\n    let mut dot_pos = file_name.find('.')\n    if dot_pos\
    \ == String::npos {\n        return String::from(\"No\");\n    }\n    let mut\
    \ dot_pos = dot_pos + 1;\n    let mut dot_pos_end = file_name.find('.')\n    if\
    \ dot_pos_end == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = dot_pos_end - 1;\n    let mut dot_pos_start = file_name.find('.')\n\
    \    if dot_pos_start == String::npos {\n        return String::from(\"No\");\n\
    \    }\n    let mut dot_pos_start = dot_pos_start + 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let\
    \ mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start = dot_pos_start\
    \ - 1;\n    let mut dot_pos_start = dot_pos_start - 1;\n    let mut dot_pos_start\
    \ = dot_pos_start - 1;\n    let mut dot_pos_start = ", "    let mut file_name\
    \ = file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n    if\
    \ dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n   \
    \ let mut dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos + 1;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n    let mut\
    \ dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter = dot_pos_end;\n\
    \    let mut dot_pos_start_letter = dot_pos_start;\n    let mut dot_pos_end_letter\
    \ = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n    let mut\
    \ dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter = dot_pos_start;\n\
    \    let mut dot_pos_end_letter = dot_pos_end;\n    let mut dot_pos_start_letter\
    \ = dot_pos_start;\n    let mut dot_pos_end_letter = ", "    if file_name.len()\
    \ > 3 {\n        return String::from(\"No\");\n    }\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    if dot_pos == 0 {\n        return String::from(\"No\");\n    }\n    if file_name[dot_pos\
    \ - 1] != String::from('0') && file_name[dot_pos - 1] != String::from('9') {\n\
    \        return String::from(\"No\");\n    }\n    let mut first_letter = file_name[dot_pos\
    \ - 1];\n    if first_letter < 'a' || first_letter > 'z' {\n        return String::from(\"\
    No\");\n    }\n    let mut last_letter = file_name[dot_pos];\n    if last_letter\
    \ < 'a' || last_letter > 'z' {\n        return String::from(\"No\");\n    }\n\
    \    if file_name[dot_pos - 2] != String::from('.') {\n        return String::from(\"\
    No\");\n    }\n    if file_name[dot_pos - 2] != String::from('txt') && file_name[dot_pos\
    \ - 2] != String::from('exe') && file_name[dot_pos - 2] != String::from('dll')\
    \ {\n        return String::from(\"No\");\n    }\n    String::from(\"Yes\")",
  "    let mut file_name = file_name.to_string();\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos { \n        return String::from(\"No\");\n   \
    \ }\n    let mut dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos\
    \ + 1;\n    let mut dot_pos_start_letter = true;\n    let mut dot_pos_end_letter\
    \ = true;\n    let mut dot_pos_start_letter2 = true;\n    let mut dot_pos_end_letter2\
    \ = true;\n    let mut dot_pos_start_letter3 = true;\n    let mut dot_pos_end_letter3\
    \ = true;\n    let mut dot_pos_start_letter4 = true;\n    let mut dot_pos_end_letter4\
    \ = true;\n    let mut dot_pos_start_letter5 = true;\n    let mut dot_pos_end_letter5\
    \ = true;\n    let mut dot_pos_start_letter6 = true;\n    let mut dot_pos_end_letter6\
    \ = true;\n    let mut dot_pos_start_letter7 = true;\n    let mut dot_pos_end_letter7\
    \ = true;\n    let mut dot_pos_start_letter8 = true;\n    let mut dot_pos_end_letter8\
    \ = true;\n    let mut dot_pos_start_letter9 = true;\n    let mut dot_pos_end_letter9\
    \ = true;\n    let mut dot_pos_start_letter10 = true;\n    let mut dot_pos_end_letter10\
    \ = true;\n    let mut dot_pos_start_letter11 = true;\n    let mut dot_pos_end_letter11\
    \ = true;\n    let mut dot_pos_start_letter12 = true;\n    let mut dot_pos_end_letter12\
    \ = true;\n    let mut dot_pos_start_letter13 = true;\n    let mut dot_pos_end_letter13\
    \ = true;\n    let mut dot_pos_start_letter14 = true;\n    let mut dot_pos_end_letter14\
    \ = true;\n    let mut dot_pos_start_letter15 = true;\n    let mut dot_pos_end_letter15\
    \ = true;\n    let mut dot_pos_start_letter16 = true;\n    let mut dot_pos_end_letter16\
    \ = true;\n    let mut dot_pos_start_letter17 = true;\n    let mut dot_pos_end_letter17\
    \ = true;\n    let mut dot_pos_start_letter18 = true;\n    let mut dot_pos_end_letter18\
    \ = true;\n    let mut dot_pos_start_letter19 = true;\n    let mut dot_pos_end_letter19\
    \ = true;\n    let mut dot_pos_start_letter20 = true;\n    let mut dot_pos_end_letter20\
    \ = true;\n    let mut dot_pos_start_letter21 = true;\n    let mut dot_pos_end_letter21\
    \ = true;\n    let mut dot_pos_start_letter22 = true;\n    let mut dot_pos_end_letter22\
    \ = true;\n    let mut dot_pos_start_letter23 = true;\n    let mu", "    let mut\
    \ file_name = file_name.clone();\n    let mut dot_pos = file_name.find('.')\n\
    \    if dot_pos == String::npos {\n        return String::from(\"No\");\n    }\n\
    \    let mut dot_pos_end = dot_pos + 1;\n    let mut dot_pos_start = dot_pos +\
    \ 1;\n    let mut dot_pos_start_letter = false;\n    let mut dot_pos_end_letter\
    \ = false;\n    let mut dot_pos_start_letter2 = false;\n    let mut dot_pos_end_letter2\
    \ = false;\n    let mut dot_pos_start_letter3 = false;\n    let mut dot_pos_end_letter3\
    \ = false;\n    let mut dot_pos_start_letter4 = false;\n    let mut dot_pos_end_letter4\
    \ = false;\n    let mut dot_pos_start_letter5 = false;\n    let mut dot_pos_end_letter5\
    \ = false;\n    let mut dot_pos_start_letter6 = false;\n    let mut dot_pos_end_letter6\
    \ = false;\n    let mut dot_pos_start_letter7 = false;\n    let mut dot_pos_end_letter7\
    \ = false;\n    let mut dot_pos_start_letter8 = false;\n    let mut dot_pos_end_letter8\
    \ = false;\n    let mut dot_pos_start_letter9 = false;\n    let mut dot_pos_end_letter9\
    \ = false;\n    let mut dot_pos_start_letter10 = false;\n    let mut dot_pos_end_letter10\
    \ = false;\n    let mut dot_pos_start_letter11 = false;\n    let mut dot_pos_end_letter11\
    \ = false;\n    let mut dot_pos_start_letter12 = false;\n    let mut dot_pos_end_letter12\
    \ = false;\n    let mut dot_pos_start_letter13 = false;\n    let mut dot_pos_end_letter13\
    \ = false;\n    let mut dot_pos_start_letter14 = false;\n    let mut dot_pos_end_letter14\
    \ = false;\n    let mut dot_pos_start_letter15 = false;\n    let mut dot_pos_end_letter15\
    \ = false;\n    let mut dot_pos_start_letter16 = false;\n    let mut dot_pos_end_letter16\
    \ = false;\n    let mut dot_pos_start_letter17 = false;\n    let mut dot_pos_end_letter17\
    \ = false;\n    let mut dot_pos_start_letter18 = false;\n    let mut dot_pos_end_letter18\
    \ = false;\n    let mut dot_pos_start_letter19 = false;\n    let mut dot_pos_end_letter19\
    \ = false;\n    let mut dot_pos_start_letter20 = false;\n    let mut dot_pos_end_letter20\
    \ = false;\n    let mut dot_pos_start_letter21 = false;\n    let mut dot_pos_end_letter21\
    \ = false;\n    let mut dot_pos_start_letter22 = false;\n    let mut dot_pos_end_letter22\
    \ = false;\n    let mut dot_pos_start_letter23 = false;\n    let mut "]
stop_tokens:
- "\n}"
