name: HumanEval_92_any_int
language: rs
prompt: "/// Create a function that takes 3 numbers.\n/// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
  /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n/// true\n\
  /// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z: f64) ->\
  \ bool {\n"
tests: "}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!(candidate(2.0,\
  \ 3.0, 1.0), true);\n    assert_eq!(candidate(2.5, 2.0, 3.0), false);\n    assert_eq!(candidate(1.5,\
  \ 5.0, 3.5), false);\n    assert_eq!(candidate(2.0, 6.0, 2.0), false);\n    assert_eq!(candidate(4.0,\
  \ 2.0, 2.0), true);\n    assert_eq!(candidate(2.2, 2.2, 2.2), false);\n    assert_eq!(candidate(-4.0,\
  \ 6.0, 2.0), true);\n    assert_eq!(candidate(2.0, 1.0, 1.0), true);\n    assert_eq!(candidate(3.0,\
  \ 4.0, 7.0), true);\n    assert_eq!(candidate(3.0, 4.0, 7.0), false);\n}\n"
completions: ["    x.is_integer() && y.is_integer() && z.is_integer()\n        &&\
    \ x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()", "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    let x_int = x.floor() as i32;\n    let y_int = y.floor() as i32;\n    let z_int\
    \ = z.floor() as i32;\n    if x_int == y_int && y_int == z_int {\n        true\n\
    \    } else {\n        false\n    }", '    x.is_integer() && y.is_integer() &&
    z.is_integer() && x + y + z == f64::from(x)', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.checked_add(y).checked_add(z).is_some()', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x
    + y + z)', '    x.is_integer() && y.is_integer() && z.is_integer() && x + y +
    z == f64::from(x) + f64::from(y) + f64::from(z)', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_integer()', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.to_f64() + y.to_f64()
    + z.to_f64() == x.to_f64()', "    x.is_integer() && y.is_integer() && z.is_integer()\
    \ &&\n        x.checked_add(y).checked_add(z).is_some()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", '    x.is_integer() && y.is_integer() &&
    z.is_integer() && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.unwrap() + y.unwrap() + z.unwrap() ==
    x.unwrap()', '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    let x_int = x.floor() as i32;\n    let y_int = y.floor() as i32;\n    let z_int\
    \ = z.floor() as i32;\n    let sum = x_int + y_int + z_int;\n    match sum {\n\
    \        0 => false,\n        x => true,\n        _ => false,\n    }", "    let\
    \ x: f64 = x.floor();\n    let y: f64 = y.floor();\n    let z: f64 = z.floor();\n\
    \    if x == y || x == z {\n        return true;\n    }\n    if y == z {\n   \
    \     return true;\n    }\n    if x == y || y == z {\n        return true;\n \
    \   }\n    if x == z {\n        return true;\n    }\n    if y == z {\n       \
    \ return true;\n    }\n    if x == y || y == z {\n        return true;\n    }\n\
    \    if x == z {\n        return true;\n    }\n    if y == z {\n        return\
    \ true;\n    }\n    if x == y || y == z {\n        return true;\n    }\n    if\
    \ x == z {\n        return true;\n    }\n    if y == z {\n        return true;\n\
    \    }\n    if x == y || y == z {\n        return true;\n    }\n    if x == z\
    \ {\n        return true;\n    }\n    if y == z {\n        return true;\n    }\n\
    \    if x == y || y == z {\n        return true;\n    }\n    if x == z {\n   \
    \     return true;\n    }\n    if y == z {\n        return true;\n    }\n    if\
    \ x == y || y == z {\n        return true;\n    }\n    if x == z {\n        return\
    \ true;\n    }\n    if y == z {\n        return true;\n    }\n    if x == y ||\
    \ y == z {\n        return true;\n    }\n    if x == z {\n        return true;\n\
    \    }\n    if y == z {\n        return true;\n    }\n    if x == y || y == z\
    \ {\n        return true;\n    }\n    if x == z {\n        return true;\n    }\n\
    \    if y == z {\n        return true;\n    }\n    if x == y || y == z {\n   \
    \     return true;\n    }\n    if x == z {\n        return true;\n    }\n    if\
    \ y == z {\n        return true;\n    }\n    if x == y || y == z {\n        return\
    \ true;\n    }\n    if x == z {\n        return true;\n    }\n    if y == z {\n\
    \        return true;\n    }\n    if x == y || y == z {\n        return true;\n\
    \    }\n    if x == z {\n        return true;\n    }\n    if y == z {\n      \
    \  return true;\n    }\n    if x == y || y == z {\n        return true;\n    }\n\
    \    if x == z {\n        return true;\n    }\n    if y == z {\n        return\
    \ true;\n    }\n    if x == y || y == z {\n        return true;\n    }\n    if\
    \ x == z {\n        return true;\n    }\n    if y == z {\n        return true;\n\
    \    }\n    if x == y || y == z {\n        return true;\n    }\n    if x == z\
    \ {\n        return true;\n    }\n    if y == z {\n        return true;\n    }\n\
    \    if x == y || y == z {\n        return true;\n    }\n    if x == z {\n   \
    \     return true;\n    }\n    if y == z {\n        return true;\n    }\n    if\
    \ x == y || y == z {\n        return true;\n    }\n    if ", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x <= y && x <= z && y <= z', "    let x_int = x.floor() as i32;\n    let y_int\
    \ = y.floor() as i32;\n    let z_int = z.floor() as i32;\n    if x_int == y_int\
    \ && y_int == z_int {\n        true\n    } else {\n        false\n    }", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64() + y.to_f64()
    + z.to_f64())', "    x.is_integer() && y.is_integer() && z.is_integer() &&\n \
    \       x.checked_add(y).checked_add(z).is_some()", '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.to_f64() + y.to_f64() + z.to_f64() ==
    x.to_f64()', '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64()
    + y.to_f64() + z.to_f64())', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x <= y && x <= z && x >= y && x >= z', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && (x + y + z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    let x_int = x.floor() as i32;\n    let y_int = y.floor() as i32;\n    let z_int\
    \ = z.floor() as i32;\n    (x_int + y_int + z_int) == (x * y + z * x)", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x <= y && x <= z && y <= z', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_some()', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x) + f64::from(y)
    + f64::from(z)', "    let x_int = x.floor() as i32;\n    let y_int = y.floor()\
    \ as i32;\n    let z_int = z.floor() as i32;\n    let x_int = x_int as i64;\n\
    \    let y_int = y_int as i64;\n    let z_int = z_int as i64;\n    let x_int =\
    \ x_int as i64;\n    let y_int = y_int as i64;\n    let z_int = z_int as i64;\n\
    \    let x_int = x_int as i64;\n    let y_int = y_int as i64;\n    let z_int =\
    \ z_int as i64;\n    if x_int == y_int && x_int == z_int\n        && x_int ==\
    \ x_int as i64\n        && y_int == y_int as i64\n        && z_int == z_int as\
    \ i64\n        && x_int == x_int as i64\n        && y_int == y_int as i64\n  \
    \      && z_int == z_int as i64\n    {\n        return true;\n    }\n    false",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64()
    + y.to_f64() + z.to_f64())', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", '    x.is_integer() && y.is_integer() &&
    z.is_integer() && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)', " \
    \   let x_int = x.floor() as i32;\n    let y_int = y.floor() as i32;\n    let\
    \ z_int = z.floor() as i32;\n    let x_f64 = x.ceil() as f64;\n    let y_f64 =\
    \ y.ceil() as f64;\n    let z_f64 = z.ceil() as f64;\n    if x_int == y_int &&\
    \ x_int == z_int\n        && x_f64 == y_f64 && x_f64 == z_f64\n    {\n       \
    \ return true;\n    }\n    false", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x) + f64::from(y)
    + f64::from(z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n   \
    \     && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.to_f64() +\
    \ y.to_f64() + z.to_f64() == x.to_f64()", '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64() + y.to_f64()
    + z.to_f64())', '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x <= y && x <= z && y <= z', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == f64::from(x.to_f64() + y.to_f64() + z.to_f64())', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", " \
    \   x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  "    let mut sum = 0;\n    sum += x;\n    sum += y;\n    sum += z;\n    sum == x\
    \ || sum == y || sum == z", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer()\n        && (x + y + z).is_integer()", '    x.is_integer() &&
    y.is_integer() && z.is_integer() && x + y + z == f64::from(x)', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == x.checked_add(y).checked_add(z).unwrap()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x <= y && x <= z && y <= z', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_some()', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()', "  \
    \  x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_integer()', '    x <= y && y <= z && z >=
    x', '    x <= y && x <= z && x >= y && x >= z', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.unwrap() + y.unwrap() + z.unwrap() ==
    x.unwrap()', '    x <= y && x <= z && y <= z', '    x <= y && x <= z && x >= y
    && x >= z', '    x <= y && y <= z && x >= z', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && (x + y + z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64() + y.to_f64()
    + z.to_f64())', "    x.is_integer() && y.is_integer() && z.is_integer()\n    \
    \    && x.checked_add(y).checked_add(z).is_integer()", '    x <= y && x <= z &&
    y <= z', '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z
    == f64::from(x.to_f64() + y.to_f64() + z.to_f64())', '    x <= y && x <= z &&
    y <= z', '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x).unwrap()
    + f64::from(y).unwrap() + f64::from(z).unwrap()', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x + y + z)', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == x.to_f64() + y.to_f64() + z.to_f64()', '    x <= y && y <= z &&
    z >= x', '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x
    + y + z)', '    x.is_integer() && y.is_integer() && z.is_integer() && x + y +
    z == x.to_f64() + y.to_f64() + z.to_f64()', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.checked_add(y).checked_add(z).is_some()', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x) + f64::from(y)
    + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer() && x
    + y + z == f64::from(x + y + z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_ok()", "    let x_int = x.floor();\n\
    \    let y_int = y.floor();\n    let z_int = z.floor();\n    match x_int + y_int\
    \ + z_int {\n        0 => true,\n        _ => false,\n    }", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()', '    x.is_integer() &&
    y.is_integer() && z.is_integer() && x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64()
    + y.to_f64() + z.to_f64())', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.to_f64() + y.to_f64() + z.to_f64()\
    \ == x.to_f64()", "    x.is_integer() && y.is_integer() && z.is_integer()\n  \
    \      && (x + y + z).is_integer()", '    x.is_integer() && y.is_integer() &&
    z.is_integer() && x.checked_add(y).checked_add(z).is_some()', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64() + y.to_f64()
    + z.to_f64())', "    x.is_integer() && y.is_integer() && z.is_integer()\n    \
    \    && (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.to_f64() + y.to_f64()
    + z.to_f64() == x.to_f64()', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)', '    x <= y && x
    <= z && y <= z', '    x <= y && x <= z && y <= z', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()', '    x <=
    y + z && x >= y - z', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.unwrap() + y.unwrap()
    + z.unwrap() == x.unwrap()', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", '    x.is_integer() && y.is_integer() &&
    z.is_integer() && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  "    let x_int = x.floor() as i32;\n    let y_int = y.floor() as i32;\n    let z_int\
    \ = z.floor() as i32;\n    if x_int == y_int && y_int == z_int {\n        return\
    \ true;\n    }\n    false", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x
    + y + z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n        &&\
    \ x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_ok()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == f64::from(x.to_f64() + y.to_f64() + z.to_f64())', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()"]
stop_tokens:
- "\n}"
