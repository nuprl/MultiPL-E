name: HumanEval_92_any_int
language: rs
prompt: "/// Create a function that takes 3 numbers.\n/// Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  /// Returns false in any other cases.\n/// Examples\n/// >>> any_int(5, 2, 7)\n\
  /// true\n/// >>> any_int(3, 2, 2)\n/// false\n/// >>> any_int(3, -2, 1)\n/// true\n\
  /// >>> any_int(3.6, -2.2, 2)\n/// false\nfn any_int(x: f64, y: f64, z: f64) ->\
  \ bool {\n"
tests: "}\n\nfn main() {\n    let candidate = any_int;\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n\
  \    assert_eq!({left}, {right});\n    assert_eq!({left}, {right});\n    assert_eq!({left},\
  \ {right});\n    assert_eq!({left}, {right});\n}\n"
completions: ['    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x <= y && x <= z && y <= z', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", '    x.is_integer() && y.is_integer() &&
    z.is_integer() && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)', " \
    \   x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.unwrap() + y.unwrap()
    + z.unwrap() == x.unwrap()', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_integer()', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64() + y.to_f64()
    + z.to_f64())', '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.unwrap() + y.unwrap()
    + z.unwrap() == x.unwrap()', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()", "   \
    \ x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.to_f64() + y.to_f64() + z.to_f64() ==
    x.to_f64()', "    x.is_integer() && y.is_integer() && z.is_integer()\n       \
    \ && x.checked_add(y).checked_add(z).is_integer()", "    let x: f64 = x.floor();\n\
    \    let y: f64 = y.floor();\n    let z: f64 = z.floor();\n    if x == y && y\
    \ == z {\n        return true;\n    }\n    if x == z {\n        return true;\n\
    \    }\n    if y == z {\n        return true;\n    }\n    return false;", "  \
    \  x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  '    x <= y && y <= z && x >= z', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_integer()', '    x <= y && x <= z && y <=
    z', "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y\
    \ + z).is_integer()", '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.unwrap() + y.unwrap() + z.unwrap() == x.unwrap()', "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_ok()', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_integer()', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && (x + y + z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x) + f64::from(y)
    + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer() && x.unwrap()
    + y.unwrap() + z.unwrap() == x.unwrap()', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x <= y && y <= z && z >= x && x >= 0', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && (x + y + z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    let x_int = x.floor() as i32;\n    let y_int = y.floor() as i32;\n    let z_int\
    \ = z.floor() as i32;\n    let sum = x_int + y_int + z_int;\n    match sum {\n\
    \        0 => false,\n        _ => true,\n    }", "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && (x + y + z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x) + f64::from(y)
    + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  "    let x_int = x.floor() as i32;\n    let y_int = y.floor() as i32;\n    let z_int\
    \ = z.floor() as i32;\n    match x_int + y_int + z_int {\n        0 => true,\n\
    \        _ => false,\n    }", '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == f64::from(x.to_f64() + y.to_f64() + z.to_f64())', '    x <= y
    && x <= z && x >= y && x >= z', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer()\n        && (x + y + z).is_integer()", "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64()
    + y.to_f64() + z.to_f64())', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == x.to_f64() + y.to_f64() + z.to_f64()', '    x.is_integer() &&
    y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64() + y.to_f64()
    + z.to_f64())', '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64()
    + y.to_f64() + z.to_f64())', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64()
    + y.to_f64() + z.to_f64())', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x <= y && x <= z && y <= z', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.to_f64() + y.to_f64() + z.to_f64() == x.to_f64()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", " \
    \   x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x <= y && y <= z && x >= z', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == f64::from(x.to_f64() + y.to_f64() + z.to_f64())', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64()
    + y.to_f64() + z.to_f64())', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    let x_int = x.floor()\
    \ as i32;\n    let y_int = y.floor() as i32;\n    let z_int = z.floor() as i32;\n\
    \    match x_int, y_int, z_int {\n        (x, y, z) => x == y + z && x >= 0 &&\
    \ x <= i32::MAX as i32 &&\n            y >= 0 && y <= i32::MAX as i32 &&\n   \
    \         z >= 0 && z <= i32::MAX as i32,\n        _ => false,\n    }", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", " \
    \   x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x).unwrap()
    + f64::from(y).unwrap() + f64::from(z).unwrap()', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && (x + y + z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64()
    + y.to_f64() + z.to_f64())', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer()\n        && (x + y + z).is_integer()", "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x <= y && x <= z && y <= z', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_some()', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()", " \
    \   x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x <= y && x <= z && y <= z', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.unwrap() + y.unwrap() + z.unwrap() == x.unwrap()', '    x.is_integer() &&
    y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.to_f64() +\
    \ y.to_f64() + z.to_f64() == x.to_f64()", '    x.is_integer() && y.is_integer()
    && z.is_integer() && x + y + z == f64::from(x + y + z)', "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64()
    + y.to_f64() + z.to_f64())', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x).unwrap() + f64::from(y).unwrap()
    + f64::from(z).unwrap()', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_integer()', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x + y + z == x.to_f64() + y.to_f64() + z.to_f64()', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x) + f64::from(y)
    + f64::from(z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n   \
    \     && (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", '    x.is_integer() && y.is_integer() &&
    z.is_integer() && x.checked_add(y).checked_add(z).is_some()', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x <= y && x <= z && y <= z', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()", " \
    \   x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x <= y && x <= z && y <= z', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.unwrap() + y.unwrap() + z.unwrap() ==
    x.unwrap()', '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x
    + y + z)', '    x <= y && x <= z && y <= z', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x.checked_add(y).checked_add(z).is_integer()', "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x
    + y + z)', '    x.is_integer() && y.is_integer() && z.is_integer() && x.to_f64()
    + y.to_f64() + z.to_f64() == x.to_f64()', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)',
  "    let x_int: i64 = x.floor() as i64;\n    let y_int: i64 = y.floor() as i64;\n\
    \    let z_int: i64 = z.floor() as i64;\n    match x_int + y_int + z_int {\n \
    \       0 => true,\n        _ => false,\n    }", "    x.is_integer() && y.is_integer()\
    \ && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.unwrap() + y.unwrap()
    + z.unwrap() == x.unwrap() + y.unwrap() + z.unwrap()', "    x.is_integer() &&\
    \ y.is_integer() && z.is_integer()\n        && x.checked_add(y).checked_add(z).is_integer()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == x.to_f64()
    + y.to_f64() + z.to_f64()', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()", '    x
    <= y && x <= z && y <= z', "    let x: f64 = x.floor();\n    let y: f64 = y.floor();\n\
    \    let z: f64 = z.floor();\n    x <= y && y <= z && z <= x", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.unwrap() + y.unwrap()
    + z.unwrap() == x.unwrap()', '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64() + y.to_f64()
    + z.to_f64())', '    x.is_integer() && y.is_integer() && z.is_integer() && x.to_f64()
    + y.to_f64() + z.to_f64() == x.to_f64()', '    x.is_integer() && y.is_integer()
    && z.is_integer() && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)',
  "    let x: f64 = x.floor();\n    let y: f64 = y.floor();\n    let z: f64 = z.floor();\n\
    \    x <= y && y <= z && x >= z", '    x.is_integer() && y.is_integer() && z.is_integer()
    && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_integer()',
  '    x <= y && x <= z && y <= z', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", "    let mut sum = 0;\n    sum += x;\n\
    \    sum += y;\n    sum += z;\n    sum == sum * 3", '    x.is_integer() && y.is_integer()
    && z.is_integer() && x + y + z == f64::from(x) + f64::from(y) + f64::from(z)',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x)
    + f64::from(y) + f64::from(z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", '    x.is_integer() && y.is_integer() &&
    z.is_integer() && x + y + z == f64::from(x.to_f64() + y.to_f64() + z.to_f64())',
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x.is_integer() && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()',
  "    x.is_integer() && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()",
  "    x.is_integer() && y.is_integer() && z.is_integer() &&\n        x.checked_add(y).checked_add(z).is_some()",
  '    x <= y && y <= z && x >= z', "    x.is_integer() && y.is_integer() && z.is_integer()\n\
    \        && (x + y + z).is_integer()", "    x.is_integer() && y.is_integer() &&\
    \ z.is_integer()\n        && (x + y + z).is_integer()", '    x.is_integer() &&
    y.is_integer() && z.is_integer() && x + y + z == f64::from(x + y + z)', "    let\
    \ x_int = x.floor();\n    let y_int = y.floor();\n    let z_int = z.floor();\n\
    \    match x_int, y_int, z_int {\n        (x_int, y_int, z_int) => x_int == y_int\
    \ + z_int,\n        _ => false,\n    }", '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.checked_add(y).checked_add(z).is_some()', "    x.is_integer()\
    \ && y.is_integer() && z.is_integer()\n        && (x + y + z).is_integer()", '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.checked_add(y).checked_add(z).is_some()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x
    + y + z)', "    x.is_integer() && y.is_integer() && z.is_integer()\n        &&\
    \ x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer() && y.is_integer()
    && z.is_integer() && x.checked_add(y).checked_add(z).is_ok()', '    x.is_integer()
    && y.is_integer() && z.is_integer() && x.to_f64() + y.to_f64() + z.to_f64() ==
    x.to_f64()', "    x.is_integer() && y.is_integer() && z.is_integer()\n       \
    \ && x.checked_add(y).checked_add(z).is_integer()", '    x.is_integer() && y.is_integer()
    && z.is_integer() && x + y + z == f64::from(x + y + z)', '    x.is_integer() &&
    y.is_integer() && z.is_integer() && x.unwrap() + y.unwrap() + z.unwrap() == x.unwrap()',
  '    x.is_integer() && y.is_integer() && z.is_integer() && x + y + z == f64::from(x.to_f64()
    + y.to_f64() + z.to_f64())']
stop_tokens:
- "\n}"
