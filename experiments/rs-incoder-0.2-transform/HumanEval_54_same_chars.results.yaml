language: rs
name: HumanEval_54_same_chars
results:
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else if s0[i] < s1[j] {\n            return\
    \ false;\n        } else {\n            return true;\n        }\n    }\n    i\
    \ == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpezzgqmhg.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpezzgqmhg.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpezzgqmhg.rs:21:19\n\
    \   |\n21 |         } else if s0[i] < s1[j] {\n   |                   ^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `Stri"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] != s1[j] {\n            return\
    \ false;\n        }\n        i += 1;\n        j += 1;\n    }\n    i == s0.len()\
    \ && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp5ok5418f.rs:18:12\n\
    \   |\n18 |         if s0[i] != s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp5ok5418f.rs:18:21\n   |\n18 |         if s0[i] != s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] != s1[j] {\n            return\
    \ false;\n        }\n        i += 1;\n        j += 1;\n    }\n    i == s0.len()\
    \ && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp5ok5418f.rs:18:12\n\
    \   |\n18 |         if s0[i] != s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp5ok5418f.rs:18:21\n   |\n18 |         if s0[i] != s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] != s1[j] {\n            return\
    \ false;\n        }\n        i += 1;\n        j += 1;\n    }\n    i == s0.len()\
    \ && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp5ok5418f.rs:18:12\n\
    \   |\n18 |         if s0[i] != s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp5ok5418f.rs:18:21\n   |\n18 |         if s0[i] != s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] != s1[j] {\n            return\
    \ false;\n        }\n        i += 1;\n        j += 1;\n    }\n    i == s0.len()\
    \ && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp5ok5418f.rs:18:12\n\
    \   |\n18 |         if s0[i] != s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp5ok5418f.rs:18:21\n   |\n18 |         if s0[i] != s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    while i < s0.len() &&\
    \ i < s1.len() {\n        if s0[i] == s1[i] {\n            i += 1;\n        }\
    \ else {\n            return false;\n        }\n    }\n    i == s0.len() || i\
    \ == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpvzsnpnxc.rs:17:12\n\
    \   |\n17 |         if s0[i] == s1[i] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpvzsnpnxc.rs:17:21\n   |\n17 |         if s0[i] == s1[i] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    while i < s0.len() && i < s1.len() {\n\
    \        if s0.chars().nth(i) != s1.chars().nth(i) {\n            return false;\n\
    \        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1rcdw9b5.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else if s0[i] < s1[j] {\n            return\
    \ false;\n        } else {\n            return true;\n        }\n    }\n    i\
    \ == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpezzgqmhg.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpezzgqmhg.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpezzgqmhg.rs:21:19\n\
    \   |\n21 |         } else if s0[i] < s1[j] {\n   |                   ^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `Stri"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    for (a, b) in zip(s0.chars(), s1.chars()) {\n        if a\
    \ != b {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `zip` in this scope\n  --> /tmp/tmpvq0n_5eq.rs:18:19\n\
    \   |\n18 |     for (a, b) in zip(s0.chars(), s1.chars()) {\n   |            \
    \       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n\
    \   |\n1  | use std::iter::zip;\n   |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    for c in s0.chars() {\n        if c !=\
    \ s1[i] {\n            return false;\n        }\n        i += 1;\n    }\n    true\n\
    }\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmpw2_h4y2l.rs:20:17\n   |\n20 |         if c != s1[i] {\n   |        \
    \         ^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help: the\
    \ trait `Index<{integer}>` is not implemented for `String`\n   = help: the following\
    \ other types implement trait `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n\
    \             <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror: aborting due to previous error\n\nFor more information about\
    \ this error, try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] != s1[j] {\n            return\
    \ false;\n        }\n        i += 1;\n        j += 1;\n    }\n    i == s0.len()\
    \ && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp5ok5418f.rs:18:12\n\
    \   |\n18 |         if s0[i] != s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp5ok5418f.rs:18:21\n   |\n18 |         if s0[i] != s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] != s1[j] {\n            return\
    \ false;\n        }\n        i += 1;\n        j += 1;\n    }\n    i == s0.len()\
    \ && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp5ok5418f.rs:18:12\n\
    \   |\n18 |         if s0[i] != s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp5ok5418f.rs:18:21\n   |\n18 |         if s0[i] != s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else if s0[i] < s1[j] {\n            return\
    \ false;\n        } else {\n            return true;\n        }\n    }\n    i\
    \ == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpezzgqmhg.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpezzgqmhg.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpezzgqmhg.rs:21:19\n\
    \   |\n21 |         } else if s0[i] < s1[j] {\n   |                   ^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `Stri"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_iter = s0.chars().enumerate();\n\
    \    let mut s1_iter = s1.chars().enumerate();\n    let mut i = 0;\n    while\
    \ i < s0.len() && i < s1.len() {\n        if s0_iter.next().unwrap().1 != s1_iter.next().unwrap().1\
    \ {\n            return false;\n        }\n        i += 1;\n    }\n    i == s0.len()\
    \ && i == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp7cn7y_b9.rs:29:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    while i < s0.len() &&\
    \ i < s1.len() {\n        if s0.chars().nth(i) != s1.chars().nth(i) {\n      \
    \      return false;\n        }\n        i += 1;\n    }\n    i == s0.len() &&\
    \ i == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpoqxuk_a4.rs:27:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else if s0[i] < s1[j] {\n            return\
    \ false;\n        } else {\n            return true;\n        }\n    }\n    i\
    \ == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpezzgqmhg.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpezzgqmhg.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpezzgqmhg.rs:21:19\n\
    \   |\n21 |         } else if s0[i] < s1[j] {\n   |                   ^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `Stri"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s1 = s1.chars();\n    let mut s0\
    \ = s0.chars();\n    while let Some(mut c) = s0.next() {\n        if let Some(mut\
    \ d) = s1.next() {\n            if c == d {\n                s0 = s0.next();\n\
    \                s1 = s1.next();\n            } else {\n                return\
    \ false;\n            }\n        } else {\n            return false;\n       \
    \ }\n    }\n    true\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmpaj7eyj7j.rs:20:22\n   |\n\
    16 |     let mut s0 = s0.chars();\n   |                  ---------- expected due\
    \ to this value\n...\n20 |                 s0 = s0.next();\n   |             \
    \         ^^^^^^^^^ expected struct `Chars`, found enum `Option`\n   |\n   = note:\
    \ expected struct `Chars<'_>`\n                found enum `Option<char>`\n\nerror[E0308]:\
    \ mismatched types\n  --> /tmp/tmpaj7eyj7j.rs:21:22\n   |\n15 |     let mut s1\
    \ = s1.chars();\n   |                  ---------- expected due to this value\n\
    ...\n21 |                 s1 = s1.next();\n   |                      ^^^^^^^^^\
    \ expected struct `Chars`, found enum `Option`\n   |\n   = note: expected struct\
    \ `Chars<'_>`\n                found enum `Option<char>`\n\nerror: aborting due\
    \ to 2 previous errors\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    for ch in s0.chars() {\n        if ch\
    \ != s1[i] {\n            return false;\n        }\n        i += 1;\n    }\n \
    \   true\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `{integer}`\n  -->\
    \ /tmp/tmpmojwscdd.rs:20:18\n   |\n20 |         if ch != s1[i] {\n   |       \
    \           ^^^^^ `String` cannot be indexed by `{integer}`\n   |\n   = help:\
    \ the trait `Index<{integer}>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to previous error\n\nFor more information about this error, try\
    \ `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    for (c0, c1) in s0.chars().zip(s1.chars()) {\n        if\
    \ c0 != c1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpg64nvrpd.rs:28:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    for (a, b) in zip(s0.chars(), s1.chars()) {\n        if a\
    \ != b {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0425]: cannot find function `zip` in this scope\n  --> /tmp/tmpvq0n_5eq.rs:18:19\n\
    \   |\n18 |     for (a, b) in zip(s0.chars(), s1.chars()) {\n   |            \
    \       ^^^ not found in this scope\n   |\nhelp: consider importing this function\n\
    \   |\n1  | use std::iter::zip;\n   |\n\nerror: aborting due to previous error\n\
    \nFor more information about this error, try `rustc --explain E0425`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    for &(c0, c1) in s0.chars().zip(s1.chars()) {\n        if\
    \ c0 != c1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6yxb3o87.rs:18:9\n   |\n\
    18 |     for &(c0, c1) in s0.chars().zip(s1.chars()) {\n   |         ^^^^^^^^^\
    \    -------------------------- this expression has type `Option<(char, char)>`\n\
    \   |         |\n   |         expected tuple, found reference\n   |\n   = note:\
    \  expected tuple `(char, char)`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_iter = s0.chars().enumerate();\n\
    \    let mut s1_iter = s1.chars().enumerate();\n    while let Some((i0, c0)) =\
    \ s0_iter.next() {\n        let Some((i1, c1)) = s1_iter.next();\n        if c0\
    \ != c1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0005]: refutable pattern in local binding: `None` not covered\n\
    \   --> /tmp/tmp8ixo_6mf.rs:18:13\n    |\n18  |         let Some((i1, c1)) = s1_iter.next();\n\
    \    |             ^^^^^^^^^^^^^^ pattern `None` not covered\n    |\n    = note:\
    \ `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum`\
    \ with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n\
    note: `Option<(usize, char)>` defined here\n    = note: the matched value is of\
    \ type `Option<(usize, char)>`\nhelp: you might want to use `if let` to ignore\
    \ the variant that isn't matched\n    |\n18  |         let (i1, c1) = if let Some((i1,\
    \ c1)) = s1_iter.next() { (i1, c1) } else { todo!() };\n    |         +++++++++++++++++\
    \                                     +++++++++++++++++++++++++++++\n\nwarning:\
    \ unused variable: `i0`\n  --> /tmp/tmp8ixo_6mf.rs:17:21\n   |\n17 |     while\
    \ let Some((i0, c0)) = s0_iter.next() {\n   |                     ^^ help: if\
    \ this is intentional, prefix it with an underscore: `_i0`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: unused variable: `i1`\n  --> /tmp/tmp8ixo_6mf.rs:18:19\n\
    \   |\n18 |         let Some((i1, c1)) = s1_iter.next();\n   |               \
    \    ^^ help: if this is intentional, prefix it with an underscore: `_i1`\n\n\
    error: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0005`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else if s0[i] < s1[j] {\n            return\
    \ false;\n        } else {\n            return true;\n        }\n    }\n    i\
    \ == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpezzgqmhg.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpezzgqmhg.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpezzgqmhg.rs:21:19\n\
    \   |\n21 |         } else if s0[i] < s1[j] {\n   |                   ^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `Stri"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    while i < s0.len() && i < s1.len() {\n\
    \        if s0[i] != s1[i] {\n            return false;\n        }\n        i\
    \ += 1;\n    }\n    i == s0.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpxj8cjaqp.rs:20:12\n\
    \   |\n20 |         if s0[i] != s1[i] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpxj8cjaqp.rs:20:21\n   |\n20 |         if s0[i] != s1[i] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    while i < s0.len() &&\
    \ i < s1.len() {\n        if s0[i] != s1[i] {\n            return false;\n   \
    \     }\n        i += 1;\n    }\n    i == s0.len() && i == s1.len()\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpffwmfx8x.rs:17:12\n\
    \   |\n17 |         if s0[i] != s1[i] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpffwmfx8x.rs:17:21\n   |\n17 |         if s0[i] != s1[i] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut s0_iter = s0.chars().enumerate();\n\
    \    let mut s1_iter = s1.chars().enumerate();\n    while let Some((i0, c0)) =\
    \ s0_iter.next() {\n        let Some((i1, c1)) = s1_iter.next();\n        if c0\
    \ != c1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0005]: refutable pattern in local binding: `None` not covered\n\
    \   --> /tmp/tmp8ixo_6mf.rs:18:13\n    |\n18  |         let Some((i1, c1)) = s1_iter.next();\n\
    \    |             ^^^^^^^^^^^^^^ pattern `None` not covered\n    |\n    = note:\
    \ `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum`\
    \ with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\n\
    note: `Option<(usize, char)>` defined here\n    = note: the matched value is of\
    \ type `Option<(usize, char)>`\nhelp: you might want to use `if let` to ignore\
    \ the variant that isn't matched\n    |\n18  |         let (i1, c1) = if let Some((i1,\
    \ c1)) = s1_iter.next() { (i1, c1) } else { todo!() };\n    |         +++++++++++++++++\
    \                                     +++++++++++++++++++++++++++++\n\nwarning:\
    \ unused variable: `i0`\n  --> /tmp/tmp8ixo_6mf.rs:17:21\n   |\n17 |     while\
    \ let Some((i0, c0)) = s0_iter.next() {\n   |                     ^^ help: if\
    \ this is intentional, prefix it with an underscore: `_i0`\n   |\n   = note: `#[warn(unused_variables)]`\
    \ on by default\n\nwarning: unused variable: `i1`\n  --> /tmp/tmp8ixo_6mf.rs:18:19\n\
    \   |\n18 |         let Some((i1, c1)) = s1_iter.next();\n   |               \
    \    ^^ help: if this is intentional, prefix it with an underscore: `_i1`\n\n\
    error: aborting due to previous error; 2 warnings emitted\n\nFor more information\
    \ about this error, try `rustc --explain E0005`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else if s0[i] < s1[j] {\n            i +=\
    \ 1;\n        } else {\n            j += 1;\n        }\n    }\n    i == s0.len()\
    \ && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpxihwmypj.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpxihwmypj.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpxihwmypj.rs:21:19\n\
    \   |\n21 |         } else if s0[i] < s1[j] {\n   |                   ^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `Stri"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else if s0[i] < s1[j] {\n            return\
    \ false;\n        } else {\n            return true;\n        }\n    }\n    i\
    \ == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpezzgqmhg.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpezzgqmhg.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpezzgqmhg.rs:21:19\n\
    \   |\n21 |         } else if s0[i] < s1[j] {\n   |                   ^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `Stri"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    for &(c0, c1) in s0.chars().zip(s1.chars()) {\n        if\
    \ c0 != c1 {\n            return false;\n        }\n    }\n    true\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0308]: mismatched types\n  --> /tmp/tmp6yxb3o87.rs:18:9\n   |\n\
    18 |     for &(c0, c1) in s0.chars().zip(s1.chars()) {\n   |         ^^^^^^^^^\
    \    -------------------------- this expression has type `Option<(char, char)>`\n\
    \   |         |\n   |         expected tuple, found reference\n   |\n   = note:\
    \  expected tuple `(char, char)`\n           found reference `&_`\n\nerror: aborting\
    \ due to previous error\n\nFor more information about this error, try `rustc --explain\
    \ E0308`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut c0 = s0.chars();\n    let mut c1\
    \ = s1.chars();\n    while c0.peek() != c1.peek() {\n        if c0.peek() != c1.peek()\
    \ {\n            return false;\n        }\n        c0.next();\n        c1.next();\n\
    \    }\n    c0.next().unwrap() == c1.next().unwrap()\n}\n\nfn main() {\n    let\
    \ candidate = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0599]: no method named `peek` found for struct `Chars` in the current\
    \ scope\n  --> /tmp/tmp87nvza8c.rs:17:14\n   |\n17 |     while c0.peek() != c1.peek()\
    \ {\n   |              ^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no\
    \ method named `peek` found for struct `Chars` in the current scope\n  --> /tmp/tmp87nvza8c.rs:17:27\n\
    \   |\n17 |     while c0.peek() != c1.peek() {\n   |                         \
    \  ^^^^ method not found in `Chars<'_>`\n\nerror[E0599]: no method named `peek`\
    \ found for struct `Chars` in the current scope\n  --> /tmp/tmp87nvza8c.rs:18:15\n\
    \   |\n18 |         if c0.peek() != c1.peek() {\n   |               ^^^^ method\
    \ not found in `Chars<'_>`\n\nerror[E0599]: no method named `peek` found for struct\
    \ `Chars` in the current scope\n  --> /tmp/tmp87nvza8c.rs:18:28\n   |\n18 |  \
    \       if c0.peek() != c1.peek() {\n   |                            ^^^^ method\
    \ not found in `Chars<'_>`\n\nerror: aborting due to 4 previous errors\n\nFor\
    \ more information about this error, try `rustc --explain E0599`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    while i < s0.len() && i < s1.len() {\n\
    \        if s0.chars().nth(i) != s1.chars().nth(i) {\n            return false;\n\
    \        }\n        i += 1;\n    }\n    true\n}\n\nfn main() {\n    let candidate\
    \ = same_chars;\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"\
    dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"abcd\"\
    ), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmp1rcdw9b5.rs:30:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    while i < s0.len() &&\
    \ i < s1.len() {\n        if s0[i] != s1[i] {\n            return false;\n   \
    \     }\n        i += 1;\n    }\n    i == s0.len() || i == s1.len()\n}\n\nfn main()\
    \ {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpb8eii1aa.rs:17:12\n\
    \   |\n17 |         if s0[i] != s1[i] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpb8eii1aa.rs:17:21\n   |\n17 |         if s0[i] != s1[i] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] != s1[j] {\n            return\
    \ false;\n        }\n        i += 1;\n        j += 1;\n    }\n    i == s0.len()\
    \ && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmp5ok5418f.rs:18:12\n\
    \   |\n18 |         if s0[i] != s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmp5ok5418f.rs:18:21\n   |\n18 |         if s0[i] != s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    let mut j = 0;\n    while i < s0.len()\
    \ && j < s1.len() {\n        if s0.chars().nth(i) != s1.chars().nth(j) {\n   \
    \         return false;\n        }\n        i += 1;\n        j += 1;\n    }\n\
    \    i == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpp320u7sn.rs:32:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    if s0.len() != s1.len() {\n        return\
    \ false;\n    }\n    let mut i = 0;\n    while i < s0.len() {\n        if s0[i]\
    \ != s1[i] {\n            return false;\n        }\n        i += 1;\n    }\n \
    \   true\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpts491c07.rs:20:12\n\
    \   |\n20 |         if s0[i] != s1[i] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpts491c07.rs:20:21\n   |\n20 |         if s0[i] != s1[i] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror:\
    \ aborting due to 2 previous errors\n\nFor more information about this error,\
    \ try `rustc --explain E0277`.\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 1
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    let mut i = 0;\n    let mut j = 0;\n    while\
    \ i < s0.len() && j < s1.len() {\n        if s0[i] == s1[j] {\n            i +=\
    \ 1;\n            j += 1;\n        } else if s0[i] < s1[j] {\n            return\
    \ false;\n        } else {\n            return true;\n        }\n    }\n    i\
    \ == s0.len() && j == s1.len()\n}\n\nfn main() {\n    let candidate = same_chars;\n\
    \    assert_eq!(candidate(String::from(\"eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"dddddddabc\"\
    )), true);\n    assert_eq!(candidate(String::from(\"dddddddabc\"), String::from(\"\
    abcd\")), true);\n    assert_eq!(candidate(String::from(\"eabcd\"), String::from(\"\
    dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"abcd\"), String::from(\"\
    dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"eabcdzzzz\"\
    ), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: SyntaxError
  stderr: "error[E0277]: the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpezzgqmhg.rs:18:12\n\
    \   |\n18 |         if s0[i] == s1[j] {\n   |            ^^^^^ `String` cannot\
    \ be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not implemented\
    \ for `String`\n   = help: the following other types implement trait `Index<Idx>`:\n\
    \             <String as Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n\
    \             <String as Index<RangeInclusive<usize>>>\n             <String as\
    \ Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `String` cannot be indexed by `usize`\n\
    \  --> /tmp/tmpezzgqmhg.rs:18:21\n   |\n18 |         if s0[i] == s1[j] {\n   |\
    \                     ^^^^^ `String` cannot be indexed by `usize`\n   |\n   =\
    \ help: the trait `Index<usize>` is not implemented for `String`\n   = help: the\
    \ following other types implement trait `Index<Idx>`:\n             <String as\
    \ Index<RangeFrom<usize>>>\n             <String as Index<RangeFull>>\n      \
    \       <String as Index<RangeInclusive<usize>>>\n             <String as Index<RangeTo<usize>>>\n\
    \             <String as Index<RangeToInclusive<usize>>>\n             <String\
    \ as Index<std::ops::Range<usize>>>\n             <str as Index<I>>\n\nerror[E0277]:\
    \ the type `String` cannot be indexed by `usize`\n  --> /tmp/tmpezzgqmhg.rs:21:19\n\
    \   |\n21 |         } else if s0[i] < s1[j] {\n   |                   ^^^^^ `String`\
    \ cannot be indexed by `usize`\n   |\n   = help: the trait `Index<usize>` is not\
    \ implemented for `String`\n   = help: the following other types implement trait\
    \ `Index<Idx>`:\n             <String as Index<RangeFrom<usize>>>\n          \
    \   <String as Index<RangeFull>>\n             <String as Index<RangeInclusive<usize>>>\n\
    \             <String as Index<RangeTo<usize>>>\n             <String as Index<RangeToInclusive<usize>>>\n\
    \             <String as Index<std::ops::Range<usize>>>\n             <str as\
    \ Index<I>>\n\nerror[E0277]: the type `Stri"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
- exit_code: 101
  program: "/// Check if two words have the same characters.\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabc\"))\n/// true\n/// >>> same_chars(String::from(\"\
    dddddddabc\"), String::from(\"abcd\"))\n/// true\n/// >>> same_chars(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\"))\n/// false\n/// >>> same_chars(String::from(\"\
    abcd\"), String::from(\"dddddddabce\"))\n/// false\n/// >>> same_chars(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\"))\n/// false\nfn same_chars(s0:\
    \ String, s1: String) -> bool {\n    s0.chars().zip(s1.chars()).all(|(a, b)| a\
    \ == b)\n}\n\nfn main() {\n    let candidate = same_chars;\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddeddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabc\")), true);\n    assert_eq!(candidate(String::from(\"\
    dddddddabc\"), String::from(\"abcd\")), true);\n    assert_eq!(candidate(String::from(\"\
    eabcd\"), String::from(\"dddddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    abcd\"), String::from(\"dddddddabcf\")), false);\n    assert_eq!(candidate(String::from(\"\
    eabcdzzzz\"), String::from(\"dddzzzzzzzddddabc\")), false);\n    assert_eq!(candidate(String::from(\"\
    aabb\"), String::from(\"aaccc\")), false);\n}\n"
  status: Exception
  stderr: "thread 'main' panicked at 'assertion failed: `(left == right)`\n  left:\
    \ `false`,\n right: `true`', /tmp/tmpvk8wn0d5.rs:20:5\nnote: run with `RUST_BACKTRACE=1`\
    \ environment variable to display a backtrace\n"
  stdout: ''
  timestamp: 1660011983
