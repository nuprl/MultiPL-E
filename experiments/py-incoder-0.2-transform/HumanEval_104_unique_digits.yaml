name: HumanEval_104_unique_digits
language: py
prompt: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
  \    \"\"\"Given a list of positive integers x. return a sorted list of all \n \
  \   elements that hasn't any even digit.\n\n    Note: Returned list should be sorted\
  \ in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422,\
  \ 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n  \
  \  \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
  \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
  \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\
  \ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
completions: ["    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits.sort()\n    \n    return [num for num in x if num %\
    \ 10 in digits]\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 3\nGiven\
    \ a list of integers, return True if the sum of the numbers in the list \nis zero\
    \ or one of the numbers in the list is 0, and False otherwise.\n\nFor example,\
    \ given [3, 1, 2, 0], return True.\n\nGiven [3, 1, 2, 4], return False.\n\nGiven\
    \ [3, 1, 2, 4, 9], return True.\n\n\n</text>\n<cell>", "    \n    unique_digits\
    \ = []\n    \n    for num in x:\n        \n        if num % 2 == 0:\n        \
    \    unique_digits.append(num)\n            \n    return sorted(unique_digits)\n",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num)\n  \
    \  \n    return [num for num in x if num in digits]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <cell>", "    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ // 10)\n    \n    digits = list(set(digits))\n    digits.sort()\n    \n    unique_digits\
    \ = []\n    for num in x:\n        if num in digits:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n</cell>\n<cell>\nunique_digits([15, 33, 1422,\
    \ 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<cell>",
  "    \n    unique_digits = []\n    \n    for num in x:\n        \n        if num\
    \ % 2 == 0:\n            unique_digits.append(num)\n            \n    return sorted(unique_digits)\n",
  "    \n    digits = []\n    for num in x:\n        digits.append(str(num))\n   \
    \ digits.sort()\n    \n    unique_digits = []\n    for num in digits:\n      \
    \  if num.count('0') > 0:\n            unique_digits.append(num)\n    \n    return\
    \ unique_digits\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 3\nGiven\
    \ a list of integers x, return a list containing all the numbers in the list that\
    \ \nare divisible by 7. \nIf there are multiple solutions, return any of them\
    \ in the order they appear.\n\nFor example:\n>>> x = [1, 2, 3, 7, 11]\n>>> solutions(x)\n\
    [7, 11]\n>>> x = [1, 2, 3, 7, 11, 13]\n>>> solutions(x)\n[7, 11, 13]\n>>> x =\
    \ [1, 2, 3, 7, 11, 13, 17]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1, 2, 3, 7,\
    \ 11, 13, 17, 19]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1, 2, 3, 7, 11, 13,\
    \ 17, 19, 23]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1, 2, 3, 7, 11, 13, 17,\
    \ 19, 23, 29]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1, 2, 3, 7, 11, 13, 17,\
    \ 19, 23, 29, 31]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1, 2, 3, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1, 2, 3, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41]\n>>> solutions(x)\n[7, 11, 13]\n>>> x =\
    \ [1, 2, 3, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n>>> solutions(x)\n\
    [7, 11, 13]\n>>> x = [1, 2, 3, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 51]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1, 2, 3, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 51, 59]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1,\
    \ 2, 3, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61]\n>>> solutions(x)\n\
    [7, 11, 13]\n>>> x = [1, 2, 3, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 51, 59, 61, 67]\n", "    \n    digits = set()\n    \n    for num in x:\n   \
    \     digit = num // 10\n        if digit not in digits:\n            digits.add(digit)\n\
    \        else:\n            digits.remove(digit)\n            \n    return sorted(list(digits))\n",
  "    \n    digits = []\n    \n    for i in x:\n        if i not in digits:\n   \
    \         digits.append(i)\n    \n    return sorted(digits)\n", "    \n    digit_set\
    \ = set()\n    \n    for num in x:\n        digit_set.add(num % 10)\n    \n  \
    \  return [num for num in x if num % 10 in digit_set]\n", "    \n    unique_digits\
    \ = []\n    \n    for num in x:\n        digits = [int(d) for d in str(num)]\n\
    \        unique_digits.append(digits)\n    \n    unique_digits = list(set(unique_digits))\n\
    \    unique_digits.sort()\n    \n    return unique_digits\n", "    \n    digits\
    \ = []\n    for num in x:\n        digits.append(num // 10)\n    \n    digits\
    \ = [num for num in digits if num % 2 == 0]\n    \n    return sorted(digits)\n",
  "    \n    digits = []\n    \n    for num in x:\n        digits.append(num)\n  \
    \  \n    digits.sort()\n    \n    unique_digits = []\n    \n    for num in digits:\n\
    \        if num % 2 == 0:\n            unique_digits.append(num)\n    \n    return\
    \ unique_digits\n", "    \n    digits = []\n    \n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits.sort()\n    \n    unique_digits = []\n    \n    for\
    \ num in x:\n        if num % 10 in digits:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n", "    \n    digits = set()\n    \n    for num\
    \ in x:\n        digits.add(num % 10)\n    \n    sorted_digits = sorted(digits)\n\
    \    \n    return [num for num in x if num % 10 in sorted_digits]\n", "    \n\
    \    digit_set = set()\n    \n    for num in x:\n        digit = num % 10\n  \
    \      if digit in digit_set:\n            continue\n        digit_set.add(digit)\n\
    \        \n        if digit == 0:\n            continue\n        \n        yield\
    \ num\n", "    \n    digits = set()\n    \n    for num in x:\n        digits.add(int(num))\n\
    \    \n    sorted_digits = sorted(digits)\n    \n    return [num for num in x\
    \ if int(num) not in sorted_digits]\n", "    \n    unique_digits = []\n    \n\
    \    for i in x:\n        \n        if i not in unique_digits:\n            unique_digits.append(i)\n\
    \            \n    return unique_digits\n", "    \n    digit_set = set()\n   \
    \ \n    for num in x:\n        digit = num % 10\n        if digit in digit_set:\n\
    \            continue\n        digit_set.add(digit)\n        \n        if digit\
    \ == 0:\n            continue\n        \n        digit_set.remove(digit)\n   \
    \     \n        if digit % 2 == 0:\n            digit_set.remove(digit)\n    \
    \        \n    return sorted(list(digit_set))\n", "    \n    digits = set()\n\
    \    \n    for num in x:\n        digits.add(num % 10)\n    \n    return [num\
    \ for num in x if num % 10 in digits]\n", "    \n    digits = set()\n    \n  \
    \  for num in x:\n        digit = num // 10\n        if digit in digits:\n   \
    \         continue\n        digits.add(digit)\n        \n        if num % 10 ==\
    \ 0:\n            return [x]\n        else:\n            x.remove(num)\n     \
    \       \n    return []\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
