name: HumanEval_104_unique_digits
language: py
prompt: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
  \    \"\"\"Given a list of positive integers x. return a sorted list of all \n \
  \   elements that hasn't any even digit.\n\n    Note: Returned list should be sorted\
  \ in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422,\
  \ 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n  \
  \  \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
  \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
  \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\
  \ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
completions: ["    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits.sort()\n    \n    return [num for num in x if num %\
    \ 10 in digits]\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 3\nGiven\
    \ a list of integers, return True if the sum of the numbers in the list \nis zero\
    \ or one of the numbers in the list is 0, and False otherwise.\n\nFor example,\
    \ given [3, 1, 2, 0], return True.\n\nGiven [3, 1, 2, 4], return False.\n\nGiven\
    \ [3, 1, 2, 4, 9], return True.\n\n\n</text>\n<cell>", "    \n    unique_digits\
    \ = []\n    \n    for num in x:\n        \n        if num % 2 == 0:\n        \
    \    unique_digits.append(num)\n            \n    return sorted(unique_digits)\n",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num)\n  \
    \  \n    return [num for num in x if num in digits]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <cell>", "    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ // 10)\n    \n    digits = list(set(digits))\n    digits.sort()\n    \n    unique_digits\
    \ = []\n    for num in x:\n        if num in digits:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n</cell>\n<cell>\nunique_digits([15, 33, 1422,\
    \ 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<cell>",
  "    \n    unique_digits = []\n    \n    for num in x:\n        \n        if num\
    \ % 2 == 0:\n            unique_digits.append(num)\n            \n    return sorted(unique_digits)\n",
  "    \n    digits = []\n    for num in x:\n        digits.append(str(num))\n   \
    \ digits.sort()\n    \n    unique_digits = []\n    for num in digits:\n      \
    \  if num.count('0') > 0:\n            unique_digits.append(num)\n    \n    return\
    \ unique_digits\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 3\nGiven\
    \ a list of integers x, return a list containing all the numbers in the list that\
    \ \nare divisible by 7. \nIf there are multiple solutions, return any of them\
    \ in the order they appear.\n\nFor example:\n>>> x = [1, 2, 3, 7, 11]\n>>> solutions(x)\n\
    [7, 11]\n>>> x = [1, 2, 3, 7, 11, 13]\n>>> solutions(x)\n[7, 11, 13]\n>>> x =\
    \ [1, 2, 3, 7, 11, 13, 17]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1, 2, 3, 7,\
    \ 11, 13, 17, 19]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1, 2, 3, 7, 11, 13,\
    \ 17, 19, 23]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1, 2, 3, 7, 11, 13, 17,\
    \ 19, 23, 29]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1, 2, 3, 7, 11, 13, 17,\
    \ 19, 23, 29, 31]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1, 2, 3, 7, 11, 13,\
    \ 17, 19, 23, 29, 31, 37]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1, 2, 3, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41]\n>>> solutions(x)\n[7, 11, 13]\n>>> x =\
    \ [1, 2, 3, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\n>>> solutions(x)\n\
    [7, 11, 13]\n>>> x = [1, 2, 3, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 51]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1, 2, 3, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 51, 59]\n>>> solutions(x)\n[7, 11, 13]\n>>> x = [1,\
    \ 2, 3, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 51, 59, 61]\n>>> solutions(x)\n\
    [7, 11, 13]\n>>> x = [1, 2, 3, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 51, 59, 61, 67]\n", "    \n    digits = set()\n    \n    for num in x:\n   \
    \     digit = num // 10\n        if digit not in digits:\n            digits.add(digit)\n\
    \        else:\n            digits.remove(digit)\n            \n    return sorted(list(digits))\n",
  "    \n    digits = []\n    \n    for i in x:\n        if i not in digits:\n   \
    \         digits.append(i)\n    \n    return sorted(digits)\n", "    \n    digit_set\
    \ = set()\n    \n    for num in x:\n        digit_set.add(num % 10)\n    \n  \
    \  return [num for num in x if num % 10 in digit_set]\n", "    \n    unique_digits\
    \ = []\n    \n    for num in x:\n        digits = [int(d) for d in str(num)]\n\
    \        unique_digits.append(digits)\n    \n    unique_digits = list(set(unique_digits))\n\
    \    unique_digits.sort()\n    \n    return unique_digits\n", "    \n    digits\
    \ = []\n    for num in x:\n        digits.append(num // 10)\n    \n    digits\
    \ = [num for num in digits if num % 2 == 0]\n    \n    return sorted(digits)\n",
  "    \n    digits = []\n    \n    for num in x:\n        digits.append(num)\n  \
    \  \n    digits.sort()\n    \n    unique_digits = []\n    \n    for num in digits:\n\
    \        if num % 2 == 0:\n            unique_digits.append(num)\n    \n    return\
    \ unique_digits\n", "    \n    digits = []\n    \n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits.sort()\n    \n    unique_digits = []\n    \n    for\
    \ num in x:\n        if num % 10 in digits:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n", "    \n    digits = set()\n    \n    for num\
    \ in x:\n        digits.add(num % 10)\n    \n    sorted_digits = sorted(digits)\n\
    \    \n    return [num for num in x if num % 10 in sorted_digits]\n", "    \n\
    \    digit_set = set()\n    \n    for num in x:\n        digit = num % 10\n  \
    \      if digit in digit_set:\n            continue\n        digit_set.add(digit)\n\
    \        \n        if digit == 0:\n            continue\n        \n        yield\
    \ num\n", "    \n    digits = set()\n    \n    for num in x:\n        digits.add(int(num))\n\
    \    \n    sorted_digits = sorted(digits)\n    \n    return [num for num in x\
    \ if int(num) not in sorted_digits]\n", "    \n    unique_digits = []\n    \n\
    \    for i in x:\n        \n        if i not in unique_digits:\n            unique_digits.append(i)\n\
    \            \n    return unique_digits\n", "    \n    digit_set = set()\n   \
    \ \n    for num in x:\n        digit = num % 10\n        if digit in digit_set:\n\
    \            continue\n        digit_set.add(digit)\n        \n        if digit\
    \ == 0:\n            continue\n        \n        digit_set.remove(digit)\n   \
    \     \n        if digit % 2 == 0:\n            digit_set.remove(digit)\n    \
    \        \n    return sorted(list(digit_set))\n", "    \n    digits = set()\n\
    \    \n    for num in x:\n        digits.add(num % 10)\n    \n    return [num\
    \ for num in x if num % 10 in digits]\n", "    \n    digits = set()\n    \n  \
    \  for num in x:\n        digit = num // 10\n        if digit in digits:\n   \
    \         continue\n        digits.add(digit)\n        \n        if num % 10 ==\
    \ 0:\n            return [x]\n        else:\n            x.remove(num)\n     \
    \       \n    return []\n", "    \n    digit_set = set()\n    \n    for num in\
    \ x:\n        digit = num // 10\n        if digit % 2 == 0:\n            digit_set.add(num)\n\
    \    \n    return sorted(list(digit_set))\n", "    \n    digit_set = set()\n \
    \   \n    for num in x:\n        digit_set.add(str(num))\n    \n    digit_list\
    \ = list(digit_set)\n    \n    digit_list.sort()\n    \n    unique_digit_list\
    \ = []\n    \n    for num in digit_list:\n        if num.count('0') > 0:\n   \
    \         unique_digit_list.append(num)\n    \n    return unique_digit_list\n",
  "    \n    digits = []\n    \n    for num in x:\n        digits.append(int(num))\n\
    \    \n    digits.sort()\n    \n    unique_digits = []\n    \n    for num in digits:\n\
    \        if num % 2 == 0:\n            unique_digits.append(num)\n    \n    return\
    \ unique_digits\n", "    \n    digit_set = set()\n    \n    for num in x:\n  \
    \      digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        else:\n            digit_set.add(digit)\n            \n            if\
    \ num % 10 == 0:\n                return []\n            else:\n             \
    \   return [num]\n            \n            ", "    \n    digits = set()\n   \
    \ \n    for num in x:\n        digits.add(num)\n    \n    sorted_digits = sorted(digits)\n\
    \    \n    return [num for num in sorted_digits if num % 2 == 0]\n", "    \n \
    \   unique_digits = []\n    \n    for num in x:\n        \n        if num % 2\
    \ == 0:\n            unique_digits.append(num)\n            \n    return sorted(unique_digits)\n",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num)\n  \
    \  \n    sorted_digits = sorted(digits)\n    \n    return [num for num in sorted_digits\
    \ if num % 2 == 0]\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes a string as input and returns a list of all characters\
    \ in the string that aren't in the alphabet (case insensitive). \nFor example\
    \ if the input string is \"Hello World\" the function should return [\"l\", \"\
    o\"]\n\nNote: The input string may contain leading or trailing spaces.\n\n</text>\n\
    <cell>", "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num\
    \ % 10)\n    \n    return [num for num in x if num % 10 in digits]\n", "    \n\
    \    digits = set()\n    \n    for num in x:\n        digit = num // 10\n    \
    \    if digit in digits:\n            continue\n        digits.add(digit)\n  \
    \      \n        if num % 10 == 0:\n            return [x]\n        else:\n  \
    \          x.remove(num)\n    \n    return []\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns the number of positive integers\
    \ less than or equal to n.\n\n\n</text>\n<cell>", "    \n    digits = []\n   \
    \ \n    for i in x:\n        if i != 0:\n            digits.append(i)\n    \n\
    \    digits = sorted(digits)\n    \n    unique_digits = []\n    \n    for i in\
    \ digits:\n        if i != 0:\n            unique_digits.append(i)\n    \n   \
    \ return unique_digits\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that takes a string as input and returns a list of all unique words\
    \ in the string.\n\nThe input string may contain more than one word.\n\nThe function\
    \ should ignore non-word characters (spaces, punctuation, etc.) and should ignore\
    \ leading and trailing whitespace.\n\nFor example:\nunique_words('How much wood\
    \ would a woodchuck chuck if a woodchuck could chuck wood?') should return the\
    \ list ['woodchuck', 'woodchuck', 'chuck', 'wood', 'wood', 'much', 'could', 'wood',\
    \ 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood',\
    \ 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood',\
    \ 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood',\
    \ 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood',\
    \ 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood',\
    \ 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood',\
    \ 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood',\
    \ 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood',\
    \ 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood',\
    \ 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood',\
    \ 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood',\
    \ 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood',\
    \ 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood',\
    \ 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood',\
    \ 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood', 'wood',\
    \ 'wood', 'wood', '", "    \n    digit_set = set()\n    \n    for num in x:\n\
    \        digit = num // 10\n        if digit in digit_set:\n            continue\n\
    \        digit_set.add(digit)\n        \n        if num % 10 == 0:\n         \
    \   continue\n        \n        digit_set.add(num % 10)\n        \n    return\
    \ sorted(list(digit_set))\n", "    \n    digits = set()\n    \n    for num in\
    \ x:\n        digits.add(num)\n        \n    return [num for num in x if num in\
    \ digits]\n", "    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    digits.sort()\n    \n    return [num for num in x if num % 10 in\
    \ digits]\n    ", "    \n    digits = []\n    for n in x:\n        if n % 2 ==\
    \ 0:\n            digits.append(n)\n    return sorted(digits)\n", "    \n    digits\
    \ = []\n    \n    for num in x:\n        digits.append(num)\n    \n    digits.sort()\n\
    \    \n    unique_digits = []\n    \n    for num in digits:\n        if num %\
    \ 2 == 0:\n            unique_digits.append(num)\n    \n    return unique_digits\n",
  "    \n    digit_set = set()\n    \n    for x in x:\n        if x % 2 == 0:\n  \
    \          digit_set.add(x)\n    \n    return sorted(list(digit_set))\n", "  \
    \  \n    digits = []\n    for num in x:\n        digits.append(num // 10)\n  \
    \  \n    digits = list(set(digits))\n    digits.sort()\n    \n    return [num\
    \ for num in x if num % 10 in digits]\n</cell>\n<cell>\nunique_digits([15, 33,\
    \ 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that checks if a number is palindrome or not.\n\n\
    Note: A palindrome is a word, number, or other sequence of characters which reads\
    \ the same backward as forward.\n\nFor example:\n>>> is_palindrome(121)\nTrue\n\
    >>> is_palindrome(122)\nFalse\n>>> is_palindrome(1221)\nTrue\n>>> is_palindrome(1222)\n\
    False\n>>> is_palindrome(1221)\nTrue\n>>> is_palindrome(1222)\nFalse\n>>> is_palindrome(1221)\n\
    True\n>>> is_palindrome(1222)\nFalse\n>>> is_palindrome(1221)\nTrue\n>>> is_palindrome(1222)\n\
    False\n>>> is_palindrome(1221)\nTrue\n>>> is_palindrome(1222)\nFalse\n>>> is_palindrome(1221)\n\
    True\n>>> is_palindrome(1222)\nFalse\n>>> is_palindrome(1221)\nTrue\n>>> is_palindrome(1222)\n\
    False\n>>> is_palindrome(1221)\nTrue\n>>> is_palindrome(1222)\nFalse\n>>> is_palindrome(1221)\n\
    True\n>>> is_palindrome(1222)\nFalse\n>>> is_palindrome(1221)\nTrue\n>>> is_palindrome(1222)\n\
    False\n>>> is_palindrome(1221)\nTrue\n>>> is_palindrome(1222)\nFalse\n>>> is_palindrome(1221)\n\
    True\n>>> is_palindrome(1222)\nFalse\n>>> is_palindrome(1221)\nTrue\n>>> is_palindrome(1222)\n\
    False\n>>> is_palindrome(1221)\nTrue\n>>> is_palindrome(1222)\nFalse\n>>> is_palindrome(1221)\n",
  "    \n    digits = []\n    \n    for num in x:\n        digits.append(num % 10)\n\
    \    \n    digits.sort()\n    \n    return [num for num in x if num % 10 in digits]\n",
  "    \n    digit_set = set()\n    \n    for num in x:\n        digit = num // 10\n\
    \        if digit in digit_set:\n            continue\n        else:\n       \
    \     digit_set.add(digit)\n            \n            if digit % 2 == 0:\n   \
    \             continue\n            else:\n                return [num] + unique_digits([num\
    \ - digit])\n    \n    return []\n</cell>\n<cell>\nunique_digits([15, 33, 1422,\
    \ 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<cell>",
  "    \n    digits = []\n    \n    for n in x:\n        if n % 2 == 0:\n        \
    \    digits.append(n)\n    \n    digits.sort()\n    \n    return digits\n", " \
    \   \n    digits = set()\n    for num in x:\n        digits.add(num)\n    \n \
    \   return [num for num in x if num in digits]\n", "    \n    unique_digits =\
    \ []\n    \n    for i in x:\n        if i not in unique_digits:\n            unique_digits.append(i)\n\
    \    \n    return unique_digits\n", "    \n    digit_set = set()\n    \n    for\
    \ num in x:\n        digit = num // 10\n        if digit % 2 == 0:\n         \
    \   digit_set.add(digit)\n    \n    return sorted(list(digit_set))\n", "    \n\
    \    digits = set()\n    \n    for num in x:\n        digits.add(num % 10)\n \
    \   \n    return [num for num in x if num % 10 in digits]\n", "    \n    digits\
    \ = []\n    for num in x:\n        digits.append(num % 10)\n    digits.sort()\n\
    \    \n    return [num for num in x if num % 10 in digits]\n", "    \n    digits\
    \ = set()\n    \n    for n in x:\n        if n % 2 == 0:\n            digits.add(n)\n\
    \    \n    return sorted(list(digits))\n", "    \n    digits = set()\n    \n \
    \   for num in x:\n        digits.add(num % 10)\n    \n    return [num for num\
    \ in x if num % 10 in digits]\n", "    \n    digits = []\n    for num in x:\n\
    \        digits.append(int(num))\n    digits.sort()\n    \n    unique_digits =\
    \ []\n    \n    for num in digits:\n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n", "    \n    digits = set()\n    \n    for i\
    \ in x:\n        if i not in digits:\n            digits.add(i)\n        else:\n\
    \            digits.discard(i)\n            \n    return sorted(list(digits))\n",
  "    \n    unique_digits = []\n    \n    for n in x:\n        if n % 2 == 0:\n \
    \           unique_digits.append(n)\n    \n    return sorted(unique_digits)\n",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num % 10)\n\
    \    \n    digits = list(digits)\n    digits.sort()\n    \n    return [num for\
    \ num in x if num % 10 in digits]\n", "    \n    digits = set()\n    \n    for\
    \ num in x:\n        digits.add(num % 10)\n    \n    return [num for num in x\
    \ if num % 10 in digits]\n", "    \n    digits = set()\n    \n    for num in x:\n\
    \        digits.add(num)\n    \n    return [num for num in x if num in digits]\n",
  "    \n    digits = []\n    \n    for n in x:\n        digits.append(n)\n    \n\
    \    digits.sort()\n    \n    unique_digits = []\n    \n    for d in digits:\n\
    \        if d % 2 == 0:\n            unique_digits.append(d)\n    \n    return\
    \ unique_digits\n", "    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits_set = set(digits)\n    \n    return [num for num in\
    \ x if num % 10 in digits_set]\n", "    \n    digits = []\n    for num in x:\n\
    \        digits.append(num // 10)\n    digits = list(set(digits))\n    digits.sort()\n\
    \    \n    return [num for num in x if num % 10 in digits]\n", "    \n    digits\
    \ = set()\n    \n    for n in x:\n        digits.add(int(str(n)[0]))\n    \n \
    \   return [n for n in x if int(str(n)[0]) not in digits]\n", "    \n    digits\
    \ = set()\n    \n    for num in x:\n        digits.add(num)\n    \n    digits\
    \ = list(digits)\n    digits.sort()\n    \n    unique_digits = []\n    \n    for\
    \ num in x:\n        if num in digits:\n            unique_digits.append(num)\n\
    \            digits.remove(num)\n    \n    return unique_digits\n", "    \n  \
    \  digits = []\n    for n in x:\n        digits.append(int(str(n)[0]))\n    \n\
    \    digits = list(set(digits))\n    digits.sort()\n    \n    return [n for n\
    \ in x if int(str(n)[0]) not in digits]\n", "    \n    digit_set = set()\n   \
    \ \n    for num in x:\n        digit_set.add(num)\n    \n    return [num for num\
    \ in x if num in digit_set]\n    ", "    \n    digits = []\n    for num in x:\n\
    \        digits.append(int(num))\n    \n    digits_set = set(digits)\n    \n \
    \   unique_digits = []\n    for num in digits:\n        if num in digits_set:\n\
    \            digits_set.remove(num)\n        else:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n", "    \n    digits = set()\n    \n\
    \    for num in x:\n        digits.add(num % 10)\n    \n    return [num for num\
    \ in x if num % 10 in digits]\n", "    \n    digit_set = set()\n    \n    for\
    \ num in x:\n        digit = num // 10\n        if digit in digit_set:\n     \
    \       continue\n        else:\n            digit_set.add(digit)\n          \
    \  yield num\n", "    \n    digits = set()\n    \n    for num in x:\n        digit\
    \ = num // 10\n        if digit in digits:\n            continue\n        digits.add(digit)\n\
    \        \n        if num % 10 == 0:\n            return []\n        \n    return\
    \ sorted(list(digits))\n", "    \n    digits_set = set()\n    \n    for num in\
    \ x:\n        digits_set.add(str(num))\n    \n    digits_set = sorted(list(digits_set))\n\
    \    \n    unique_digits = []\n    \n    for digit in digits_set:\n        if\
    \ int(digit) % 2 == 0:\n            unique_digits.append(int(digit))\n    \n \
    \   return unique_digits\n</cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n\
    </cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that returns True if a binary string is a palindrome, otherwise\
    \ return False.\n\nFor example, \n\"A man, a plan, a canal: Panama\"\nis a palindrome.\n\
    \n\"race a car\"\nis not a palindrome.\n\n\"A man, a plan, a canal: Panama\"\n\
    is not a palindrome.\n\n\"race a car A man, a plan, a canal: Panama\"\nis a palindrome.\n\
    \n\n</text>\n<cell>", "    \n    digits = set()\n    \n    for i in x:\n     \
    \   digits.add(i)\n    \n    digits = list(digits)\n    digits.sort()\n    \n\
    \    return [i for i in x if i not in digits]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 8\nGiven a string, return a string where each character is replaced\
    \ by the number of times that character appears in the string.\n\nFor example,\
    \ given \"hello\", you should return \"heeellho\".\n\nAssume that the string consists\
    \ of lowercase English letters only (i.e. no punctuation).\n\nExample 1:\nInput:\
    \ \"hello\"\nOutput: \"heeellho\"\n\nExample 2:\nInput: \"hello\"\nOutput: \"\
    heeellho\"\n\nExample 3:\nInput: \"aA\"\nOutput: \"aA\"\n\nExample 4:\nInput:\
    \ \"aa\"\nOutput: \"aa\"\n\nExample 5:\nInput: \"aab\"\nOutput: \"aab\"\n\nExample\
    \ 6:\nInput: \"aAab\"\nOutput: \"aAab\"\n\nExample 7:\nInput: \"aAabb\"\nOutput:\
    \ \"aAabb\"\n\nExample 8:\nInput: \"aAabbcc\"\nOutput: \"aAabbcc\"\n\nExample\
    \ 9:\nInput: \"aAabbccc\"\nOutput: \"aAabbccc\"\n\nExample 10:\nInput: \"aAabbccc\"\
    \nOutput: \"aAabbccc\"\n\nExample 11:\nInput: \"aAabbccc\"\nOutput: \"aAabbccc\"\
    \n\nExample 12:\nInput: \"aAabbccc\"\nOutput: \"aAabbccc\"\n\nExample 13:\nInput:\
    \ \"aAabbccc\"\nOutput: \"aAabbccc\"\n\nExample 14:\nInput: \"aAabbccc\"\nOutput:\
    \ \"aAabbccc\"\n\nExample 15:\nInput: \"aAabbccc\"\nOutput: \"aAabbccc\"\n\nExample\
    \ 16:\nInput: \"aAabbccc\"\nOutput: \"aAabbccc\"\n\nExample 17:\nInput: \"aAabbccc\"\
    \nOutput: \"aAabbccc\"\n\nExample 18:\nInput: \"aAabbccc\"\nOutput: \"aAabbccc\"\
    \n\nExample 19:\nInput: \"aAabbccc\"\nOutput: \"aAabbcc", "    \n    digits =\
    \ []\n    \n    for n in x:\n        digits.append(str(n))\n    \n    digits =\
    \ list(set(digits))\n    \n    digits.sort()\n    \n    digits = [int(i) for i\
    \ in digits]\n    \n    return digits\n", "    \n    digit_set = set()\n    \n\
    \    for num in x:\n        digit = num // 10\n        if digit in digit_set:\n\
    \            continue\n        digit_set.add(digit)\n        \n        if num\
    \ % 10 == 0:\n            continue\n        \n        yield num\n", "    \n  \
    \  digits = set()\n    \n    for num in x:\n        digits.add(num)\n    \n  \
    \  digits = list(digits)\n    \n    digits.sort()\n    \n    return [num for num\
    \ in digits if num % 2 == 0]\n", "    \n    digits = set()\n    \n    for num\
    \ in x:\n        digits.add(int(num))\n    \n    return [num for num in x if int(num)\
    \ not in digits]\n", "    \n    digits = []\n    for n in x:\n        digits.append(str(n))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for d in\
    \ digits_set:\n        if int(d) % 2 == 0:\n            unique_digits.append(int(d))\n\
    \    \n    return sorted(unique_digits)\n", "    \n    digits = set()\n    \n\
    \    for num in x:\n        digit = num // 10\n        if digit in digits:\n \
    \           continue\n        else:\n            digits.add(digit)\n         \
    \   \n    return sorted(list(digits))\n", "    \n    digits = []\n    \n    for\
    \ num in x:\n        digits.append(num % 10)\n    \n    digits.sort()\n    \n\
    \    unique_digits = []\n    \n    for num in digits:\n        if num != 0:\n\
    \            unique_digits.append(num)\n    \n    return unique_digits\n", " \
    \   \n    digits = set()\n    \n    for n in x:\n        digits.add(int(str(n)[0]))\n\
    \    \n    sorted_digits = sorted(digits)\n    \n    return [n for n in x if int(str(n)[0])\
    \ not in sorted_digits]\n    ", "    \n    digits = set()\n    \n    for num in\
    \ x:\n        digit = num // 10\n        if digit in digits:\n            continue\n\
    \        digits.add(digit)\n        \n        if num % 10 == 0:\n            return\
    \ [x]\n        else:\n            x.remove(num)\n            \n    return []\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 3\nGiven a list of integers, return\
    \ a new list containing only the unique elements \nin the original list. \nThe\
    \ original list is not modified.\n\nExample:\n>>> x = [1, 2, 3, 1]\n>>> unique_digits(x)\n\
    [1, 2, 3]\n\n</text>\n<cell>", "    \n    digits = []\n    \n    for n in x:\n\
    \        digits.append(str(n))\n    \n    digits = list(set(digits))\n    \n \
    \   digits.sort()\n    \n    return digits\n", "    \n    digits = []\n    \n\
    \    for num in x:\n        digits.append(num % 10)\n        \n    digits = list(set(digits))\n\
    \    digits.sort()\n    \n    return [num for num in x if num % 10 in digits]\n",
  "    \n    digit_set = set()\n    \n    for num in x:\n        digit_set.add(str(num))\n\
    \    \n    digit_list = list(digit_set)\n    \n    digit_list.sort()\n    \n \
    \   unique_digit_list = []\n    \n    for digit in digit_list:\n        if digit\
    \ != '0':\n            unique_digit_list.append(int(digit))\n    \n    return\
    \ unique_digit_list\n", "    \n    digits = set()\n    \n    for num in x:\n \
    \       digits.add(num)\n        \n    digits = list(digits)\n    digits.sort()\n\
    \    \n    return [num for num in digits if num % 2 == 0]\n", "    \n    digit_set\
    \ = set()\n    \n    for num in x:\n        digit_set.add(num % 10)\n    \n  \
    \  return [num for num in x if num % 10 in digit_set]\n", "    \n    digits =\
    \ set()\n    \n    for n in x:\n        if n % 2 == 0:\n            digits.add(n)\n\
    \    \n    return sorted(list(digits))\n", "    \n    digits = set()\n    \n \
    \   for num in x:\n        digits.add(num % 10)\n    \n    return [num for num\
    \ in x if num % 10 in digits]\n", "    \n    digits = [int(d) for d in str(x)]\n\
    \    \n    even = [d for d in digits if d % 2 == 0]\n    \n    return sorted(list(set(digits)\
    \ - set(even)))\n", "    \n    digits = set()\n    \n    for n in x:\n       \
    \ digits.add(str(n))\n    \n    return sorted(list(digits))\n", "    \n    digits\
    \ = [int(d) for d in str(x)]\n    \n    evens = [d for d in digits if d % 2 ==\
    \ 0]\n    \n    return sorted(list(set(digits) - set(evens)))\n", "    \n    digit_set\
    \ = set()\n    \n    for num in x:\n        digit = num // 10\n        if digit\
    \ in digit_set:\n            continue\n        else:\n            digit_set.add(digit)\n\
    \            yield num\n", "    \n    digits = set()\n    \n    for num in x:\n\
    \        digits.add(num % 10)\n    \n    return [num for num in x if num % 10\
    \ in digits]\n", "    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits = list(set(digits))\n    digits.sort()\n    \n    return\
    \ digits\n", "    \n    digits = set()\n    for num in x:\n        digits.add(num)\n\
    \    \n    sorted_digits = sorted(digits)\n    \n    return [num for num in sorted_digits\
    \ if num % 2 == 0]\n", "    \n    digits = set()\n    \n    for n in x:\n    \
    \    digits.add(str(n))\n    \n    digits = list(digits)\n    digits.sort()\n\
    \    \n    return [n for n in x if str(n) not in digits]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 7: Find all numbers with 3 or more unique digits\n\n</text>\n\
    <cell>", "    \n    unique_digits = []\n    \n    for num in x:\n        \n  \
    \      if num % 2 == 0:\n            unique_digits.append(num)\n            \n\
    \    return sorted(unique_digits)\n", "    \n    digit_set = set()\n    \n   \
    \ for num in x:\n        digit = num // 10\n        if digit in digit_set:\n \
    \           continue\n        else:\n            digit_set.add(digit)\n      \
    \      \n            if num % 10 == 0:\n                continue\n           \
    \ else:\n                return [num]\n    \n    return []\n</cell>\n<cell>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422,\
    \ 10])\n</cell>\n<cell>", "    \n    unique_digits_set = set()\n    \n    for\
    \ num in x:\n        unique_digits_set.add(str(num))\n    \n    unique_digits_list\
    \ = list(unique_digits_set)\n    \n    unique_digits_list.sort()\n    \n    return\
    \ unique_digits_list\n", "    \n    digits = set()\n    for num in x:\n      \
    \  digits.add(num)\n    \n    sorted_digits = sorted(digits)\n    \n    return\
    \ [num for num in sorted_digits if num % 2 == 0]\n", "    \n    digits = set()\n\
    \    \n    for n in x:\n        digits.add(str(n))\n    \n    digits = list(digits)\n\
    \    digits.sort()\n    \n    return [n for n in x if str(n) not in digits]\n",
  "    \n    digits_set = set()\n    \n    for num in x:\n        digits_set.add(int(num))\n\
    \    \n    return [num for num in x if int(num) not in digits_set]\n", "    \n\
    \    unique_digits = []\n    \n    for num in x:\n        \n        if num % 2\
    \ == 0:\n            unique_digits.append(num)\n    \n    return sorted(unique_digits)\n",
  "    \n    digits = set()\n    \n    for n in x:\n        digits.add(str(n))\n \
    \   \n    digits = list(digits)\n    \n    digits.sort()\n    \n    return [n\
    \ for n in x if str(n) not in digits]\n", "    \n    digits = []\n    \n    for\
    \ i in x:\n        digits.append(i)\n    \n    digits.sort()\n    \n    unique_digits\
    \ = []\n    \n    for i in digits:\n        if i not in unique_digits:\n     \
    \       unique_digits.append(i)\n    \n    return unique_digits\n", "    \n  \
    \  digits = set()\n    for n in x:\n        digits.add(n)\n    \n    digits =\
    \ list(digits)\n    digits.sort()\n    \n    return [n for n in x if n not in\
    \ digits]\n", "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num)\n\
    \    \n    return [num for num in x if num in digits]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 3\nWrite a function that returns True if a number is divisible\
    \ by 7 and False otherwise. \nThe function should take one integer argument and\
    \ return True if it is divisible by 7 and False otherwise.\n\n</text>\n<cell>",
  "    \n    digits = []\n    for n in x:\n        digits.append(int(str(n)[0]))\n\
    \    \n    digits_set = set(digits)\n    \n    return [n for n in x if int(str(n)[0])\
    \ not in digits_set]\n", "    \n    digit_set = set()\n    \n    for num in x:\n\
    \        digit = num // 10\n        if digit % 2 == 0:\n            digit_set.add(digit)\n\
    \    \n    return sorted(list(digit_set))\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 3\nGiven a list of integers, return a new list containing only\
    \ the unique elements \n    that appear at least twice in this list. \n    \n\
    \    Can you do this without using any additional data structures?\n\n    Example\
    \ 1:\n    >>> unique_elements([1, 1, 2, 3])\n    [1, 3]\n    \n    Example 2:\n\
    \    >>> unique_elements([1, 2, 2, 3])\n    []\n    \n    Example 3:\n    >>>\
    \ unique_elements([1, 2, 3, 3])\n    [1, 3]\n    \n    Example 4:\n    >>> unique_elements([1,\
    \ 2, 3, 3])\n    [1, 3]\n    \n    Example 5:\n    >>> unique_elements([1, 2,\
    \ 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 6:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 7:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 8:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 9:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 10:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 11:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 12:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 13:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 14:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 15:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 16:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 17:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 18:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 19:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 20:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \n    Example 21:\n    >>> unique_elements([1,\
    \ 2, 3, 4, 5])\n", "    \n    unique_digits_set = set()\n    unique_digits_set.update(x)\n\
    \    unique_digits_set.discard(0)\n    unique_digits_set.discard(1)\n    unique_digits_set.discard(2)\n\
    \    unique_digits_set.discard(3)\n    unique_digits_set.discard(4)\n    unique_digits_set.discard(5)\n\
    \    unique_digits_set.discard(6)\n    unique_digits_set.discard(7)\n    unique_digits_set.discard(8)\n\
    \    unique_digits_set.discard(9)\n    unique_digits_set.discard(10)\n    unique_digits_set.discard(11)\n\
    \    unique_digits_set.discard(12)\n    unique_digits_set.discard(13)\n    unique_digits_set.discard(14)\n\
    \    unique_digits_set.discard(15)\n    unique_digits_set.discard(16)\n    unique_digits_set.discard(17)\n\
    \    unique_digits_set.discard(18)\n    unique_digits_set.discard(19)\n    unique_digits_set.discard(20)\n\
    \    unique_digits_set.discard(21)\n    unique_digits_set.discard(22)\n    unique_digits_set.discard(23)\n\
    \    unique_digits_set.discard(24)\n    unique_digits_set.discard(25)\n    unique_digits_set.discard(26)\n\
    \    unique_digits_set.discard(27)\n    unique_digits_set.discard(28)\n    unique_digits_set.discard(29)\n\
    \    unique_digits_set.discard(30)\n    unique_digits_set.discard(31)\n    unique_digits_set.discard(32)\n\
    \    unique_digits_set.discard(33)\n    unique_digits_set.discard(34)\n    unique_digits_set.discard(35)\n\
    \    unique_digits_set.discard(36)\n    unique_digits_set.discard(37)\n    unique_digits_set.discard(38)\n\
    \    unique_digits_set.discard(39)\n    unique_digits_set.discard(40)\n    unique_digits_set.discard(41)\n\
    \    unique_digits_set.discard(42)\n    unique_digits_set.discard(43)\n    unique_digits_set.discard(44)\n\
    \    unique_digits_set.discard(45)\n    unique_digits_set.discard(46)\n    unique_digits_set.discard(47)\n\
    \    unique_digits_set.discard(48)\n    unique_digits_set.discard(49)\n    unique_digits_set.discard(50)\n\
    \    unique_digits_set.discard(51)\n    unique_digits_", "    \n    digits = []\n\
    \    for num in x:\n        digits.append(int(num))\n    digits.sort()\n    \n\
    \    unique_digits = []\n    for num in digits:\n        if num % 2 == 0:\n  \
    \          unique_digits.append(num)\n    \n    return unique_digits\n", "   \
    \ \n    digit_set = set()\n    \n    for num in x:\n        digit_set.add(num)\n\
    \    \n    digit_list = list(digit_set)\n    \n    digit_list.sort()\n    \n \
    \   unique_digits = []\n    \n    for num in digit_list:\n        if num % 2 ==\
    \ 0:\n            unique_digits.append(num)\n    \n    return unique_digits\n",
  "    \n    digits = set()\n    for num in x:\n        digits.add(num % 10)\n   \
    \ \n    return [num for num in x if num % 10 in digits]\n", "    \n    digits\
    \ = set()\n    \n    for num in x:\n        digits.add(num % 10)\n    \n    return\
    \ [num for num in x if num % 10 in digits]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 3\nGiven a list of integers x, return a list containing all the\
    \ integers in x that are\ndivisible by 3 or 5.\n\nFor example:\n>>> x = [1, 3,\
    \ 5]\n>>> divisible_by_3_or_5(x)\n[3, 5]\n>>> x = [1, 3, 5]\n>>> divisible_by_3_or_5(x)\n\
    []\n>>> x = [1, 3, 5]\n>>> divisible_by_3_or_5(x)\n[]\n>>> x = [1, 3, 5]\n>>>\
    \ divisible_by_3_or_5(x)\n[]\n>>> x = [1, 3, 5]\n>>> divisible_by_3_or_5(x)\n\
    []\n>>> x = [1, 3, 5]\n>>> divisible_by_3_or_5(x)\n[]\n>>> x = [1, 3, 5]\n>>>\
    \ divisible_by_3_or_5(x)\n[]\n>>> x = [1, 3, 5]\n>>> divisible_by_3_or_5(x)\n\
    []\n>>> x = [1, 3, 5]\n>>> divisible_by_3_or_5(x)\n[]\n>>> x = [1, 3, 5]\n>>>\
    \ divisible_by_3_or_5(x)\n[]\n>>> x = [1, 3, 5]\n>>> divisible_by_3_or_5(x)\n\
    []\n>>> x = [1, 3, 5]\n>>> divisible_by_3_or_5(x)\n[]\n>>> x = [1, 3, 5]\n>>>\
    \ divisible_by_3_or_5(x)\n[]\n>>> x = [1, 3, 5]\n>>> divisible_by_3_or_5(x)\n\
    []\n>>> x = [1, 3, 5]\n>>> divisible_by_3_or_5(x)\n[]\n>>> x = [1, 3, 5]\n>>>\
    \ divisible_by_3_or_5(x)\n[]\n>>> x = [1, 3, 5]\n>>> divisible_by_3_or_5(x)\n\
    []\n>>> x = [1, 3, 5]\n>>> divisible_by_3_or_5(x)\n[]\n>>> x = [1, 3, 5]\n>>>\
    \ divisible_by_3_or_5(x)\n[]\n>>> x = [1, 3, 5]\n>>> divisible_by_3_or_5(x)\n\
    []\n>>> x = [1, 3, 5]\n>>> divisible_by_3_or_5(x)\n[]\n>>> x = [1, 3, 5]\n>>>\
    \ divisible_by_3_or_5(x)\n[]\n>>> x = [1, 3, 5]\n>>> di", "    \n    digit_set\
    \ = set()\n    \n    for num in x:\n        digit = num // 10\n        if digit\
    \ in digit_set:\n            continue\n        digit_set.add(digit)\n        \n\
    \        if digit % 2 == 0:\n            continue\n        \n        digit_set.add(digit\
    \ + 1)\n        \n    return sorted(list(digit_set))\n", "    \n    digits = set()\n\
    \    \n    for num in x:\n        digits.add(num)\n    \n    digits = list(digits)\n\
    \    digits.sort()\n    \n    return [num for num in x if num in digits]\n", " \
    \   \n    digits = set()\n    \n    for i in x:\n        if i not in digits:\n\
    \            digits.add(i)\n    \n    return sorted(list(digits))\n", "    \n\
    \    digits = [int(i) for i in str(x)]\n    \n    even = [i for i in digits if\
    \ i % 2 == 0]\n    \n    return sorted(list(set(digits) - set(even)))\n", "  \
    \  \n    digit_set = set()\n    \n    for num in x:\n        digit_set.add(num\
    \ % 10)\n    \n    digit_list = [num for num in x if num % 10 in digit_set]\n\
    \    \n    return sorted(digit_list)\n", "    \n    digits = [int(i) for i in\
    \ str(x)]\n    \n    unique_digits = []\n    \n    for i in digits:\n        if\
    \ i not in unique_digits:\n            unique_digits.append(i)\n    \n    return\
    \ sorted(unique_digits)\n", "    \n    unique_digits_set = set()\n    \n    for\
    \ num in x:\n        if num in unique_digits_set:\n            continue\n    \
    \    unique_digits_set.add(num)\n        \n        digits = []\n        while\
    \ num > 0:\n            digits.append(num % 10)\n            num //= 10\n    \
    \    \n        unique_digits_set.update(digits)\n        \n    return sorted(unique_digits_set)\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 8\nGiven a list of integers, return\
    \ a new list containing only the unique elements \n    that appear at least twice\
    \ in this list. \n    \n    Can you do it in place?\n\n    Example 1:\n    >>>\
    \ x = [2, 2, 3, 3]\n    >>> unique_elements(x)\n    [2, 3]\n\n    Example 2:\n\
    \    >>> x = [1, 2, 3, 2]\n    >>> unique_elements(x)\n    []\n\n    Example 3:\n\
    \    >>> x = [1, 1, 2, 2, 3, 3]\n    >>> unique_elements(x)\n    [1, 3]\n\n  \
    \  Example 4:\n    >>> x = [1, 1, 2, 2, 3, 3]\n    >>> unique_elements(x)\n  \
    \  [1, 3]\n\n    Example 5:\n    >>> x = [1, 2, 3, 4, 5]\n    >>> unique_elements(x)\n\
    \    [1, 2, 3, 4, 5]\n\n    Example 6:\n    >>> x = [1, 2, 3, 4, 5]\n    >>> unique_elements(x)\n\
    \    [1, 2, 3, 4, 5]\n    \"\"\"\n    \n    unique_elements_set = set()\n    \n\
    \    for num in x:\n        if num in unique_elements_set:\n            continue\n\
    \        unique_elements_set.add(num)\n        \n        elements = []\n     \
    \   while num > 0:\n            elements.append(num % 10)\n            num //=\
    \ 10\n        \n        unique_elements_set.update(elements)\n        \n    return\
    \ sorted(unique_elements_set)\n</cell>\n<cell>\nunique_elements([2, 2, 3, 3])\n\
    </cell>\n<cell>\nunique_elements([1, 2, 3, 2])\n</cell>\n<cell>\nunique_elements([1,\
    \ 1, 2, 2, 3, 3])\n</cell>\n<cell>\nunique_elements([1, 1, 2, 2, 3, 3])\n</cell>\n\
    <cell>\nunique_elements([1, 2, 3, 4, 5])\n</cell>\n<cell>\nunique_elements([1,\
    \ 2, 3, 4, 5])\n</cell>\n<text>\nProblem 9\nGiven a string, return a list containing\
    \ the same string but with every \n    letter capitalized.\n\n    Can you do it\
    \ in place?\n\n    Example 1:\n    >>> x = 'Hello World'\n    >>> capitalize(x)\n\
    \    ['Hello World']\n\n    Example 2:\n", "    \n    digits = [int(d) for d in\
    \ str(x)]\n    \n    even = [d for d in digits if d % 2 == 0]\n    \n    return\
    \ sorted(list(set(digits) - set(even)))\n", "    \n    digits = set()\n    for\
    \ num in x:\n        digits.add(num % 10)\n    \n    return [num for num in x\
    \ if num % 10 in digits]\n", "    \n    digits_set = set()\n    \n    for num\
    \ in x:\n        digits_set.add(int(num))\n    \n    return [num for num in x\
    \ if int(num) not in digits_set]\n", "    \n    digits = []\n    for num in x:\n\
    \        digits.append(num % 10)\n    \n    digits_set = set(digits)\n    \n \
    \   return [num for num in x if num % 10 in digits_set]\n", "    \n    digits\
    \ = set()\n    \n    for num in x:\n        digits.add(num)\n    \n    sorted_digits\
    \ = sorted(digits)\n    \n    return [num for num in sorted_digits if num % 2\
    \ == 0]\n", "    \n    unique_digits = []\n    \n    for i in x:\n        if i\
    \ not in unique_digits:\n            unique_digits.append(i)\n    \n    return\
    \ sorted(unique_digits)\n", "    \n    digits = []\n    \n    for i in x:\n  \
    \      if i not in digits:\n            digits.append(i)\n    \n    digits.sort()\n\
    \    \n    return [i for i in x if i not in digits]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 4\nWrite a function that returns True if a binary string with\
    \ exactly two bits set to 1 is '10101'.\n\nFor example, 10101 is '10101', but\
    \ 11010 is not.\n\nNote: '10' and '1' are considered as two different bits.\n\n\
    For example:\n>>> is_binary_one('10101')\nTrue\n>>> is_binary_one('11010')\nFalse\n\
    >>> is_binary_one('101010')\nFalse\n>>> is_binary_one('10100')\nFalse\n>>> is_binary_one('10110')\n\
    False\n>>> is_binary_one('10010')\nFalse\n>>> is_binary_one('10001')\nFalse\n\
    >>> is_binary_one('10011')\nFalse\n>>> is_binary_one('1010100')\nFalse\n>>> is_binary_one('1010101')\n\
    True\n>>> is_binary_one('1010110')\nFalse\n>>> is_binary_one('101010100')\nFalse\n\
    >>> is_binary_one('1010101011')\nFalse\n>>> is_binary_one('1010101101')\nFalse\n\
    >>> is_binary_one('10101011010')\nFalse\n>>> is_binary_one('101010110100')\nFalse\n\
    >>> is_binary_one('1010101101010')\nFalse\n>>> is_binary_one('10101011010100')\n\
    False\n>>> is_binary_one('101010110101011')\nFalse\n>>> is_binary_one('101010110101101')\n\
    False\n>>> is_binary_one('1010101101011010')\nFalse\n>>> is_binary_one('10101011010110100')\n\
    False\n>>> is_binary_one('101010110101101010')\nFalse\n>>> is_binary_one('1010101101011010100')\n\
    False\n>>> is_binary_one('10101011010110101011')\nFalse\n>>> is_binary_one('10101011010110101101')\n\
    False\n>>> is_binary_one('101010110101101011010')\nFalse\n>>> is_binary_one('1010101101011010110100')\n\
    False\n>>> is_binary_one('10101011010110101101010')\nFalse\n>>> is_", "    \n\
    \    digits = set()\n    \n    for num in x:\n        digits.add(num % 10)\n \
    \   \n    return [num for num in x if num % 10 in digits]\n", "    \n    digit_set\
    \ = set()\n    \n    for num in x:\n        digit_set.add(num)\n    \n    sorted_list\
    \ = sorted(list(digit_set))\n    \n    return [num for num in sorted_list if num\
    \ % 2 == 0]\n", "    \n    digits = []\n    for n in x:\n        if n % 2 == 0:\n\
    \            digits.append(n)\n    digits.sort()\n    return digits\n", "    \n\
    \    digits = set()\n    \n    for num in x:\n        digits.add(num)\n    \n\
    \    return [num for num in x if num in digits]\n", "    \n    digits = [int(d)\
    \ for d in str(x)]\n    \n    even = []\n    for d in digits:\n        if d %\
    \ 2 == 0:\n            even.append(d)\n    \n    even.sort()\n    \n    return\
    \ even\n", "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num\
    \ % 10)\n    \n    return sorted(list(digits))\n", "    \n    digits = set()\n\
    \    \n    for n in x:\n        if n % 2 == 0:\n            digits.add(n)\n  \
    \  \n    return sorted(list(digits))\n", "    \n    digits = set()\n    \n   \
    \ for num in x:\n        digits.add(num)\n    \n    digits = list(digits)\n  \
    \  digits.sort()\n    \n    return [num for num in x if num in digits]\n</cell>\n\
    <cell>", "    \n    digits = set()\n    \n    for i in x:\n        if i not in\
    \ digits:\n            digits.add(i)\n        else:\n            digits.discard(i)\n\
    \    \n    return sorted(list(digits))\n", "    \n    unique_digits = []\n   \
    \ \n    for num in x:\n        \n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n", "    \n    digit_set = set()\n   \
    \ \n    for num in x:\n        digit_set.add(num // 10)\n    \n    return [num\
    \ for num in x if num % 10 in digit_set]\n", "    \n    digits = set()\n    \n\
    \    for i in x:\n        if i not in digits:\n            digits.add(i)\n   \
    \     else:\n            digits.remove(int(i))\n    \n    return sorted(list(digits))\n",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(int(num))\n\
    \    \n    digits = list(digits)\n    digits.sort()\n    \n    return [num for\
    \ num in x if int(num) not in digits]\n</cell>\n<cell>\nunique_digits([15, 33,\
    \ 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes a list of integers and returns the number\
    \ of elements in the list that have unique digits.\n\nFor example:\nunique_digits([15,\
    \ 33, 1422, 1])\n>>> 3\nunique_digits([152, 323, 1422, 10])\n>>> 1\nunique_digits([1,\
    \ 2, 3, 4, 5])\n>>> 5\nunique_digits([1, 2, 3, 4, 5])\n>>> 0\n\n</text>\n<cell>",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(int(num))\n\
    \    \n    return [num for num in x if int(num) not in digits]\n", "    \n   \
    \ digits = set()\n    \n    for num in x:\n        digits.add(num % 10)\n    \n\
    \    return [num for num in x if num % 10 in digits]\n", "    \n    digits = set()\n\
    \    \n    for num in x:\n        digits.add(num)\n    \n    return [num for num\
    \ in x if num in digits]\n", "    \n    digits = []\n    \n    for num in x:\n\
    \        digits.append(num % 10)\n    \n    digits.sort()\n    \n    unique_digits\
    \ = []\n    \n    for digit in digits:\n        if digit != 0:\n            unique_digits.append(digit)\n\
    \    \n    return unique_digits\n", "    \n    digit_set = set()\n    \n    for\
    \ num in x:\n        digit_set.add(str(num))\n    \n    return [num for num in\
    \ x if str(num) not in digit_set]\n", "    \n    digits = set()\n    \n    for\
    \ num in x:\n        digits.add(num)\n    \n    sorted_digits = sorted(list(digits))\n\
    \    \n    return [num for num in sorted_digits if num % 2 == 0]\n", "    \n \
    \   digits = set()\n    \n    for num in x:\n        digits.add(num % 10)\n  \
    \  \n    return [num for num in x if num % 10 in digits]\n    ", "    \n    unique_digits\
    \ = []\n    \n    for num in x:\n        \n        if num % 2 == 0:\n        \
    \    unique_digits.append(num)\n            \n    return sorted(unique_digits)\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string\
    \ and returns a list of all the characters in the string sorted alphabetically.\n\
    \nFor example:\n>>> unique_chars('Hello World')\n['d', 'e', 'H', 'l', 'o', 'w',\
    \ 'o', 'r', 'l', 'd']\n>>> unique_chars('Hello World!')\n['d', 'e', 'H', 'l',\
    \ 'o', 'w', 'o', 'r', 'l', 'd', '!']\n>>> unique_chars('Hello World! ')\n['d',\
    \ 'e', 'H', 'l', 'o', 'w', 'o', 'r', 'l', 'd', '!', ' ']\n>>> unique_chars('Hello\
    \ World! !')\n['d', 'e', 'H', 'l', 'o', 'w', 'o', 'r', 'l', 'd', '!', ' ', '!']\n\
    >>> unique_chars('Hello World! ! !')\n['d', 'e', 'H', 'l', 'o', 'w', 'o', 'r',\
    \ 'l', 'd', '!', ' ', '!', ' ', '!']\n>>> unique_chars('Hello World! ! ! !')\n\
    ['d', 'e', 'H', 'l', 'o', 'w', 'o', 'r', 'l', 'd', '!', ' ', '!', ' ', '!', '\
    \ ', '!']\n>>> unique_chars('Hello World! ! ! ! !')\n['d', 'e', 'H', 'l', 'o',\
    \ 'w', 'o', 'r', 'l', 'd', '!', ' ', '!', ' ', '!', ' ', '!', ' ', '!']\n>>> unique_chars('Hello\
    \ World! ! ! ! ! !')\n['d', 'e', 'H', 'l', 'o', 'w', 'o', 'r', 'l', 'd', '!',\
    \ ' ', '!', ' ', '!', ' ', '!', ' ', '!', ' ', '!']\n>>> unique_chars('Hello World!\
    \ ! ! ! ! ! !')\n['d', 'e', 'H', 'l', 'o', 'w', 'o', 'r', 'l', 'd', '!', ' ',\
    \ '!', ' ', '!', ' ', '!', ' ', '!', ' ', '!', ' ', '!']\n>>> unique_chars('Hello\
    \ World! ! ! ! ! ! ! !')\n['d', 'e', 'H', 'l', 'o', 'w', 'o', 'r', 'l', 'd', '!',\
    \ ' ', '!', ' ', '!', ' ', '!', ' ', '!', ' ', '!', ' ', '!', ' ', '!']\n>>> unique_chars('Hello\
    \ World! ! ! ! ! ! ! ! !')\n['d', 'e', 'H', 'l', 'o', 'w', 'o', 'r', 'l', 'd',\
    \ '!', ' ', '!', ' ', '!', ' ', '!', ' ', '!', ' ', '!', ' ', '!', ' ", "    \n\
    \    digits = set()\n    \n    for i in x:\n        digits.add(i)\n    \n    digits\
    \ = list(digits)\n    \n    digits.sort()\n    \n    unique_digits = []\n    \n\
    \    for i in digits:\n        if i not in unique_digits:\n            unique_digits.append(i)\n\
    \    \n    return unique_digits\n</cell>\n<cell>\nunique_digits([15, 33, 1422,\
    \ 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<cell>",
  "    \n    digits = []\n    for n in x:\n        digits.append(str(n))\n    \n \
    \   digits_set = set(digits)\n    \n    unique_digits = []\n    for d in digits:\n\
    \        if d not in digits_set:\n            unique_digits.append(d)\n    \n\
    \    return sorted(unique_digits)\n", "    \n    digit_set = set()\n    \n   \
    \ for num in x:\n        digit = num // 10\n        if digit in digit_set:\n \
    \           continue\n        digit_set.add(digit)\n        \n        if digit\
    \ % 2 == 0:\n            continue\n        \n        digit_set.remove(digit)\n\
    \        \n        digit_list.append(digit)\n        \n    return digit_list\n",
  "    \n    unique_digits = []\n    \n    for num in x:\n        \n        digits\
    \ = [int(d) for d in str(num)]\n        \n        unique_digits.append(digits)\n\
    \        \n    return sorted(unique_digits)\n", "    \n    digits = []\n    for\
    \ n in x:\n        digits.append(str(n))\n    \n    digits_set = set(digits)\n\
    \    \n    unique_digits = []\n    for d in digits:\n        if d not in digits_set:\n\
    \            unique_digits.append(d)\n    \n    return sorted(unique_digits)\n",
  "    \n    digit_dict = {}\n    \n    for num in x:\n        digit = num // 10\n\
    \        if digit in digit_dict:\n            digit_dict[digit].append(num)\n\
    \        else:\n            digit_dict[digit] = [num]\n    \n    sorted_digit_list\
    \ = []\n    \n    for key, values in digit_dict.items():\n        if len(values)\
    \ == 1:\n            sorted_digit_list.append(values[0])\n        else:\n    \
    \        sorted_digit_list.extend(values)\n    \n    return sorted_digit_list\n",
  "    \n    digits = []\n    for n in x:\n        if n % 2 == 0:\n            digits.append(n)\n\
    \    \n    return sorted(list(set(digits)))\n", "    \n    digit_set = set()\n\
    \    \n    for num in x:\n        digit = num // 10\n        if digit in digit_set:\n\
    \            continue\n        else:\n            digit_set.add(digit)\n     \
    \       yield num\n", "    \n    digits = []\n    for n in x:\n        digits.append(str(n))\n\
    \    digits.sort()\n    \n    return [int(i) for i in digits if int(i) % 2 ==\
    \ 0]\n", "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num\
    \ % 10)\n    \n    return [num for num in x if num % 10 in digits]\n", "    \n\
    \    digit_set = set()\n    \n    for num in x:\n        digit_set.add(int(num))\n\
    \    \n    return [num for num in x if int(num) not in digit_set]\n", "    \n\
    \    digits_set = set()\n    \n    for num in x:\n        digits_set.add(str(num))\n\
    \    \n    digits_set = sorted(list(digits_set))\n    \n    return [num for num\
    \ in x if str(num) not in digits_set]\n", "    \n    digit_set = set()\n    \n\
    \    for num in x:\n        digit = num % 10\n        if digit in digit_set:\n\
    \            continue\n        digit_set.add(digit)\n        \n        if digit\
    \ == 0:\n            continue\n        \n        yield num\n", "    \n    unique_digits_set\
    \ = set()\n    \n    for num in x:\n        unique_digits_set.add(str(num))\n\
    \    \n    unique_digits_list = list(unique_digits_set)\n    \n    unique_digits_list.sort()\n\
    \    \n    return unique_digits_list\n", "    \n    digits_set = set()\n    \n\
    \    for num in x:\n        digits_set.add(num % 10)\n    \n    return [num for\
    \ num in x if num % 10 in digits_set]\n", "    \n    digits = []\n    for n in\
    \ x:\n        digits.append(str(n))\n    \n    digits_set = set(digits)\n    \n\
    \    unique_digits = []\n    for d in digits:\n        if d not in digits_set:\n\
    \            unique_digits.append(int(d))\n    \n    return sorted(unique_digits)\n",
  "    \n    digits = set()\n    \n    for num in x:\n        digits.add(num)\n  \
    \  \n    return [num for num in x if num in digits]\n", "    \n    digit_set =\
    \ set()\n    \n    for num in x:\n        digit = num // 10\n        if digit\
    \ in digit_set:\n            continue\n        else:\n            digit_set.add(digit)\n\
    \            \n            if digit % 2 == 0:\n                continue\n    \
    \        else:\n                return [num] + unique_digits([x[:i] for i in range(len(x))\
    \ if i != num])\n    \n    return []\n", "    \n    unique_digits = []\n    \n\
    \    for num in x:\n        \n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n", "    \n    digits = []\n    for num\
    \ in x:\n        digits.append(int(num))\n    \n    digits.sort()\n    \n    unique_digits\
    \ = []\n    \n    for num in digits:\n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n", "    \n    digit_set = set()\n    \n    for\
    \ num in x:\n        digit = num // 10\n        if digit in digit_set:\n     \
    \       continue\n        else:\n            digit_set.add(digit)\n          \
    \  \n            if digit % 2 == 0:\n                return x\n            else:\n\
    \                continue\n    \n    return []\n", "    \n    digits = []\n  \
    \  \n    for i in x:\n        if i // 10 == 0:\n            digits.append(i)\n\
    \        else:\n            break\n    \n    return sorted(digits)\n", "    \n\
    \    digits = []\n    for n in x:\n        if n % 2 == 0:\n            digits.append(n)\n\
    \    digits.sort()\n    return digits\n", "    \n    digits = []\n    for num\
    \ in x:\n        digits.append(num % 10)\n    \n    digits_set = set(digits)\n\
    \    \n    return [num for num in x if num % 10 in digits_set]\n", "    \n   \
    \ digit_dict = {}\n    \n    for num in x:\n        digit = num % 10\n       \
    \ if digit in digit_dict:\n            digit_dict[digit].append(num)\n       \
    \ else:\n            digit_dict[digit] = [num]\n    \n    sorted_list = []\n \
    \   \n    for digit in sorted(digit_dict):\n        sorted_list += digit_dict[digit]\n\
    \    \n    return sorted_list\n", "    \n    digit_set = set()\n    \n    for\
    \ num in x:\n        digit = num // 10\n        if digit in digit_set:\n     \
    \       continue\n        else:\n            digit_set.add(digit)\n          \
    \  \n            if num % 10 == 0:\n                continue\n            else:\n\
    \                digit_set.add(num % 10)\n                \n    return sorted(list(digit_set))\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 4\nWrite a function that checks if\
    \ a number is palindrome or not.\n\nA palindrome is a word, number, or other sequence\
    \ of characters which reads the same backward as forward.\n\nFor example:\n\n\
    121 is a palindrome\n12341 is a palindrome\n121 is a palindrome\nA palindrome\
    \ is a word, number, or other sequence of characters which reads the same backward\
    \ as forward.\n\nFor example:\n\n121 is a palindrome\n12341 is a palindrome\n\
    121 is a palindrome\nA palindrome is a word, number, or other sequence of characters\
    \ which reads the same backward as forward.\n\nFor example:\n\n121 is a palindrome\n\
    12341 is a palindrome\n121 is a palindrome\nA palindrome is a word, number, or\
    \ other sequence of characters which reads the same backward as forward.\n\nFor\
    \ example:\n\n121 is a palindrome\n12341 is a palindrome\n121 is a palindrome\n\
    A palindrome is a word, number, or other sequence of characters which reads the\
    \ same backward as forward.\n\nFor example:\n\n121 is a palindrome\n12341 is a\
    \ palindrome\n121 is a palindrome\nA palindrome is a word, number, or other sequence\
    \ of characters which reads the same backward as forward.\n\nFor example:\n\n\
    121 is a palindrome\n12341 is a palindrome\n121 is a palindrome\nA palindrome\
    \ is a word, number, or other sequence of characters which reads the same backward\
    \ as forward.\n\nFor example:\n\n121 is a palindrome\n12341 is a palindrome\n\
    121 is a palindrome\nA palindrome is a word, number, or other sequence of characters\
    \ which reads the same backward as forward.\n\nFor example:\n\n121 is a palindrome\n\
    12341 is a palindrome\n121 is a palindrome\nA palindrome is a word, number, or\
    \ other sequence of characters which reads the same backward as forward.", " \
    \   \n    unique_digits = []\n    \n    for num in x:\n        \n        digits\
    \ = [int(d) for d in str(num)]\n        \n        unique_digits.append(num) if\
    \ len(set(digits)) == 1 else unique_digits\n        \n    return sorted(unique_digits)\n",
  "    \n    digits = [int(i) for i in str(x)]\n    \n    even = [i for i in digits\
    \ if i % 2 == 0]\n    \n    return sorted(set(digits) - set(even))\n", "    \n\
    \    digits = set()\n    \n    for i in x:\n        if i not in digits:\n    \
    \        digits.add(i)\n        else:\n            digits.discard(i)\n       \
    \     \n    return sorted(list(digits))\n", "    \n    digits = set()\n    \n\
    \    for num in x:\n        digits.add(num % 10)\n    \n    return [num for num\
    \ in x if num % 10 in digits]\n", "    \n    digits = []\n    \n    for n in x:\n\
    \        digits.append(n)\n    \n    digits.sort()\n    \n    unique_digits =\
    \ []\n    \n    for d in digits:\n        if d % 2 == 0:\n            unique_digits.append(d)\n\
    \    \n    return unique_digits\n", "    \n    unique_digits = []\n    \n    for\
    \ num in x:\n        \n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n</cell>\n<cell>\nunique_digits([15, 33,\
    \ 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<cell>",
  "    \n    digits = []\n    for num in x:\n        digits.append(num % 10)\n   \
    \ \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for num in\
    \ x:\n        if num % 10 in digits_set:\n            unique_digits.append(num)\n\
    \    \n    return sorted(unique_digits)\n", "    \n    digits = []\n    for n\
    \ in x:\n        if n % 2 == 0:\n            digits.append(n)\n    digits.sort()\n\
    \    return digits\n", "    \n    digit_set = set()\n    \n    for x in x:\n \
    \       digit_set.add(x)\n    \n    digit_list = list(digit_set)\n    \n    digit_list.sort()\n\
    \    \n    digit_list = [x for x in digit_list if x % 2 == 0]\n    \n    return\
    \ digit_list\n", "    \n    digits = []\n    \n    for num in x:\n        digits.append(num\
    \ % 10)\n    \n    digits = list(set(digits))\n    digits.sort()\n    \n    return\
    \ [num for num in x if num % 10 in digits]\n", "    \n    unique_digits = []\n\
    \    \n    for i in x:\n        if i not in unique_digits:\n            unique_digits.append(i)\n\
    \    \n    return unique_digits\n", "    \n    digits_set = set()\n    \n    for\
    \ num in x:\n        digits_set.add(num % 10)\n    \n    return [num for num in\
    \ x if num % 10 in digits_set]\n", "    \n    digits = []\n    \n    for num in\
    \ x:\n        if num % 2 == 0:\n            digits.append(num)\n    \n    return\
    \ sorted(digits)\n", "    \n    unique_digits = []\n    \n    for num in x:\n\
    \        \n        if num % 2 == 0:\n            unique_digits.append(num)\n \
    \   \n    return sorted(unique_digits)\n", "    \n    digit_set = set()\n    \n\
    \    for num in x:\n        digit = num // 10\n        if digit in digit_set:\n\
    \            continue\n        digit_set.add(digit)\n        \n        if digit\
    \ % 2 == 0:\n            digit_set.remove(digit)\n            \n    return sorted(list(digit_set))\n",
  "    \n    digits = set()\n    for num in x:\n        digits.add(num)\n    \n  \
    \  sorted_digits = sorted(digits)\n    \n    return [num for num in sorted_digits\
    \ if num % 2 == 0]\n", "    \n    digits = []\n    \n    for num in x:\n     \
    \   digits.append(num)\n        \n    digits.sort()\n    \n    unique_digits =\
    \ []\n    \n    for num in digits:\n        if num % 2 == 0:\n            unique_digits.append(num)\n\
    \    \n    return unique_digits\n", "    \n    digits = set()\n    \n    for n\
    \ in x:\n        digits.add(int(str(n)[0]))\n    \n    return [n for n in x if\
    \ int(str(n)[0]) not in digits]\n</cell>\n<cell>", "    \n    digits = []\n  \
    \  \n    for num in x:\n        digits.append(int(num))\n    \n    digits.sort()\n\
    \    \n    unique_digits = []\n    \n    for num in digits:\n        if num %\
    \ 2 == 0:\n            unique_digits.append(num)\n    \n    return unique_digits\n",
  "    \n    digits = []\n    for num in x:\n        digits.append(int(num))\n   \
    \ digits.sort()\n    \n    unique_digits = []\n    for num in x:\n        if num\
    \ % 2 == 0:\n            unique_digits.append(num)\n    \n    return unique_digits\n\
    </cell>\n<cell>", "    \n    digits = set()\n    \n    for num in x:\n       \
    \ digits.add(int(num))\n    \n    sorted_digits = sorted(digits)\n    \n    return\
    \ [num for num in sorted_digits if num % 2 == 0]\n", "    \n    digits = []\n\
    \    \n    for n in x:\n        if n % 2 == 0:\n            digits.append(n)\n\
    \    \n    return sorted(digits)\n", "    \n    digits = []\n    for num in x:\n\
    \        digits.append(num % 10)\n    \n    digits_set = set(digits)\n    \n \
    \   return [num for num in x if num % 10 in digits_set]\n", "    \n    digit_set\
    \ = set()\n    \n    for x in x:\n        digit_set.add(x)\n    \n    return [x\
    \ for x in x if x not in digit_set]\n", "    \n    digit_set = set()\n    \n \
    \   for num in x:\n        digit = num // 10\n        if digit in digit_set:\n\
    \            continue\n        else:\n            digit_set.add(digit)\n     \
    \       \n            if num % 10 == 0:\n                continue\n          \
    \  else:\n                return [num]\n    \n    return []\n</cell>\n<cell>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422,\
    \ 10])\n</cell>\n<text>\nProblem 3\nGiven a list of integers, return True if the\
    \ absolute value of the difference between any two elements is less than or equal\
    \ to 1000. False otherwise.\n\nExample 1:\nInput: [1, 3, 5]\nOutput: True\n\n\
    Example 2:\nInput: [1, 3, 5]\nOutput: False\n\n</text>\n<cell>", "    \n    digits\
    \ = set()\n    \n    for n in x:\n        if n % 2 == 0:\n            digits.add(n)\n\
    \    \n    return [n for n in x if n not in digits]\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <text>\nProblem 3\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.\n\nFor example:\n>>> count_letters('abracadabra')\n\
    {'a': 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': 2, 'b': 2, 'c': 1, 'd': 1}\n>>> count_letters('abracadabra')\n{'a':\
    \ 2, 'r': ", "    \n    digits = []\n    for num in x:\n        digits.append(num\
    \ // 10)\n    \n    digits_set = set(digits)\n    \n    unique_digits = []\n \
    \   for num in x:\n        if num % 10 in digits_set:\n            unique_digits.append(num)\n\
    \            \n    return sorted(unique_digits)\n", "    \n    digit_set = set()\n\
    \    \n    for num in x:\n        digit = num // 10\n        if digit in digit_set:\n\
    \            continue\n        else:\n            digit_set.add(digit)\n     \
    \       \n        if digit % 2 == 0:\n            digit_set.remove(digit)\n  \
    \          \n    return sorted(list(digit_set))\n</cell>\n<cell>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152, 323, 1422, 10])\n</cell>\n\
    <cell>", "    \n    digits = []\n    for n in x:\n        digits.append(str(n))\n\
    \    \n    digits_set = set(digits)\n    \n    unique_digits = []\n    for d in\
    \ digits_set:\n        if d.isdigit():\n            if int(d) % 2 == 0:\n    \
    \            unique_digits.append(int(d))\n    \n    return sorted(unique_digits)\n\
    </cell>\n<cell>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<cell>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 9\nGiven a list of integers, return\
    \ a new list containing only the unique elements \n    that appear at least twice\
    \ in this list. \n    \n    You may modify the passed in list.\n    \n    Example\
    \ 1:\n    >>> nums = [1,1,2,3,4]\n    >>> unique_elements(nums)\n    [1, 3, 4]\n\
    \    \n    Example 2:\n    >>> nums = [0,0,1,1,2,3,4,5,6,7,8,9]\n    >>> unique_elements(nums)\n\
    \    [1, 3, 5, 6, 7, 8, 9]\n    \n    Example 3:\n    >>> nums = [1,1,1,1,1,1,1,1]\n\
    \    >>> unique_elements(nums)\n    [1, 1]\n    \n    Example 4:\n    >>> nums\
    \ = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,16",
  "    \n    digits = []\n    \n    for n in x:\n        if n % 2 == 0:\n        \
    \    digits.append(n)\n    \n    return sorted(digits)\n", "    \n    digits =\
    \ []\n    \n    for n in x:\n        digits.append(int(str(n)[0]))\n    \n   \
    \ digits = list(set(digits))\n    digits.sort()\n    \n    return digits\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
