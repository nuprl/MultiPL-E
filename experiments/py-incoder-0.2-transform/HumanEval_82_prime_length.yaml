name: HumanEval_82_prime_length
language: py
prompt: "def prime_length(string: str) -> bool:\n    \"\"\"Write a function that takes\
  \ a string and returns True if the string\n    length is a prime number or False\
  \ otherwise\n    Examples\n    >>> prime_length('Hello')\n    True\n    >>> prime_length('abcdcba')\n\
  \    True\n    >>> prime_length('kittens')\n    True\n    >>> prime_length('orange')\n\
  \    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Hello') == True\n    assert candidate('abcdcba')\
  \ == True\n    assert candidate('kittens') == True\n    assert candidate('orange')\
  \ == False\n    assert candidate('wow') == True\n    assert candidate('world') ==\
  \ True\n    assert candidate('MadaM') == True\n    assert candidate('Wow') == True\n\
  \    assert candidate('') == False\n    assert candidate('HI') == True\n    assert\
  \ candidate('go') == True\n    assert candidate('gogo') == False\n    assert candidate('aaaaaaaaaaaaaaa')\
  \ == False\n    assert candidate('Madam') == True\n    assert candidate('M') ==\
  \ False\n    assert candidate('0') == False\n\ndef test_check():\n    check(prime_length)\n\
  \ntest_check()\n"
completions: ["    if len(string) < 2:\n        return False\n    if string[0] in\
    \ '0123456789':\n        return False\n    if string[-1] in '0123456789':\n  \
    \      return False\n    prime = True\n    for char in string:\n        if char\
    \ == '0':\n            continue\n        if prime is False:\n            return\
    \ False\n        if char in '123456789':\n            prime = False\n        else:\n\
    \            return False\n    return True\n\n", "    if len(string) < 2:\n  \
    \      return False\n    if string[0] in '0123456789':\n        return False\n\
    \    if string[0] in 'abcdefghijklmnopqrstuvwxyz':\n        prime = True\n   \
    \     for char in string[1:]:\n            if char == '9':\n                prime\
    \ = False\n                break\n            if prime and char in '0123456789':\n\
    \                return False\n            if not prime and char in 'abcdefghijklmnopqrstuvwxyz':\n\
    \                return False\n        return True\n    return False\n\n", " \
    \   if len(string) < 2:\n        return False\n    if string[0] in '0123456789':\n\
    \        return False\n    prime = True\n    for char in string:\n        if char\
    \ == '':\n            return False\n        if char.isalpha():\n            prime\
    \ = False\n            break\n        if char.isdigit():\n            prime =\
    \ True\n            break\n        if char.islower():\n            prime = False\n\
    \            break\n        if char.isupper():\n            prime = True\n   \
    \         break\n    if prime:\n        return True\n    else:\n        return\
    \ False\n\n", "    if len(string) < 2:\n        return False\n    prime = True\n\
    \    for letter in string:\n        if letter not in 'abcdefghijklmnopqrstuvwxyz':\n\
    \            prime = False\n            break\n    return prime\n\n", "    if\
    \ len(string) < 2:\n        return False\n    if string[0] == string[1]:\n   \
    \     return False\n    if string[0] in string[1:]:\n        return False\n  \
    \  length = 1\n    for char in string:\n        if char != string[length]:\n \
    \           return False\n        length += 1\n    return True\n\n", "    if len(string)\
    \ < 2:\n        return False\n    if string[0] == string[1]:\n        return False\n\
    \    if string[0] < string[1]:\n        string = string[::-1]\n    for char in\
    \ string:\n        if char == string[0]:\n            return False\n    return\
    \ True\n\n", "    if len(string) < 2:\n        return False\n    prime = True\n\
    \    for char in string:\n        if char == 'a' or char == 'e' or char == 'i'\
    \ or char == 'o' or char == 'u':\n            continue\n        if char == 'n':\n\
    \            return False\n        if char == 't':\n            return True\n\
    \        if char == 'r':\n            prime = False\n            continue\n  \
    \      if char == 'l':\n            prime = True\n            continue\n     \
    \   if char == 'h':\n            prime = True\n            continue\n        if\
    \ char == 'c':\n            prime = True\n            continue\n        if char\
    \ == 'm':\n            prime = True\n            continue\n        if char ==\
    \ 'e':\n            prime = True\n            continue\n        if char == 's':\n\
    \            prime = True\n            continue\n        if char == 'd':\n   \
    \         prime = True\n            continue\n        if char == 'g':\n      \
    \      prime = True\n            continue\n        if char == 'b':\n         \
    \   prime = True\n            continue\n        if char == 'f':\n            prime\
    \ = True\n            continue\n        if char == 'v':\n            prime = True\n\
    \            continue\n        if char == 'w':\n            prime = True\n   \
    \         continue\n        if char == 'y':\n            prime = True\n      \
    \      continue\n        if char == 'k':\n            prime = True\n         \
    \   continue\n        if char == 'j':\n            prime = True\n            continue\n\
    \        if char == 'q':\n            prime = True\n            continue\n   \
    \     if char == 'x':\n            prime = True\n            continue\n      \
    \  if char == 'z':\n            prime = True\n            continue\n        if\
    \ char == 'x':\n            prime = True\n            continue\n        if char\
    \ == 'z':\n            prime = True\n            continue\n        if char ==\
    \ 'x':\n            prime = True\n            continue\n        if char == 'z':\n\
    \            prime = True\n            continue\n        if char == 'x':\n   \
    \         prime = True\n            continue\n        if char == 'z':\n      \
    \      prime = True\n            continue\n        if char == 'x':\n         \
    \   prime = True\n            continue\n        if char == 'z':\n            prime\
    \ = True\n            continue\n        if char == 'x':\n            prime = True\n\
    \            continue\n        if char == 'z':\n            prime = True\n   \
    \         continue\n        if char == 'x':\n            prime = True\n      \
    \      continue\n        if char == 'z':\n            prime = True\n         \
    \   continue\n        if char == 'x':\n            prime = True\n            continue\n\
    \        if char == 'z':\n            prime = True\n            continue\n   \
    \     if char == 'x':\n            prime = True\n            continue\n      \
    \  if char == 'z':\n            prime = True\n            continue\n        if\
    \ char == 'x':\n            prime = True\n            continue\n        if char\
    \ == 'z':\n            prime = True\n            continue\n        if char ==\
    \ 'x':\n            prime = True\n            continue\n        if char == '",
  "    if len(string) < 2:\n        return False\n    prime = True\n    for char in\
    \ string:\n        if char == '.':\n            continue\n        if char == 'o':\n\
    \            if string[string.index(char) + 1] == 'o':\n                prime\
    \ = False\n                break\n        else:\n            if string[string.index(char)\
    \ + 1] == 'e':\n                prime = False\n                break\n    return\
    \ prime\n\n", "    if len(string) < 2:\n        return False\n    if string[0]\
    \ in '0123456789':\n        return False\n    if string[-1] in '0123456789':\n\
    \        return False\n    prime = True\n    for char in string:\n        if char\
    \ == '0':\n            continue\n        if prime and char in '123456789':\n \
    \           return False\n        prime = not prime\n    return True\n\n", " \
    \   length = len(string)\n    if length <= 1:\n        return True\n    if length\
    \ == 2:\n        return True\n    if length == 3:\n        if string[0] == 'o'\
    \ and string[1] == 'r':\n            return True\n        if string[0] == 'k'\
    \ and string[1] == 'i' and string[2] == 't':\n            return True\n    if\
    \ length == 4:\n        if string[0] == 'o' and string[1] == 'r' and string[2]\
    \ == 'e':\n            return True\n        if string[0] == 'k' and string[1]\
    \ == 'i' and string[2] == 't' and string[3] == 'n':\n            return True\n\
    \    if length == 5:\n        if string[0] == 'o' and string[1] == 'r' and string[2]\
    \ == 'e' and string[3] == 'a':\n            return True\n        if string[0]\
    \ == 'k' and string[1] == 'i' and string[2] == 't' and string[3] == 'n' and string[4]\
    \ == 't':\n            return True\n    if length == 6:\n        if string[0]\
    \ == 'o' and string[1] == 'r' and string[2] == 'e' and string[3] == 'a' and string[4]\
    \ == 't':\n            return True\n        if string[0] == 'k' and string[1]\
    \ == 'i' and string[2] == 't' and string[3] == 'n' and string[4] == 't' and string[5]\
    \ == 'e':\n            return True\n    if length == 7:\n        if string[0]\
    \ == 'o' and string[1] == 'r' and string[2] == 'e' and string[3] == 'a' and string[4]\
    \ == 't' and string[5] == 'e' and string[6] == 'n':\n            return True\n\
    \        if string[0] == 'k' and string[1] == 'i' and string[2] == 't' and string[3]\
    \ == 'n' and string[4] == 't' and string[5] == 'e' and string[6] == 'n' and string[7]\
    \ == 't':\n            return True\n    if length == 8:\n        if string[0]\
    \ == 'o' and string[1] == 'r' and string[2] == 'e' and string[3] == 'a' and string[4]\
    \ == 't' and string[5] == 'e' and string[6] == 'n' and string[7] == 't' and string[8]\
    \ == 'n':\n            return True\n        if string[0] == 'k' and string[1]\
    \ == 'i' and string[2] == 't' and string[3] == 'n' and string[4] == 't' and string[5]\
    \ == 'e' and string[6] == 'n' and string[7] == 't' and string[8] == 'n' and string[9]\
    \ == 'e':\n            return True\n    if length == 9:\n        if string[0]\
    \ == 'o' and string[1] == 'r' and string[2] == 'e' and string[3] == 'a' and string[4]\
    \ == 't' and string[5] == 'e' and string[6] == 'n' and string[7] == 't' and string[8]\
    \ == 'n' and string[9] == 'e' and string[10] == 'n':\n            return True\n\
    \        if string[0] == 'k' and string[1] == 'i' and string[2] == 't' and string[3]\
    \ == 'n' and string[4] == 't' and string[5] == 'e' and string", "    if len(string)\
    \ < 2:\n        return False\n    if string[0] == string[1]:\n        return False\n\
    \    count = 0\n    for char in string:\n        if char == string[0]:\n     \
    \       count += 1\n        else:\n            count += 2\n    if count == len(string):\n\
    \        return True\n    return False\n\n", "    if len(string) < 2:\n      \
    \  return False\n    if string[0] == string[1]:\n        return False\n    if\
    \ string[0] in string[1:]:\n        return False\n    prime = True\n    for char\
    \ in string:\n        if char == string[0]:\n            prime = False\n     \
    \       break\n        if prime and char != string[0]:\n            return False\n\
    \    return True\n\n", "    if len(string) < 2:\n        return False\n    if\
    \ string[0] == string[1]:\n        return prime_length(string[1:])\n    if string[0]\
    \ in '0123456789':\n        return prime_length(string[1:])\n    if string[0]\
    \ in 'abcdefghijklmnopqrstuvwxyz':\n        return prime_length(string[1:]) or\
    \ prime_length(\n            string[1:] + string[0])\n    return False\n\n", " \
    \   if len(string) < 2:\n        return False\n    if string[0] in string.upper():\n\
    \        return False\n    if string[-1] in string.upper():\n        return False\n\
    \    length = len(string)\n    i = 2\n    while i < length:\n        if string[i]\
    \ not in string.upper():\n            return False\n        i += 1\n    return\
    \ True\n\n", "    if len(string) < 2:\n        return False\n    if string[0]\
    \ in '0123456789':\n        return False\n    if string[-1] in '0123456789':\n\
    \        return False\n    length = len(string)\n    prime = True\n    for i in\
    \ range(2, int(math.sqrt(length)) + 1):\n        if length % i == 0:\n       \
    \     prime = False\n            break\n    return prime\n\n", "    if len(string)\
    \ < 2:\n        return False\n    if string[0] == string[1]:\n        return prime_length(string[1:])\n\
    \    if string[0] in string[1:]:\n        return prime_length(string[1:]) or prime_length(\n\
    \            string[0] + string[1:])\n    return False\n\n", "    if len(string)\
    \ < 2:\n        return False\n    if string[0] in '0123456789':\n        return\
    \ False\n    if string[-1] in '0123456789':\n        return False\n    prime =\
    \ True\n    for char in string:\n        if char == '0':\n            continue\n\
    \        if prime is False:\n            return False\n        if char == '1':\n\
    \            prime = True\n            continue\n        if prime is True:\n \
    \           return False\n        prime = False\n    return True\n\n", "    if\
    \ len(string) < 2:\n        return False\n    if string[0] in '0123456789':\n\
    \        return False\n    if string[0] in 'abcdefghijklmnopqrstuvwxyz':\n   \
    \     return True\n    i = 2\n    while i < len(string):\n        if string[i]\
    \ not in '0123456789abcdefghijklmnopqrstuvwxyz':\n            return False\n \
    \       i += 1\n    return True\n\n", "    if len(string) < 2:\n        return\
    \ False\n    if string[0] in string.upper():\n        return False\n    if string[0]\
    \ in string.lower():\n        return False\n    if string[-1] in string.upper():\n\
    \        return False\n    if string[-1] in string.lower():\n        return False\n\
    \    prime = True\n    for char in string:\n        if char.isalpha():\n     \
    \       prime = False\n            break\n    return prime\n\n", "    if len(string)\
    \ < 2:\n        return False\n    if string[0] == string[1]:\n        return False\n\
    \    length = 1\n    for char in string:\n        if char != string[length]:\n\
    \            return False\n        length += 1\n    return True\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
