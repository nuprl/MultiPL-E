language: py
name: HumanEval_57_monotonic
results:
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[0] < l[1]:\n        return True\n    if\
    \ l[-1] < l[-2]:\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp80vb45p9.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp80vb45p9.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp80vb45p9.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu43my_j9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu43my_j9.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpu43my_j9.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    if\
    \ l[-1] > l[-2]:\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6_6uldfb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp6_6uldfb.py\", line 31,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp6_6uldfb.py\", line 23,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for i in l[1:]:\n    \
    \    if prev < i:\n            return False\n        prev = i\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_liguus3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp_liguus3.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp_liguus3.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    prev = l[0]\n    for i in l[1:]:\n        if\
    \ prev < i:\n            return False\n        prev = i\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2r6j40q2.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2r6j40q2.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp2r6j40q2.py\", line 22,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu43my_j9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu43my_j9.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpu43my_j9.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = -1\n    j = len(l) - 2\n    while j > i:\n\
    \        if l[j] < l[j + 1]:\n            return True\n        elif l[j] > l[j\
    \ + 1]:\n            return False\n        i -= 1\n        j += 1\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvcl46aiz.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpvcl46aiz.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpvcl46aiz.py\", line 28,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev <= x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjld3m_mu.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpjld3m_mu.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpjld3m_mu.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4b_rl08.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_4b_rl08.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp_4b_rl08.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu43my_j9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu43my_j9.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpu43my_j9.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmz7pr7gi.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpmz7pr7gi.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpmz7pr7gi.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpmz7pr7gi.py\"\
    , line 14, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined. Did you mean: 'range'?\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    diff = l[1] - l[0]\n    for x in l[2:]:\n   \
    \     if x < l[0]:\n            return False\n        if x > l[-1]:\n        \
    \    return False\n        diff += x - l[0]\n        if diff < 0:\n          \
    \  return False\n    return True\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0qq8plci.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp0qq8plci.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp0qq8plci.py\", line 28,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i, j = 0, len(l) - 1\n    while i < j:\n    \
    \    if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n  \
    \          i += 1\n        else:\n            j -= 1\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjeoh19u9.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjeoh19u9.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpjeoh19u9.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    head, *tail = l\n    if head < tail[0]:\n   \
    \     return True\n    if head > tail[-1]:\n        return True\n    return monotonic(tail)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hc7d0a_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2hc7d0a_.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp2hc7d0a_.py\", line 24,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    head, *tail = l\n    if head < tail[0]:\n   \
    \     return True\n    if head > tail[-1]:\n        return True\n    return monotonic(tail)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2hc7d0a_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2hc7d0a_.py\", line 32,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp2hc7d0a_.py\", line 24,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    \n    prev = l[0]\n    for x in l[1:]:\n    \
    \    if prev < x:\n            return False\n        prev = x\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu43my_j9.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpu43my_j9.py\", line 33,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpu43my_j9.py\", line 23,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    if l[-1] < l[0]:\n        return True\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4b_rl08.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_4b_rl08.py\", line 29,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp_4b_rl08.py\", line 19,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    else:\n        return all(l[i] <= l[i+1] for\
    \ i in xrange(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wczdeco.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4wczdeco.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp4wczdeco.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp4wczdeco.py\"\
    , line 15, in monotonic\n    return all(l[i] <= l[i+1] for i in xrange(len(l)-1))\n\
    NameError: name 'xrange' is not defined. Did you mean: 'range'?\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    if len(l)\
    \ < 2:\n        return True\n    i = 0\n    j = len(l) - 1\n    while i < j:\n\
    \        if l[i] < l[j]:\n            return False\n        elif l[i] > l[j]:\n\
    \            i += 1\n        else:\n            j -= 1\n    return True\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1,\
    \ 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert\
    \ candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n\
    \    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1,\
    \ 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef\
    \ test_check():\n    check(monotonic)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpump_i8d1.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpump_i8d1.py\", line 36,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpump_i8d1.py\", line 26,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n\
    \    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    l = list(l)\n\
    \    l.sort()\n    return l[0] < l[-1]\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2gq8_sjd.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp2gq8_sjd.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp2gq8_sjd.py\", line 19,\
    \ in check\n    assert candidate([1, 20, 4, 10]) == False\nAssertionError\n"
  stdout: ''
