name: HumanEval_143_words_in_sentence
language: py
prompt: "def words_in_sentence(sentence: str) -> str:\n    \"\"\"\n    You are given\
  \ a string representing a sentence,\n    the sentence contains some words separated\
  \ by a space,\n    and you have to return a string that contains the words from\
  \ the original sentence,\n    whose lengths are prime numbers,\n    the order of\
  \ the words in the new string should be the same as the original one.\n\n    Example\
  \ 1:\n    >>> words_in_sentence('This is a test')\n    'is'\n\n    Example 2:\n\
  \    >>> words_in_sentence('lets go for swimming')\n    'go for'\n    \n    Constraints:\n\
  \        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n\
  \    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('This is a test') == 'is'\n  \
  \  assert candidate('lets go for swimming') == 'go for'\n    assert candidate('there\
  \ is no place available here') == 'there is no place'\n    assert candidate('Hi\
  \ I am Hussein') == 'Hi am Hussein'\n    assert candidate('go for it') == 'go for\
  \ it'\n    assert candidate('here') == ''\n    assert candidate('here is') == 'is'\n\
  \ndef test_check():\n    check(words_in_sentence)\n\ntest_check()\n"
completions: ["    \n    words = sentence.split()\n    \n    prime_words = []\n  \
    \  \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x\
    \ % 2 != 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 3 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 5 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 7 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 11 == 0, prime_words))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 13 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 17 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 19 == 0, prime_words))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 23 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 29 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 31 == 0, prime_words))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 37 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 41 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 43 == 0, prime_words))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 47 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words\
    \ = list(filter(lambda x: x % 53 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 59 == 0, prime", "    words\
    \ = sentence.split()\n    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    prime_words = list(map(str, prime_words))\n    prime_words.sort()\n\
    \    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    words =\
    \ sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return \"\"\n", "    \n    words =\
    \ sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 0]\n    \n    prime_words\
    \ = [x for x in prime_words if x % 2 == 0]\n    \n    prime_words.sort()\n   \
    \ \n    prime_words = [x for x in prime_words if x != 1]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 0]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 1]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 0]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 1]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 0]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 1]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 0]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 1]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 0]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 1]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 0]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 1]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 0]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 1]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 0]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 1]\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x != 0]\n    \n    prime_words.sort()",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        \n        prime_words.append(len(word))\n        \n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n    \n\
    \    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n    \n\
    \    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x\
    \ % 2 == 0, prime_words))\n    \n    return ' '.join(prime_words)\n</cell>\n<cell>",
  "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the following\
    \ cell to test your code:\n\n\n</text>\n<cell>", "    \n    # Your code here\n\
    \    \n    return \"\"\n", "    \n    # Your code here\n    \n    return ''\n",
  "    \n    words = sentence.split()\n    \n    primes = []\n    \n    for word in\
    \ words:\n        prime = True\n        \n        for char in word:\n        \
    \    if char.isalpha():\n                prime = False\n                break\n\
    \        \n        if prime:\n            primes.append(len(word))\n    \n   \
    \ primes.sort()\n    \n    return ' '.join(words[i:i+primes[i]] for i in range(len(primes)-1))\n\
    </cell>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = list(map(str, prime_words))\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    words =\
    \ sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<text>\nLet's test our function\n\n\n</text>\n<cell>\nwords_in_sentence('This\
    \ is a test')\n</cell>\n<cell>\nwords_in_sentence('lets go for swimming')\n</cell>\n\
    <text>\nNow let's use our function to solve the problem\n\n\n</text>\n<cell>",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(map(str, prime_words))\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    words = sentence.split()\n    prime_words = []\n    for\
    \ word in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<text>\nLet's test our function\n\
    \n\n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nNow let's use our function to solve the\
    \ problem\n\n\n</text>\n<cell>", "    words = sentence.split()\n    prime_words\
    \ = []\n    for word in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n\
    \    prime_words = list(map(str, prime_words))\n    return ' '.join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return \"\"\n", "    \n    words =\
    \ sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    return\
    \ ' '.join(prime_words)\n</cell>\n<cell>", "    words = sentence.split()\n   \
    \ words_in_sentence = []\n    for word in words:\n        prime_word = True\n\
    \        for char in word:\n            if char.isalpha():\n                prime_word\
    \ = False\n                break\n        if prime_word:\n            words_in_sentence.append(word)\n\
    \    return ' '.join(words_in_sentence)\n\n", "    \n    # Your code here\n  \
    \  \n    return \"\"\n</cell>\n<text>\nRun the following cell to test your code:\n\
    \n\n</text>\n<cell>", "    words = sentence.split()\n    words_in_sentence = []\n\
    \    for word in words:\n        word_length = len(word)\n        if word_length\
    \ not in prime_numbers:\n            continue\n        words_in_sentence.append(word)\n\
    \    return ' '.join(words_in_sentence)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [x for x in prime_words\
    \ if x % 2 == 0]\n    \n    return ' '.join(prime_words)\n</cell>\n<cell>", " \
    \   \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the following\
    \ cell to test your code:\n\n\n</text>\n<cell>", "    words = sentence.split()\n\
    \    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    return ' '.join(prime_words)\n\n", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code here\n\
    \    \n    return ''\n", "    \n    # Your code here\n    \n    return \"\"\n",
  "    \n    # Your code here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    return\
    \ ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code here\n    \n\
    \    return \"\"\n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the cell below to test your code:\n\n\n</text>\n<cell>\nsentence =\
    \ 'This is a test'\nassert words_in_sentence(sentence) == 'is'\nsentence = 'lets\
    \ go for swimming'\nassert words_in_sentence(sentence) == 'go for'\n</cell>\n\
    <text>\nExercise 3\nThe function prime_words_in_sentence should return the string\
    \ 'is' if it is passed the string 'This is a test'.\n\nThe function prime_words_in_sentence\
    \ has the following parameter(s):\n\nsentence: a string representing a sentence\n\
    The function should return the string 'is' if it is passed the string 'This is\
    \ a test'.\n\nThe function prime_words_in_sentence has the following code:\n",
  "    words = sentence.split()\n    words_in_sentence = ''\n    for word in words:\n\
    \        words_in_sentence += word\n        \n    prime_numbers = []\n    for\
    \ word in words_in_sentence.split():\n        prime_numbers.append(len(word))\n\
    \    prime_numbers.sort()\n    prime_numbers = prime_numbers[2:]\n    \n    return\
    \ ' '.join(words_in_sentence.split()[prime_numbers])\n\n", "    words = sentence.split()\n\
    \    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    return ' '.join(words[i:i+prime_words[i]] for i in\
    \ range(len(prime_words)-1))\n\n", "    \n    # Your code here\n    \n    return\
    \ \"\"\n", "    \n    words = sentence.split()\n    \n    prime_words = []\n \
    \   \n    for word in words:\n        prime_words.append(len(word))\n    \n  \
    \  prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n</cell>\n<text>\nRun the following cell to test\
    \ your code:\n\n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return\
    \ ''\n", "    \n    words = sentence.split()\n    \n    prime_words = []\n   \
    \ \n    for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_word", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nImplement the function prime_words_in_sentence() below so that it returns\
    \ the prime words in the sentence as shown in the example above.\n\nConstraints:\n\
    * 1 <= len(sentence) <= 100\n* sentence contains only letters\n* The words in\
    \ the sentence are separated by a single space\n* The length of the prime words\
    \ are greater than 1\n* The order of the words in the prime words should be the\
    \ same as the order of the words in the original sentence\n* The prime words are\
    \ separated by a single space\n* The length of the prime words are greater than\
    \ 1\n* The prime words are separated by a single space\n* The length of the prime\
    \ words are greater than 1\n* The prime words are separated by a single space\n\
    * The length of the prime words are greater than 1\n* The prime words are separated\
    \ by a single space\n* The length of the prime words are greater than 1\n* The\
    \ prime words are separated by a single space\n* The length of the prime words\
    \ are greater than 1\n* The prime words are separated by a single space\n* The\
    \ length of the prime words are greater than 1\n* The prime words are separated\
    \ by a single space\n* The length of the prime words are greater than 1\n* The\
    \ prime words are separated by a single space\n* The length of the prime words\
    \ are greater than 1\n* The prime words are separated by a single space\n* The\
    \ length of the prime words are greater than 1\n* The prime words are separated\
    \ by a single space\n* The length of the prime words are greater than 1\n* The\
    \ prime words are separated by a single space\n* The length of the prime words\
    \ are greater than 1\n* The prime words are separated by a single space\n* The\
    \ length of the prime words are greater than 1\n* The prime words are separated\
    \ by a single space\n* The length of the prime words are greater than 1\n* The\
    \ prime words are separated by a single space\n* The length of the prime words\
    \ are greater than 1\n* The prime words are separated by a single space\n* The\
    \ length of the prime words are greater than 1\n* The prime words are separated\
    \ by a single space\n* The length of the prime words are greater than 1\n* The\
    \ prime words are separated by a single space\n* The length of the prime words\
    \ are greater than 1\n* The prime words are separated by a single space\n* The\
    \ length of the prime words are greater than 1\n* The prime words are separated\
    \ by a single space\n* The length of the prime words are greater than 1\n* The\
    \ prime words are separated by a single space\n* The length of the prime words\
    \ are greater than 1\n* The prime words are separated by a single space\n* The\
    \ length of the prime words are greater than 1\n* The prime words are separated\
    \ by a single space\n* The length of the prime words are greater than 1", "  \
    \  words = sentence.split()\n    words_in_sentence = ''\n    for word in words:\n\
    \        if len(word) == 3:\n            words_in_sentence += word\n    return\
    \ words_in_sentence\n\n", "    \n    # Your code here\n    \n    return \"\"\n\
    </cell>\n<text>\n3. Longest Palindromic Substring\nGiven a string s, find the\
    \ longest palindromic substring in s.\n\nExample 1:\nInput: s = \"babad\"\nOutput:\
    \ \"bab\"\n\nExample 2:\nInput: s = \"aba\"\nOutput: \"aba\"\n\nExample 3:\nInput:\
    \ s = \"abca\"\nOutput: \"abc\"\n\nExample 4:\nInput: s = \"abcab\"\nOutput: \"\
    abc\"\n\nExample 5:\nInput: s = \"mississippi\"\nOutput: \"missippi\"\n\nExample\
    \ 6:\nInput: s = \"missippi\"\nOutput: \"\"\n\nExample 7:\nInput: s = \"\"\nOutput:\
    \ \"\"\n\nExplanation: \n\nThe longest palindromic substring is \"missippi\"\n\
    The longest palindromic substring is \"missippi\"\nThe longest palindromic substring\
    \ is \"missippi\"\nThe longest palindromic substring is \"missippi\"\nThe longest\
    \ palindromic substring is \"missippi\"\nThe longest palindromic substring is\
    \ \"\"\nThe longest palindromic substring is \"\"\nThe longest palindromic substring\
    \ is \"\"\nThe longest palindromic substring is \"\"\n\n</text>\n<cell>", "  \
    \  \n    # Your code here\n    \n    return \"\"\n", "    \n    # write your code\
    \ here\n    \n    return ''\n", "    \n    # Your code here\n    \n    return\
    \ \"\"\n</cell>\n<text>\nLet's test your implementation\n\n\n</text>\n<cell>",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<text>\nLet's test our function\n\n\n</text>\n<cell>\nwords_in_sentence('This\
    \ is a test')\n</cell>\n<cell>\nwords_in_sentence('lets go for swimming')\n</cell>\n\
    <text>\nNow let's write a function that will return the number of words in a string\n\
    \n\n</text>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = list(set(prime_words))\n    \n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<text>\nLet's test our function\n\
    \n\n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nNow let's write a function that takes a\
    \ string and returns the number of words in the sentence that are palindromes.\n\
    \n\n</text>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_string = ' '.join(prime_words)\n\
    \    \n    return prime_words_string\n\n", "    words = sentence.split()\n   \
    \ primes = []\n    for word in words:\n        prime = True\n        for char\
    \ in word:\n            if not char.isalpha():\n                prime = False\n\
    \                break\n        if prime:\n            primes.append(len(word))\n\
    \    primes.sort()\n    return ' '.join(words[:primes[-1]])\n\n", "    words =\
    \ sentence.split()\n    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    return ' '.join(prime_words)\n", "    \n    # Your\
    \ code here\n    \n    return \"\"\n</cell>\n<text>\nTest your code\nRun the cell\
    \ below to test your code.\n\nThe test code uses a string variable named sentence\
    \ to simulate your input.\n\n\n</text>\n<cell>\nsentence = 'This is a test'\n\
    assert words_in_sentence(sentence) == \"\"\n</cell>\n<text>\nExpected output\n\
    The output validates our expectation. Since this is a simple function and does\
    \ not require any parameters, your output will match the expected output.\n\n\
    Your output matches our expectation.\n\n\n</text>\n<text>\nA. count_words\nWrite\
    \ a function that counts the number of words in a given string.\n\nThe function\
    \ should take in a string and return the number of words in that string.\n\nThe\
    \ function words_in_sentence has already been written for you.\n\n\n</text>\n\
    <cell>", "    \n    words = sentence.split()\n    \n    primes = []\n    for word\
    \ in words:\n        prime = True\n        for char in word:\n            if char.isalpha():\n\
    \                prime = False\n                break\n        if prime:\n   \
    \         primes.append(len(word))\n    \n    primes.sort()\n    \n    words_in_sentence\
    \ = ''\n    for prime in primes:\n        words_in_sentence += words[prime-1]\
    \ + ' '\n    \n    return words_in_sentence\n\n", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\n3. Longest Palindromic Substring II\n\
    Given a string s, find the longest palindromic substring in s.\n\nExample 1:\n\
    Input: s = \"babad\"\nOutput: \"bab\"\n\nExample 2:\nInput: s = \"aba\"\nOutput:\
    \ \"aba\"\n\nExample 3:\nInput: s = \"abca\"\nOutput: \"abc\"\n\nExample 4:\n\
    Input: s = \"aabc\"\nOutput: \"abc\"\n\nExample 5:\nInput: s = \"abc\"\nOutput:\
    \ \"abc\"\n\nExample 6:\nInput: s = \"aabc\"\nOutput: \"abc\"\n\nExample 7:\n\
    Input: s = \"aaaaaaaaaaaaaa\"\nOutput: \"aaaaaaaaaaaaaa\"\n\nExample 8:\nInput:\
    \ s = \"aaaaaaaaaaaaaa\"\nOutput: \"aaaaaaaaaaaaaa\"\n\nExample 9:\nInput: s =\
    \ \"aaaaaaaaaaaaaa\"\nOutput: \"aaaaaaaaaaaaaa\"\n\nExample 10:\nInput: s = \"\
    aaaaaaaaaaaaaa\"\nOutput: \"aaaaaaaaaaaaaa\"\n\nConstraints:\n    1 <= len(s)\
    \ <= 10^5\n    s contains only lowercase English letters.\n\"\"\"\n", "    \n\
    \    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x % 2 == 0]\n    \n    return\
    \ ' '.join(prime_words)\n</cell>\n<text>\nLet's test our function\n\n\n</text>\n\
    <cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nLet's try another example\n\n\n</text>\n\
    <cell>\nwords_in_sentence('The quick brown fox jumps over the lazy dog')\n</cell>\n\
    <text>\nLet's try another example\n\n\n</text>\n<cell>\nwords_in_sentence('The\
    \ quick brown fox jumps over the lazy dog')\n</cell>\n<text>\nLet's try another\
    \ example\n\n\n</text>\n<cell>\nwords_in_sentence('The quick brown fox jumps over\
    \ the lazy dog')\n</cell>\n<text>\nLet's try another example\n\n\n</text>\n<cell>\n\
    words_in_sentence('The quick brown fox jumps over the lazy dog')\n</cell>\n<text>\n\
    Let's try another example\n\n\n</text>\n<cell>\nwords_in_sentence('The quick brown\
    \ fox jumps over the lazy dog')\n</cell>\n<text>\nLet's try another example\n\n\
    \n</text>\n<cell>\nwords_in_sentence('The quick brown fox jumps over the lazy\
    \ dog')\n</cell>\n<text>\nLet's try another example\n\n\n</text>\n<cell>\nwords_in_sentence('The\
    \ quick brown fox jumps over the lazy dog')\n</cell>\n<text>\nLet's try another\
    \ example\n\n\n</text>\n<cell>\nwords_in_sentence('The quick brown fox jumps over\
    \ the lazy dog')\n</cell>\n<text>\nLet's try another example\n\n\n</text>\n<cell>\n\
    words_in_sentence('The quick brown fox jumps over the lazy dog')\n</cell>\n<text>\n\
    Let's try another example\n\n\n</text>\n<cell>\nwords_in_sentence('The quick brown\
    \ fox jumps over the lazy dog')\n</cell>\n<text>\nLet's try another example\n\n\
    \n</text>\n<cell>\nwords_in_sentence('The quick brown fox jumps over the lazy\
    \ dog')\n</cell>\n<text>\nLet's try another example\n\n\n</text>\n<cell>\nwords_in_sentence('The\
    \ quick brown fox jumps over the lazy dog", "    words = sentence.split()\n  \
    \  prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    prime_words = list(map(str, prime_words))\n    return\
    \ ' '.join(prime_words)\n</cell>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    return ' '.join(prime_words)\n</cell>\n\
    <cell>", "    \n    # Your code here\n    \n    return \"\"\n", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        prime_words.append(len(word))\n  \
    \  \n    prime_words.sort()\n    \n    return ' '.join(prime_words)\n\n", "  \
    \  \n    # Your code here\n    \n    return \"\"\n</cell>\n<cell>", "    words\
    \ = sentence.split()\n    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    return ' '.join(prime_words)\n", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    \n", "    words = sentence.split()\n    words_in_sentence = []\n    for word in\
    \ words:\n        words_in_sentence.append(word)\n    \n    prime_words = []\n\
    \    for word in words_in_sentence:\n        prime_words.append(is_prime(word))\n\
    \    \n    prime_words_in_sentence = []\n    for word in prime_words:\n      \
    \  prime_words_in_sentence.append(word)\n    \n    return ' '.join(prime_words_in_sentence)\n\
    </cell>\n<text>\nLet's test our implementation:\n\n\n</text>\n<cell>\nwords_in_sentence('This\
    \ is a test')\n</cell>\n<cell>\nwords_in_sentence('lets go for swimming')\n</cell>\n\
    <text>\nNow let's implement a function that takes a sentence and returns the number\
    \ of words in the sentence that are prime numbers:\n\n\n</text>\n<cell>", "  \
    \  \n    # Your code here\n    \n    return ''\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return ''\n", "    \n    words = sentence.split()\n    \n  \
    \  prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    words =\
    \ sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n", "   \
    \ \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    words = sentence.split()\n\
    \    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    prime_words = [str(x) for x in prime_words]\n   \
    \ return ' '.join(prime_words)\n", "    \n    # Your code here\n    \n    return\
    \ \"\"\n", "    \n    words = sentence.split()\n    \n    prime_words = []\n \
    \   \n    for word in words:\n        prime_words.append(len(word))\n    \n  \
    \  prime_words.sort()\n    \n    prime_words = [x for x in prime_words if x %\
    \ 2 == 0]\n    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    words\
    \ = sentence.split()\n    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    return ' '.join(words[i:i+prime_words[i]] for i in\
    \ range(len(prime_words)))\n\n", "    \n    # Your code here\n    \n    return\
    \ \"\"\n", "    \n    words = sentence.split()\n    \n    prime_words = []\n \
    \   \n    for word in words:\n        prime_words.append(len(word))\n    \n  \
    \  prime_words.sort()\n    \n    prime_words_str = ' '.join(prime_words)\n   \
    \ \n    return prime_words_str\n\n", "    \n    words = sentence.split()\n   \
    \ \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_str = ' '.join(prime_words)\n\
    \    \n    return prime_words_str\n</cell>\n<text>\nLet's test our function\n\n\
    \n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nNow let's write a function that takes a\
    \ sentence and returns a list of words,\n    whose lengths are prime numbers.\n\
    \n    Example 1:\n    >>> prime_words_in_sentence('This is a test')\n    ['is',\
    \ 'for']\n\n    Example 2:\n    >>> prime_words_in_sentence('lets go for swimming')\n\
    \    ['go', 'for']\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\n    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    return prime_words\n</cell>\n<text>\n\
    Let's test our function\n\n\n</text>\n<cell>\nprime_words_in_sentence('This is\
    \ a test')\n</cell>\n<cell>\nprime_words_in_sentence('lets go for swimming')\n\
    </cell>\n<text>\nNow let's write a function that takes a sentence and returns\
    \ a list of words,\n    whose lengths are prime numbers, in alphabetical order.\n\
    \n    Example 1:\n    >>> prime_words_in_sentence('This is a test')\n    ['is',\
    \ 'for']\n\n    Example 2:\n    >>> prime_words_in_sentence('lets go for swimming')\n\
    \    ['go', 'for']\n    \n    Constraints:\n        * 1 <= len(sentence) <= 100\n\
    \        * sentence contains only letters\n    \"\"\"\n    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_str = ' '.join(prime_words)\n\
    \    \n    return prime_words_str\n</cell>\n<text>\nLet's test our function\n\n\
    \n</text>\n<cell>\nprime_words_in_sentence('This is a test')\n</cell>\n<cell>\n\
    prime_words_in_sentence('lets go for swimming')\n</cell>\n<text>\nNow let's write\
    \ a function that takes a sentence and returns a list of words,\n    whose lengths\
    \ are prime numbers, in alphabe", "    words = sentence.split()\n    prime_words\
    \ = []\n    for word in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n\
    \    return ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return ''\n</cell>\n<text>\nRun the following cell to test your\
    \ implementation\n\n\n</text>\n<cell>", "    words = sentence.split()\n    words_in_sentence\
    \ = []\n    for word in words:\n        prime_word = True\n        for char in\
    \ word:\n            if not char.isalpha():\n                prime_word = False\n\
    \                break\n        if prime_word:\n            words_in_sentence.append(word)\n\
    \    return ' '.join(words_in_sentence)\n\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words_string = ' '.join(prime_words)\n\
    \    \n    return prime_words_string\n\n", "    \n    # Your code here\n    \n\
    \    return \"\"\n</cell>\n<text>\nLet's test your implementation\n\n\n</text>\n\
    <cell>", "    \n    words = sentence.split()\n    \n    prime_words = []\n   \
    \ \n    for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    words = sentence.split()\n    prime_words = []\n    for\
    \ word in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n\
    \    prime_words = list(map(str, prime_words))\n    return ' '.join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\n3. Longest\
    \ Palindromic Substring\nGiven a string s, find the longest palindromic substring\
    \ in it.\n\nA palindromic string is a string that is the same when read from left\
    \ to right\nand when read from right to left. For example, \u201Cradar\u201D and\
    \ \u201Craddar\u201D are palindromic strings.\n\nWrite a function to find the\
    \ longest palindromic substring in s.\n\nExample 1:\nInput: s = \"abcba\"\nOutput:\
    \ \"abc\"\n\nExample 2:\nInput: s = \"aab\"\nOutput: \"a\"\n\nExample 3:\nInput:\
    \ s = \"aba\"\nOutput: \"ab\"\n\nExample 4:\nInput: s = \"abca\"\nOutput: \"abc\"\
    \n\nExample 5:\nInput: s = \"abcab\"\nOutput: \"abc\"\n\nExample 6:\nInput: s\
    \ = \"abcabcbb\"\nOutput: \"abc\"\n\nExample 7:\nInput: s = \"a\"\nOutput: \"\"\
    \n\nExample 8:\nInput: s = \"\"\nOutput: \"\"\n\nConstraints:\n1 <= len(s) <=\
    \ 10^5\ns contains only lowercase English letters.\n\"\"\"\n", "    \n    # write\
    \ your code here\n    \n    return ''\n</cell>\n<text>\n3. Write a function that\
    \ takes a string and returns the number of words in the string.\n\n</text>\n<cell>",
  "    \n    # Your code here\n    \n    return ''\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x\
    \ % 2 == 0, prime_words))\n    \n    return ' '.join(prime_words)\n\n", "    \n\
    \    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words_string = ''\n    \n    for word in prime_words:\n     \
    \   \n        prime_words_string += word\n        \n    return prime_words_string\n\
    \n", "    \n    # Your code here\n    \n    return \"\"\n", "    \n    words =\
    \ sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\nLet's test your implementation\n\n\n\
    </text>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words =\
    \ []\n    \n    for word in words:\n        prime_words.append(len(word))\n  \
    \  \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<text>\nLet's test our function\n\
    \n\n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nTime complexity\nThe time complexity of\
    \ our algorithm is $O(n)$, where $n$ is the number of words in the sentence.\n\
    \n\n</text>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the sentence that are prime numbers.\n\nExample 1:\n\
    >>> count_prime_words('This is a test')\n3\n\nExample 2:\n>>> count_prime_words('lets\
    \ go for swimming')\n2\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    *\
    \ sentence contains only letters\n    * The words in the sentence are separated\
    \ by a space\n    * The words in the sentence are only composed of letters and\
    \ space\n    * The words in the sentence are only composed of letters \n    *\
    \ The words in the sentence are only composed of letters \n    * The words in\
    \ the sentence are only composed of letters \n    * The words in the sentence\
    \ are only composed of letters \n    * The words in the sentence are only composed\
    \ of letters \n    * The words in the sentence are only composed of letters \n\
    \    * The words in the sentence are only composed of letters \n    * The words\
    \ in the sentence are only composed of letters \n    * The words in the sentence\
    \ are only composed of letters \n    * The words in the sentence are only composed\
    \ of letters \n    * The words in the sentence are only composed of letters \n\
    \    * The words in the sentence are only composed of letters \n    * The words\
    \ in the sentence are only composed of letters \n    * The words in the sentence\
    \ are only composed of letters \n    * The words in the sentence are only composed\
    \ of letters \n    * The words in the sentence are only composed of letters \n\
    \    * The words in the sentence are only composed of letters \n    * The words\
    \ in the sentence are only composed of letters \n    * The words in the sentence\
    \ are only composed of letters \n    * The words in the sentence are only composed\
    \ of letters \n    * The words in the sentence are only composed of letters \n\
    \    * The words in the sentence are only composed of letters \n    * The words\
    \ in the sentence are only composed of letters \n    * The words in the sentence\
    \ are ", "    \n    words = sentence.split()\n    \n    prime_words = []\n   \
    \ \n    for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x %\
    \ 2 == 0, prime_words))\n    \n    prime_words.sort()\n    \n    prime_words =\
    \ list(filter(lambda x: x % 2 == 0, prime_words))\n    \n    prime_words.sort()\n\
    \    \n    prime_word", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the following cell to test your code:\n\n\n</text>\n<cell>\nsentence\
    \ = 'This is a test'\nassert words_in_sentence(sentence) == 'is'\nsentence = 'lets\
    \ go for swimming'\nassert words_in_sentence(sentence) == 'go for'\n</cell>\n\
    <text>\nExercise 4\nImplement the function count_words that takes in a string\
    \ and returns a dictionary that contains the word counts in a sentence. Note that\
    \ the order of the words in the dictionary is not important. For example, {'and':\
    \ 2, 'is': 1} has the same key as {'is': 2, 'and': 1}.\n\nThe function should\
    \ return a dictionary that contains the word counts in a sentence. For example,\
    \ {'and': 2, 'is': 1} has the same key as {'is': 2, 'and': 1}.\n\nExample 1:\n\
    >>> count_words('The quick brown fox jumps over the lazy dog')\n{'brown': 1, 'fox':\
    \ 2, 'is': 1, 'lazy': 1, 'quick': 1, 'dog': 1, 'jumps': 1, 'over': 1, 'the': 1}\n\
    \nExample 2:\n>>> count_words('The quick brown fox jumps over the lazy dog')\n\
    {'brown': 1, 'fox': 2, 'is': 1, 'lazy': 1, 'quick': 1, 'dog': 1, 'jumps': 1, 'over':\
    \ 1, 'the': 1}\n\nExample 3:\n>>> count_words('The quick brown fox jumps over\
    \ the lazy dog')\n{'brown': 1, 'fox': 2, 'is': 1, 'lazy': 1, 'quick': 1, 'dog':\
    \ 1, 'jumps': 1, 'over': 1, 'the': 1}\n\nExample 4:\n>>> count_words('The quick\
    \ brown fox jumps over the lazy dog')\n{'brown': 1, 'fox': 2, 'is': 1, 'lazy':\
    \ 1, 'quick': 1, 'dog': 1, 'jumps': 1, 'over': 1, 'the': 1}\n\n</text>\n<cell>",
  "    words = sentence.split()\n    prime_words = []\n    for word in words:\n  \
    \      prime_words.append(len(word))\n    prime_words.sort()\n    prime_words\
    \ = [str(x) for x in prime_words]\n    return ' '.join(prime_words)\n\n", "  \
    \  \n    # Your code here\n    \n    return ''\n", "    \n    # Your code here\n\
    \    \n    return \"\"\n", "    \n    # Your code here\n    \n    return \"\"\n",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words_string = ''\n    \n    for word in prime_words:\n     \
    \   prime_words_string += word\n    \n    return prime_words_string\n</cell>\n\
    <cell>", "    words = sentence.split()\n    words_in_sentence = ''\n    for word\
    \ in words:\n        if len(word) == 0 or word.isspace():\n            continue\n\
    \        words_in_sentence += word\n    return words_in_sentence\n\n", "    \n\
    \    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nLet's test your\
    \ implementation\n\n\n</text>\n<cell>", "    \n    # Your code here\n    \n  \
    \  return \"\"\n</cell>\n<text>\nTest your code\n\n</text>\n<cell>", "    \n \
    \   words = sentence.split()\n    \n    prime_words = []\n    \n    for word in\
    \ words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words_str = ' '.join(prime_words)\n    \n    return prime_words_str\n",
  "    words = sentence.split()\n    prime_words = []\n    for word in words:\n  \
    \      prime_words.append(len(word))\n    prime_words.sort()\n    return ' '.join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<cell>", " \
    \   \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for\
    \ word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    words =\
    \ sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return \"\"\n", "    \n    # Your\
    \ code here\n    \n    return \"\"\n</cell>\n<text>\n3. Longest Substring Without\
    \ Repeating Characters\nGiven a string S and a string T, find the longest substring\
    \ T of S without repeating characters.\nThe substring must consist of letters\
    \ (case sensitive).\n\nExample 1:\nInput: S = \"abcabcbb\", T = \"abc\"\nOutput:\
    \ \"abc\"\n\nExplanation: The answer is \"abc\", with the length of 3.\n\nExample\
    \ 2:\nInput: S = \"bbbbb\", T = \"abc\"\nOutput: \"b\"\n\nExplanation: The answer\
    \ is \"b\", with the length of 1.\n\nExample 3:\nInput: S = \"pwwkew\", T = \"\
    wke\"\nOutput: \"wke\"\n\nExplanation: The answer is \"wke\", with the length\
    \ of 3.\n\nExample 4:\nInput: S = \"pwwkew\", T = \"kew\"\nOutput: \"\" (empty\
    \ string)\n\nExplanation: The answer is \"\", with the length of 0.\n\nExample\
    \ 5:\nInput: S = \"pwwkew\", T = \"pwwke\"\nOutput: \"pwwke\"\n\nExplanation:\
    \ The answer is \"pwwke\", with the length of 6.\n\nExample 6:\nInput: S = \"\
    pwwkew\", T = \"keww\"\nOutput: \"\" (empty string)\n\nExplanation: The answer\
    \ is \"\", with the length of 0.\n\nExample 7:\nInput: S = \"pwwkew\", T = \"\
    kewke\"\nOutput: \"kewke\"\n\nExplanation: The answer is \"kewke\", with the length\
    \ of 5.\n\nExample 8:\nInput: S = \"pwwkew\", T = \"kewkew\"\nOutput: \"kewkew\"\
    \n\nExplanation: The answer is \"kewkew\", with the length of 6.\n\nExample 9:\n\
    Input: S = \"pwwkew\", T = \"kewkeww\"\nOutput: \"kewkeww\"\n\nExplanation: The\
    \ answer is \"kewkeww\", with the length of 7.\n\nExample 10:\nInput: S = \"pwwkew\"\
    , T = \"kewkewke\"\nOutput: \"kewkewke\"\n\nExplanation: The answer is \"kewkewke\"\
    , with the length of 8.\n\nExample 11:\nInput: S = \"pwwkew\", T = \"kewkewkew\"\
    \nOutput: \"kewkewkew\"\n\nExplanation: The answer is \"kewkewkew\", with the\
    \ length of 9.\n\nExample 12:\nInput: S = \"pww", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\nRun the following cell to test your code:\n\
    \n\n</text>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <cell>", "    \n    words = sentence.split()\n    \n    prime_words = []\n   \
    \ \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words_str = ' '.join(prime_words)\n\
    \    \n    return prime_words_str\n</cell>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    return\
    \ ' '.join(prime_words)\n</cell>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x\
    \ % 2 == 0, prime_words))\n    \n    return ' '.join(prime_words)\n</cell>\n<cell>",
  "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nTest your code\n\
    Run the cell below to test your code.\n\nThe test code uses a custom assert function\
    \ which checks that each case in the switch statement is followed by the correct\
    \ output. Your code will be tested on the following inputs:\n\n'This is a test'\n\
    'lets go for swimming'\n'let\\'s go for swimming'\n'let\\'s go for swimming'\n\
    'let\\'s go for swimming'\n'let\\'s go for swimming'\n'let\\'s go for swimming'\n\
    'let\\'s go for swimming'\n'let\\'s go for swimming'\n'let\\'s go for swimming'\n\
    'let\\'s go for swimming'\n'let\\'s go for swimming'\n'let\\'s go for swimming'\n\
    'let\\'s go for swimming'\n'let\\'s go for swimming'\n'let\\'s go for swimming'\n\
    'let\\'s go for swimming'\n'let\\'s go for swimming'\n'let\\'s go for swimming'\n\
    'let\\'s go for swimming'\n'let\\'s go for swimming'\n'let\\'s go for swimming'\n\
    'let\\'s go for swimming'\n'let\\'s go for swimming'\n'let\\'s go for swimming'\n\
    'let\\'s go for swimming'\n'let\\'s go for swimming'\n'let\\'s go for swimming'\n\
    'let\\'s go for swimming'\n'let\\'s go for swimming'\n'let\\'s go for swimming'\n\
    'let\\'s go for swimming'\n'let\\'s go for swimming'\n'let\\'s go for swimming'\n\
    'let\\'s go for swimming'\n'let\\'s go for swimming'\n'let\\'s go for swimming'\n\
    'let\\'s go for swimming'\n'let\\'s go for swimming'\n'let\\'s go for swimming'\n\
    'let\\'s go for swimming'\n'let\\'s go for swimming", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n", "    \n    # Your code here\n    \n\
    \    return \"\"\n</cell>\n<text>\n3. Longest Palindromic Substring\nGiven a string\
    \ s, find the longest palindromic substring in s.\n\nExample 1:\nInput: s = \"\
    babad\"\nOutput: \"bab\"\n\nExample 2:\nInput: s = \"aba\"\nOutput: \"aba\"\n\n\
    Example 3:\nInput: s = \"abca\"\nOutput: \"abc\"\n\nExample 4:\nInput: s = \"\
    aabc\"\nOutput: \"abc\"\n\nExample 5:\nInput: s = \"abc\"\nOutput: \"abc\"\n\n\
    Example 6:\nInput: s = \"a\"\nOutput: \"a\"\n\nExample 7:\nInput: s = \"\"\nOutput:\
    \ \"\"\n\nExplanation: \n\nThe longest palindromic substring is \"abc\".\nThe\
    \ longest palindromic substring of \"aba\" is \"aba\".\nThe longest palindromic\
    \ substring of \"abca\" is \"abc\".\nThe longest palindromic substring of \"aabc\"\
    \ is \"abc\".\nThe longest palindromic substring of \"abc\" is \"abc\".\nThe longest\
    \ palindromic substring of \"a\" is \"a\".\nThe longest palindromic substring\
    \ of \"\" is \"\".\n\"\"\"\n\n", "    \n    # Your code here\n    \n    return\
    \ \"\"\n</cell>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    return\
    \ ' '.join(prime_words)\n", "    words = sentence.split()\n    prime_words = []\n\
    \    for word in words:\n        prime_words.append(len(word))\n    prime_words.sort()\n\
    \    prime_words = [str(x) for x in prime_words]\n    return ' '.join(prime_words)\n",
  "    \n    # Your code here\n    \n    return \"\"\n", "    \n    # Your code here\n\
    \    \n    return \"\"\n</cell>\n<text>\nRun the following cell to test your code:\n\
    \n\n</text>\n<cell>\nsentence = 'This is a test'\nassert words_in_sentence(sentence)\
    \ == 'is'\nsentence = 'lets go for swimming'\nassert words_in_sentence(sentence)\
    \ == 'go for'\n</cell>\n<text>\nExercise 3\nThe function is_palindrome should\
    \ take a string as its parameter and return a boolean.\nThe function should return\
    \ True if the given string is a palindrome and False otherwise.\n\nThe function\
    \ is_palindrome has the following parameter(s):\n\nsentence: a string that is\
    \ a palindrome\n\nThe function should return True if the given string is a palindrome\
    \ and False otherwise.\n\nThe function is_palindrome has the following code:\n",
  "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        \n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [x for x in prime_words if x % 2 == 0]\n    \n    return\
    \ ' '.join(prime_words)\n</cell>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = list(filter(lambda x: x\
    \ % 2 == 1, prime_words))\n    \n    return ' '.join(prime_words)\n</cell>\n<text>\n\
    Let's test our function\n\n\n</text>\n<cell>\nwords_in_sentence('This is a test')\n\
    </cell>\n<cell>\nwords_in_sentence('lets go for swimming')\n</cell>\n<text>\n\
    Great! Now let's write a function which takes a sentence and returns the number\
    \ of words in the sentence that are palindromes.\n\n\n</text>\n<cell>", "    \n\
    \    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n",
  "    \n    # Your code here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_str = ' '.join(prime_words)\n\
    \    \n    return prime_words_str\n\n", "    words = sentence.split()\n    words_in_sentence\
    \ = []\n    for word in words:\n        words_in_sentence.append(word)\n    \n\
    \    prime_words = []\n    for word in words_in_sentence:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_in_sentence = []\n    for\
    \ word in prime_words:\n        prime_words_in_sentence.append(word)\n    \n \
    \   return ' '.join(prime_words_in_sentence)\n</cell>\n<cell>\nwords_in_sentence('This\
    \ is a test')\n</cell>\n<cell>\nwords_in_sentence('lets go for swimming')\n</cell>\n\
    <text>\nProblem 8\nWrite a function that returns a list containing the first n\
    \ prime numbers. \nThe function should take one parameter, n, which represents\
    \ the number of prime numbers to return.\n\nExample 1:\n>>> prime_numbers(10)\n\
    [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\nExample 2:\n>>> prime_numbers(5)\n[2,\
    \ 3, 5, 7, 11, 13]\n\nConstraints:\n    * 1 <= n <= 100\n    * n > 0\n    * n\
    \ <= 100\n    * n >= 1\n    * n <= 100\n    * n >= 1\n    * n <= 100\n    * n\
    \ >= 1\n    * n <= 100\n    * n >= 1\n    * n <= 100\n    * n >= 1\n    * n <=\
    \ 100\n    * n >= 1\n    * n <= 100\n    * n >= 1\n    * n <= 100\n    * n >=\
    \ 1\n    * n <= 100\n    * n >= 1\n    * n <= 100\n    * n >= 1\n    * n <= 100\n\
    \    * n >= 1\n    * n <= 100\n    * n >= 1\n    * n <= 100\n    * n >= 1\n  \
    \  * n <= 100\n    * n >= 1\n    * n <= 100\n    * n >= 1\n    * n <= 100\n  \
    \  * n >= 1\n    * n <= 100\n    * n >= 1\n    * n <= 100\n    * n >= 1\n    *\
    \ n <= 100\n    * n >= 1\n    * n <= 100\n    * n >= 1\n    * n <= 100\n    *\
    \ n >= 1\n    * n <= 100\n    * n >= 1\n    * n <= 100\n    * n >= 1\n    * n\
    \ <= 100\n    * n >= 1\n    * n <= 100\n    * n >= 1\n    * n <= 100\n    * n\
    \ >= 1\n    * n <= 100\n    * n >= 1\n    * n <= 100\n    * n >= 1\n    * n <=\
    \ 100\n    * n >= 1\n    * n <= 100\n    * n ", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return ''\n", "    \n    # Your code here\n    \n    return\
    \ \"\"\n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\n\
    3. Longest Substring Without Repeating Characters\nGiven a string S and a string\
    \ T, find the longest substring T of S without repeating characters.\n\nExample\
    \ 1:\nInput: S = \"abcabcbb\", T = \"abc\"\nOutput: \"bb\"\n\nExplanation: The\
    \ answer is \"bbbc\", with the length of 3.\n\nExample 2:\nInput: S = \"bbbbb\"\
    , T = \"b\"\nOutput: \"b\"\n\nExplanation: The answer is \"b\", with the length\
    \ of 1.\n\nExample 3:\nInput: S = \"pwwkew\", T = \"wwke\"\nOutput: \"wke\"\n\n\
    Explanation: The answer is \"wke\", with the length of 3.\n\nExample 4:\nInput:\
    \ S = \"pwwkew\", T = \"ke\"\nOutput: \"\" (empty string)\n\nExplanation: The\
    \ answer is \"\", with the length of 0.\n\nExample 5:\nInput: S = \"pwwkew\",\
    \ T = \"pwwke\"\nOutput: \"wke\"\n\nExplanation: The answer is \"wke\", with the\
    \ length of 3.\n\nConstraints:\n1 <= len(S) <= 10^5\n1 <= len(T) <= 10^5\nS and\
    \ T only contain lowercase English letters.\n\n\n</text>\n<cell>", "    words\
    \ = sentence.split()\n    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    return ' '.join(prime_words)\n", "    \n    words\
    \ = sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   return ' '.join(prime_words)\n</cell>\n<cell>", "    words = sentence.split()\n\
    \    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    prime_words = list(map(str, prime_words))\n    return\
    \ ' '.join(prime_words)\n", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n</cell>\n<text>\nTest your code\n\n</text>\n<cell>",
  "    words = sentence.split()\n    prime_words = []\n    for word in words:\n  \
    \      prime_words.append(len(word))\n    prime_words.sort()\n    return ' '.join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<cell>", " \
    \   \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\n3. Prime Numbers\n\
    A prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself.\n\nWrite a function that takes in a positive integer\
    \ and returns True if and only if the number is prime.\n\nExample 1:\n>>> is_prime(10)\n\
    True\n\nExample 2:\n>>> is_prime(11)\nFalse\n\nExample 3:\n>>> is_prime(12)\n\
    True\n\nExample 4:\n>>> is_prime(13)\nFalse\n\nConstraints:\n    The input number\
    \ will be an integer greater than 0.\n    All numbers in the input will be integers.\n\
    \    All positive numbers will be accepted.\n    All negative numbers will be\
    \ accepted.\n    All numbers in the input will be less than 1,000,000,000.\n \
    \   You cannot use any built-in library function.\n    You cannot use any looping\
    \ structure (such as \"for\").\n    You cannot use any conditional expression\
    \ (such as \"if\").\n    You cannot use the % or // operators.\n    You cannot\
    \ use any string functions except \"len\" and \"range\".\n    You cannot use any\
    \ built-in data type other than \"str\", \"int\", \"float\", \"bool\", or \"list\"\
    .\n    You may assume that the input number is an integer and in the range [\u2212\
    1,000,000,000, 1,000,000,000].\n    You cannot use any advanced data structures\
    \ such as \"dict\", \"set\", or \"list\".\n    \n    You may assume that all input\
    \ numbers are in the range [\u22121,000,000,000, 1,000,000,000].\n    \n    You\
    \ may not use the % operator.\n    You may not use any conditional expressions.\n\
    \    You may not use any looping structures.\n    You may not use any string functions.\n\
    \    You may not use any built-in data types other than \"str\", \"int\", \"float\"\
    , \"bool\", or \"list\".\n    You may not use any advanced data structures such\
    \ as \"dict\", \"set\", or \"list\".\n    \n    You may not use any built-in library\
    \ function.\n    You may not use any looping structure (such as \"for\").\n  \
    \  You may not use any conditional expression (such as \"if\").\n    You may not\
    \ use the // operator.\n    You may not use any string functions except \"len\"\
    \ and \"range\".\n    You may not use any built-in data type other than \"str\"\
    , \"int\", \"float\", \"bool\", or \"list\".\n    You may not use any advanced\
    \ data structures such as \"dict\", \"set\", or \"list\".\n    \n    You may not\
    \ use any built-in library function.\n    You may not use any looping structure\
    \ (such as \"for\").\n    You may not use ", "    words = sentence.split()\n \
    \   prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    return ' '.join(prime_words)\n</cell>\n<text>\nLet's\
    \ test our function\n\n\n</text>\n<cell>\nwords_in_sentence('This is a test')\n\
    </cell>\n<cell>\nwords_in_sentence('lets go for swimming')\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns a string with all\
    \ the words from the original string separated by a space.\n\nExample 1:\n>>>\
    \ words_in_sentence('This is a test')\n'This is a test'\n\nExample 2:\n>>> words_in_sentence('lets\
    \ go for swimming')\n'lets go for swimming'\n\nConstraints:\n    * 1 <= len(sentence)\
    \ <= 100\n    * sentence contains only letters\n    * The order of the words in\
    \ the new string should be the same as the original one.\n    \"\"\"\n    words\
    \ = sentence.split()\n    prime_words = []\n    for word in words:\n        prime_words.append(word)\n\
    \    return ' '.join(prime_words)\n</cell>\n<text>\nLet's test our function\n\n\
    \n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a string and returns a string with all the words from the original string separated\
    \ by a space.\n\nExample 1:\n>>> words_in_sentence('This is a test')\n'This is\
    \ a test'\n\nExample 2:\n>>> words_in_sentence('lets go for swimming')\n'lets\
    \ go for swimming'\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence\
    \ contains only letters\n    * The order of the words in the new string should\
    \ be the same as the original one.\n    \"\"\"\n    words = sentence.split()\n\
    \    prime_words = []\n    for word in words:\n        prime_words.append(word)\n\
    \    return ' '.join(prime_words)\n</cell>\n<text>\nLet's test our function\n\n\
    \n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nExercise 5\nWrite a function that takes\
    \ a string and returns a string with all the words from the original string separated\
    \ by a space.\n\nExample 1:\n>>> words_in_sentence('This is a test')\n'This is\
    \ a test'\n\nExample 2:\n>>> words_in_sentence('lets go for swimming')\n'lets\
    \ go for swimming'\n\nConstraints:\n    * 1 <= len(sentence) <= 100\n    * sentence\
    \ contains only letters\n    * The order of the words in the new ", "    words\
    \ = sentence.split()\n    words_in_sentence = []\n    for word in words:\n   \
    \     words_in_sentence.append(word)\n    \n    prime_numbers = []\n    for word\
    \ in words_in_sentence:\n        prime_numbers.append(len(word))\n    \n    prime_numbers\
    \ = list(set(prime_numbers))\n    prime_numbers.sort()\n    \n    prime_numbers\
    \ = list(filter(lambda x: x > 1, prime_numbers))\n    \n    words_in_sentence\
    \ = []\n    for word in words:\n        words_in_sentence.append(word)\n    \n\
    \    words_in_sentence = ' '.join(words_in_sentence)\n    \n    words_in_sentence\
    \ = words_in_sentence.replace(\" \", \"\")\n    \n    words_in_sentence = words_in_sentence.replace(\"\
    ,\", \"\")\n    \n    words_in_sentence = words_in_sentence.replace(\"'\", \"\"\
    )\n    \n    words_in_sentence = words_in_sentence.replace(\"(\", \"\")\n    \n\
    \    words_in_sentence = words_in_sentence.replace(\")\", \"\")\n    \n    words_in_sentence\
    \ = words_in_sentence.replace(\"-\", \"\")\n    \n    words_in_sentence = words_in_sentence.replace(\"\
    +\", \"\")\n    \n    words_in_sentence = words_in_sentence.replace(\"*\", \"\"\
    )\n    \n    words_in_sentence = words_in_sentence.replace(\"%\", \"\")\n    \n\
    \    words_in_sentence = words_in_sentence.replace(\"^\", \"\")\n    \n    words_in_sentence\
    \ = words_in_sentence.replace(\"~\", \"\")\n    \n    words_in_sentence = words_in_sentence.replace(\"\
    =\", \"\")\n    \n    words_in_sentence = words_in_sentence.replace(\"[\", \"\"\
    )\n    \n    words_in_sentence = words_in_sentence.replace(\"]\", \"\")\n    \n\
    \    words_in_sentence = words_in_sentence.replace(\"{\", \"\")\n    \n    words_in_sentence\
    \ = words_in_sentence.replace(\"}\", \"\")\n    \n    words_in_sentence = words_in_sentence.replace(\"\
    !\", \"\")\n    \n    words_in_sentence = words_in_sentence.replace(\"?\", \"\"\
    )\n    \n    words_in_sentence = words_in_sentence.replace(\",\", \"\")\n    \n\
    \    words_in_sentence = words_in_sentence.replace(\"'\", \"\")\n    \n    words_in_sentence\
    \ = words_in_sentence.replace(\"(\", \"\")\n    \n    words_in_sentence = words_in_sentence.replace(\"\
    )\", \"\")\n    \n    words_in_sentence = words_in_sentence.replace(\"-\", \"\"\
    )\n    \n    words_in_sentence = words_in_sentence.replace(\"+\", \"\")\n    \n\
    \    words_in_sentence = words_in_sentence.replace(\"*\", \"\")\n    \n    words_in_sentence\
    \ = words_in_sentence.replace(\"%\", \"\")\n    \n    words_in_sentence = words_in_sentence.replace(\"\
    ^\", \"\")\n    \n    words_in_sentence = words_in_sentence.replace(\"~\", \"\"\
    )\n    \n    word", "    \n    # Your code here\n    \n    return \"\"\n", " \
    \   \n    # Your code here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    return ' '.join(prime_words)\n", "  \
    \  \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n    \n\
    \    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n</cell>\n<cell>", "    \n    # Your code here\n\
    \    \n    return \"\"\n", "    \n    # write your code here\n    \n    return\
    \ \"\"\n</cell>\n<text>\nRun the following cell to test your implementation\n\n\
    \n</text>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the following cell to test your code:\n\n\n</text>\n<cell>", "   \
    \ \n    # Your code here\n    \n    return \"\"\n", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code\
    \ here\n    \n    return \"\"\n</cell>\n<cell>", "    \n    # Your code here\n\
    \    \n    return ''\n</cell>\n<text>\n3. Longest Substring Without Repeating\
    \ Characters\nGiven a string S and a string T, find the longest substring T of\
    \ S without repeating characters.\n\nExample 1:\nInput: S = \"abcabcbb\", T =\
    \ \"abc\"\nOutput: \"abc\"\n\nExample 2:\nInput: S = \"bbbbb\", T = \"b\"\nOutput:\
    \ \"b\"\n\nExample 3:\nInput: S = \"pwwkew\", T = \"wwke\"\nOutput: \"wke\"\n\n\
    Example 4:\nInput: S = \"eeeee\", T = \"e\"\nOutput: \"e\"\n\nExample 5:\nInput:\
    \ S = \"geeksforgeeks\", T = \"forgeeks\"\nOutput: \"geeks\"\n\nExample 6:\nInput:\
    \ S = \"geeksforgeeks\", T = \"forgeekssss\"\nOutput: \"geeksss\"\n\nExample 7:\n\
    Input: S = \"geeksforgeeks\", T = \"forgeeksss\"\nOutput: \"geeksss\"\n\nExample\
    \ 8:\nInput: S = \"geeksforgeeks\", T = \"forgeekssss\"\nOutput: \"geeksss\"\n\
    \nExample 9:\nInput: S = \"geeksforgeeks\", T = \"forgeekssss\"\nOutput: \"geeksss\"\
    \n\nExample 10:\nInput: S = \"geeksforgeeks\", T = \"forgeekssss\"\nOutput: \"\
    geeksss\"\n\nConstraints:\n1 <= len(S) <= 10^5\n1 <= len(T) <= 10^5\nS and T only\
    \ contain lowercase English letters.\nS and T do not contain any leading or trailing\
    \ spaces.\nS and T do not contain any newline characters.\nS and T do not contain\
    \ any digits.\nS and T do not contain any non-English characters.\n1 <= |S| <=\
    \ 10^5\n1 <= |T| <= 10^5\nS and T only contain lowercase English letters.\nS and\
    \ T do not contain any leading or trailing spaces.\nS and T do not contain any\
    \ newline characters.\nS and T do not contain any digits.\nS and T do not contain\
    \ any non-English characters.\n1 <= |S| <= 10^5\n1 <= |T| <= 10^5\n\n\n</text>\n\
    <cell>", "    \n    # write your code here\n    \n    return \"\"\n</cell>\n<text>\n\
    Test your code\nRun the cell below to test your code.\n\nThe test code uses a\
    \ custom assert statement,\nthe statement checks if the length of your returned\
    \ string is equal to the length of your original string,\nthe statement checks\
    \ if the order of the words in the returned string is equal to the order of the\
    \ words in the original string,\nthe statement checks if the length of your returned\
    \ string is equal to the length of the original string,\nthe statement checks\
    \ if the words in the returned string are all prime numbers.\n\n\n</text>\n<cell>",
  "    \n    # Your code here\n    \n    return \"\"\n", "    words = sentence.split()\n\
    \    prime_words = []\n    for word in words:\n        prime_words.append(len(word))\n\
    \    prime_words.sort()\n    prime_words = list(map(int, prime_words))\n    prime_words.sort()\n\
    \    prime_words = list(map(str, prime_words))\n    return ' '.join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<cell>", " \
    \   \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for\
    \ word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    return ' '.join(prime_words)\n", "    \n    # Your code here\n    \n\
    \    return \"\"\n</cell>\n<text>\n3. Sort a sentence in lexicographical order\n\
    \n</text>\n<text>\nGiven a sentence in lexicographical order,\nreturn a new string\
    \ that contains the same words,\nbut in lexicographical order.\n\nExample 1:\n\
    >>> sort_sentence('This is a test')\n'is This is a test'\n\nExample 2:\n>>> sort_sentence('lets\
    \ go for swimming')\n'go for swimming lets'\n\nExample 3:\n>>> sort_sentence('a\
    \ b c d e f')\n'f e a b c d'\n\nExample 4:\n>>> sort_sentence('a b c d e f g h\
    \ i j k l m n o p q r s t u v w x y z')\n'a b c d e f g h i j k l m n o p q r\
    \ s t u v w x y z'\n\nConstraints:\n* 1 <= len(sentence) <= 100\n* sentence contains\
    \ only letters\n\"\"\"\n", "    \n    # Your code here\n    \n    return \"\"\n",
  "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the following\
    \ cell to test your code:\n\n\n</text>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words_str = ' '.join(prime_words)\n\
    \    \n    return prime_words_str\n</cell>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = [x for x in prime_words if x != '']\n    \n    return\
    \ ' '.join(prime_words)\n\n", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    return ' '.join(prime_words)\n</cell>\n\
    <cell>", "    \n    words = sentence.split()\n    \n    prime_words = []\n   \
    \ \n    for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    \n", "    \n    words = sentence.split()\n    \n    prime_words = []\n    \n \
    \   for word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x % 2 == 0, prime_words))\n   \
    \ \n    return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    words = sentence.split()\n\
    \    \n    prime_words = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n\n", "    \n    # Your code here\n  \
    \  \n    return ''.join((i for i in sentence if i.isalpha()))\n</cell>\n<text>\n\
    Let's test our function\n\n\n</text>\n<cell>\nwords_in_sentence('This is a test')\n\
    </cell>\n<cell>\nwords_in_sentence('lets go for swimming')\n</cell>\n<text>\n\
    We can also use list comprehension to solve this problem\n\n\n</text>\n<cell>",
  "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nImplement the\
    \ function prime_numbers_up_to_n() which takes in an integer n and returns the\
    \ first n prime numbers. \nThe first n prime numbers are 2, 3, 5, 7, 11, and 13.\n\
    \nExample 1:\n>>> prime_numbers_up_to_n(10)\n[2, 3, 5, 7, 11, 13]\n\nExample 2:\n\
    >>> prime_numbers_up_to_n(20)\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41,\
    \ 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\nConstraints:\n    * 1 <=\
    \ n <= 100\n    * n > 0\n    * n and n <= 100\n    * n and n >= 0\n    * n and\
    \ n are prime.\n    * n is even.\n    * n is odd.\n    * n is prime.\n    * n\
    \ is prime.\n    * n is prime.\n    * n is prime.\n    * n is prime.\n    * n\
    \ is prime.\n    * n is prime.\n    * n is prime.\n    * n is prime.\n    * n\
    \ is prime.\n    * n is prime.\n    * n is prime.\n    * n is prime.\n    * n\
    \ is prime.\n    * n is prime.\n    * n is prime.\n    * n is prime.\n    * n\
    \ is prime.\n    * n is prime.\n    * n is prime.\n    * n is prime.\n    * n\
    \ is prime.\n    * n is prime.\n    * n is prime.\n    * n is prime.\n    * n\
    \ is prime.\n    * n is prime.\n    * n is prime.\n    * n is prime.\n    * n\
    \ is prime.\n    * n is prime.\n    * n is prime.\n    * n is prime.\n    * n\
    \ is prime.\n    * n is prime.\n    * n is prime.\n    * n is prime.\n    * n\
    \ is prime.\n    * n is prime.\n    * n is prime.\n    * n is prime.\n    * n\
    \ is prime.\n    * n is prime.\n    * n is prime.\n    * n is prime.\n    * n\
    \ is prime.\n    * n is prime.\n    * n is prime.\n    * n is prime.\n    * n\
    \ is prime.\n    * n is prime.\n    * n is prime.\n    * n is prime.\n    * n\
    \ is prime.\n    * n is prime.\n    * n is prime.\n    * n is prime.\n", "   \
    \ \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for word\
    \ in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = list(filter(lambda x: x > 1, prime_words))\n    \n  \
    \  return ' '.join(prime_words)\n</cell>\n<cell>", "    \n    # Your code here\n\
    \    \n    return ''\n", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    return ' '.join(prime_words)\n\n", " \
    \   \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for\
    \ word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n\
    <text>\nRun the following cell to test your code:\n\n\n</text>\n<cell>", "   \
    \ \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the following\
    \ cell to test your code:\n\n\n</text>\n<cell>\nsentence = 'This is a test'\n\
    assert words_in_sentence(sentence) == 'is'\nsentence = 'lets go for swimming'\n\
    assert words_in_sentence(sentence) == 'go for'\n</cell>\n<text>\nExercise 3\n\
    Given a string, return a string where each word has been capitalized.\n\nExample\
    \ 1:\nGiven 'Hello World', return 'Hello World'.\n\nExample 2:\nGiven 'apple is\
    \ awesome', return 'Apple Is Awesome'.\n\nExample 3:\nGiven '123', return '123'.\n\
    \n\n</text>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    prime_words = list(map(int, prime_words))\n    \n    return ' '.join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return \"\"\n", "    \n    words =\
    \ sentence.split()\n    \n    prime_words = []\n    \n    for word in words:\n\
    \        prime_words.append(len(word))\n    \n    prime_words.sort()\n    \n \
    \   prime_words = [str(x) for x in prime_words]\n    \n    prime_words = list(filter(None,\
    \ prime_words))\n    \n    return ' '.join(prime_words)\n\n", "    \n    # Your\
    \ code here\n    \n    return ''.join((i for i in sentence if i.isalpha()))\n",
  "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\nRun the following\
    \ cell to test your code:\n\n\n</text>\n<cell>", "    \n    # Your code here\n\
    \    \n    return ''\n</cell>\n<text>\nRun the following cell to test your code:\n\
    \n\n</text>\n<cell>", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        \n        prime_words.append(len(word))\n\
    \        \n    prime_words.sort()\n    \n    prime_words = [x for x in prime_words\
    \ if x % 2 == 0]\n    \n    return ' '.join(prime_words)\n</cell>\n<cell>", " \
    \   \n    words = sentence.split()\n    \n    prime_words = []\n    \n    for\
    \ word in words:\n        prime_words.append(len(word))\n    \n    prime_words.sort()\n\
    \    \n    prime_words = [str(x) for x in prime_words]\n    \n    return ' '.join(prime_words)\n\
    \n", "    \n    # Your code here\n    \n    return \"\"\n</cell>\n<text>\n3. Sort\
    \ a string\nGiven a string and a dictionary that contains all the letters of the\
    \ alphabet,\nyou have to sort it according to the dictionary in alphabetical order.\n\
    \nExample 1:\nInput:\n    sentence = \"abracadabra\"\n    dictionary = {\"a\"\
    :1, \"b\":2, \"c\":3}\nOutput:\n    \"abcadabra\"\n\nExample 2:\nInput:\n    sentence\
    \ = \"abracadabra\"\n    dictionary = {\"a\":1, \"c\":3, \"b\":2}\nOutput:\n \
    \   \"acbadabra\"\n\nExample 3:\nInput:\n    sentence = \"abracadabra\"\n    dictionary\
    \ = {\"a\":1, \"b\":2, \"c\":3}\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    # Your code here\n    \n    return ''\n</cell>\n\
    <text>\nRun the following cell to test your code:\n\n\n</text>\n<cell>", "   \
    \ \n    # Your code here\n    \n    return ''\n</cell>\n<text>\nRun the following\
    \ cell to test your code:\n\n\n</text>\n<cell>\nsentence = 'This is a test'\n\
    assert words_in_sentence(sentence) == 'is'\nsentence = 'lets go for swimming'\n\
    assert words_in_sentence(sentence) == 'go for'\n</cell>\n<text>\nExercise 3\n\
    The function is_palindrome should take a string as its parameter and return a\
    \ boolean.\nThe function should return True if its parameter is a palindrome and\
    \ False otherwise.\n\nExample 1:\n>>> is_palindrome('abba')\nTrue\n\nExample 2:\n\
    >>> is_palindrome('racecar')\nFalse\n\nExample 3:\n>>> is_palindrome('A man, a\
    \ plan, a canal: Panama!')\nTrue\n\nExample 4:\n>>> is_palindrome('')\nFalse\n\
    \nConstraints:\n* The input string consists of lowercase English letters.\n* The\
    \ length of the input string will not exceed 100.\n* The input string contains\
    \ only lowercase English letters.\n* The output string should contain only lowercase\
    \ English letters.\n* The output string should contain only lowercase English\
    \ letters.\n* The output string should contain only lowercase English letters.\n\
    * The output string should contain only lowercase English letters.\n* The output\
    \ string should contain only lowercase English letters.\n* The output string should\
    \ contain only lowercase English letters.\n* The output string should contain\
    \ only lowercase English letters.\n* The output string should contain only lowercase\
    \ English letters.\n* The output string should contain only lowercase English\
    \ letters.\n* The output string should contain only lowercase English letters.\n\
    * The output string should contain only lowercase English letters.\n* The output\
    \ string should contain only lowercase English letters.\n* The output string should\
    \ contain only lowercase English letters.\n* The output string should contain\
    \ only lowercase English letters.\n* The output string should contain only lowercase\
    \ English letters.\n* The output string should contain only lowercase English\
    \ letters.\n* The output string should contain only lowercase English letters.\n\
    * The output string should contain only lowercase English letters.\n* The output\
    \ string should contain only lowercase English letters.\n* The output string should\
    \ contain only lowercase English letters.\n* The output string should contain\
    \ only lowercase English", "    \n    words = sentence.split()\n    \n    prime_words\
    \ = []\n    \n    for word in words:\n        prime_words.append(len(word))\n\
    \    \n    prime_words.sort()\n    \n    prime_words = [str(x) for x in prime_words]\n\
    \    \n    return ' '.join(prime_words)\n</cell>\n<text>\nLet's test your function\n\
    \n\n</text>\n<cell>\nwords_in_sentence('This is a test')\n</cell>\n<cell>\nwords_in_sentence('lets\
    \ go for swimming')\n</cell>\n<text>\nGreat! Now you know how to use filter()\
    \ and map() in Python.\n\n\n</text>\n<text>\n4.2. Write a function that takes\
    \ a string and returns a list of words that start with a specific letter. For\
    \ example, given 'This is a test', your function should return ['This', 'is',\
    \ 'a', 'test'].\n\n\n</text>\n<cell>"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
