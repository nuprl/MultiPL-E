name: HumanEval_153_Strongest_Extension
language: py
prompt: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
  \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
  \ and a list of extensions.\n    The extensions are to be used to load additional\
  \ classes to the class. The\n    strength of the extension is as follows: Let CAP\
  \ be the number of the uppercase\n    letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
  \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
  \    If there are two or more extensions with the same strength, you should\n  \
  \  choose the one that comes first in the list.\n    For example, if you are given\
  \ \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese',\
  \ 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
  \ is the strongest extension \n    (its strength is -1).\n    Example:\n    >>>\
  \ Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\n    'my_class.AA'\n    \"\
  \"\"\n"
tests: "def check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
  \ == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe',\
  \ '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t',\
  \ 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
  \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
  \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
  \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n\
  \    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
  \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
  \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
  \ntest_check()\n"
completions: ["    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    extensions_count\
    \ = Counter(extensions)\n    \n    sorted_extensions = sorted(extensions_count.items(),\
    \ key=lambda item: item[1], reverse=True)\n    \n    sorted_extensions_count =\
    \ list(sorted_extensions)\n    \n    sorted_extensions_count.sort(key=lambda item:\
    \ item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ item: item[0])\n    ", "    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    extension_strengths = []\n    for extension in extensions:\n\
    \        extension_strengths.append(len(extension))\n    extension_strengths.sort()\n\
    \    \n    extension_strengths_sum = 0\n    for strength in extension_strengths:\n\
    \        extension_strengths_sum += strength\n    \n    extension_strengths_avg\
    \ = extension_strengths_sum / len(extension_strengths)\n    \n    extension_strengths_index\
    \ = 0\n    for strength in extension_strengths:\n        if strength == extension_strengths_avg:\n\
    \            return f\"{class_name}.{extensions[extension_strengths_index]}\"\n\
    \        extension_strengths_index += 1\n    \n    return f\"{class_name}.{extensions[0]}\"\
    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    extension_strengths =\
    \ []\n    for extension in extensions:\n        extension_strengths.append(extension.count(''))\n\
    \    \n    extension_strengths.sort()\n    \n    extension_strengths.reverse()\n\
    \    \n    extension_strengths.insert(0, -1)\n    \n    extension_strengths[-1]\
    \ += 1\n    \n    extension_strength = extension_strengths[-1]\n    \n    if extension_strength\
    \ == 0:\n        return class_name\n    \n    extension_strength_index = extension_strengths.index(extension_strength)\n\
    \    \n    extension_strength_index -= 1\n    \n    extension_strength_index %=\
    \ len(extension_strengths)\n    \n    return f'{class_name}.{extensions[extension_strength_index]}'\
    \ \n</cell>\n<cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    extension_strengths = []\n    for extension in extensions:\n        extension_strengths.append(len(extension))\n\
    \    \n    extension_strengths.sort()\n    \n    extension_strengths.reverse()\n\
    \    \n    extension_strength = extension_strengths[0]\n    \n    extension_strength_length\
    \ = len(extension_strength)\n    \n    extension_strength_counter = 0\n    \n\
    \    extension_strength_counter_length = extension_strength_length\n    \n   \
    \ while extension_strength_counter < extension_strength_length:\n        \n  \
    \      extension_strength_counter += extension_strength_length\n        \n   \
    \     extension_strength_counter_length -= 1\n        \n        if extension_strength_counter\
    \ == extension_strength_length:\n            \n            extension_strength_counter\
    \ = extension_strength_length\n            \n            extension_strength_counter_length\
    \ = extension_strength_length\n            \n    \n    extension_strength_counter\
    \ -= 1\n    \n    extension_strength_counter = extension_strength_counter * -1\n\
    \    \n    extension_strength_counter = extension_strength_counter + extension_strength_length\n\
    \    \n    extension_strength_counter = extension_strength_counter * -1\n    \n\
    \    extension_strength_counter = extension_strength_counter + extension_strength_length\n\
    \    \n    extension_strength_counter = extension_strength_counter * -1\n    \n\
    \    extension_strength_counter = extension_strength_counter + extension_strength_length\n\
    \    \n    extension_strength_counter = extension_strength_counter * -1\n    \n\
    \    extension_strength_counter = extension_strength_counter + extension_strength_length\n\
    \    \n    extension_strength_counter = extension_strength_counter * -1\n    \n\
    \    extension_strength_counter = extension_strength_counter + extension_strength_length\n\
    \    \n    extension_strength_counter = extension_strength_counter * -1\n    \n\
    \    extension_strength_counter = extension_strength_counter + extension_strength_length\n\
    \    \n    extension_strength_counter = extension_strength_counter * -1\n    \n\
    \    extension_strength_counter = extension_strength_counter + extension_strength_length\n\
    \    \n    extension_strength_counter = extension_strength_counter * -1\n    \n\
    \    extension_strength_counter = extension_strength_counter + extension_strength_length\n\
    \    \n    extension_strength_counter = extension_strength_counter * -1\n    \n\
    \    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    extensions_count = Counter(extensions)\n    \n    sorted_extensions = sorted(extensions_count.items(),\
    \ key=lambda x:x[1])\n    \n    sorted_extensions_count = sorted(extensions_count.items(),\
    \ key=lambda x:x[1])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse()\n    \n    sorted_extensions_count.sort(key=lambda\
    \ x:x[0])\n    \n    sorted_extensions_count.reverse", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    extension_strengths = []\n    for extension in\
    \ extensions:\n        extension_strength = count_uppercase_letters(extension)\
    \ - count_lowercase_letters(extension)\n        extension_strengths.append(extension_strength)\n\
    \    \n    extension_strengths.sort()\n    \n    extension_strengths.reverse()\n\
    \    \n    extension_strength = extension_strengths[0]\n    \n    return class_name\
    \ + '.' + extension_strength\n", "    \n    extension_strengths = []\n    for\
    \ extension in extensions:\n        extension_strengths.append(len(extension))\n\
    \    \n    extension_strengths.sort()\n    \n    extension_strengths.reverse()\n\
    \    \n    extension_strength = extension_strengths[0]\n    \n    extension_strength_length\
    \ = len(extension_strength)\n    \n    extension_strength_counter = 0\n    \n\
    \    extension_strength_counter_length = len(extension_strength_counter)\n   \
    \ \n    extension_strength_counter_counter = 0\n    \n    extension_strength_counter_counter_length\
    \ = len(extension_strength_counter_counter)\n    \n    extension_strength_counter_counter_counter\
    \ = 0\n    \n    extension_strength_counter_counter_counter_length = len(extension_strength_counter_counter_counter)\n\
    \    \n    extension_strength_counter_counter_counter_counter = 0\n    \n    extension_strength_counter_counter_counter_counter_length\
    \ = len(extension_strength_counter_counter_counter_counter)\n    \n    extension_counter_counter\
    \ = 0\n    \n    extension_counter_counter_length = len(extension_counter_counter)\n\
    \    \n    extension_counter_counter_counter = 0\n    \n    extension_counter_counter_counter_length\
    \ = len(extension_counter_counter_counter)\n    \n    extension_counter_counter_counter_counter\
    \ = 0\n    \n    extension_counter_counter_counter_counter_length = len(extension_counter_counter_counter_counter)\n\
    \    \n    extension_counter_counter_counter_counter_counter = 0\n    \n    extension_counter_counter_counter_counter_counter_length\
    \ = len(extension_counter_counter_counter_counter_counter)\n    \n    extension_counter_counter_counter_counter_counter_counter\
    \ = 0\n    \n    extension_counter_counter_counter_counter_counter_counter_length\
    \ = len(extension_counter_counter_counter_counter_counter_counter)\n    \n   \
    \ extension_counter_counter_counter_counter_counter_counter_counter = 0\n    \n\
    \    extension_counter_counter_counter_counter_counter_counter_counter_length\
    \ = len(extension_counter_counter_counter_counter_counter_counter_counter)\n \
    \   \n    extension_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n    \n    extension_counter_counter_counter_counter_counter_counter_counter_counter_length\
    \ = len(extension_counter_counter_counter_counter_counter_counter_counter_counter)\n\
    \    \n    extension_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n    \n    extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_length\
    \ = len(extension_counter_counter_counter_counter_counter_counter_counter_counter_counter)\n\
    \    \n    extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n    \n    extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_length\
    \ = len(extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter)\n\
    \    \n    extension_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter_counter\
    \ = 0\n", "    \n    extension_strength = -1 # default value\n    \n    # your\
    \ code here\n    \n    return class_name\n", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
