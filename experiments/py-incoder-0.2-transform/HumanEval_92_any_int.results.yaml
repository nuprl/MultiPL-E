language: py
name: HumanEval_92_any_int
results:
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    \n    if type(x) == int or type(y) == int or type(z) == int:\n       \
    \ return True\n    else:\n        return False\n    \ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoc40hm1a.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpoc40hm1a.py\", line 42,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpoc40hm1a.py\", line 31,\
    \ in check\n    assert candidate(2.5, 2, 3) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes a string and returns the number of words in the string.\nThe string can\
    \ contain punctuation marks and spaces.\nThe string can contain multiple words.\n\
    The string can contain no words.\nThe function should ignore case when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpu_tv2h5e.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes 3 numbers and returns True if they are all positive, and False otherwise.\n\
    Return False if the numbers are all negative.\nReturn False if the numbers are\
    \ all zero.\nReturn False if any number is NaN.\nReturn False if any number is\
    \ infinite.\nReturn False if any number is less than zero.\nReturn False if any\
    \ number is greater than or equal to zero.\nReturn False if any number is equal\
    \ to zero.\nReturn False if any number is greater than or equal to 1.\nReturn\
    \ False if any number is less than 1.\nReturn False if any number is equal to\
    \ 1.\nReturn False if any number is greater than or equal to 2.\nReturn False\
    \ if any number is less than 2.\nReturn False if any number is equal to 2.\nReturn\
    \ False if any number is greater than or equal to 3.\nReturn False if any number\
    \ is less than 3.\nReturn False if any number is equal to 3.\nReturn False if\
    \ any number is greater than or equal to 4.\nReturn False if any number is less\
    \ than 4.\nReturn False if any number is equal to 4.\nReturn False if any number\
    \ is greater than or equal to 5.\nReturn False if any number is less than 5.\n\
    Return False if any number is equal to 5.\nReturn False if any number is greater\
    \ than or equal to 6.\nReturn False if any number is less than 6.\nReturn False\
    \ if any number is equal to 6.\nReturn False if any number is greater than or\
    \ equal to 7.\nReturn False if any number is less than 7.\nReturn False if any\
    \ number is equal to 7.\nReturn False if any number is greater than or equal to\
    \ 8.\nReturn False if any number is less than 8.\nReturn False if any number is\
    \ equal to 8.\nReturn False if any number is greater than or equal to 9.\nReturn\
    \ False if any number is less than 9.\nReturn False if any number is equal to\
    \ 9.\nReturn False if any number is greater than or equal to 10.\nReturn False\
    \ if any number is less than 10.\nReturn False if any number is equal to 10.\n\
    Return False if any number is greater than or equal to 11.\nReturn False if any\
    \ number is less than 11.\nReturn False if any number is equal to 11.\nReturn\
    \ False if any number is greater than or equal to 12.\nReturn False if any number\
    \ is less than 12.\nReturn False if any number is equal to 12.\nReturn False if\
    \ any number is greater than or equal to 13.\nReturn False if any number is less\
    \ than 13.\nReturn False if any number is equal to 13.\nReturn False if any number\
    \ is greater than or equal to 14.\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp6jbq3y7f.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return (x == y or x == z or y == z) and int(x) == int(y) and int(x) ==\
    \ int(z)\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n \
    \   assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplelnrxiy.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmplelnrxiy.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmplelnrxiy.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes 3 numbers and returns True if they are all integers, and False if they\
    \ are not.\nWrite a function that takes 3 numbers and returns True if any of them\
    \ is an integer, and False if none of them are.\nWrite a function that takes 3\
    \ numbers and returns True if any of them are equal to the sum of the other two,\
    \ and False if none of them are.\nWrite a function that takes 3 numbers and returns\
    \ True if any of them are equal to the sum of the other two, and False if none\
    \ of them are.\nWrite a function that takes 3 numbers and returns True if any\
    \ of them are equal to the sum of the other two, and False if none of them are.\n\
    Write a function that takes 3 numbers and returns True if any of them are equal\
    \ to the sum of the other two, and False if none of them are.\nWrite a function\
    \ that takes 3 numbers and returns True if any of them are equal to the sum of\
    \ the other two, and False if none of them are.\nWrite a function that takes 3\
    \ numbers and returns True if any of them are equal to the sum of the other two,\
    \ and False if none of them are.\nWrite a function that takes 3 numbers and returns\
    \ True if any of them are equal to the sum of the other two, and False if none\
    \ of them are.\nWrite a function that takes 3 numbers and returns True if any\
    \ of them are equal to the sum of the other two, and False if none of them are.\n\
    Write a function that takes 3 numbers and returns True if any of them are equal\
    \ to the sum of the other two, and False if none of them are.\nWrite a function\
    \ that takes 3 numbers and returns True if any of them are equal to the sum of\
    \ the other two, and False if none of them are.\nWrite a function that takes 3\
    \ numbers and returns True if any of them are equal to the sum of the other two,\
    \ and False if none of them are.\nWrite a function that takes 3 numbers and returns\
    \ True if any of them are equal to the sum of the other two, and False if none\
    \ of them are.\nWrite a function that takes 3 numbers and returns True if any\
    \ of them are equal to the sum of the other two, and False if none of them are.\n\
    Write a function that takes 3 numbers and returns True if any of them are equal\
    \ to the sum of the other two, and False if none of them are.\nWrite a function\
    \ that takes 3 numbers and returns True if any of them are equal to the sum of\
    \ the other two, and \ndef check(candidate):\n    assert candidate(2, 3, 1) ==\
    \ True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5,\
    \ 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmplan1u_hb.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return (x == y or x == z or y == z) and isinstance(x, int)\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdgr14cuu.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpdgr14cuu.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpdgr14cuu.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a string and returns the number of uppercase letters in the string.\n\
    Return 0 for an empty string.\nReturn 0 for any string that does not contain any\
    \ uppercase letters.\nReturn 1 for any string that contains at least one uppercase\
    \ letter.\nReturn 2 for any string that contains at least two uppercase letters.\n\
    Return 3 for any string that contains at least three uppercase letters.\nReturn\
    \ 4 for any string that contains at least four uppercase letters.\nReturn 5 for\
    \ any string that contains at least five uppercase letters.\nReturn 6 for any\
    \ string that contains at least six uppercase letters.\nReturn 7 for any string\
    \ that contains at least seven uppercase letters.\nReturn 8 for any string that\
    \ contains at least eight uppercase letters.\nReturn 9 for any string that contains\
    \ at least nine uppercase letters.\nReturn 10 for any string that contains at\
    \ least ten uppercase letters.\nReturn 11 for any string that contains at least\
    \ eleven uppercase letters.\nReturn 12 for any string that contains at least twelve\
    \ uppercase letters.\nReturn 13 for any string that contains at least thirteen\
    \ uppercase letters.\nReturn 14 for any string that contains at least fourteen\
    \ uppercase letters.\nReturn 15 for any string that contains at least fifteen\
    \ uppercase letters.\nReturn 16 for any string that contains at least sixteen\
    \ uppercase letters.\nReturn 17 for any string that contains at least seventeen\
    \ uppercase letters.\nReturn 18 for any string that contains at least eighteen\
    \ uppercase letters.\nReturn 19 for any string that contains at least nineteen\
    \ uppercase letters.\nReturn 20 for any string that contains at least twenty uppercase\
    \ letters.\nReturn 21 for any string that contains at least twenty-one uppercase\
    \ letters.\nReturn 22 for any string that contains at least twenty-two uppercase\
    \ letters.\nReturn 23 for any string that contains at least twenty-three uppercase\
    \ letters.\nReturn 24 for any string that contains at least twenty-four uppercase\
    \ letters.\nReturn 25 for any string that contains at least twenty-five uppercase\
    \ letters.\nReturn 26 for any string that contains at least twenty-six uppercase\
    \ letters.\nReturn 27 for any string that contains at least twent\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp04fqxvq_.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdfzwmdkd.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z and x != -y and x != -z and x != z and x != -y\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmxntaai3.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpmxntaai3.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpmxntaai3.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Any String\nCreate\
    \ a function that takes 3 strings.\nReturns true if one of the strings is equal\
    \ to the sum of the other two, and all strings are lowercase.\nReturns false in\
    \ any other cases.\n    \nExamples\n    >>> any_string('a', 'b', 'c')\n    True\n\
    \    \n    >>> any_string('A', 'B', 'C')\n    True\n    \n    >>> any_string('a',\
    \ 'B', 'c')\n    False\n\n    >>> any_string('a', 'b', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpp1tqar9l.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7\nCreate a function that\
    \ takes a string and returns the number of words in the string.\n\nExamples\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n8\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jump\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n   \
    \ assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmplb847hse.py\", line 105\n    >>> count_words(\"The quick\
    \ brown fox jump\n                    ^\nSyntaxError: unterminated string literal\
    \ (detected at line 105)\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
