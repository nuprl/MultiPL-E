language: py
name: HumanEval_92_any_int
results:
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    \n    if type(x) == int or type(y) == int or type(z) == int:\n       \
    \ return True\n    else:\n        return False\n    \ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoc40hm1a.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpoc40hm1a.py\", line 42,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpoc40hm1a.py\", line 31,\
    \ in check\n    assert candidate(2.5, 2, 3) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes a string and returns the number of words in the string.\nThe string can\
    \ contain punctuation marks and spaces.\nThe string can contain multiple words.\n\
    The string can contain no words.\nThe function should ignore case when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ words.\nThe function should ignore punctuation marks and spaces when counting\
    \ \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpu_tv2h5e.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes 3 numbers and returns True if they are all positive, and False otherwise.\n\
    Return False if the numbers are all negative.\nReturn False if the numbers are\
    \ all zero.\nReturn False if any number is NaN.\nReturn False if any number is\
    \ infinite.\nReturn False if any number is less than zero.\nReturn False if any\
    \ number is greater than or equal to zero.\nReturn False if any number is equal\
    \ to zero.\nReturn False if any number is greater than or equal to 1.\nReturn\
    \ False if any number is less than 1.\nReturn False if any number is equal to\
    \ 1.\nReturn False if any number is greater than or equal to 2.\nReturn False\
    \ if any number is less than 2.\nReturn False if any number is equal to 2.\nReturn\
    \ False if any number is greater than or equal to 3.\nReturn False if any number\
    \ is less than 3.\nReturn False if any number is equal to 3.\nReturn False if\
    \ any number is greater than or equal to 4.\nReturn False if any number is less\
    \ than 4.\nReturn False if any number is equal to 4.\nReturn False if any number\
    \ is greater than or equal to 5.\nReturn False if any number is less than 5.\n\
    Return False if any number is equal to 5.\nReturn False if any number is greater\
    \ than or equal to 6.\nReturn False if any number is less than 6.\nReturn False\
    \ if any number is equal to 6.\nReturn False if any number is greater than or\
    \ equal to 7.\nReturn False if any number is less than 7.\nReturn False if any\
    \ number is equal to 7.\nReturn False if any number is greater than or equal to\
    \ 8.\nReturn False if any number is less than 8.\nReturn False if any number is\
    \ equal to 8.\nReturn False if any number is greater than or equal to 9.\nReturn\
    \ False if any number is less than 9.\nReturn False if any number is equal to\
    \ 9.\nReturn False if any number is greater than or equal to 10.\nReturn False\
    \ if any number is less than 10.\nReturn False if any number is equal to 10.\n\
    Return False if any number is greater than or equal to 11.\nReturn False if any\
    \ number is less than 11.\nReturn False if any number is equal to 11.\nReturn\
    \ False if any number is greater than or equal to 12.\nReturn False if any number\
    \ is less than 12.\nReturn False if any number is equal to 12.\nReturn False if\
    \ any number is greater than or equal to 13.\nReturn False if any number is less\
    \ than 13.\nReturn False if any number is equal to 13.\nReturn False if any number\
    \ is greater than or equal to 14.\n\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp6jbq3y7f.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return (x == y or x == z or y == z) and int(x) == int(y) and int(x) ==\
    \ int(z)\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n \
    \   assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplelnrxiy.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmplelnrxiy.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmplelnrxiy.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes 3 numbers and returns True if they are all integers, and False if they\
    \ are not.\nWrite a function that takes 3 numbers and returns True if any of them\
    \ is an integer, and False if none of them are.\nWrite a function that takes 3\
    \ numbers and returns True if any of them are equal to the sum of the other two,\
    \ and False if none of them are.\nWrite a function that takes 3 numbers and returns\
    \ True if any of them are equal to the sum of the other two, and False if none\
    \ of them are.\nWrite a function that takes 3 numbers and returns True if any\
    \ of them are equal to the sum of the other two, and False if none of them are.\n\
    Write a function that takes 3 numbers and returns True if any of them are equal\
    \ to the sum of the other two, and False if none of them are.\nWrite a function\
    \ that takes 3 numbers and returns True if any of them are equal to the sum of\
    \ the other two, and False if none of them are.\nWrite a function that takes 3\
    \ numbers and returns True if any of them are equal to the sum of the other two,\
    \ and False if none of them are.\nWrite a function that takes 3 numbers and returns\
    \ True if any of them are equal to the sum of the other two, and False if none\
    \ of them are.\nWrite a function that takes 3 numbers and returns True if any\
    \ of them are equal to the sum of the other two, and False if none of them are.\n\
    Write a function that takes 3 numbers and returns True if any of them are equal\
    \ to the sum of the other two, and False if none of them are.\nWrite a function\
    \ that takes 3 numbers and returns True if any of them are equal to the sum of\
    \ the other two, and False if none of them are.\nWrite a function that takes 3\
    \ numbers and returns True if any of them are equal to the sum of the other two,\
    \ and False if none of them are.\nWrite a function that takes 3 numbers and returns\
    \ True if any of them are equal to the sum of the other two, and False if none\
    \ of them are.\nWrite a function that takes 3 numbers and returns True if any\
    \ of them are equal to the sum of the other two, and False if none of them are.\n\
    Write a function that takes 3 numbers and returns True if any of them are equal\
    \ to the sum of the other two, and False if none of them are.\nWrite a function\
    \ that takes 3 numbers and returns True if any of them are equal to the sum of\
    \ the other two, and \ndef check(candidate):\n    assert candidate(2, 3, 1) ==\
    \ True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5,\
    \ 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmplan1u_hb.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return (x == y or x == z or y == z) and isinstance(x, int)\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdgr14cuu.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpdgr14cuu.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpdgr14cuu.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a string and returns the number of uppercase letters in the string.\n\
    Return 0 for an empty string.\nReturn 0 for any string that does not contain any\
    \ uppercase letters.\nReturn 1 for any string that contains at least one uppercase\
    \ letter.\nReturn 2 for any string that contains at least two uppercase letters.\n\
    Return 3 for any string that contains at least three uppercase letters.\nReturn\
    \ 4 for any string that contains at least four uppercase letters.\nReturn 5 for\
    \ any string that contains at least five uppercase letters.\nReturn 6 for any\
    \ string that contains at least six uppercase letters.\nReturn 7 for any string\
    \ that contains at least seven uppercase letters.\nReturn 8 for any string that\
    \ contains at least eight uppercase letters.\nReturn 9 for any string that contains\
    \ at least nine uppercase letters.\nReturn 10 for any string that contains at\
    \ least ten uppercase letters.\nReturn 11 for any string that contains at least\
    \ eleven uppercase letters.\nReturn 12 for any string that contains at least twelve\
    \ uppercase letters.\nReturn 13 for any string that contains at least thirteen\
    \ uppercase letters.\nReturn 14 for any string that contains at least fourteen\
    \ uppercase letters.\nReturn 15 for any string that contains at least fifteen\
    \ uppercase letters.\nReturn 16 for any string that contains at least sixteen\
    \ uppercase letters.\nReturn 17 for any string that contains at least seventeen\
    \ uppercase letters.\nReturn 18 for any string that contains at least eighteen\
    \ uppercase letters.\nReturn 19 for any string that contains at least nineteen\
    \ uppercase letters.\nReturn 20 for any string that contains at least twenty uppercase\
    \ letters.\nReturn 21 for any string that contains at least twenty-one uppercase\
    \ letters.\nReturn 22 for any string that contains at least twenty-two uppercase\
    \ letters.\nReturn 23 for any string that contains at least twenty-three uppercase\
    \ letters.\nReturn 24 for any string that contains at least twenty-four uppercase\
    \ letters.\nReturn 25 for any string that contains at least twenty-five uppercase\
    \ letters.\nReturn 26 for any string that contains at least twenty-six uppercase\
    \ letters.\nReturn 27 for any string that contains at least twent\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp04fqxvq_.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdfzwmdkd.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z and x != -y and x != -z and x != z and x != -y\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmxntaai3.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpmxntaai3.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpmxntaai3.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Any String\nCreate\
    \ a function that takes 3 strings.\nReturns true if one of the strings is equal\
    \ to the sum of the other two, and all strings are lowercase.\nReturns false in\
    \ any other cases.\n    \nExamples\n    >>> any_string('a', 'b', 'c')\n    True\n\
    \    \n    >>> any_string('A', 'B', 'C')\n    True\n    \n    >>> any_string('a',\
    \ 'B', 'c')\n    False\n\n    >>> any_string('a', 'b', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpp1tqar9l.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7\nCreate a function that\
    \ takes a string and returns the number of words in the string.\n\nExamples\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n8\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jump\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n   \
    \ assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmplb847hse.py\", line 105\n    >>> count_words(\"The quick\
    \ brown fox jump\n                    ^\nSyntaxError: unterminated string literal\
    \ (detected at line 105)\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq0tkmbtn.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpq0tkmbtn.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpq0tkmbtn.py\", line 26,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7\nCreate a function that\
    \ takes 3 numbers and returns True if they are all positive, and False if they\
    \ are all negative.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp8x7m_f3w.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a string and returns the number of vowels contained in the string.\n\n\
    Examples\n>>> vowel_count('hello')\n2\n\n>>> vowel_count('goodbye')\n0\n\n>>>\
    \ vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n\
    3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n\
    >>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>>\
    \ vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n\
    3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n\
    >>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>>\
    \ vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n\
    3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n\
    >>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>>\
    \ vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n\
    3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n\
    >>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>>\
    \ vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp6mq1bedd.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nWrite a function that takes 3\
    \ numbers and returns True if they are all positive, and False if they are all\
    \ negative.\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp1j51skd9.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    \n    if type(x) != int or type(y) != int or type(z) != int:\n       \
    \ return False\n    \n    return x == y + z\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd5qk9nn0.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpd5qk9nn0.py\", line 43,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpd5qk9nn0.py\", line 31,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    \n    if type(x) == int or type(y) == int or type(z) == int:\n       \
    \ return True\n    else:\n        return False\n    \ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoc40hm1a.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpoc40hm1a.py\", line 42,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpoc40hm1a.py\", line 31,\
    \ in check\n    assert candidate(2.5, 2, 3) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return (x == y or x == z or y == z)\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yhxx82q.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8yhxx82q.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp8yhxx82q.py\", line 26,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    \n    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n   \
    \ assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmporhz_0pm.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmporhz_0pm.py\", line 40,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmporhz_0pm.py\", line 31,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    \n    if x == y + z:\n        return True\n    else:\n        return False\n\
    \    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphhx572mt.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmphhx572mt.py\", line 42,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmphhx572mt.py\", line 30,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes in a list of numbers and returns the number of positive numbers in the\
    \ list.\nExamples\n>>> count_positive([1, 2, 3, 4])\n4\n>>> count_positive([-1,\
    \ -2, -3, -4])\n2\n>>> count_positive([0, -2, -3, -4])\n0\n>>> count_positive([0,\
    \ -2, -3, -4, 0])\n1\n>>> count_positive([0, -2, -3, -4, 0, 0])\n2\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_u2xax4l.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    \n    if x == y and y == z:\n        return True\n    \n    return False\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp3q1f6zfn.py\", line 28\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes 3 numbers and returns True if they are all positive.\n\nExamples\n>>>\
    \ all_positive(7, -5, -3)\nTrue\n\n>>> all_positive(7, 5, -3)\nFalse\n\n>>> all_positive(7,\
    \ 5, 3)\nFalse\n\n>>> all_positive(7, 5, -5)\nTrue\n\n>>> all_positive(7, 5, -7)\n\
    False\n\n>>> all_positive(7, 5, -7)\nFalse\n\n>>> all_positive(7, 5, 7)\nTrue\n\
    \n>>> all_positive(7, 5, -7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>>\
    \ all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7,\
    \ 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\n\
    False\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\
    \n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>>\
    \ all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7,\
    \ 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\n\
    False\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\
    \n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>>\
    \ all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7,\
    \ 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\n\
    False\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\
    \n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>>\
    \ all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7,\
    \ 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpg66r8oea.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z and x != 0 and y != 0 and z != 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wm6srub.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1wm6srub.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1wm6srub.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    \n    if x == y and y == z:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n  \
    \  assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2234_jq.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpx2234_jq.py\", line 43,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpx2234_jq.py\", line 31,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7eih_ay.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpm7eih_ay.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpm7eih_ay.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return (x == y or x == z or y == z)\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yhxx82q.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8yhxx82q.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp8yhxx82q.py\", line 26,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z and x != 0 and y != 0 and z != 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wm6srub.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1wm6srub.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1wm6srub.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes a string and returns the number of words in the string.\nThe string can\
    \ contain spaces, punctuation, and numbers.\nThe function should ignore all punctuation\
    \ and only count words.\nThe function should ignore all numbers.\nThe function\
    \ should ignore all spaces.\nThe function should ignore all caps.\nThe function\
    \ should ignore all lowercase.\nThe function should ignore all uppercase.\nThe\
    \ function should ignore all symbols.\nThe function should ignore all non-alphabetic\
    \ characters.\nThe function should ignore all non-alphanumeric characters.\nThe\
    \ function should ignore all non-alphabetic characters and symbols.\nThe function\
    \ should ignore all non-alphanumeric characters and symbols.\nThe function should\
    \ ignore all non-alphabetic characters and symbols.\nThe function should ignore\
    \ all non-alphanumeric characters and symbols.\nThe function should ignore all\
    \ non-alphabetic characters and symbols.\nThe function should ignore all non-alphanumeric\
    \ characters and symbols.\nThe function should ignore all non-alphabetic characters\
    \ and symbols.\nThe function should ignore all non-alphanumeric characters and\
    \ symbols.\nThe function should ignore all non-alphabetic characters and symbols.\n\
    The function should ignore all non-alphanumeric characters and symbols.\nThe function\
    \ should ignore all non-alphabetic characters and symbols.\nThe function should\
    \ ignore all non-alphanumeric characters and symbols.\nThe function should ignore\
    \ all non-alphabetic characters and symbols.\nThe function should ignore all non-alphanumeric\
    \ characters and symbols.\nThe function should ignore all non-alphabetic characters\
    \ and symbols.\nThe function should ignore all non-alphanumeric characters and\
    \ symbols.\nThe function should ignore all non-alphabetic characters and symbols.\n\
    The function should ignore all non-alphanumeric characters and symbols.\nThe function\
    \ should ignore all non-alphabetic characters and symbols.\nThe function should\
    \ ignore all non-alphanumeric characters and symbols.\nThe function should ignore\
    \ all non-alphabetic characters and symbols.\nThe function should ignore all non-alphanumeric\
    \ characters and symbols.\nThe function should ignore all non-alphabetic characters\
    \ and symbol\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n \
    \   assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmprzvks2aa.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    \n    if x == y + z:\n        return True\n    else:\n        return False\n\
    \    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphhx572mt.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmphhx572mt.py\", line 42,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmphhx572mt.py\", line 30,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Any String\nCreate\
    \ a function that takes 3 strings.\nReturns true if any of the strings is equal\
    \ to the sum of the other two, and all strings are strings.\nReturns false in\
    \ any other cases.\n    \nExamples\n    >>> any_str(\"hello\", \"world\", \"!\"\
    )\n    True\n    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n  \
    \  \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\"\
    , \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n\
    \    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\"\
    , \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n\
    \    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\"\
    , \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n\
    \    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\"\
    , \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n\
    \    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\"\
    , \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n\
    \    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\"\
    , \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n\
    \    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\"\
    , \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpfo61lbjx.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes 3 numbers and returns True if they are all integers, and False if any\
    \ of them are not integers.\n\nExamples\n>>> all_ints(5, 2, 7)\nTrue\n\n>>> all_ints(3,\
    \ 2, 2)\nFalse\n\n>>> all_ints(3, -2, 1)\nFalse\n\n>>> all_ints(3.6, -2.2, 2)\n\
    True\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate(2, 3, 1)\
    \ == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp2ow0xlnv.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return (x == y or x == z or y == z)\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yhxx82q.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8yhxx82q.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp8yhxx82q.py\", line 26,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z and x != 0 and y != 0 and z != 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wm6srub.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1wm6srub.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1wm6srub.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Write a function that\
    \ takes in a list of numbers and returns the number of positive numbers in the\
    \ list.\nExamples\n>>> count_positive([1, 2, 3])\n3\n\n>>> count_positive([-1,\
    \ -2, -3])\n2\n\n>>> count_positive([-1, -2, -3, -4, -5])\n4\n\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, -6])\n0\n\n>>> count_positive([-1, -2, -3, -4, -5, -6, -7])\n\
    1\n\n>>> count_positive([-1, -2, -3, -4, -5, -6, -7, -8])\n1\n\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9])\n1\n\n>>> count_positive([-1, -2, -3, -4, -5,\
    \ -6, -7, -8, 9, 10])\n1\n\n>>> count_positive([-1, -2, -3, -4, -5, -6, -7, -8,\
    \ 9, 10, 11])\n1\n\n>>> count_positive([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10,\
    \ 11, 12])\n2\n\n>>> count_positive([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11,\
    \ 12, 13])\n2\n\n>>> count_positive([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11,\
    \ 12, 13, 14])\n2\n\n>>> count_positive([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10,\
    \ 11, 12, 13, 14, 15])\n2\n\n>>> count_positive([-1, -2, -3, -4, -5, -6, -7, -8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16])\n2\n\n>>> count_positive([-1, -2, -3, -4, -5,\
    \ -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n2\n\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n2\n\n>>>\
    \ count_positive([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19])\n2\n\n>>> count_positive([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10,\
    \ 11, 12, 13, 14, \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmptmdqgebj.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return (x == y + z) and (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp17lak5ik.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp17lak5ik.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp17lak5ik.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return (x == y or x == z or y == z)\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yhxx82q.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8yhxx82q.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp8yhxx82q.py\", line 26,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return (x == y or x == z) and x.is_integer()\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpudf7bny9.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpudf7bny9.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpudf7bny9.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) ==\
    \ True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5,\
    \ 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphxjnwqyb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphxjnwqyb.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmphxjnwqyb.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdfzwmdkd.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    \n    if type(x) == int or type(y) == int or type(z) == int:\n       \
    \ return True\n    else:\n        return False\n    \ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoc40hm1a.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpoc40hm1a.py\", line 42,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpoc40hm1a.py\", line 31,\
    \ in check\n    assert candidate(2.5, 2, 3) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return (x == y or x == z or y == z)\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkwnpu3z.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpgkwnpu3z.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgkwnpu3z.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nCreate a function that\
    \ takes 3 numbers and returns True if they are all positive, and False otherwise.\n\
    \nExamples\n>>> all_positive(1, 2, 3)\nTrue\n\n>>> all_positive(-1, -2, -3)\n\
    False\n\n>>> all_positive(3.6, -2.2, 2)\nFalse\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmppxf0m31x.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7\nCreate a function that\
    \ takes 3 numbers and returns True if they are all positive, False if they are\
    \ all negative, and None if they are all zero. You may assume that all inputs\
    \ are integers.\n\nExamples\n>>> all_positive(1, 2, 3)\nTrue\n\n>>> all_positive(-1,\
    \ -2, -3)\nFalse\n\n>>> all_positive(0, -1, -2)\nNone\n\n>>> all_positive(-5,\
    \ -6, -7)\nNone\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpkqlofg8e.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z and x != 0 and y != 0 and z != 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wm6srub.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1wm6srub.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1wm6srub.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes a string and returns the number of words in the string.\nThe string can\
    \ contain spaces, commas, and periods.\nThe string can also contain numbers.\n\
    The string can also contain emojis.\nThe string can also contain emojis and spaces.\n\
    The string can also contain emojis and numbers.\nThe string can also contain emojis\
    \ and spaces and numbers.\nThe string can also contain emojis and spaces, numbers,\
    \ and punctuation.\nThe string can also contain emojis and spaces, numbers, punctuation,\
    \ and emojis.\nThe string can also contain emojis and spaces, numbers, punctuation,\
    \ emojis, and spaces.\nThe string can also contain emojis and spaces, numbers,\
    \ punctuation, emojis, spaces, and numbers.\nThe string can also contain emojis\
    \ and spaces, numbers, punctuation, emojis, spaces, numbers, and punctuation.\n\
    The string can also contain emojis and spaces, numbers, punctuation, emojis, spaces,\
    \ numbers, punctuation, and emojis.\nThe string can also contain emojis and spaces,\
    \ numbers, punctuation, emojis, spaces, numbers, punctuation, emojis, and spaces.\n\
    The string can also contain emojis and spaces, numbers, punctuation, emojis, spaces,\
    \ numbers, punctuation, emojis, spaces, and numbers.\nThe string can also contain\
    \ emojis and spaces, numbers, punctuation, emojis, spaces, numbers, punctuation,\
    \ emojis, spaces, numbers, and punctuation.\nThe string can also contain emojis\
    \ and spaces, numbers, punctuation, emojis, spaces, numbers, punctuation, emojis,\
    \ spaces, numbers, punctuation, emojis, and spaces.\nThe string can also contain\
    \ emojis and spaces, numbers, punctuation, emojis, spaces, numbers, punctuation,\
    \ emojis, spaces, numbers, punctuation, emojis, spaces, numbers, and punctuation.\n\
    The string can also contain emojis and spaces, numbers, punctuation, emojis, spaces,\
    \ numbers, punctuation, emojis, spaces, numbers, punctuation, emojis, spaces,\
    \ numbers, punctuation, emojis, and spaces.\nThe string can also contain emojis\
    \ and spaces, numbers, punctuation, emojis, spaces, numbers, punctuation, emojis,\
    \ spaces, numbers, punctuation, emojis, spaces, numbers, punctuation, emojis,\
    \ space\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpaihmx7t6.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ takes a list of numbers and returns the sum of the numbers in the list, ignoring\
    \ the numbers.\n\nExamples\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3, 5])\n10\n\
    >>> sum([1, 2, 3, 5], 10)\n10\n>>> sum([1, 2, 3, 5], 0)\n0\n>>> sum([1, 2, 3,\
    \ 5], -1)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in\
    \ <module>\n  File \"<stdin>\", line 1, in <lambda>\nTypeError: sum() takes no\
    \ keyword arguments\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp13oxddvz.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ takes a list of numbers and returns the sum of the numbers in the list, ignoring\
    \ any non-integer values.\n\nExamples\n>>> sum([1, 2, 3, 4])\n10\n>>> sum([1,\
    \ 2, \"3\", 4])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n\
    10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1,\
    \ 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\",\
    \ 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n\
    >>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1,\
    \ 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\",\
    \ 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n\
    >>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1,\
    \ 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\",\
    \ 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n\
    >>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1,\
    \ 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\",\
    \ 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n\
    >>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1,\
    \ 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\",\
    \ 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n\
    >>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"\ndef check(candidate):\n  \
    \  assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmps044vomi.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Any String\nCreate\
    \ a function that takes 3 strings and returns True if at least one of them is\
    \ equal to the sum of the other two, and all strings are equal.\nReturns False\
    \ in any other cases.\n    \nExamples\n    >>> any_str(\"hello\", \"hello\", \"\
    hello\")\n    True\n    \n    >>> any_str(\"hello\", \"hello\", \"goodbye\")\n\
    \    False\n\n    >>> any_str(\"hello\", \"goodbye\", \"hello\")\n    True\n \
    \   \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n    \n\
    \    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n    \n    >>>\
    \ any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n    \n    >>> any_str(\"\
    hello\", \"goodbye\", \"goodbye\")\n    False\n    \n    >>> any_str(\"hello\"\
    , \"goodbye\", \"goodbye\")\n    False\n    \n    >>> any_str(\"hello\", \"goodbye\"\
    , \"goodbye\")\n    False\n    \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\"\
    )\n    False\n    \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n   \
    \ False\n    \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n\
    \    \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n    \n\
    \    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n    \n    >>>\
    \ any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n    \n    >>> any_str(\"\
    hello\", \"goodbye\", \"goodbye\")\n    False\n    \n    >>> any_str(\"hello\"\
    , \"goodbye\", \"goodbye\")\n    False\n    \n    >>> any_str(\"hello\", \"goodbye\"\
    , \"goodbye\")\n    False\n    \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\"\
    )\n    False\n    \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n   \
    \ False\n    \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n\
    \    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbp85pt97.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z\n\n\ndef check(candidate):\n    assert candidate(2, 3, 1) ==\
    \ True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5,\
    \ 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphxjnwqyb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmphxjnwqyb.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmphxjnwqyb.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z and x != 0 and y != 0 and z != 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wm6srub.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1wm6srub.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1wm6srub.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes 3 numbers and returns True if they are all positive, False if they are\
    \ all negative, and None if they are all non-positive.\nUse your any_int function\
    \ to solve this problem.\nUse your any_int function to solve this problem.\nUse\
    \ your any_int function to solve this problem.\nUse your any_int function to solve\
    \ this problem.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp3a6vrnnd.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7eih_ay.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpm7eih_ay.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpm7eih_ay.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7eih_ay.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpm7eih_ay.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpm7eih_ay.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes 3 numbers and returns True if they are all positive, and False otherwise.\n\
    \nExamples\n>>> all_positive(1, 2, 3)\nTrue\n\n>>> all_positive(-1, -2, -3)\n\
    False\n\n>>> all_positive(3.6, -2.2, 2)\nFalse\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpwoak39vg.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z and x != 0 and y != 0 and z != 0\n\ndef check(candidate):\n \
    \   assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmgl0bqu5.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpmgl0bqu5.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpmgl0bqu5.py\", line 26,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nCreate a function that\
    \ takes 3 numbers and returns True if they are all positive, and False if they\
    \ are all negative.\n\nExamples\n>>> all_positive(1, 2, 3)\nTrue\n\n>>> all_positive(-1,\
    \ 2, -3)\nFalse\n\n>>> all_positive(-5, -6, -7)\nFalse\n\n>>> all_positive(3.6,\
    \ -2.2, 2)\nFalse\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpwwamb58e.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    \n    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n    \n    \ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd6cnaom3.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpd6cnaom3.py\", line 40,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpd6cnaom3.py\", line 31,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return (x == y or x == z or y == z)\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkwnpu3z.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpgkwnpu3z.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpgkwnpu3z.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z and x != 0 and y != 0 and z != 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wm6srub.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1wm6srub.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1wm6srub.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z and x != 0 and y != 0 and z != 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wm6srub.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1wm6srub.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1wm6srub.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    \n    if type(x) != int or type(y) != int or type(z) != int:\n       \
    \ return False\n    \n    if x == y and x == z:\n        return True\n    \n \
    \   return False\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(2,\
    \ 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5,\
    \ 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4,\
    \ 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpkqv_spq6.py\", line 31\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7eih_ay.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpm7eih_ay.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpm7eih_ay.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7eih_ay.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpm7eih_ay.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpm7eih_ay.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7eih_ay.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpm7eih_ay.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpm7eih_ay.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a string and returns a list of all the characters in that string. \nThe\
    \ string can contain any characters, including spaces.\nThe function should ignore\
    \ spaces.\nThe function should ignore punctuation.\nThe function should ignore\
    \ uppercase and lowercase letters.\nThe function should ignore numbers and symbols.\n\
    The function should ignore non-alphabetic characters like !, @, #, $, %, ^, &,\
    \ *, -, =, +, <, >, |, /, ?, :, ;, ,, /, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, \ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbvtcdifp.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z and x != 0 and y != 0 and z != 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wm6srub.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1wm6srub.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1wm6srub.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes a string and returns the number of words in the string.\n\nExamples\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n5\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.\")\n5\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.  \")\n5\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  The\")\n5\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy dog. \
    \ The quick brown fox jumps over the lazy dog.  The quick brown fox jumps over\
    \ the lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown\
    \ fox jumps over the lazy dog.  The quick brown fox jumps over the lazy do\ndef\
    \ check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbdjz4ebx.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x == y + z and x != 0 and y != 0 and z != 0\n\n\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wm6srub.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1wm6srub.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1wm6srub.py\", line 27,\
    \ in check\n    assert candidate(2, 3, 1) == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Write a function that\
    \ takes a string and returns the number of words in the string.\nExamples\n\"\
    Hello World\" -> 5\n\"Hello World!\" -> 2\n\"Hello World!!\" -> 3\n\"Hello World!!!\"\
    \ -> 4\n\"Hello World!!!!\" -> 5\n\"Hello World!!!!!\" -> 6\n\"Hello World!!!!!!\"\
    \ -> 7\n\"Hello World!!!!!!!\" -> 8\n\"Hello World!!!!!!!\"\n-> 9\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpd860zdu9.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Create a function that\
    \ takes 3 numbers and returns True if any of them is greater than the sum of the\
    \ other two, and all numbers are integers.\nReturn False in any other cases.\n\
    Examples\nany_int_greater(5, 2, 7)\nTrue\n\nany_int_greater(3, 2, 2)\nFalse\n\n\
    any_int_greater(3, -2, 1)\nTrue\n\nany_int_greater(3.6, -2.2, 2)\nFalse\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmprxa5i5p7.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a string and returns the number of words in the string.\n\nExamples\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n8\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert\
    \ candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n\
    \    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2) == True\n\
    \    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4, 6, 2)\
    \ == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3, 4, 7)\
    \ == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n   \
    \ check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpre6lvmg_.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr48f73ii.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpr48f73ii.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpr48f73ii.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ takes a string and returns a list of all the words in the string.\nThe function\
    \ should ignore non-alphabetic characters and split on whitespace.\nThe function\
    \ should ignore case and punctuation.\nThe function should ignore numbers and\
    \ symbols.\nThe function should ignore spaces.\nThe function should ignore any\
    \ leading or trailing whitespace.\nThe function should ignore any leading or trailing\
    \ punctuation.\nThe function should ignore any leading or trailing numbers.\n\
    The function should ignore any leading or trailing symbols.\nThe function should\
    \ ignore any leading or trailing spaces.\nThe function should ignore any leading\
    \ or trailing alphanumerics.\nThe function should ignore any leading or trailing\
    \ punctuation.\nThe function should ignore any leading or trailing numbers.\n\
    The function should ignore any leading or trailing symbols.\nThe function should\
    \ ignore any leading or trailing spaces.\nThe function should ignore any leading\
    \ or trailing alphanumerics.\nThe function should ignore any leading or trailing\
    \ punctuation.\nThe function should ignore any leading or trailing numbers.\n\
    The function should ignore any leading or trailing symbols.\nThe function should\
    \ ignore any leading or trailing spaces.\nThe function should ignore any leading\
    \ or trailing alphanumerics.\nThe function should ignore any leading or trailing\
    \ punctuation.\nThe function should ignore any leading or trailing numbers.\n\
    The function should ignore any leading or trailing symbols.\nThe function should\
    \ ignore any leading or trailing spaces.\nThe function should ignore any leading\
    \ or trailing alphanumerics.\nThe function should ignore any leading or trailing\
    \ punctuation.\nThe function should ignore any leading or trailing numbers.\n\
    The function should ignore any leading or trailing symbols.\nThe function should\
    \ ignore any leading or trailing spaces.\nThe function should ignore any leading\
    \ or trailing alphanumerics.\nThe function should ignore any leading or trailing\
    \ punctuation.\nThe function should ignore any leading or trailing numbers.\n\
    The function should ignore any leading or trailing symbols.\nThe function should\
    \ ignore any leading or trailing spaces.\nThe function should ignore any leading\
    \ or trailing alphanumerics.\nThe function should ignore any leading or trailing\
    \ punctuation.\nThe function should ignore any leading or trailing numbers.\n\
    The function should ignore any leading or trailing \ndef check(candidate):\n \
    \   assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmy8525pw.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\ndef check(candidate):\n    assert\
    \ candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n    assert\
    \ candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) == False\n  \
    \  assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2, 2.2) == False\n\
    \    assert candidate(-4, 6, 2) == True\n    assert candidate(2, 1, 1) == True\n\
    \    assert candidate(3, 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\
    \ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6qdexa8.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz6qdexa8.py\", line 38,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmpz6qdexa8.py\", line 29,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiczt02au.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Any String\nCreate\
    \ a function that takes 3 strings and returns True if any of them are equal to\
    \ the sum of the other two, and all strings are equal in length.\nReturns False\
    \ in any other cases.\n    \nExamples\n>>> any_string(\"hello\", \"hello\", \"\
    hello\")\nTrue\n\n>>> any_string(\"hello\", \"hello\", \"world\")\nFalse\n\n>>>\
    \ any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\"\
    , \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\"\
    )\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"\
    hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"\
    hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>>\
    \ any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\"\
    , \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\"\
    )\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"\
    hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"\
    hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>>\
    \ any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\"\
    , \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\"\
    )\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"\
    hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"\
    hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>>\
    \ any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\"\
    , \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\"\
    )\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"\
    hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"\
    hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"\ndef check(candidate):\n\
    \    assert candidate(2, 3, 1) == True\n    assert candidate(2.5, 2, 3) == False\n\
    \    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2, 6, 2) ==\
    \ False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2, 2.2,\
    \ 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp8bqdznzu.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n\
    </cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n\
    <cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ takes a string and returns the number of words in the string.\nIf the string\
    \ has less than 3 words, return 0.\nIf the string has more than 3 words, return\
    \ 3.\nIf the string has 3 words, return 3.\nIf the string has 2 words, return\
    \ 2.\nIf the string has 1 word, return 1.\nIf the string has 0 words, return 0.\n\
    If the string has more than 3 words, return 3.\nIf the string has more than 2\
    \ words, return 2.\nIf the string has more than 1 word, return 1.\nIf the string\
    \ has more than 0 words, return 0.\nIf the string has less than 3 words, return\
    \ 0.\nIf the string has less than 2 words, return 0.\nIf the string has less than\
    \ 1 word, return 0.\nIf the string has less than 0 words, return 0.\nIf the string\
    \ has more than 3 words, return 3.\nIf the string has more than 2 words, return\
    \ 2.\nIf the string has more than 1 word, return 1.\nIf the string has more than\
    \ 0 words, return 0.\nIf the string has less than 3 words, return 0.\nIf the string\
    \ has less than 2 words, return 0.\nIf the string has less than 1 word, return\
    \ 0.\nIf the string has less than 0 words, return 0.\nIf the string has more than\
    \ 3 words, return 3.\nIf the string has more than 2 words, return 2.\nIf the string\
    \ has more than 1 word, return 1.\nIf the string has more than 0 words, return\
    \ 0.\nIf the string has less than 3 words, return 0.\nIf the string has less than\
    \ 2 words, return 0.\nIf the string has less than 1 word, return 0.\nIf the string\
    \ has less than 0 words, return 0.\nIf the string has more than 3 words, return\
    \ 3.\nIf the string has more than 2 words, return 2.\nIf the string has more than\
    \ 1 word, return 1.\nIf the string has more than 0 words, return 0.\nIf the string\
    \ has less than 3 words, return 0.\nIf the string has less than 2 words, return\
    \ 0.\nIf the string has less than 1 word, return 0.\nIf the string has less than\
    \ 0 words, return 0.\nIf the string has more than 3 words, return 3.\nIf the string\
    \ has more than 2 words, return 2.\nIf the string has more than 1 word, return\
    \ 1.\nIf the string has more than 0 words, return 0.\nIf the string has less than\
    \ 3 words, return 0.\nIf the string has less than 2 words, return 0.\nIf the string\
    \ has less than 1 word, return 0.\nIf the string has less than 0 words, return\
    \ 0.\nIf the \ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n\
    \    assert candidate(2.5, 2, 3) == False\n    assert candidate(1.5, 5, 3.5) ==\
    \ False\n    assert candidate(2, 6, 2) == False\n    assert candidate(4, 2, 2)\
    \ == True\n    assert candidate(2.2, 2.2, 2.2) == False\n    assert candidate(-4,\
    \ 6, 2) == True\n    assert candidate(2, 1, 1) == True\n    assert candidate(3,\
    \ 4, 7) == True\n    assert candidate(3.0, 4, 7) == False\n\ndef test_check():\n\
    \    check(any_int)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpp5c06hbb.py\", line 24\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793921
- exit_code: -1
  program: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
    \ a function that takes 3 numbers.\n    Returns true if one of the numbers is\
    \ equal to the sum of the other two, and all numbers are integers.\n    Returns\
    \ false in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n  \
    \  True\n    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n\
    \    True\n    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\
    \"\n    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\
    \n\ndef check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
    \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
    \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
    \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
    \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
    \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1v465fwo.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp1v465fwo.py\", line 39,\
    \ in test_check\n    check(any_int)\n  File \"/tmp/tmp1v465fwo.py\", line 30,\
    \ in check\n    assert candidate(2, 6, 2) == False\nAssertionError\n"
  stdout: ''
