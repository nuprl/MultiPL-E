{
  "name": "HumanEval_120_maximum",
  "language": "py",
  "prompt": "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\ntest_check()\n",
  "completions": [
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<text>\nmaximum() \ud568\uc218\ub294 O(n) \ubc88 \uc774\uc0c1 \uc774\uc6a9\ub418\uc5c8\ub2e4. \ub530\ub77c\uc11c O(n) \ubc88 \uc774\uc0c1 \uc774\uc6a9\ub418\uc5c8\ub2e4.\n\n\n</text>\n<text>\nmaximum() \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec O(n) \ubc88 \uc774\uc0c1 \uc774\uc6a9\ub418\uc5c8\ub2e4.\n\n\n</text>\n<cell>",
    "    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    pass\n",
    "    pass\n",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    pass\n",
    "    # write your code here\n    maximum_list = []\n    maximum = arr[0]\n    for num in arr:\n        if num > maximum:\n            maximum = num\n            maximum_list.append(maximum)\n        else:\n            maximum_list.append(num)\n    return maximum_list\n",
    "    \n    maximum = []\n    \n    maximum.append(arr[0])\n    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n    \n    return maximum\n",
    "    pass\n",
    "    # write your code here\n    maximum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n    return maximum\n",
    "    # write your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index = i\n    maximum_index = maximum_index + 1\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index - 1\n    maximum_index = maximum_index + k\n    ",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    # Your code here\n    maximum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n    return maximum\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    # write your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index = i\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum",
    "    pass\n",
    "    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    # Your code here\n    maximums = []\n    maximums.append(arr[0])\n    for i in range(1, len(arr)):\n        if arr[i] > maximums[-1]:\n            maximums.append(arr[i])\n    return maximums\n",
    "    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    maximum = []\n    \n    if len(arr) <= k:\n        maximum = arr\n    else:\n        maximum = arr[:k]\n        \n    return maximum\n",
    "    # write your code here\n    \n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index == len(arr) - 1:\n        return arr\n    else:\n        return arr[:maximum_index + 1] + arr[maximum_index + 1:]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<text>\nQ12. Given an array, arr of integers, return a new array with the largest k elements \n    removed.\n\n    Example 1:\n\n    >>> arr = [1, 2, 3, 4, 5]\n    >>> k = 2\n    >>> arr.remove(max(arr))\n    >>> arr\n    [1, 3]\n\n    Example 2:\n\n    >>> arr = [1, 2, 3, 4, 5]\n    >>> k = 3\n    >>> arr.remove(max(arr))\n    >>> arr\n    [1, 2, 4]\n\n    Example 3:\n\n    >>> arr = [1, 2, 3, 4, 5]\n    >>> k = 3\n    >>> arr.remove(max(arr))\n    >>> arr\n    [1, 2, 4]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<text>\nQ13. Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\n\n    Example 1:\n\n    >>> binary_tree = [3,9,20,null,null,15,7]\n    >>> level_order(binary_tree)\n    [[9,15,7],[3,20],[12]]\n\n    Example 2:\n\n    >>> binary_tree = [3,9,20,null,null,15,7]\n    >>> level_order(binary_tree)\n    [[9,15,7],[3,20],[12]]\n\n    Example 3:\n\n    >>> binary_tree = [3,9,20,null,null,15,7]\n    >>> level_order(binary_tree)\n    [[9,15,7],[3,20],[12]]\n\n    Note:\n        1. The height of the tree is in the range of [1, 10].\n        2. The number of nodes in the tree is in the range of [0, 2000].\n        3. The values of the nodes will be in the range of [-1000, 1000].\n    \"\"\"\n    \n    # write your code here\n    \n    return sorted([node for node in binary_tree if node is not None])\n</cell>\n<text>\nQ14. Given a binary tree, return the sum of values of all nodes.\n\n    Example 1:\n\n    >>> binary_tree = [3,9,20,null,null,15,7]\n    >>> sum_of_values(binary_tree)\n    42\n\n    Example 2:\n\n    >>> binary_tree = [3,9,20,null,null,15,7]\n    >>> sum_of_values(binary_tree)\n    42\n\n    Example 3:\n\n    >>> binary_tree = [3,9,20,null,null,15,7]\n    >>> sum_of_values(binary_tree)\n    42\n\n    Note:\n        1. The height of the tree is in the range of [1, 10].\n        2. The number of nodes in the ",
    "    pass\n",
    "    pass\n",
    "    pass\n",
    "    pass\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # write your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index = i\n    \n    maximum_list = arr[0:maximum_index]\n    maximum_list.sort()\n    return maximum_list\n",
    "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    pass\n",
    "    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<text>\n\u6700\u5927\u503c\n\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u5217\u8868\u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c\u7684\u5217\u8868\u3002\n\n\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u5217\u8868\u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c\u7684\u5217\u8868\u3002\n\n\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u5217\u8868\u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c\u7684\u5217\u8868\u3002\n\n\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u5217\u8868\u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c\u7684\u5217\u8868\u3002\n\n\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u5217\u8868\u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c\u7684\u5217\u8868\u3002\n\n\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u5217\u8868\u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c\u7684\u5217\u8868\u3002\n\n\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u5217\u8868\u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c\u7684\u5217\u8868\u3002\n\n\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u5217\u8868\u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c\u7684\u5217\u8868\u3002\n\n\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u5217\u8868\u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c\u7684\u5217\u8868\u3002\n\n\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u5217\u8868\u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c\u7684\u5217\u8868\u3002\n\n\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u5217\u8868\u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c\u7684\u5217\u8868\u3002\n\n\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u5217\u8868\u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c\u7684\u5217\u8868\u3002\n\n\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e86\u4e00\u4e2a\u5217\u8868\u6765\u5b58\u50a8\u7ed3\u679c\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d\u8fd4\u56de\u4e00\u4e2a\u6700\u5927\u503c\u7684\u5217\u8868\u3002\n\n\u5728\u8fd9\u4e2a\u51fd\u6570\u4e2d",
    "    # write your code here\n    maximum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n    maximum = maximum + k\n    maximum = maximum - k\n    return maximum\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    # Your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index == len(arr) - 1:\n        return arr\n    else:\n        return arr[:maximum_index + 1] + arr[maximum_index + 1:]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n</cell>\n<cell>",
    "    # Your code here\n    maximum_list = []\n    maximum_list.append(arr[0])\n    for i in range(1, len(arr)):\n        if arr[i] > maximum_list[-1]:\n            maximum_list.append(arr[i])\n    return maximum_list\n",
    "    pass\n",
    "    pass\n",
    "    pass\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    pass\n",
    "    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    # write your code here\n    \n    maximum_list = []\n    \n    if len(arr) < k:\n        return arr\n    \n    maximum_list.append(arr[0])\n    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum_list[-1]:\n            maximum_list.append(arr[i])\n    \n    return maximum_list\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # Your code here\n    maximum_list = []\n    maximum = arr[0]\n    for num in arr:\n        if num > maximum:\n            maximum = num\n            maximum_list.append(maximum)\n        elif num == maximum:\n            maximum_list.append(num)\n    return maximum_list\n",
    "    pass\n",
    "    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    maximum = []\n    \n    maximum.append(arr[0])\n    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n    \n    return maximum\n</cell>\n<cell>",
    "    # write your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index == len(arr) - 1:\n        return arr\n    else:\n        return arr[:maximum_index + 1] + arr[maximum_index + 1:]\n",
    "    pass\n",
    "    \n    # write your code here\n    \n    maximum_list = []\n    \n    for num in arr:\n        if num > k:\n            maximum_list.append(num)\n    \n    return maximum_list\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    maximum = arr[0]\n    maximum_index = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index == len(arr) - 1:\n        return arr\n    else:\n        return arr[:maximum_index + 1]\n",
    "    pass\n",
    "    pass\n",
    "    pass\n",
    "    # write your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index = i\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum",
    "    \n    arr = sorted(arr)\n    \n    if k > len(arr):\n        return arr\n    \n    if k == len(arr):\n        return arr\n    \n    maximum = arr[:k]\n    \n    for i in range(k, len(arr)):\n        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n    \n    return maximum\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    pass\n",
    "    # write your code here\n    maximum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n    \n    maximum = maximum + k\n    \n    return maximum\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    maximum_list = []\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n    \n    maximum",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # write your code here\n    maximum_list = [0] * k\n    maximum_list[0] = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > maximum_list[0]:\n            maximum_list[0] = arr[i]\n        elif arr[i] > maximum_list[-1]:\n            maximum_list[-1] = arr[i]\n    return maximum_list\n",
    "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    # Your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index == len(arr) - 1:\n        return arr\n    else:\n        return arr[:maximum_index + 1] + arr[maximum_index + 1:]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    pass\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # Your code here\n    maximum = []\n    maximum.append(arr[0])\n    for i in range(1, len(arr)):\n        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n    return maximum\n",
    "    # write your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index = i\n    if maximum_index == len(arr) - 1:\n        return arr\n    else:\n        return arr[maximum_index + 1 : len(arr)]\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # write your code here\n    maximum = []\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    maximum = []\n    \n    if len(arr) == 0:\n        return maximum\n    \n    if len(arr) == 1:\n        if arr[0] > k:\n            maximum.append(arr[0])\n        else:\n            maximum.append(k)\n        return maximum\n    \n    maximum.append(arr[0])\n    \n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            maximum.append(arr[i])\n        else:\n            maximum.append(arr[i-1])\n    \n    return maximum\n</cell>\n<cell>",
    "    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<text>\nmaximum() \ud568\uc218\ub294 \uc55e\uc11c \uc0ac\uc6a9\ud55c \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec k \uac1c\uc758 \uc6d0\uc18c\ub97c \ubc18\ud658\ud55c\ub2e4. \ub9cc\uc57d k \uac1c\uc758 \uc6d0\uc18c\uac00 \uc544\ub2c8\ub77c\uba74 None\uc744 \ubc18\ud658\ud55c\ub2e4.\n\n\ub9cc\uc57d k \uac1c\uc758 \uc6d0\uc18c\uac00 \uc544\ub2c8\ub77c\uba74 None\uc744 \ubc18\ud658\ud55c\ub2e4\uba74, \ubc18\ud658\ub41c \uac12\uc744 \ub9ac\ud134\ud55c\ub2e4.\n\n\n</text>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    # write your code here\n    maximum = []\n    maximum.append(arr[0])\n    for i in range(1, len(arr)):\n        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n    return maximum\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    pass\n",
    "    pass\n",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    \n    # write your code here\n    \n    maximum = arr[0]\n    maximum_index = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index = i\n    \n    return arr[maximum_index:]\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # Your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index = i\n    if maximum_index == len(arr) - 1:\n        return arr\n    else:\n        return arr[maximum_index + 1 : len(arr)]\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    pass\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
    "    # Your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index = i\n    maximum_index = maximum_index - 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum",
    "    \n    maximum = []\n    \n    for i in range(len(arr)):\n        if k == len(maximum):\n            break\n        if arr[i] > maximum[k]:\n            maximum = maximum[:k] + [arr[i]]\n            \n    return maximum\n",
    "    \n    # write your code here\n    \n    maximum_list = []\n    \n    maximum_list.append(max(arr))\n    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum_list[-1]:\n            maximum_list.append(arr[i])\n    \n    return maximum_list\n",
    "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
    "    \n    maximum = arr[0]\n    maximum_index = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index = i\n    \n    if maximum_index - k >= 0:\n        maximum = arr[maximum_index - k]\n    \n    return maximum\n",
    "    # write your code here\n    maximum = []\n    maximum.append(arr[0])\n    for i in range(1, len(arr)):\n        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n    return maximum\n",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<text>\nmaximum() \ud568\uc218\ub294 O(n) \ubc88 \uc774\uc0c1 \ub3d9\uc77c\ud55c \ud6a8\uc728\uc801\uc778 \uc5f0\uc0b0\uc790\ub97c \uc0ac\uc6a9\ud55c\ub2e4.\n\n\n</text>\n<text>\nmaximum() \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uc5ec \uac01 \uc6d0\uc18c\uc758 \ucd5c\ub300\uac12\uc744 \ub9ac\ud134\ud558\ub294 \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4\ubcf4\uc790.\n\n\n</text>\n<cell>",
    "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
    "    pass\n"
  ],
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ]
}