language: py
name: HumanEval_99_closest_integer
results:
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(number)\n    if abs(closest_integer - number) < abs(closest_integer -\
    \ number + 1):\n        closest_integer -= 1\n    return closest_integer\n\n\n\
    def check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0nhwqeyi.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0nhwqeyi.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0nhwqeyi.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ []\n    for x in range(1, 10):\n        differences.append(abs(x - number))\n\
    \    return min(differences)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8lpbq_j.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpp8lpbq_j.py\", line 34,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpp8lpbq_j.py\", line\
    \ 27, in check\n    assert candidate('10') == 10\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    if number ==\
    \ int(number):\n        return int(number)\n    return int(math.ceil(number))\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5vogf7bb.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5vogf7bb.py\", line 33,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp5vogf7bb.py\", line\
    \ 27, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmp5vogf7bb.py\"\
    , line 22, in closest_integer\n    return int(math.ceil(number))\nNameError: name\
    \ 'math' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpji9f4e77.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpji9f4e77.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpji9f4e77.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7gsx44bd.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference <= 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_x44c51b.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_x44c51b.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_x44c51b.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7gsx44bd.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < .1:\n        return int(number)\n\
    \    else:\n        return int(round(number))\n\n\ndef check(candidate):\n   \
    \ assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxm8_e5bw.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxm8_e5bw.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxm8_e5bw.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7gsx44bd.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference <= 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_x44c51b.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_x44c51b.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_x44c51b.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7gsx44bd.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7gsx44bd.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    differences =\
    \ [abs(number - int(number)) for number in str(number)]\n    return int(min(differences))\
    \ if differences else None\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpty548b0p.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpty548b0p.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpty548b0p.py\", line\
    \ 25, in check\n    assert candidate('10') == 10\n  File \"/tmp/tmpty548b0p.py\"\
    , line 20, in closest_integer\n    differences = [abs(number - int(number)) for\
    \ number in str(number)]\n  File \"/tmp/tmpty548b0p.py\", line 20, in <listcomp>\n\
    \    differences = [abs(number - int(number)) for number in str(number)]\nTypeError:\
    \ unsupported operand type(s) for -: 'str' and 'int'\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpji9f4e77.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpji9f4e77.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpji9f4e77.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7gsx44bd.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7gsx44bd.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < .0000000001:\n        return\
    \ int(number)\n    else:\n        return int(number - difference)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqi2mb75.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmplqi2mb75.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmplqi2mb75.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7gsx44bd.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    closest_integer\
    \ = int(round(number))\n    if abs(number - closest_integer) < abs(number - number\
    \ % 1):\n        return closest_integer\n    else:\n        return closest_integer\
    \ + 1\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert\
    \ candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3')\
    \ == 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp43gt3q7c.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp43gt3q7c.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp43gt3q7c.py\", line\
    \ 29, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n    >>> closest_integer('10')\n    10\n   \
    \ >>> closest_integer('15.3')\n    15\n\n    Note:\n    Rounding away from zero\
    \ means that if the given number is equidistant\n    from two integers, the one\
    \ you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    number = float(value)\n    difference =\
    \ abs(number - int(number))\n    if difference < 0.5:\n        return int(number)\n\
    \    else:\n        return int(number) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp7gsx44bd.py\", line 35,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7gsx44bd.py\", line\
    \ 30, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  stdout: ''
