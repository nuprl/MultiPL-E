language: py
name: HumanEval_158_find_max
results:
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    pass\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9t82pwb1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9t82pwb1.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp9t82pwb1.py\", line 19,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    unique_chars = defaultdict(int)\n    for word in words:\n        for char\
    \ in word:\n            unique_chars[char] += 1\n    return max(unique_chars,\
    \ key=unique_chars.get)\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptscri924.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptscri924.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmptscri924.py\", line 23,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File\
    \ \"/tmp/tmptscri924.py\", line 16, in find_max\n    unique_chars = defaultdict(int)\n\
    NameError: name 'defaultdict' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpru9yjqqt.py\", line\
    \ 288, in <module>\n    test_check()\n  File \"/tmp/tmpru9yjqqt.py\", line 286,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpru9yjqqt.py\", line 274,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    return max(set(words), key=words.count)\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfby4zuu_.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpfby4zuu_.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpfby4zuu_.py\", line 19,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    \n    # Your code here\n    \n    return words[words.index(max(set(words),\
    \ key=words.count))]\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpv26lkv0z.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    return max(set(words), key=words.count)\n\ndef check(candidate):\n   \
    \ assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfby4zuu_.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpfby4zuu_.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpfby4zuu_.py\", line 19,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    \n    unique_chars = Counter(words)\n    \n    return unique_chars.most_common(1)[0][0]\n\
    \    \n    \ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpym5zkeh9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpym5zkeh9.py\", line 35,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpym5zkeh9.py\", line 23,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\n  File\
    \ \"/tmp/tmpym5zkeh9.py\", line 17, in find_max\n    unique_chars = Counter(words)\n\
    NameError: name 'Counter' is not defined\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    \n    # Your code here\n    \n    return words[words.index(max(set(words),\
    \ key=words.count))]\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp39mfwozh.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp39mfwozh.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp39mfwozh.py\", line 22,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    \n    # Your code here\n    \n    return words[words.index(max(set(words),\
    \ key=words.count))]\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpv26lkv0z.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    pass\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9t82pwb1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9t82pwb1.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp9t82pwb1.py\", line 19,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpru9yjqqt.py\", line\
    \ 288, in <module>\n    test_check()\n  File \"/tmp/tmpru9yjqqt.py\", line 286,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpru9yjqqt.py\", line 274,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpru9yjqqt.py\", line\
    \ 288, in <module>\n    test_check()\n  File \"/tmp/tmpru9yjqqt.py\", line 286,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpru9yjqqt.py\", line 274,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    \n    # Your code here\n    \n    return words[words.index(max(set(words),\
    \ key=words.count))]\n\ndef check(candidate):\n    assert candidate(['name', 'of',\
    \ 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n\
    \    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp39mfwozh.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp39mfwozh.py\", line 34,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp39mfwozh.py\", line 22,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    unique_chars = {}\n    unique_chars_count = 0\n    unique_chars_list =\
    \ []\n    for word in words:\n        unique_chars[word] = unique_chars.get(word,\
    \ 0) + 1\n        unique_chars_count = unique_chars.get(word, 0) + 1\n       \
    \ unique_chars_list.append(word)\n    unique_chars_list.sort(key=lambda word:\
    \ unique_chars[word], reverse=True)\n    return unique_chars_list[0]\n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8ncnlk5d.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp8ncnlk5d.py\", line 39,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp8ncnlk5d.py\", line 27,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate(['name', 'of', 'string']) == 'string'\n    assert candidate(['name',\
    \ 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) ==\
    \ 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play',\
    \ 'this', 'game', 'of', 'footbott']) == 'footbott'\n    assert candidate(['we',\
    \ 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a',\
    \ 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk'])\
    \ == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
    \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpru9yjqqt.py\", line\
    \ 288, in <module>\n    test_check()\n  File \"/tmp/tmpru9yjqqt.py\", line 286,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpru9yjqqt.py\", line 274,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    pass\n\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpio_7vdr8.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpio_7vdr8.py\", line 32,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmpio_7vdr8.py\", line 20,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    pass\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9t82pwb1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9t82pwb1.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp9t82pwb1.py\", line 19,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    pass\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9t82pwb1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9t82pwb1.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp9t82pwb1.py\", line 19,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    pass\n\ndef check(candidate):\n    assert candidate(['name', 'of', 'string'])\
    \ == 'string'\n    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert\
    \ candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc',\
    \ 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game', 'of', 'footbott'])\
    \ == 'footbott'\n    assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n\
    \    assert candidate(['we', 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert\
    \ candidate(['this', 'is', 'a', 'prrk']) == 'this'\n    assert candidate(['b'])\
    \ == 'b'\n    assert candidate(['play', 'play', 'play']) == 'play'\n\ndef test_check():\n\
    \    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9t82pwb1.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9t82pwb1.py\", line 31,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmp9t82pwb1.py\", line 19,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n  \
    \  \"\"\"Write a function that accepts a list of strings.\n    The list contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.\n\n    >>> find_max(['name',\
    \ 'of', 'string'])\n    'string'\n    >>> find_max(['name', 'enam', 'game'])\n\
    \    'enam'\n    >>> find_max(['aaaaaaa', 'bb', 'cc'])\n    'aaaaaaa'\n    \"\"\
    \"\n    \n    unique_chars = {}\n    \n    for word in words:\n        unique_chars[word]\
    \ = len(word)\n    \n    max_word = ''\n    \n    for word in unique_chars:\n\
    \        if unique_chars[word] == len(max_word):\n            max_word = word\n\
    \    \n    return max_word\n\ndef check(candidate):\n    assert candidate(['name',\
    \ 'of', 'string']) == 'string'\n    assert candidate(['name', 'enam', 'game'])\
    \ == 'enam'\n    assert candidate(['aaaaaaa', 'bb', 'cc']) == 'aaaaaaa'\n    assert\
    \ candidate(['abc', 'cba']) == 'abc'\n    assert candidate(['play', 'this', 'game',\
    \ 'of', 'footbott']) == 'footbott'\n    assert candidate(['we', 'are', 'gonna',\
    \ 'rock']) == 'gonna'\n    assert candidate(['we', 'are', 'a', 'mad', 'nation'])\
    \ == 'nation'\n    assert candidate(['this', 'is', 'a', 'prrk']) == 'this'\n \
    \   assert candidate(['b']) == 'b'\n    assert candidate(['play', 'play', 'play'])\
    \ == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppm9uqqj1.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmppm9uqqj1.py\", line 43,\
    \ in test_check\n    check(find_max)\n  File \"/tmp/tmppm9uqqj1.py\", line 31,\
    \ in check\n    assert candidate(['name', 'of', 'string']) == 'string'\nAssertionError\n"
  stdout: ''
