name: HumanEval_0_has_close_elements
language: py
prompt: "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold:\
  \ float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers\
  \ closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0,\
  \ 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
  \ 2.0], 0.3)\n    True\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
  \ 0.3) == True\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) == False\n\
  \    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) == True\n    assert candidate([1.0,\
  \ 2.0, 5.9, 4.0, 5.0], 0.8) == False\n    assert candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.0], 0.1) == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 1.0)\
  \ == True\n    assert candidate([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) == False\n\ndef\
  \ test_check():\n    check(has_close_elements)\n\ntest_check()\n"
completions: ["    numbers_set = set(numbers)\n    for n in numbers:\n        if n\
    \ in numbers_set:\n            numbers_set.remove(n)\n        else:\n        \
    \    return False\n    return True\n", "    \n    numbers_sorted = sorted(numbers)\n\
    \    \n    i = 0\n    \n    while i < len(numbers_sorted) - 1:\n        \n   \
    \     j = i + 1\n        \n        while j < len(numbers_sorted):\n          \
    \  \n            if abs(numbers_sorted[i] - numbers_sorted[j]) < threshold:\n\
    \                return True\n            \n            j += 1\n        \n   \
    \     i += 1\n    \n    return False\n</cell>\n<cell>", "    numbers_set = set(numbers)\n\
    \    for n in numbers:\n        if n in numbers_set:\n            numbers_set.remove(n)\n\
    \            if len(numbers_set) == 0:\n                return True\n    return\
    \ False\n", "    numbers_set = set(numbers)\n    for n in numbers:\n        if\
    \ n in numbers_set:\n            numbers_set.remove(n)\n        else:\n      \
    \      return False\n    return True\n", "    \n    numbers_set = set(numbers)\n\
    \    \n    for number in numbers:\n        \n        if number in numbers_set:\n\
    \            numbers_set.remove(number)\n            \n        else:\n       \
    \     \n            numbers_set.add(number)\n            \n    return len(numbers_set)\
    \ == 0\n", "    numbers = sorted(numbers)\n    threshold = abs(threshold)\n  \
    \  \n    i = 0\n    while i < len(numbers) - 1:\n        if numbers[i + 1] - numbers[i]\
    \ < threshold:\n            return True\n        i += 1\n    return False\n",
  "    numbers = sorted(numbers)\n    threshold = abs(threshold)\n    i = 0\n    while\
    \ i < len(numbers) - 1:\n        if numbers[i + 1] - numbers[i] < threshold:\n\
    \            return False\n        i += 1\n    return True\n", "    \n    numbers_set\
    \ = set(numbers)\n    \n    for num in numbers:\n        if num in numbers_set:\n\
    \            numbers_set.remove(num)\n        else:\n            return False\n\
    \    return True\n", "    \n    numbers_set = set(numbers)\n    \n    for number\
    \ in numbers:\n        if number in numbers_set:\n            numbers_set.remove(number)\n\
    \        else:\n            return False\n    return True\n", "    \n    distances\
    \ = [abs(numbers[i] - numbers[i+1]) for i in range(len(numbers)-1)]\n    \n  \
    \  return any([d > threshold for d in distances])\n</cell>\n<cell>", "    \n \
    \   numbers_set = set(numbers)\n    for number in numbers:\n        if number\
    \ in numbers_set:\n            numbers_set.remove(number)\n        else:\n   \
    \         return False\n    return True\n", "    \n    numbers = sorted(numbers)\n\
    \    \n    i = 0\n    while i < len(numbers) - 1:\n        \n        j = i + 1\n\
    \        \n        while j < len(numbers):\n            \n            if abs(numbers[i]\
    \ - numbers[j]) < threshold:\n                return True\n            \n    \
    \        j += 1\n        \n        i += 1\n        \n    return False\n", "  \
    \  numbers.sort()\n    i = 0\n    while i < len(numbers) - 1:\n        if numbers[i]\
    \ > numbers[i + 1]:\n            return False\n        i += 1\n    return True\n",
  "    \n    numbers_set = set(numbers)\n    \n    for num in numbers:\n        if\
    \ num in numbers_set:\n            numbers_set.remove(num)\n        else:\n  \
    \          return False\n    return True\n", "    numbers = sorted(numbers)\n\
    \    length = len(numbers)\n    if length < 2:\n        return False\n    i =\
    \ 0\n    while i < length - 1:\n        if numbers[i + 1] - numbers[i] < threshold:\n\
    \            return True\n        i += 1\n    return False\n", "    numbers_set\
    \ = set(numbers)\n    for number in numbers:\n        if number in numbers_set:\n\
    \            numbers_set.remove(number)\n        else:\n            return False\n\
    \    return True\n", "    \n    numbers_set = set(numbers)\n    \n    if len(numbers_set)\
    \ == 1:\n        return True\n    \n    distances = []\n    \n    for number in\
    \ numbers:\n        distances.append(abs(number - numbers_set.pop()))\n    \n\
    \    return distances.index(min(distances)) < len(distances) - 1 and min(distances)\
    \ < threshold\n", "    numbers_set = set(numbers)\n    return len(numbers_set)\
    \ == 2 and min(numbers_set) - max(numbers_set) < threshold\n", "    numbers =\
    \ sorted(numbers)\n    threshold = abs(threshold)\n    return any(abs(numbers[i]\
    \ - numbers[i + 1]) < threshold for i in range(len(numbers) - 1))\n", "    numbers_set\
    \ = set(numbers)\n    for n in numbers:\n        if n in numbers_set:\n      \
    \      numbers_set.remove(n)\n            if len(numbers_set) == 0:\n        \
    \        return True\n    return False\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
