language: py
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8so4pfhv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8so4pfhv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8so4pfhv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '?' else\
    \ 0\n    boredoms += 1 if S[3] == '!' else 0\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvhqva2cu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvhqva2cu.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvhqva2cu.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word == 'I':\n            boredoms += 1\n    return boredoms\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiqug1qo1.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_count = 0\n    \n    for word\
    \ in S.split():\n        if word.startswith('I'):\n            boredom_count +=\
    \ 1\n    \n    return boredom_count\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxenorbun.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxenorbun.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxenorbun.py\", line 25,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    \n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4f38p0wr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4f38p0wr.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4f38p0wr.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8so4pfhv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8so4pfhv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8so4pfhv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    boredoms = ['.', '?', '!']\n    for word\
    \ in S.split():\n        if word.lower() in boredoms:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxqtlfm1.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkxqtlfm1.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkxqtlfm1.py\", line 26,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_count = 0\n    \n    for word\
    \ in S.split():\n        if word == 'I':\n            boredom_count += 1\n   \
    \     elif boredom_count > 0:\n            boredom += 1\n            boredom_count\
    \ = 0\n    \n    return boredom\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgu9veg36.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpgu9veg36.py\", line 35,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgu9veg36.py\", line 32,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredom_words = ['I']\n    boredom_sentences\
    \ = []\n    boredom_sentences.append(boredom_words)\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpufv66gq7.py\", line\
    \ 88, in <module>\n    test_check()\n  File \"/tmp/tmpufv66gq7.py\", line 86,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpufv66gq7.py\", line 78,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau5tx82t.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpau5tx82t.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpau5tx82t.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
