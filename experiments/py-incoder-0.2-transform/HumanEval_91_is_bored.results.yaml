language: py
name: HumanEval_91_is_bored
results:
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8so4pfhv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8so4pfhv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8so4pfhv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '?' else\
    \ 0\n    boredoms += 1 if S[3] == '!' else 0\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvhqva2cu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvhqva2cu.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvhqva2cu.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word == 'I':\n            boredoms += 1\n    return boredoms\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiqug1qo1.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_count = 0\n    \n    for word\
    \ in S.split():\n        if word.startswith('I'):\n            boredom_count +=\
    \ 1\n    \n    return boredom_count\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxenorbun.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpxenorbun.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxenorbun.py\", line 25,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    \n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4f38p0wr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4f38p0wr.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4f38p0wr.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8so4pfhv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8so4pfhv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8so4pfhv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    boredoms = ['.', '?', '!']\n    for word\
    \ in S.split():\n        if word.lower() in boredoms:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxqtlfm1.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkxqtlfm1.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkxqtlfm1.py\", line 26,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_count = 0\n    \n    for word\
    \ in S.split():\n        if word == 'I':\n            boredom_count += 1\n   \
    \     elif boredom_count > 0:\n            boredom += 1\n            boredom_count\
    \ = 0\n    \n    return boredom\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgu9veg36.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpgu9veg36.py\", line 35,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpgu9veg36.py\", line 32,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredom_words = ['I']\n    boredom_sentences\
    \ = []\n    boredom_sentences.append(boredom_words)\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\n    boredom_sentences.append([])\n\
    \    boredom_sentences.append([])\n    boredom_sentences.append([])\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpufv66gq7.py\", line\
    \ 88, in <module>\n    test_check()\n  File \"/tmp/tmpufv66gq7.py\", line 86,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpufv66gq7.py\", line 78,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau5tx82t.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpau5tx82t.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpau5tx82t.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf30877ar.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf30877ar.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpf30877ar.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    \n    return boredoms\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp79ia7gtv.py\", line 18\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_words = ['I']\n    for word in\
    \ S.split():\n        if word.lower() in boredom_words:\n            boredom +=\
    \ 1\n            boredom_words.remove(word.lower())\n    return boredom\n\ndef\
    \ check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxk6jp3g7.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpxk6jp3g7.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpxk6jp3g7.py\", line 24,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '?' else\
    \ 0\n    boredoms += 1 if S[3] == '!' else 0\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvhqva2cu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvhqva2cu.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvhqva2cu.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    \n    for word in S.split():\n      \
    \  if word.startswith('I'):\n            boredom += 1\n    return boredom\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpljs583hw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpljs583hw.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpljs583hw.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    boredoms = ['.', '?', '!']\n    for word\
    \ in S.split():\n        if word.lower() in boredoms:\n            count += 1\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxqtlfm1.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpkxqtlfm1.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpkxqtlfm1.py\", line 26,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word == 'I':\n            boredoms += 1\n    \n    return boredoms\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdrse_xjq.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpdrse_xjq.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdrse_xjq.py\", line 28,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpcjyoh2bv.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    \n    for word in S.split():\n        if\
    \ word.startswith('I'):\n            count += 1\n    return count\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqrfn3e1r.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqrfn3e1r.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqrfn3e1r.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredom += 1\n    return boredom\n\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwf3kbwlk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwf3kbwlk.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwf3kbwlk.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf30877ar.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf30877ar.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpf30877ar.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    # Your code here\n    \n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3usi8tjq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3usi8tjq.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3usi8tjq.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    \n    boredoms += 1 if S[1] == '.' else 0\n    \n    boredoms += 1 if\
    \ S[2] == '.' else 0\n    \n    boredoms += 1 if S[3] == '.' else 0\n    \n  \
    \  boredoms += 1 if S[4] == '.' else 0\n    \n    boredoms += 1 if S[5] == '.'\
    \ else 0\n    \n    boredoms += 1 if S[6] == '.' else 0\n    \n    boredoms +=\
    \ 1 if S[7] == '.' else 0\n    \n    boredoms += 1 if S[8] == '.' else 0\n   \
    \ \n    boredoms += 1 if S[9] == '.' else 0\n    \n    boredoms += 1 if S[10]\
    \ == '.' else 0\n    \n    boredoms += 1 if S[11] == '.' else 0\n    \n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    \n    boredoms += 1 if S[13] == '.' else 0\n\
    \    \n    boredoms += 1 if S[14] == '.' else 0\n    \n    boredoms += 1 if S[15]\
    \ == '.' else 0\n    \n    boredoms += 1 if S[16] == '.' else 0\n    \n    boredoms\
    \ += 1 if S[17] == '.' else 0\n    \n    boredoms += 1 if S[18] == '.' else 0\n\
    \    \n    boredoms += 1 if S[19] == '.' else 0\n    \n    boredoms += 1 if S[20]\
    \ == '.' else 0\n    \n    boredoms += 1 if S[21] == '.' else 0\n    \n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    \n    boredoms += 1 if S[23] == '.' else 0\n\
    \    \n    boredoms += 1 if S[24] == '.' else 0\n    \n    boredoms += 1 if S[25]\
    \ == '.' else 0\n    \n    boredoms += 1 if S[26] == '.' else 0\n    \n    boredoms\
    \ += 1 if S[27] == '.' else 0\n    \n    boredoms += 1 if S[28] == '.' else 0\n\
    \    \n    boredoms += 1 if S[29] == '.' else 0\n    \n    boredoms += 1 if S[30]\
    \ == '.' else 0\n    \n    boredoms += 1 if S[31] == '.' else 0\n    \n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    \n    boredoms += 1 if S[\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbcxzhg1g.py\", line 81\n    boredoms += 1 if S[\n    \
    \                  ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpewivxbf6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpewivxbf6.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpewivxbf6.py\", line 20,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8so4pfhv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8so4pfhv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8so4pfhv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw54fjhyn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpw54fjhyn.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpw54fjhyn.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '?' else\
    \ 0\n    boredoms += 1 if S[3] == '!' else 0\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpclfd113n.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpclfd113n.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpclfd113n.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpewivxbf6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpewivxbf6.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpewivxbf6.py\", line 20,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '?' else\
    \ 0\n    boredoms += 1 if S[3] == '!' else 0\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvhqva2cu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvhqva2cu.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvhqva2cu.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.'\
    \ else 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] ==\
    \ '.' else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6]\
    \ == '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if\
    \ S[8] == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms +=\
    \ 1 if S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpxo043bz9.py\", line 53\n    boredoms += 1 if S[38\n  \
    \                    ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8so4pfhv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8so4pfhv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8so4pfhv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8so4pfhv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8so4pfhv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8so4pfhv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_list = ['.', '?', '!']\n    for\
    \ word in S.split():\n        if word.lower() in boredom_list:\n            boredom\
    \ += 1\n    return boredom\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmhpe6ygj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmhpe6ygj.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmhpe6ygj.py\", line 26,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '?' else\
    \ 0\n    boredoms += 1 if S[3] == '!' else 0\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvhqva2cu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvhqva2cu.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvhqva2cu.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_list = ['.', '?', '!']\n    for\
    \ word in S.split():\n        if word.lower() in boredom_list:\n            boredom\
    \ += 1\n    return boredom\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmhpe6ygj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmhpe6ygj.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmhpe6ygj.py\", line 26,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_list = ['.', '?','!']\n    for\
    \ word in S.split():\n        if word.lower() in boredom_list:\n            boredom\
    \ += 1\n    return boredom\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsgwzwta9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpsgwzwta9.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsgwzwta9.py\", line 25,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word\
    \ == 'I':\n            count += 1\n    return count\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdoukviqt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdoukviqt.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpdoukviqt.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    \n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4f38p0wr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4f38p0wr.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4f38p0wr.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf30877ar.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf30877ar.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpf30877ar.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_list = ['.', '?', '!']\n    for\
    \ word in S.split():\n        if word.lower() in boredom_list:\n            boredom\
    \ += 1\n    return boredom\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmhpe6ygj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmhpe6ygj.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmhpe6ygj.py\", line 26,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8so4pfhv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8so4pfhv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8so4pfhv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    # Your code here\n    \n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvekrc9dt.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpvekrc9dt.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvekrc9dt.py\", line 23,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_count = 0\n    boredom_words\
    \ = []\n    boredom_words.append(S[0])\n    boredom_words.append('I')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    boredom_words.append('!')\n    boredom_words.append('.')\n\
    \    boredom_words.append('?')\n    bore\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6w8fufu.py\", line\
    \ 89, in <module>\n    test_check()\n  File \"/tmp/tmpq6w8fufu.py\", line 87,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpq6w8fufu.py\", line 79,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpq6w8fufu.py\"\
    , line 77, in is_bored\n    bore\nNameError: name 'bore' is not defined\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredom += 1\n    return boredom\n\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwf3kbwlk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwf3kbwlk.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwf3kbwlk.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    \n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp931a6iuz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp931a6iuz.py\", line 31,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp931a6iuz.py\", line 24,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredom_words = ['I']\n    for word\
    \ in S.split():\n        if word.lower() in boredom_words:\n            boredoms\
    \ += 1\n        else:\n            boredom_words.append(word.lower())\n    return\
    \ boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world') ==\
    \ 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love\
    \ It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel\
    \ good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu64bo80w.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpu64bo80w.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpu64bo80w.py\", line 26,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '?' else\
    \ 0\n    boredoms += 1 if S[3] == '!' else 0\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpclfd113n.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpclfd113n.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpclfd113n.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf30877ar.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf30877ar.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpf30877ar.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_words = ['I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ '\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpk781y8gc.py\", line 14\n    boredom_words = ['I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf30877ar.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf30877ar.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpf30877ar.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    \n    for word in S.split():\n      \
    \  if word == 'I':\n            boredom += 1\n    return boredom\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7cq21mc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpk7cq21mc.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpk7cq21mc.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word == 'I':\n            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbhf_bw6k.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbhf_bw6k.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbhf_bw6k.py\", line 27,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_count = 0\n    boredom_sentence\
    \ = []\n    boredom_sentence = S.split('.')\n    boredom_sentence = boredom_sentence[0].split('?')\n\
    \    boredom_sentence = boredom_sentence[0].split('!')\n    boredom_sentence =\
    \ boredom_sentence[0].split(' ')\n    boredom_sentence = boredom_sentence[0].split('\
    \ ')\n    boredom_sentence = boredom_sentence[0].split(' ')\n    boredom_sentence\
    \ = boredom_sentence[0].split(' ')\n    boredom_sentence = boredom_sentence[0].split('\
    \ ')\n    boredom_sentence = boredom_sentence[0].split(' ')\n    boredom_sentence\
    \ = boredom_sentence[0].split(' ')\n    boredom_sentence = boredom_sentence[0].split('\
    \ ')\n    boredom_sentence = boredom_sentence[0].split(' ')\n    boredom_sentence\
    \ = boredom_sentence[0].split(' ')\n    boredom_sentence = boredom_sentence[0].split('\
    \ ')\n    boredom_sentence = boredom_sentence[0].split(' ')\n    boredom_sentence\
    \ = boredom_sentence[0].split(' ')\n    boredom_sentence = boredom_sentence[0].split('\
    \ ')\n    boredom_sentence = boredom_sentence[0].split(' ')\n    boredom_sentence\
    \ = boredom_sentence[0].split(' ')\n    boredom_sentence = boredom_sentence[0].split('\
    \ ')\n    boredom_sentence = boredom_sentence[0].split(' ')\n    boredom_sentence\
    \ = boredom_sentence[0].split(' ')\n    boredom_sentence = boredom_sentence[0].split('\
    \ ')\n    boredom_sentence = boredom_sentence[0].split(' ')\n    boredom_sentence\
    \ = boredom_sentence[0].split(' ')\n    boredom_sentence = boredom_sentence[0].split('\
    \ ')\n    boredom_sentence = boredom_sentence[0].split(' ')\n    boredom_sentence\
    \ = boredom_sentence[0].split(' ')\n    boredom_sentence = boredom_sentence[0].split('\
    \ ')\n    boredom_sentence = boredom_sentence[0].split(' ')\n    boredom_sentence\
    \ = boredom_sentence[0].split(' ')\n    boredom_sentence = boredom_sentence[0].split('\
    \ ')\n    boredom_sentence = boredom_sentence[0].split(' ')\n    boredom_sentence\
    \ = boredom_sentence[0].split(' ')\n    boredom_sentence = boredom_sentence[0].split('\
    \ ')\n    boredom_sentence = boredom_sentence[0].split(' ')\n    boredom_sentence\
    \ = boredom_sentence[0].split(' ')\n    boredom_sentence = boredom_sentence[0].split('\
    \ ')\n    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4vhflbjc.py\", line\
    \ 66, in <module>\n    test_check()\n  File \"/tmp/tmp4vhflbjc.py\", line 64,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4vhflbjc.py\", line 56,\
    \ in check\n    assert candidate('Hello world') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphvgepe8z.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphvgepe8z.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphvgepe8z.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8so4pfhv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8so4pfhv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8so4pfhv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpau5tx82t.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpau5tx82t.py\", line 26,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpau5tx82t.py\", line 19,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpewivxbf6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpewivxbf6.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpewivxbf6.py\", line 20,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredom += 1\n    return boredom\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ih17816.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1ih17816.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1ih17816.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf30877ar.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf30877ar.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpf30877ar.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if word\
    \ == 'I':\n            boredom += 1\n    return boredom\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzfggk2av.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpzfggk2av.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzfggk2av.py\", line 25,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    S = S.lower()\n    \n    for word\
    \ in S.split():\n        if word.startswith('i'):\n            boredoms += 1\n\
    \            \n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_qardjcd.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp_qardjcd.py\", line 32,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_qardjcd.py\", line 25,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpewivxbf6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpewivxbf6.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpewivxbf6.py\", line 20,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    return boredoms\n\n\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpewivxbf6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpewivxbf6.py\", line 27,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpewivxbf6.py\", line 20,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredom += 1\n    return boredom\n\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwf3kbwlk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwf3kbwlk.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwf3kbwlk.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    \n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4f38p0wr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4f38p0wr.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4f38p0wr.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    \n    for word in S.split():\n      \
    \  if word.startswith('I'):\n            boredom += 1\n    return boredom\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpljs583hw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpljs583hw.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpljs583hw.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredom_words = ['I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ '\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnou7d9_j.py\", line 14\n    boredom_words = ['I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word == 'I':\n            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbhf_bw6k.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbhf_bw6k.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbhf_bw6k.py\", line 27,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    \n    boredom_list = ['.', '?', '!']\n\
    \    \n    for word in S.split():\n        if word.lower() in boredom_list:\n\
    \            boredom += 1\n    \n    return boredom\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp59r1qyu_.py\", line 22\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '?' else\
    \ 0\n    boredoms += 1 if S[3] == '!' else 0\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvhqva2cu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvhqva2cu.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvhqva2cu.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    # Your code here\n    \n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3usi8tjq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3usi8tjq.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3usi8tjq.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_list = ['.', '?','!']\n    for\
    \ word in S.split():\n        if word.lower() in boredom_list:\n            boredom\
    \ += 1\n    return boredom\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsgwzwta9.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpsgwzwta9.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpsgwzwta9.py\", line 25,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    \n    for word in S.split():\n      \
    \  if word.startswith('I'):\n            boredom += 1\n    return boredom\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbr2vfeje.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpbr2vfeje.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpbr2vfeje.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw54fjhyn.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpw54fjhyn.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpw54fjhyn.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word == 'I':\n            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_6f8ze7x.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_6f8ze7x.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_6f8ze7x.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredom += 1\n    return boredom\n\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwf3kbwlk.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpwf3kbwlk.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpwf3kbwlk.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_list = ['.', '?', '!']\n    for\
    \ word in S.split():\n        if word.lower() in boredom_list:\n            boredom\
    \ += 1\n    return boredom\n\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmhpe6ygj.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpmhpe6ygj.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpmhpe6ygj.py\", line 26,\
    \ in check\n    assert candidate('I feel good today. I will be productive. will\
    \ kill It') == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    \n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4f38p0wr.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp4f38p0wr.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp4f38p0wr.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if word\
    \ == 'I':\n            boredom += 1\n    return boredom\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx7_91li4.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpx7_91li4.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpx7_91li4.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    \n    boredoms += 1 if S[1] == '.' else 0\n    \n    boredoms += 1 if\
    \ S[2] == '.' else 0\n    \n    boredoms += 1 if S[3] == '.' else 0\n    \n  \
    \  boredoms += 1 if S[4] == '.' else 0\n    \n    boredoms += 1 if S[5] == '.'\
    \ else 0\n    \n    boredoms += 1 if S[6] == '.' else 0\n    \n    boredoms +=\
    \ 1 if S[7] == '.' else 0\n    \n    boredoms += 1 if S[8] == '.' else 0\n   \
    \ \n    boredoms += 1 if S[9] == '.' else 0\n    \n    boredoms += 1 if S[10]\
    \ == '.' else 0\n    \n    boredoms += 1 if S[11] == '.' else 0\n    \n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    \n    boredoms += 1 if S[13] == '.' else 0\n\
    \    \n    boredoms += 1 if S[14] == '.' else 0\n    \n    boredoms += 1 if S[15]\
    \ == '.' else 0\n    \n    boredoms += 1 if S[16] == '.' else 0\n    \n    boredoms\
    \ += 1 if S[17] == '.' else 0\n    \n    boredoms += 1 if S[18] == '.' else 0\n\
    \    \n    boredoms += 1 if S[19] == '.' else 0\n    \n    boredoms += 1 if S[20]\
    \ == '.' else 0\n    \n    boredoms += 1 if S[21] == '.' else 0\n    \n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    \n    boredoms += 1 if S[23] == '.' else 0\n\
    \    \n    boredoms += 1 if S[24] == '.' else 0\n    \n    boredoms += 1 if S[25]\
    \ == '.' else 0\n    \n    boredoms += 1 if S[26] == '.' else 0\n    \n    boredoms\
    \ += 1 if S[27] == '.' else 0\n    \n    boredoms += 1 if S[28] == '.' else 0\n\
    \    \n    boredoms += 1 if S[29] == '.' else 0\n    \n    boredoms += 1 if S[30]\
    \ == '.' else 0\n    \n    boredoms += 1 if S[31] == '.' else 0\n    \n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    \n    boredoms += 1 if S[\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbcxzhg1g.py\", line 81\n    boredoms += 1 if S[\n    \
    \                  ^\nSyntaxError: '[' was never closed\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8so4pfhv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8so4pfhv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8so4pfhv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word == 'I':\n            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_6f8ze7x.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp_6f8ze7x.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp_6f8ze7x.py\", line 26,\
    \ in check\n    assert candidate('You and I are going for a walk') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    # Your code here\n    \n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3usi8tjq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3usi8tjq.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3usi8tjq.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy6_6gobs.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpy6_6gobs.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpy6_6gobs.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    # Your code here\n    \n    return\
    \ boredoms\n\ndef check(candidate):\n    assert candidate('Hello world') == 0\n\
    \    assert candidate('Is the sky blue?') == 0\n    assert candidate('I love It\
    \ !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I feel good\
    \ today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3usi8tjq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3usi8tjq.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp3usi8tjq.py\", line 22,\
    \ in check\n    assert candidate('I love It !') == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf30877ar.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf30877ar.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpf30877ar.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    \n    for word in S.split():\n      \
    \  if word.startswith('I'):\n            boredom += 1\n    return boredom\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpljs583hw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpljs583hw.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpljs583hw.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    boredoms += 1 if S[0] == 'I' else\
    \ 0\n    \n    return boredoms\n\ndef check(candidate):\n    assert candidate('Hello\
    \ world') == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn7rkzm5s.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpn7rkzm5s.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpn7rkzm5s.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8so4pfhv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8so4pfhv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8so4pfhv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredom += 1\n    return boredom\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ih17816.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp1ih17816.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp1ih17816.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredom = 0\n    boredom_count = 0\n    boredom_words\
    \ = []\n    boredom_words.append('I')\n    boredom_words.append('.')\n    boredom_words.append('?')\n\
    \    boredom_words.append('!')\n    for word in boredom_words:\n        if word.lower()\
    \ in S.lower():\n            boredom_count += 1\n    return boredom_count\n\n\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzihn7q_9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzihn7q_9.py\", line 35,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpzihn7q_9.py\", line 28,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    count = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            count += 1\n    return count\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hello world') == 0\n    assert candidate('Is the sky blue?') == 0\n\
    \    assert candidate('I love It !') == 1\n    assert candidate('bIt') == 0\n\
    \    assert candidate('I feel good today. I will be productive. will kill It')\
    \ == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef test_check():\n\
    \    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf30877ar.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpf30877ar.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpf30877ar.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8so4pfhv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8so4pfhv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8so4pfhv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredom_words = []\n    boredom_sentences\
    \ = []\n    boredom_sentence = []\n    boredom_word = []\n    boredom_sentences.append(boredom_sentence)\n\
    \    boredom_words.append(boredom_word)\n    boredom_sentence = []\n    boredom_word\
    \ = []\n    boredom_sentences.append(boredom_sentence)\n    boredom_words.append(boredom_word)\n\
    \    boredom_sentence = []\n    boredom_word = []\n    boredom_sentences.append(boredom_sentence)\n\
    \    boredom_words.append(boredom_word)\n    boredom_sentence = []\n    boredom_word\
    \ = []\n    boredom_sentences.append(boredom_sentence)\n    boredom_words.append(boredom_word)\n\
    \    boredom_sentence = []\n    boredom_word = []\n    boredom_sentences.append(boredom_sentence)\n\
    \    boredom_words.append(boredom_word)\n    boredom_sentence = []\n    boredom_word\
    \ = []\n    boredom_sentences.append(boredom_sentence)\n    boredom_words.append(boredom_word)\n\
    \    boredom_sentence = []\n    boredom_word = []\n    boredom_sentences.append(boredom_sentence)\n\
    \    boredom_words.append(boredom_word)\n    boredom_sentence = []\n    boredom_word\
    \ = []\n    boredom_sentences.append(boredom_sentence)\n    boredom_words.append(boredom_word)\n\
    \    boredom_sentence = []\n    boredom_word = []\n    boredom_sentences.append(boredom_sentence)\n\
    \    boredom_words.append(boredom_word)\n    boredom_sentence = []\n    boredom_word\
    \ = []\n    boredom_sentences.append(boredom_sentence)\n    boredom_words.append(boredom_word)\n\
    \    boredom_sentence = []\n    boredom_word = []\n    boredom_sentences.append(boredom_sentence)\n\
    \    boredom_words.append(boredom_word)\n    boredom_sentence = []\n    boredom_word\
    \ = []\n    boredom_sentences.append(boredom_sentence)\n    boredom_words.append(boredom_word)\n\
    \    boredom_sentence = []\n    boredom_word = []\n    boredom_sentences.append(boredom_sentence)\n\
    \    boredom_words.append(boredom_word)\n    boredom_sentence = []\n    boredom_\n\
    def check(candidate):\n    assert candidate('Hello world') == 0\n    assert candidate('Is\
    \ the sky blue?') == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqnp07mg6.py\", line\
    \ 81, in <module>\n    test_check()\n  File \"/tmp/tmpqnp07mg6.py\", line 79,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpqnp07mg6.py\", line 71,\
    \ in check\n    assert candidate('Hello world') == 0\n  File \"/tmp/tmpqnp07mg6.py\"\
    , line 69, in is_bored\n    boredom_\nNameError: name 'boredom_' is not defined.\
    \ Did you mean: 'boredoms'?\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8so4pfhv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8so4pfhv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8so4pfhv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '.' else\
    \ 0\n    boredoms += 1 if S[3] == '.' else 0\n    boredoms += 1 if S[4] == '.'\
    \ else 0\n    boredoms += 1 if S[5] == '.' else 0\n    boredoms += 1 if S[6] ==\
    \ '.' else 0\n    boredoms += 1 if S[7] == '.' else 0\n    boredoms += 1 if S[8]\
    \ == '.' else 0\n    boredoms += 1 if S[9] == '.' else 0\n    boredoms += 1 if\
    \ S[10] == '.' else 0\n    boredoms += 1 if S[11] == '.' else 0\n    boredoms\
    \ += 1 if S[12] == '.' else 0\n    boredoms += 1 if S[13] == '.' else 0\n    boredoms\
    \ += 1 if S[14] == '.' else 0\n    boredoms += 1 if S[15] == '.' else 0\n    boredoms\
    \ += 1 if S[16] == '.' else 0\n    boredoms += 1 if S[17] == '.' else 0\n    boredoms\
    \ += 1 if S[18] == '.' else 0\n    boredoms += 1 if S[19] == '.' else 0\n    boredoms\
    \ += 1 if S[20] == '.' else 0\n    boredoms += 1 if S[21] == '.' else 0\n    boredoms\
    \ += 1 if S[22] == '.' else 0\n    boredoms += 1 if S[23] == '.' else 0\n    boredoms\
    \ += 1 if S[24] == '.' else 0\n    boredoms += 1 if S[25] == '.' else 0\n    boredoms\
    \ += 1 if S[26] == '.' else 0\n    boredoms += 1 if S[27] == '.' else 0\n    boredoms\
    \ += 1 if S[28] == '.' else 0\n    boredoms += 1 if S[29] == '.' else 0\n    boredoms\
    \ += 1 if S[30] == '.' else 0\n    boredoms += 1 if S[31] == '.' else 0\n    boredoms\
    \ += 1 if S[32] == '.' else 0\n    boredoms += 1 if S[33] == '.' else 0\n    boredoms\
    \ += 1 if S[34] == '.' else 0\n    boredoms += 1 if S[35] == '.' else 0\n    boredoms\
    \ += 1 if S[36] == '.' else 0\n    boredoms += 1 if S[37] == '.' else 0\n    boredoms\
    \ += 1 if S[38] == '.\ndef check(candidate):\n    assert candidate('Hello world')\
    \ == 0\n    assert candidate('Is the sky blue?') == 0\n    assert candidate('I\
    \ love It !') == 1\n    assert candidate('bIt') == 0\n    assert candidate('I\
    \ feel good today. I will be productive. will kill It') == 2\n    assert candidate('You\
    \ and I are going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpf4vd9l79.py\", line 52\n    boredoms += 1 if S[38] ==\
    \ '.\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 52)\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    \n    for word in S.split():\n     \
    \   if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n\
    \ndef check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
    \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
    \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I\
    \ will be productive. will kill It') == 2\n    assert candidate('You and I are\
    \ going for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8so4pfhv.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8so4pfhv.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp8so4pfhv.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\ndef check(candidate):\n   \
    \ assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphvgepe8z.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmphvgepe8z.py\", line 28,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmphvgepe8z.py\", line 21,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
  timestamp: 1659793102
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    boredoms += 1 if S[0] == 'I' else 0\n\
    \    boredoms += 1 if S[1] == '.' else 0\n    boredoms += 1 if S[2] == '?' else\
    \ 0\n    boredoms += 1 if S[3] == '!' else 0\n    return boredoms\n\n\ndef check(candidate):\n\
    \    assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvhqva2cu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpvhqva2cu.py\", line 30,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmpvhqva2cu.py\", line 23,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored('Hello world')\n \
    \   0\n    >>> is_bored('The sky is blue. The sun is shining. I love this weather')\n\
    \    1\n    \"\"\"\n    boredoms = 0\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\ndef check(candidate):\n \
    \   assert candidate('Hello world') == 0\n    assert candidate('Is the sky blue?')\
    \ == 0\n    assert candidate('I love It !') == 1\n    assert candidate('bIt')\
    \ == 0\n    assert candidate('I feel good today. I will be productive. will kill\
    \ It') == 2\n    assert candidate('You and I are going for a walk') == 0\n\ndef\
    \ test_check():\n    check(is_bored)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9nyd439h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9nyd439h.py\", line 29,\
    \ in test_check\n    check(is_bored)\n  File \"/tmp/tmp9nyd439h.py\", line 22,\
    \ in check\n    assert candidate('Is the sky blue?') == 0\nAssertionError\n"
  stdout: ''
