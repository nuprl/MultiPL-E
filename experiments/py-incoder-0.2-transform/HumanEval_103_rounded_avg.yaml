name: HumanEval_103_rounded_avg
language: py
prompt: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
  \ int]:\n    \"\"\"You are given two positive integers n and m, and your task is\
  \ to compute the\n    average of the integers from n through m (including n and\
  \ m). \n    Round the answer to the nearest integer and convert that to binary.\n\
  \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1, 5)\n\
  \    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n  \
  \  '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
  \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
  \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
  \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
  \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
  \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
  \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
  \    check(rounded_avg)\n\ntest_check()\n"
completions: ["    if n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n\
    \    \n    if len(binary) < len(str(n+m)):\n        binary = binary + '0' * (len(str(n+m))\
    \ - len(binary))\n    \n    return int(binary, 2)\n", "    if n > m:\n       \
    \ return -1\n    \n    binary = bin(n)[2:]\n    \n    count = 0\n    \n    for\
    \ char in binary:\n        if char == '1':\n            count += 1\n    \n   \
    \ if count == 0:\n        return -1\n    \n    rounded_binary = bin(int(round(n\
    \ / count)))[2:]\n    \n    count = 0\n    \n    for char in rounded_binary:\n\
    \        if char == '1':\n            count += 1\n    \n    if count == 0:\n \
    \       return -1\n    \n    return rounded_binary\n", "    if n < m:\n      \
    \  return -1\n    return bin(n + m - 1).replace('b', '')\n", "    \n    if n <\
    \ m:\n        return -1\n    \n    avg = n + (m - n) // 2\n    \n    binary =\
    \ bin(avg)[2:]\n    \n    if len(binary) < len(str(avg)):\n        binary = binary\
    \ + '0' * (len(str(avg)) - len(binary))\n    \n    return binary\n", "    if n\
    \ > m:\n        return -1\n    \n    binary = bin(n + (m - n) % 2)[2:]\n    \n\
    \    binary = binary.zfill(m)\n    \n    return int(binary, 2)\n", "    if n >\
    \ m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    if int(binary[0])\
    \ > int(binary[1]):\n        binary = binary[0]\n    else:\n        binary = binary[1]\n\
    \    \n    return int(binary)\n", "    \n    if n >= m:\n        return -1\n \
    \   \n    binary = bin(n)[2:]\n    \n    if len(binary) < len(str(m)):\n     \
    \   binary = binary + '0' * (len(str(m)) - len(binary))\n    \n    return int(binary,\
    \ 2)\n", "    \n    if n >= m:\n        return -1\n    \n    binary = bin(n +\
    \ m)[2:]\n    \n    if int(binary[0]) == '1':\n        binary = binary[1:]\n \
    \   \n    return int(binary)\n", "    if n >= m:\n        return -1\n    \n  \
    \  binary = bin(n)[2:]\n    binary = binary.zfill(m)\n    \n    return int(binary,\
    \ 2)\n", "    \n    if n < m:\n        return -1\n    \n    avg = n + (m // 2)\n\
    \    \n    binary = bin(avg)[2:]\n    \n    if len(binary) < len(str(avg)):\n\
    \        binary = binary + ('0' * (len(str(avg)) - len(binary)))\n    \n    return\
    \ binary\n\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if n > m:\n        return -1\n    \n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < len(str(avg)):\n        binary = binary + ('0' * (len(str(avg))\
    \ - len(binary)))\n    \n    return binary\n", "    \n    if n >= m:\n       \
    \ return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n    \n    return int(binary)\n",
  "    \n    if n > m:\n        return -1\n    \n    binary = bin(m)[2:]\n    \n \
    \   count = 0\n    \n    while len(binary) > 0:\n        \n        count += int(binary[0])\n\
    \        binary = binary[1:]\n        \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    ", "    if n >= m:\n        return -1\n    \n   \
    \ binary = bin(n+m)[2:]\n    \n    decimal = int(binary)\n    \n    if decimal\
    \ >= len(binary):\n        return -1\n    \n    return binary[:decimal]\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if n > m:\n   \
    \     return -1\n    \n    binary = bin(n + m)[2:]\n    \n    if len(binary) <\
    \ len(str(m)):\n        binary = binary + '0' * (len(str(m)) - len(binary))\n\
    \    \n    return int(binary, 2)\n", "    if n >= m:\n        return -1\n    \n\
    \    binary = bin(n)[2:]\n    \n    binary = binary.zfill(m)\n    \n    binary\
    \ = '0b' + binary\n    \n    return binary\n", "    if n < m:\n        return\
    \ -1\n    \n    avg = n + (m - n) // 2\n    \n    binary = bin(avg)[2:]\n    \n\
    \    if len(binary) < len(str(avg)):\n        binary = binary + '0' * (len(str(avg))\
    \ - len(binary))\n    \n    return binary\n", "    if n >= m:\n        return\
    \ -1\n    \n    binary = bin(n + m)[2:]\n    \n    if int(binary[0]) == 1:\n \
    \       binary = '0' + binary\n    \n    return binary\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
