name: HumanEval_145_order_by_points
language: py
prompt: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
  \    \"\"\"\n    Write a function which sorts the given list of integers\n    in\
  \ ascending order according to the sum of their digits.\n    Note: if there are\
  \ several items with similar sum of their digits,\n    order them based on their\
  \ index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1,\
  \ -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n \
  \   \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
  \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
  \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
  \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert\
  \ candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
  \    check(order_by_points)\n\ntest_check()\n"
completions: ["    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ num: sum_of_digits(num))\n    return sorted_nums\n", "    \n    return sorted(nums,\
    \ key=lambda x:sum(map(int, str(x))))\n", "    pass\n", "    sum = 0\n    points\
    \ = []\n    for num in nums:\n        sum += num\n        points.append(num)\n\
    \    points.sort(key=lambda x:sum-x)\n    return points\n", "    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x:sum_of_digits-x)\n\
    \    return sorted_nums\n", "    sums = []\n    for num in nums:\n        sums.append(sum(nums))\n\
    \    sorted_sums = sorted(sums)\n    sorted_nums = [num for sum in sums for num\
    \ in nums if sum == sum]\n    return sorted_nums\n", "    sum_of_digits = sum(nums)\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n    return sorted_nums\n",
  "    pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ num: sum_of_digits - num)\n    return sorted_nums\n", "    sums = []\n    for\
    \ num in nums:\n        sums.append(sum(nums))\n    return sorted(nums, key=lambda\
    \ x: sums.index(x))\n", "    sum_of_digits = []\n    for num in nums:\n      \
    \  sum_of_digits.append(sum(num))\n    return sorted(nums, key=lambda x: sum_of_digits.index(x))\n",
  "    pass\n", "    sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda\
    \ num: sum_of_digits - num)\n    return sorted_nums\n", "    sum_of_digits = []\n\
    \    for num in nums:\n        sum_of_digits.append(sum(num))\n    sum_of_digits.sort()\n\
    \    return [x[0] for x in sum_of_digits]\n", "    pass\n", "    sum_of_digits\
    \ = sum(nums)\n    sorted_nums = sorted(nums, key=lambda num: sum_of_digits -\
    \ num)\n    return sorted_nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums\
    \ = sorted(nums, key=lambda x:sum_of_digits-x)\n    return sorted_nums\n", " \
    \   sum_of_digits = sum(nums)\n    sorted_nums = sorted(nums, key=lambda x: sum_of_digits-x)\n\
    \    return sorted_nums\n", "    sum_of_digits = sum(nums)\n    sorted_nums =\
    \ sorted(nums, key=lambda x: sum_of_digits - x)\n    return sorted_nums\n", " \
    \   pass\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
