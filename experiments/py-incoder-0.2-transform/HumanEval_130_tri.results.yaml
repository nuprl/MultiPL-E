language: py
name: HumanEval_130_tri
results:
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [1,3]\n    if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return\
    \ [tri(n-1) + tri(n-2), tri(n-1)]\n    else:\n        return [tri(n-1) + tri(n-2),\
    \ tri(n-1) + tri(n-1)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwhbwhedj.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpwhbwhedj.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpwhbwhedj.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1,3,2]\n    elif n == 1:\n        return [3]\n    elif n == 2:\n        return\
    \ [1,3]\n    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n \
    \       tri_3 = tri(n + 1)\n        tri_1.append(tri_2)\n        tri_1.append(tri_3)\n\
    \        return tri_1\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph9i9zoax.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmph9i9zoax.py\", line 48,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmph9i9zoax.py\", line 36, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmph9i9zoax.py\", line\
    \ 30, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmph9i9zoax.py\", line 28,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmph9i9zoax.py\", line 30, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmph9i9zoax.py\", line 28, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmph9i9zoax.py\", line 30, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmph9i9zoax.py\", line 28, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmph9i9zoax.py\", line 30, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmph9i9zoax.py\", line 28, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmph9i9zoax.py\", line 30, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmph9i9zoax.py\", line 28, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmph9i9zoax.py\", line 30, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmph9i9zoax.py\"\
    , line 28, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmph9i9zoax.py\", line\
    \ 30, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmph9i9zoax.py\", line 28,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmph9i9zoax.py\", line 30, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmph9i9zoax.py\", line 28, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmph9i9zoax.py\", line 30, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmph9i9zoax.py\", line 28, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmph9i9zoax.py\", line 30, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmph9i9zoax.py\", line 28, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmph9i9zoax.py\", line 30, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmph9i9zoax.py\", line 28, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmph9i9zoax.py\", line 30, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmph9i9zoax.py\"\
    , line 28, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmph9i9zoax.py\", line\
    \ 30, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmph9i9zoax.py\", line 28,\
    \ in tri\n    tri_1 = tri(n "
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [1,3]\n    elif n == 2:\n        return [1,3]\n    elif n == 3:\n        return\
    \ [1,3,5]\n    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n\
    \        tri_3 = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmqp0jnwu.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpmqp0jnwu.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpmqp0jnwu.py\", line 34, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [1,3]\n    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n      \
    \  return [tri(n-1) + tri(n-2), tri(n-1)]\n    else:\n        return [tri(n-1)\
    \ + tri(n-2), tri(n-1) + tri(n-1)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl7g1g0jf.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpl7g1g0jf.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpl7g1g0jf.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [1,3]\n    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n     \
    \   return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfekk_6vh.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpfekk_6vh.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpfekk_6vh.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpfekk_6vh.py\", line\
    \ 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmpfekk_6vh.py\", line 26, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpfekk_6vh.py\", line 28, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpfekk_6vh.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpfekk_6vh.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpfekk_6vh.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpfekk_6vh.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpfekk_6vh.py\", line 26, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpfekk_6vh.py\", line 28, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpfekk_6vh.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpfekk_6vh.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpfekk_6vh.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpfekk_6vh.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmpfekk_6vh.py\", line 26, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpfekk_6vh.py\", line 28, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmpfekk_6vh.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpfekk_6vh.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmpfekk_6vh.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri("
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n       \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpacyf2w_5.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpacyf2w_5.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpacyf2w_5.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpacyf2w_5.py\", line\
    \ 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmpacyf2w_5.py\", line 26, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 28, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpacyf2w_5.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpacyf2w_5.py\", line 26, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 28, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpacyf2w_5.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpacyf2w_5.py\", line 26, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 28, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpacyf2w_5.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri("
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    elif n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)]\n    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuxj4ljr6.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpuxj4ljr6.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpuxj4ljr6.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpuxj4ljr6.py\", line\
    \ 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)]\n  File \"/tmp/tmpuxj4ljr6.py\", line 24, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpuxj4ljr6.py\", line 24, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpuxj4ljr6.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)]\n  File \"/tmp/tmpuxj4ljr6.py\", line 24, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpuxj4ljr6.py\", line\
    \ 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)]\n  File \"/tmp/tmpuxj4ljr6.py\", line 24, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpuxj4ljr6.py\", line 26, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)]\n  File \"/tmp/tmpuxj4ljr6.py\", line 24, in tri\n    return [tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpuxj4ljr6.py\", line 26, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \  File \"/tmp/tmpuxj4ljr6.py\", line 24, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)]\n  File \"/tmp/tmpuxj4ljr6.py\", line 26, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /tmp/tmpuxj4ljr6.py\", line 24, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1)]\n  File \"/tmp/tmpuxj4ljr6.py\", line 26, in tri\n    return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpuxj4ljr6.py\"\
    , line 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"\
    /tmp/tmpuxj4ljr6.py\", line 26, in tri\n    return [tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmpuxj4ljr6.py\", line\
    \ 24, in tri"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5sf57y52.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp5sf57y52.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp5sf57y52.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp5sf57y52.py\", line\
    \ 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n \
    \ File \"/tmp/tmp5sf57y52.py\", line 26, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp5sf57y52.py\", line 28, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmp5sf57y52.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp5sf57y52.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmp5sf57y52.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp5sf57y52.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmp5sf57y52.py\", line 26, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp5sf57y52.py\", line 28, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmp5sf57y52.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp5sf57y52.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmp5sf57y52.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp5sf57y52.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File\
    \ \"/tmp/tmp5sf57y52.py\", line 26, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp5sf57y52.py\", line 28, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n + 1)\n  File \"/tmp/tmp5sf57y52.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp5sf57y52.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n + 1)\n  File \"/tmp/tmp5sf57y52.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri("
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n       \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpacyf2w_5.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpacyf2w_5.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpacyf2w_5.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpacyf2w_5.py\", line\
    \ 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmpacyf2w_5.py\", line 26, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 28, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpacyf2w_5.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpacyf2w_5.py\", line 26, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 28, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpacyf2w_5.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpacyf2w_5.py\", line 26, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 28, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpacyf2w_5.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpacyf2w_5.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri("
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [0, 0, 0]\n    if n == 1:\n        return [3]\n    if n == 2:\n        return\
    \ [3, 3]\n    if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n    else:\n        return [tri(n\
    \ - 1) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3)]\n\ndef check(candidate):\n    assert candidate(3) == [1,\
    \ 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmspb28r7.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpmspb28r7.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpmspb28r7.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpmspb28r7.py\", line\
    \ 30, in tri\n    return [tri(n - 1) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 2) + tri(n + 1) + tri(n - 3)]\n  File \"/tmp/tmpmspb28r7.py\"\
    , line 28, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmpmspb28r7.py\", line 30, in tri\n\
    \    return [tri(n - 1) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3)]\n  File \"/tmp/tmpmspb28r7.py\", line 28, in\
    \ tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n +\
    \ 1) + tri(n - 2)]\n  File \"/tmp/tmpmspb28r7.py\", line 30, in tri\n    return\
    \ [tri(n - 1) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 2) +\
    \ tri(n + 1) + tri(n - 3)]\n  File \"/tmp/tmpmspb28r7.py\", line 28, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n\
    \ - 2)]\n  File \"/tmp/tmpmspb28r7.py\", line 30, in tri\n    return [tri(n -\
    \ 1) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 2) + tri(n +\
    \ 1) + tri(n - 3)]\n  File \"/tmp/tmpmspb28r7.py\", line 28, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n\
    \  File \"/tmp/tmpmspb28r7.py\", line 30, in tri\n    return [tri(n - 1) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3)]\n  File \"/tmp/tmpmspb28r7.py\", line 28, in tri\n    return [tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n  File\
    \ \"/tmp/tmpmspb28r7.py\", line 30, in tri\n    return [tri(n - 1) + tri(n + 1),\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 2) + tri(n + 1) + tri(n - 3)]\n\
    \  File \"/tmp/tmpmspb28r7.py\", line 28, in tri\n    return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n  File \"/tmp/tmpmspb28r7.py\"\
    , l"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [0]\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [3,\
    \ 3]\n    if n % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else:\n        return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n\
    \ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4)\
    \ == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert\
    \ candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n\
    \    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
    \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp28qaum1i.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp28qaum1i.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp28qaum1i.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp28qaum1i.py\", line\
    \ 30, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmp28qaum1i.py\", line 28, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp28qaum1i.py\", line 30, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp28qaum1i.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp28qaum1i.py\", line 30, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp28qaum1i.py\", line 28, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp28qaum1i.py\", line 30,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmp28qaum1i.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp28qaum1i.py\", line 30, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp28qaum1i.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp28qaum1i.py\", line 30, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp28qaum1i.py\", line 28, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp28qaum1i.py\", line 30,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmp28qaum1i.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp28qaum1i.py\", line 30, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmp28qaum1i.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp28qaum1i.py\", line 30, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmp28qaum1i.py\", line 28, in tri\n    return\
    \ tri(n - 1) + tri("
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [1,3]\n    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n      \
    \  return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy91x_4e2.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpy91x_4e2.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpy91x_4e2.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpy91x_4e2.py\", line\
    \ 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  File \"/tmp/tmpy91x_4e2.py\", line 26, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpy91x_4e2.py\", line 28, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \ File \"/tmp/tmpy91x_4e2.py\", line 26, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpy91x_4e2.py\", line 28, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpy91x_4e2.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpy91x_4e2.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpy91x_4e2.py\", line 26, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpy91x_4e2.py\"\
    , line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpy91x_4e2.py\", line 26, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpy91x_4e2.py\", line 28, in\
    \ tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n  File \"/tmp/tmpy91x_4e2.py\", line 26, in tri\n    return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpy91x_4e2.py\", line 28, in tri\n \
    \   return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File\
    \ \"/tmp/tmpy91x_4e2.py\", line 26, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpy91x_4e2.py\", line 28, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpy91x_4e2.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpy91x_4e2.py\", line 28, in tri\n    return tri(n - 1) + tri(n -"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1,3,2]\n    elif n == 1:\n        return [3]\n    else:\n        tri_1 = tri(n-1)\n\
    \        tri_2 = tri(n-2)\n        tri_3 = tri(n+2)\n        return tri_1 + tri_2\
    \ + tri_3\n\ndef check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n\
    \    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3,\
    \ 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert\
    \ candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3,\
    \ 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24,\
    \ 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48,\
    \ 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n    assert\
    \ candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps3gfwzqk.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmps3gfwzqk.py\", line 44,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmps3gfwzqk.py\", line 32, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmps3gfwzqk.py\", line\
    \ 26, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmps3gfwzqk.py\", line 28, in\
    \ tri\n    tri_3 = tri(n+2)\n  File \"/tmp/tmps3gfwzqk.py\", line 26, in tri\n\
    \    tri_1 = tri(n-1)\n  File \"/tmp/tmps3gfwzqk.py\", line 26, in tri\n    tri_1\
    \ = tri(n-1)\n  File \"/tmp/tmps3gfwzqk.py\", line 28, in tri\n    tri_3 = tri(n+2)\n\
    \  File \"/tmp/tmps3gfwzqk.py\", line 26, in tri\n    tri_1 = tri(n-1)\n  File\
    \ \"/tmp/tmps3gfwzqk.py\", line 26, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmps3gfwzqk.py\"\
    , line 28, in tri\n    tri_3 = tri(n+2)\n  File \"/tmp/tmps3gfwzqk.py\", line\
    \ 26, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmps3gfwzqk.py\", line 26, in\
    \ tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmps3gfwzqk.py\", line 28, in tri\n\
    \    tri_3 = tri(n+2)\n  File \"/tmp/tmps3gfwzqk.py\", line 26, in tri\n    tri_1\
    \ = tri(n-1)\n  File \"/tmp/tmps3gfwzqk.py\", line 26, in tri\n    tri_1 = tri(n-1)\n\
    \  File \"/tmp/tmps3gfwzqk.py\", line 28, in tri\n    tri_3 = tri(n+2)\n  File\
    \ \"/tmp/tmps3gfwzqk.py\", line 26, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmps3gfwzqk.py\"\
    , line 26, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmps3gfwzqk.py\", line\
    \ 28, in tri\n    tri_3 = tri(n+2)\n  File \"/tmp/tmps3gfwzqk.py\", line 26, in\
    \ tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmps3gfwzqk.py\", line 26, in tri\n\
    \    tri_1 = tri(n-1)\n  File \"/tmp/tmps3gfwzqk.py\", line 28, in tri\n    tri_3\
    \ = tri(n+2)\n  File \"/tmp/tmps3gfwzqk.py\", line 26, in tri\n    tri_1 = tri(n-1)\n\
    \  File \"/tmp/tmps3gfwzqk.py\", line 26, in tri\n    tri_1 = tri(n-1)\n  File\
    \ \"/tmp/tmps3gfwzqk.py\", line 28, in tri\n    tri_3 = tri(n+2)\n  File \"/tmp/tmps3gfwzqk.py\"\
    , line 26, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmps3gfwzqk.py\", line\
    \ 26, in tri\n    tri_1 = tri(n-1)\n  File \"/tmp/tmps3gfwzqk.py\", line 28, in\
    \ tri\n    tri_3 = tri(n+2)\n  File \"/tmp/tmps3gfwzqk.py\", line 26, in tri\n\
    \ "
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n\
    \    else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)]\n\ndef check(candidate):\n    assert candidate(3) ==\
    \ [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplkb42etb.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmplkb42etb.py\", line 41,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmplkb42etb.py\", line 29, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmplkb42etb.py\", line\
    \ 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)]\n  File \"/tmp/tmplkb42etb.py\", line 24, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmplkb42etb.py\", line\
    \ 24, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmplkb42etb.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmplkb42etb.py\", line 24, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmplkb42etb.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmplkb42etb.py\", line 24, in tri\n\
    \    return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n  File \"/tmp/tmplkb42etb.py\"\
    , line 26, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n +"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [1,3,2]\n    elif n == 1:\n        return [1,3]\n    elif n == 2:\n        return\
    \ [1,3,2]\n    else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n\
    \        tri_3 = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1_seace2.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmp1_seace2.py\", line 46,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp1_seace2.py\", line 34, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp1_seace2.py\", line\
    \ 30, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1_seace2.py\", line 28,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1_seace2.py\", line 30, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1_seace2.py\", line 28, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1_seace2.py\", line 30, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp1_seace2.py\", line 28, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp1_seace2.py\", line 30, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp1_seace2.py\", line 28, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp1_seace2.py\", line 30, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp1_seace2.py\", line 28, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp1_seace2.py\", line 30, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1_seace2.py\"\
    , line 28, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1_seace2.py\", line\
    \ 30, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1_seace2.py\", line 28,\
    \ in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1_seace2.py\", line 30, in\
    \ tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1_seace2.py\", line 28, in tri\n\
    \    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1_seace2.py\", line 30, in tri\n   \
    \ tri_3 = tri(n + 1)\n  File \"/tmp/tmp1_seace2.py\", line 28, in tri\n    tri_1\
    \ = tri(n - 1)\n  File \"/tmp/tmp1_seace2.py\", line 30, in tri\n    tri_3 = tri(n\
    \ + 1)\n  File \"/tmp/tmp1_seace2.py\", line 28, in tri\n    tri_1 = tri(n - 1)\n\
    \  File \"/tmp/tmp1_seace2.py\", line 30, in tri\n    tri_3 = tri(n + 1)\n  File\
    \ \"/tmp/tmp1_seace2.py\", line 28, in tri\n    tri_1 = tri(n - 1)\n  File \"\
    /tmp/tmp1_seace2.py\", line 30, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1_seace2.py\"\
    , line 28, in tri\n    tri_1 = tri(n - 1)\n  File \"/tmp/tmp1_seace2.py\", line\
    \ 30, in tri\n    tri_3 = tri(n + 1)\n  File \"/tmp/tmp1_seace2.py\", line 28,\
    \ in tri\n    tri_1 = tri(n "
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [1,3]\n    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n      \
    \  return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n\ndef check(candidate):\n    assert\
    \ candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n \
    \   assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1,\
    \ 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n\
    \    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxp7ln8is.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpxp7ln8is.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpxp7ln8is.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpxp7ln8is.py\", line\
    \ 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n \
    \ File \"/tmp/tmpxp7ln8is.py\", line 26, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmpxp7ln8is.py\", line 28, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpxp7ln8is.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpxp7ln8is.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpxp7ln8is.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpxp7ln8is.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpxp7ln8is.py\", line 26, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpxp7ln8is.py\", line 28, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpxp7ln8is.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpxp7ln8is.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpxp7ln8is.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmpxp7ln8is.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File\
    \ \"/tmp/tmpxp7ln8is.py\", line 26, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmpxp7ln8is.py\", line 28, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n  File \"/tmp/tmpxp7ln8is.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmpxp7ln8is.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n + 1)\n  File \"/tmp/tmpxp7ln8is.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri("
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return\
    \ [0, 0, 0]\n    if n == 1:\n        return [3]\n    if n == 2:\n        return\
    \ [1, 3]\n    if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1), tri(n - 1) + tri(n - 2), tri(n)]\n    else:\n        return [tri(n - 1)\
    \ + tri(n - 2), tri(n - 1), tri(n)]\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz1z0axk6.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpz1z0axk6.py\", line 45,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmpz1z0axk6.py\", line 33, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmpz1z0axk6.py\", line\
    \ 30, in tri\n    return [tri(n - 1) + tri(n - 2), tri(n - 1), tri(n)]\n  File\
    \ \"/tmp/tmpz1z0axk6.py\", line 30, in tri\n    return [tri(n - 1) + tri(n - 2),\
    \ tri(n - 1), tri(n)]\n  File \"/tmp/tmpz1z0axk6.py\", line 30, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1), tri(n)]\n  [Previous line repeated 993\
    \ more times]\n  File \"/tmp/tmpz1z0axk6.py\", line 21, in tri\n    if n == 0:\n\
    RecursionError: maximum recursion depth exceeded in comparison\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [1,3,2]\n    if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ne0lldx.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp6ne0lldx.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp6ne0lldx.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp6ne0lldx.py\", line\
    \ 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \ File \"/tmp/tmp6ne0lldx.py\", line 26, in tri\n    return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n  File \"/tmp/tmp6ne0lldx.py\", line 28, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp6ne0lldx.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp6ne0lldx.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp6ne0lldx.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp6ne0lldx.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp6ne0lldx.py\", line 26, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp6ne0lldx.py\", line 28, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp6ne0lldx.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp6ne0lldx.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp6ne0lldx.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp6ne0lldx.py\", line 28,\
    \ in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File\
    \ \"/tmp/tmp6ne0lldx.py\", line 26, in tri\n    return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n  File \"/tmp/tmp6ne0lldx.py\", line 28, in tri\n    return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n  File \"/tmp/tmp6ne0lldx.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"\
    /tmp/tmp6ne0lldx.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n  File \"/tmp/tmp6ne0lldx.py\", line 26, in tri\n    return\
    \ tri(n - 1) + tri("
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n    else:\n        return [tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n\ndef check(candidate):\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2,\
    \ 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n    assert candidate(6)\
    \ == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4,\
    \ 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2,\
    \ 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert\
    \ candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
    \    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp81x_nvts.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp81x_nvts.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp81x_nvts.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp81x_nvts.py\", line\
    \ 28, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x_nvts.py\", line 26, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp81x_nvts.py\", line\
    \ 28, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x_nvts.py\", line 26, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp81x_nvts.py\", line\
    \ 28, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x_nvts.py\", line 26, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp81x_nvts.py\", line\
    \ 28, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x_nvts.py\", line 26, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp81x_nvts.py\", line\
    \ 28, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x_nvts.py\", line 26, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp81x_nvts.py\", line\
    \ 28, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x_nvts.py\", line 26, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp81x_nvts.py\", line\
    \ 28, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x_nvts.py\", line 26, in tri\n    return\
    \ [tri(n - 1) + tri(n - 2) + tri(n - 1)]\n  File \"/tmp/tmp81x_nvts.py\", line\
    \ 28, in tri\n    return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)]\n  File \"/tmp/tmp81x_nvts.py\", line 26, in tri"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
    \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
    \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
    \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
    \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4)\
    \ = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n  \
    \  You are given a non-negative integer number n, you have to a return a list\
    \ of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
    \    >>> tri(3)\n    [1, 3, 2, 8]\n    \"\"\"\n    if n == 1:\n        return\
    \ [3]\n    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n       \
    \ return tri(n - 1) + tri(n - 2) + tri(n - 1)\n    else:\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n\ndef check(candidate):\n    assert candidate(3)\
    \ == [1, 3, 2, 8]\n    assert candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5)\
    \ == [1, 3, 2, 8, 3, 15]\n    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n\
    \    assert candidate(7) == [1, 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8)\
    \ == [1, 3, 2, 8, 3, 15, 4, 24, 5]\n    assert candidate(9) == [1, 3, 2, 8, 3,\
    \ 15, 4, 24, 5, 35]\n    assert candidate(20) == [1, 3, 2, 8, 3, 15, 4, 24, 5,\
    \ 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n    assert candidate(0) == [1]\n\
    \    assert candidate(1) == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ppgsmk4.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp2ppgsmk4.py\", line 43,\
    \ in test_check\n    check(tri)\n  File \"/tmp/tmp2ppgsmk4.py\", line 31, in check\n\
    \    assert candidate(3) == [1, 3, 2, 8]\n  File \"/tmp/tmp2ppgsmk4.py\", line\
    \ 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2ppgsmk4.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1)\n  File \"\
    /tmp/tmp2ppgsmk4.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  File \"/tmp/tmp2ppgsmk4.py\", line 26, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1)\n  File \"/tmp/tmp2ppgsmk4.py\", line 28, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2ppgsmk4.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1)\n  File \"\
    /tmp/tmp2ppgsmk4.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  File \"/tmp/tmp2ppgsmk4.py\", line 26, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1)\n  File \"/tmp/tmp2ppgsmk4.py\", line 28, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2ppgsmk4.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1)\n  File \"\
    /tmp/tmp2ppgsmk4.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  File \"/tmp/tmp2ppgsmk4.py\", line 26, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1)\n  File \"/tmp/tmp2ppgsmk4.py\", line 28, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2ppgsmk4.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1)\n  File \"\
    /tmp/tmp2ppgsmk4.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  File \"/tmp/tmp2ppgsmk4.py\", line 26, in tri\n    return tri(n - 1)\
    \ + tri(n - 2) + tri(n - 1)\n  File \"/tmp/tmp2ppgsmk4.py\", line 28, in tri\n\
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n  File \"/tmp/tmp2ppgsmk4.py\"\
    , line 26, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n - 1)\n  File \"\
    /tmp/tmp2ppgsmk4.py\", line 28, in tri\n    return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n  F"
  stdout: ''
