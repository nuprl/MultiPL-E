name: HumanEval_66_digitSum
language: py
prompt: "def digitSum(s: str) -> int:\n    \"\"\"Task\n    Write a function that takes\
  \ a string as input and returns the sum of the upper characters only'\n    ASCII\
  \ codes.\n\n    Examples:\n    >>> digitSum('')\n    0\n    >>> digitSum('abAB')\n\
  \    131\n    >>> digitSum('abcCd')\n    67\n    >>> digitSum('helloE')\n    69\n\
  \    >>> digitSum('woArBld')\n    131\n    >>> digitSum('aAaaaXa')\n    153\n  \
  \  \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abAB')\
  \ == 131\n    assert candidate('abcCd') == 67\n    assert candidate('helloE') ==\
  \ 69\n    assert candidate('woArBld') == 131\n    assert candidate('aAaaaXa') ==\
  \ 153\n    assert candidate(' How are yOu?') == 151\n    assert candidate('You arE\
  \ Very Smart') == 327\n\ndef test_check():\n    check(digitSum)\n\ntest_check()\n"
completions: ["    sum = 0\n    for c in s:\n        if c.isupper():\n           \
    \ sum += ord(c)\n    return sum\n\n", "    return sum(int(c) for c in s if c.isupper())\n\
    \n", "    return sum(int(c) for c in s if c.isupper())\n\n", "    sum = 0\n  \
    \  for char in s:\n        sum += ord(char)\n    return sum\n\n", "    return\
    \ sum(int(c) for c in s if c.isupper())\n\n", "    sum = 0\n    for c in s:\n\
    \        if c.isupper():\n            sum += ord(c)\n    return sum\n\n", "  \
    \  sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n\
    \    return sum\n\n", "    sum = 0\n    for char in s:\n        if char.isupper():\n\
    \            sum += ord(char)\n    return sum\n\n", "    return sum(ord(c) - ord('A')\
    \ for c in s)\n\n", "    sum = 0\n    for c in s:\n        if c.isupper():\n \
    \           sum += ord(c)\n    return sum\n\n", "    sum = 0\n    for c in s:\n\
    \        if c.isupper():\n            sum += ord(c)\n    return sum\n\n", "  \
    \  sum = 0\n    for c in s:\n        if c.isupper():\n            sum += ord(c)\n\
    \    return sum\n\n", "    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c)\n    return sum\n\n", "    sum = 0\n    for char in\
    \ s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n\
    \n", "    sum = 0\n    for c in s:\n        if c.isupper():\n            sum +=\
    \ ord(c)\n    return sum\n\n", "    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c)\n    return sum\n\n", "    sum = 0\n    for c in s:\n\
    \        if c.isupper():\n            sum += ord(c)\n    return sum\n\n", "  \
    \  return sum(map(ord, s))\n\n", "    sum = 0\n    for c in s:\n        if c.isupper():\n\
    \            sum += ord(c)\n    return sum\n\n", "    sum = 0\n    for char in\
    \ s:\n        if char.isupper():\n            sum += ord(char)\n    return sum\n\
    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
