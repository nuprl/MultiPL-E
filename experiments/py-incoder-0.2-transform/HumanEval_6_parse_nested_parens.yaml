name: HumanEval_6_parse_nested_parens
language: py
prompt: "from typing import List\n\ndef parse_nested_parens(paren_string: str) ->\
  \ List[int]:\n    \"\"\" Input to this function is a string represented multiple\
  \ groups for nested parentheses separated by spaces.\n    For each of the group,\
  \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
  \ two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()())\
  \ ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
  \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
  \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
  \ntest_check()\n"
completions: ["    paren_stack = []\n    paren_level = 0\n    paren_levels = []\n\
    \    paren_levels_len = []\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n    paren_levels_len.append(0)\n\
    \    paren_levels_len.append(0)\n", "    paren_stack = []\n    level = 0\n   \
    \ paren_level = 0\n    paren_level_stack = []\n    for c in paren_string:\n  \
    \      if c == '(':\n            paren_stack.append(c)\n            paren_level_stack.append(level)\n\
    \            level += 1\n        elif c == ')':\n            level = paren_level_stack.pop()\n\
    \            paren_stack.pop()\n            paren_level += 1\n        elif c ==\
    \ ' ':\n            if paren_stack:\n                paren_level += 1\n      \
    \      else:\n                level += 1\n    return paren_level\n\n", "    paren_level\
    \ = 0\n    paren_levels = []\n    paren_levels_stack = []\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren_level)\n\
    \    paren_levels_stack.append(paren_level)\n    paren_levels_stack.append(paren",
  "    paren_stack = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_stack\
    \ = []\n\n    for char in paren_string:\n        if char == '(':\n           \
    \ paren_stack.append(paren_level)\n            paren_level += 1\n            paren_levels.append(paren_level)\n\
    \            paren_levels_stack.append(paren_level)\n        elif char == ')':\n\
    \            paren_level -= 1\n            paren_levels_stack.pop()\n        \
    \    paren_level = paren_levels_stack[-1]\n        elif char == ' ':\n       \
    \     paren_level -= 1\n            paren_levels_stack.pop()\n            paren_level\
    \ = paren_levels_stack[-1]\n        else:\n            paren_level -= 1\n    \
    \        paren_levels_stack.pop()\n            paren_level = paren_levels_stack[-1]\n\
    \n    return paren_levels\n", "    paren_stack = []\n    paren_level = 0\n   \
    \ paren_level_stack = []\n    for char in paren_string:\n        if char == '(':\n\
    \            paren_stack.append(paren_level)\n            paren_level_stack.append(paren_level)\n\
    \            paren_level += 1\n        elif char == ')':\n            paren_level\
    \ -= 1\n            if paren_level == 0:\n                paren_level_stack.pop()\n\
    \                paren_level = paren_level_stack[-1]\n            else:\n    \
    \            paren_level_stack.append(paren_level)\n        elif char == ' ':\n\
    \            paren_level_stack.pop()\n            paren_level = paren_level_stack[-1]\n\
    \    return paren_stack\n", "    paren_stack = []\n    paren_level = 0\n    paren_nesting\
    \ = 0\n    for c in paren_string:\n        if c == '(':\n            paren_stack.append(paren_nesting)\n\
    \            paren_nesting += 1\n        elif c == ')':\n            paren_nesting\
    \ -= 1\n            paren_stack.pop()\n        elif c == ' ':\n            if\
    \ paren_nesting == 0:\n                paren_level -= 1\n            else:\n \
    \               paren_level += 1\n    return paren_stack\n", "    stack = []\n\
    \    level = 0\n    for c in paren_string:\n        if c == '(':\n           \
    \ stack.append(level)\n        elif c == ')':\n            level = stack.pop()\n\
    \        else:\n            level += 1\n    return level\n\n", "    stack = []\n\
    \    level = 0\n    paren_level = 0\n    paren_char = None\n    for char in paren_string:\n\
    \        if char == '(':\n            paren_level += 1\n            stack.append(paren_level)\n\
    \        elif char == ')':\n            paren_level -= 1\n            stack.pop()\n\
    \        elif char == ' ':\n            level += 1\n        elif char == '\\n':\n\
    \            level = 0\n        elif char == '\\t':\n            level += 4\n\
    \        elif char == '\\r':\n            level += 8\n        elif char == '\\\
    f':\n            level += 16\n        elif char == '\\v':\n            level +=\
    \ 32\n        elif char == '\\0':\n            level += 64\n        else:\n  \
    \          level += 128\n        paren_char = char\n    return stack\n", "   \
    \ paren_stack = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels.append(paren_level)\n\
    \    paren_stack.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)\n \
    \   paren_levels.append(paren_level)\n    paren_levels.append(paren_level)", " \
    \   paren_stack = []\n    level = 0\n    paren_level = 0\n    paren_nesting =\
    \ 0\n    paren_nesting_level = 0\n    paren_nesting_nesting = 0\n    paren_nesting_nesting_level\
    \ = 0\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(char)\n\
    \            paren_level += 1\n            paren_nesting += 1\n            paren_nesting_level\
    \ += 1\n            paren_nesting_nesting += 1\n        elif char == ')':\n  \
    \          paren_nesting_nesting -= 1\n            if paren_nesting_nesting ==\
    \ 0:\n                paren_nesting_level += 1\n                paren_nesting_nesting\
    \ += 1\n                paren_nesting_nesting_level += 1\n                paren_nesting_nesting\
    \ += 1\n            paren_nesting -= 1\n            paren_stack.pop()\n      \
    \      level += 1\n        elif char == ' ':\n            level += 1\n       \
    \ else:\n            paren_nesting_nesting -= 1\n            if paren_nesting_nesting\
    \ == 0:\n                paren_nesting_level += 1\n                paren_nesting_nesting\
    \ += 1\n                paren_nesting_nesting_level += 1\n                paren_nesting_nesting\
    \ += 1\n            paren_nesting -= 1\n            paren_stack.pop()\n      \
    \      level += 1\n    return level\n", "    paren_level = 0\n    paren_stack\
    \ = []\n    paren_levels = []\n    for c in paren_string:\n        if c == '(':\n\
    \            paren_stack.append(paren_level)\n            paren_level += 1\n \
    \       elif c == ')':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \        elif c == '[':\n            paren_stack.append(paren_level)\n       \
    \ elif c == ']':\n            paren_level -= 1\n            paren_levels.append(paren_level)\n\
    \        elif c == ' ':\n            if paren_stack:\n                paren_levels.append(paren_stack[-1])\n\
    \            paren_stack = []\n        else:\n            paren_stack.append(paren_level)\n\
    \            paren_level = 0\n    return paren_levels\n", "    paren_level = 0\n\
    \    paren_stack = []\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_stack.append(0)\n    paren_stack.append(0)\n    paren_stack.append(0)\n\
    \    paren_", "    paren_stack = []\n    paren_level = 0\n    paren_levels = []\n\
    \    for char in paren_string:\n        if char == '(':\n            paren_stack.append(paren_level)\n\
    \            paren_level += 1\n        elif char == ')':\n            paren_level\
    \ -= 1\n            paren_levels.append(paren_level)\n        elif char == ' ':\n\
    \            paren_levels.append(paren_level)\n    return paren_levels\n", " \
    \   paren_stack = []\n    paren_level = 0\n    paren_levels = []\n    paren_levels_str\
    \ = ''\n    for char in paren_string:\n        if char == '(':\n            paren_stack.append(paren_level)\n\
    \            paren_level += 1\n        elif char == ')':\n            paren_level\
    \ -= 1\n            paren_levels.append(paren_level)\n            paren_levels_str\
    \ += str(paren_level)\n        elif char == ' ':\n            if paren_stack:\n\
    \                paren_levels_str += str(paren_stack[-1])\n                paren_stack.pop()\n\
    \            else:\n                paren_levels_str += ' '\n        else:\n \
    \           paren_levels_str += char\n    return paren_levels\n", "    paren_stack\
    \ = []\n    level = 0\n    paren_level = 0\n    paren_nesting = 0\n    paren_levels\
    \ = []\n    for c in paren_string:\n        if c == '(':\n            paren_stack.append(c)\n\
    \            paren_level += 1\n            paren_nesting += 1\n        elif c\
    \ == ')':\n            paren_stack.pop()\n            paren_level -= 1\n     \
    \       paren_nesting -= 1\n        elif c == '[':\n            paren_stack.append(c)\n\
    \            paren_levels.append(paren_level)\n        elif c == ']':\n      \
    \      paren_levels.pop()\n            paren_level -= 1\n            paren_nesting\
    \ -= 1\n        elif c == ' ':\n            if paren_stack:\n                paren_levels.append(paren_level)\n\
    \            else:\n                paren_levels.append(0)\n            paren_nesting\
    \ += 1\n        elif c == '\\n':\n            paren_level = 0\n            paren_nesting\
    \ = 0\n    return paren_levels\n", "    level = 0\n    paren_stack = []\n    for\
    \ c in paren_string:\n        if c == '(':\n            level += 1\n         \
    \   paren_stack.append(level)\n        elif c == ')':\n            level -= 1\n\
    \            paren_stack.pop()\n        else:\n            paren_stack.append(level)\n\
    \    return paren_stack\n", "    paren_stack = []\n    level = 0\n    paren_level\
    \ = 0\n    paren_nesting = 0\n    paren_levels = []\n    paren_nesting_levels\
    \ = []\n    paren_level_stack = []\n    paren_nesting_level_stack = []\n    paren_level_stack.append(level)\n\
    \    paren_nesting_level_stack.append(paren_nesting)\n    for char in paren_string:\n\
    \        if char == '(':\n            paren_stack.append(char)\n            paren_level\
    \ += 1\n            paren_nesting += 1\n            paren_levels.append(paren_level)\n\
    \            paren_nesting_levels.append(paren_nesting)\n            paren_level_stack.append(level)\n\
    \            paren_nesting_level_stack.append(paren_nesting)\n        elif char\
    \ == ')':\n            paren_nesting -= 1\n            paren_level -= 1\n    \
    \        paren_level_stack.pop()\n            paren_nesting_level_stack.pop()\n\
    \            paren_levels.append(paren_level)\n            paren_nesting_levels.append(paren_nesting)\n\
    \        elif char == ' ':\n            level += 1\n            paren_levels.append(level)\n\
    \            paren_nesting_levels.append(paren_nesting)\n        elif char ==\
    \ '\\n':\n            level = 0\n            paren_levels.append(level)\n    \
    \        paren_nesting_levels.append(paren_nesting)\n    return paren_levels\n",
  "    stack = []\n    level = 0\n    for c in paren_string:\n        if c == '(':\n\
    \            stack.append(level)\n        elif c == ')':\n            level =\
    \ stack.pop()\n        else:\n            level += 1\n    return level\n", " \
    \   stack = []\n    level = 0\n    for c in paren_string:\n        if c == '(':\n\
    \            stack.append(level)\n        elif c == ')':\n            level =\
    \ stack.pop()\n        else:\n            level += 1\n    return level\n", " \
    \   stack = []\n    level = 0\n    paren_level = 0\n    for c in paren_string:\n\
    \        if c == '(':\n            paren_level += 1\n            stack.append(c)\n\
    \        elif c == ')':\n            paren_level -= 1\n            stack.pop()\n\
    \            if paren_level == 0:\n                level -= 1\n              \
    \  stack.pop()\n        else:\n            stack.append(c)\n            level\
    \ += 1\n    return level\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
