name: HumanEval_130_tri
language: py
prompt: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
  \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
  \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
  \    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n)\
  \ = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1),\
  \ if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n\
  \    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are\
  \ given a non-negative integer number n, you have to a return a list of the \n \
  \   first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    >>> tri(3)\n\
  \    [1, 3, 2, 8]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3) == [1, 3, 2, 8]\n    assert\
  \ candidate(4) == [1, 3, 2, 8, 3]\n    assert candidate(5) == [1, 3, 2, 8, 3, 15]\n\
  \    assert candidate(6) == [1, 3, 2, 8, 3, 15, 4]\n    assert candidate(7) == [1,\
  \ 3, 2, 8, 3, 15, 4, 24]\n    assert candidate(8) == [1, 3, 2, 8, 3, 15, 4, 24,\
  \ 5]\n    assert candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35]\n    assert candidate(20)\
  \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11]\n\
  \    assert candidate(0) == [1]\n    assert candidate(1) == [1, 3]\n\ndef test_check():\n\
  \    check(tri)\n\ntest_check()\n"
completions: ["    if n == 1:\n        return [1,3]\n    if n == 2:\n        return\
    \ [1,3]\n    if n % 2 == 0:\n        return [tri(n-1) + tri(n-2), tri(n-1)]\n\
    \    else:\n        return [tri(n-1) + tri(n-2), tri(n-1) + tri(n-1)]\n", "  \
    \  if n == 0:\n        return [1,3,2]\n    elif n == 1:\n        return [3]\n\
    \    elif n == 2:\n        return [1,3]\n    else:\n        tri_1 = tri(n - 1)\n\
    \        tri_2 = tri(n - 2)\n        tri_3 = tri(n + 1)\n        tri_1.append(tri_2)\n\
    \        tri_1.append(tri_3)\n        return tri_1\n", "    if n == 1:\n     \
    \   return [1,3]\n    elif n == 2:\n        return [1,3]\n    elif n == 3:\n \
    \       return [1,3,5]\n    else:\n        tri_1 = tri(n - 1)\n        tri_2 =\
    \ tri(n - 2)\n        tri_3 = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n",
  "    if n == 1:\n        return [1,3]\n    elif n == 2:\n        return [1,3]\n\
    \    elif n % 2 == 0:\n        return [tri(n-1) + tri(n-2), tri(n-1)]\n    else:\n\
    \        return [tri(n-1) + tri(n-2), tri(n-1) + tri(n-1)]\n", "    if n == 1:\n\
    \        return [1,3]\n    elif n == 2:\n        return [1, 3]\n    elif n % 2\
    \ == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n    \
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n", "    if n ==\
    \ 1:\n        return [3]\n    elif n == 2:\n        return [1, 3]\n    elif n\
    \ % 2 == 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n", "    if\
    \ n == 1:\n        return [3]\n    elif n % 2 == 0:\n        return [tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n    else:\n        return [tri(n - 1) + tri(n -\
    \ 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)]\n", "    if n == 1:\n        return\
    \ [3]\n    if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 1) + tri(n + 1)\n", "    if n == 1:\n        return [3]\n\
    \    elif n == 2:\n        return [1, 3]\n    elif n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n - 3) + tri(n + 1)\n", "    if n == 0:\n        return [0,\
    \ 0, 0]\n    if n == 1:\n        return [3]\n    if n == 2:\n        return [3,\
    \ 3]\n    if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1),\
    \ tri(n - 1) + tri(n + 1) + tri(n - 2)]\n    else:\n        return [tri(n - 1)\
    \ + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 2) + tri(n + 1)\
    \ + tri(n - 3)]\n", "    if n == 0:\n        return [0]\n    if n == 1:\n    \
    \    return [3]\n    if n == 2:\n        return [3, 3]\n    if n % 2 == 0:\n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n", "    if n == 1:\n    \
    \    return [1,3]\n    elif n == 2:\n        return [1,3]\n    elif n % 2 == 0:\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n + 1)\n", "    if n\
    \ == 0:\n        return [1,3,2]\n    elif n == 1:\n        return [3]\n    else:\n\
    \        tri_1 = tri(n-1)\n        tri_2 = tri(n-2)\n        tri_3 = tri(n+2)\n\
    \        return tri_1 + tri_2 + tri_3\n", "    if n == 1:\n        return [3]\n\
    \    if n % 2 == 0:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1)]\n \
    \   else:\n        return [tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)]\n", "    if n == 0:\n        return [1,3,2]\n    elif\
    \ n == 1:\n        return [1,3]\n    elif n == 2:\n        return [1,3,2]\n  \
    \  else:\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1)\n        return tri_1 + tri_2 + tri_3\n", "    if n == 1:\n   \
    \     return [1,3]\n    elif n == 2:\n        return [1,3]\n    elif n % 2 ==\
    \ 0:\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n       \
    \ return tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n + 1)\n", "    if n == 0:\n\
    \        return [0, 0, 0]\n    if n == 1:\n        return [3]\n    if n == 2:\n\
    \        return [1, 3]\n    if n % 2 == 0:\n        return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n - 2), tri(n)]\n    else:\n        return\
    \ [tri(n - 1) + tri(n - 2), tri(n - 1), tri(n)]\n", "    if n == 1:\n        return\
    \ [1,3,2]\n    if n == 2:\n        return [1,3]\n    if n % 2 == 0:\n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else:\n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\n", "    if n == 1:\n        return [3]\n\
    \    if n == 2:\n        return [1, 3]\n    if n % 2 == 0:\n        return [tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1)]\n    else:\n        return [tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1), tri(n - 1) + tri(n + 1) + tri(n - 2)]\n", "    if n == 1:\n\
    \        return [3]\n    elif n == 2:\n        return [1, 3]\n    elif n % 2 ==\
    \ 0:\n        return tri(n - 1) + tri(n - 2) + tri(n - 1)\n    else:\n       \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1)\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
