name: HumanEval_49_modp
language: py
prompt: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
  \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n   \
  \ >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
  \    1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
  \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n\
  \    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert\
  \ candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
completions: ["    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) * 3\n    if p % 5\
    \ == 0:\n        return modp(n // 5, p) * 5\n    return modp(n // 2, p) * 2 +\
    \ modp(n // 3, p) * 3 + modp(n // 5, p) * 5\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 1:\n        n -= 1\n    return p % p * modp(n - 1, p)\n\n", " \
    \   if p == 2:\n        return n\n    if n < 0:\n        return modp(n - 1, p)\
    \ * p\n    if n == 0:\n        return 0\n    d, r = divmod(n, p)\n    if d:\n\
    \        return modp(d*(p-1) + r, p)\n    return r\n", "    if n == 0:\n     \
    \   return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n\n", "    if n\
    \ == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n % 2 == 1:\n        return p - (p % p)\n    return\
    \ p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p)\n    return modp(n - 1, p)\n\n", "    if n == 0:\n        return 0\n \
    \   if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 0:\n        return p - (p % p)\n    return p\n\n", "    if p == 2:\n\
    \        return n\n    if n < 0:\n        return modp(n - 1, p) - 1\n    if n\
    \ == 0:\n        return 0\n    d, r = divmod(n, p)\n    if d:\n        return\
    \ modp(d*(p-1) + r, p)\n    return r\n", "    if n == 0:\n        return 0\n \
    \   if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n        return\
    \ (((p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p)\
    \ % p) % p) % p\n    # Fall through.\n    return (((p * p * p * p * p) % p) %\
    \ p) % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return modp(n\
    \ // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if\
    \ p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n   \
    \     return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n", "    if n == 0:\n   \
    \     return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p ==\
    \ 2:\n        return n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n\
    \    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if p % 16 == 0:\n\
    \        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n        return modp(n\
    \ // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n // 64, p) + 32\n\
    \    return modp(n // 64, p) + 64\n\n", "    return ((n) % (p)) + (((n) % (p))\
    \ > 0)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if n % p ==\
    \ 0:\n        return modp(n // p, p)\n    if n % p == 1:\n        return modp(n\
    \ // p, p)\n    return modp(n // p, p)\n\n", "    return ((n) % (p)) + (((n) %\
    \ (p)) > 0)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return p -\
    \ (p // 4)\n    if p % 8 == 0:\n        return p - (p // 8)\n    if p % 16 ==\
    \ 0:\n        return p - (p // 16)\n    return p\n\n", "    if n == 0:\n     \
    \   return 0\n    if n == 1:\n        return p\n    if p < 0:\n        return\
    \ modp(n - 1, p) * (-1)\n    if p > n:\n        return modp(n - 1, p)\n    if\
    \ p % 2 == 0:\n        return modp(n // 2, p) + modp(n // 2, p - 1)\n    if p\
    \ % 3 == 0:\n        return modp(n // 3, p) + modp(n // 3, p - 1) + modp(n //\
    \ 3, p - 2)\n    return modp(n // 2, p) + modp(n // 2, p - 1)\n\n", "    if p\
    \ == 2:\n        return n\n    if n < 0:\n        return modp(n - 1, p) * p\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n\
    \ == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n // 2, p)\
    \ * p\n    if n % 2 == 1:\n        return modp(n // 2, p) * p + p\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
