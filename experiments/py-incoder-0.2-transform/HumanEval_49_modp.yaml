name: HumanEval_49_modp
language: py
prompt: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
  \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n   \
  \ >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
  \    1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
  \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n\
  \    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert\
  \ candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
completions: ["    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) * 3\n    if p % 5\
    \ == 0:\n        return modp(n // 5, p) * 5\n    return modp(n // 2, p) * 2 +\
    \ modp(n // 3, p) * 3 + modp(n // 5, p) * 5\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 1:\n        n -= 1\n    return p % p * modp(n - 1, p)\n\n", " \
    \   if p == 2:\n        return n\n    if n < 0:\n        return modp(n - 1, p)\
    \ * p\n    if n == 0:\n        return 0\n    d, r = divmod(n, p)\n    if d:\n\
    \        return modp(d*(p-1) + r, p)\n    return r\n", "    if n == 0:\n     \
    \   return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n\n", "    if n\
    \ == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n % 2 == 1:\n        return p - (p % p)\n    return\
    \ p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p)\n    return modp(n - 1, p)\n\n", "    if n == 0:\n        return 0\n \
    \   if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 0:\n        return p - (p % p)\n    return p\n\n", "    if p == 2:\n\
    \        return n\n    if n < 0:\n        return modp(n - 1, p) - 1\n    if n\
    \ == 0:\n        return 0\n    d, r = divmod(n, p)\n    if d:\n        return\
    \ modp(d*(p-1) + r, p)\n    return r\n", "    if n == 0:\n        return 0\n \
    \   if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n        return\
    \ (((p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p)\
    \ % p) % p) % p\n    # Fall through.\n    return (((p * p * p * p * p) % p) %\
    \ p) % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return modp(n\
    \ // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if\
    \ p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n   \
    \     return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n", "    if n == 0:\n   \
    \     return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p ==\
    \ 2:\n        return n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n\
    \    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if p % 16 == 0:\n\
    \        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n        return modp(n\
    \ // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n // 64, p) + 32\n\
    \    return modp(n // 64, p) + 64\n\n", "    return ((n) % (p)) + (((n) % (p))\
    \ > 0)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if n % p ==\
    \ 0:\n        return modp(n // p, p)\n    if n % p == 1:\n        return modp(n\
    \ // p, p)\n    return modp(n // p, p)\n\n", "    return ((n) % (p)) + (((n) %\
    \ (p)) > 0)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return p -\
    \ (p // 4)\n    if p % 8 == 0:\n        return p - (p // 8)\n    if p % 16 ==\
    \ 0:\n        return p - (p // 16)\n    return p\n\n", "    if n == 0:\n     \
    \   return 0\n    if n == 1:\n        return p\n    if p < 0:\n        return\
    \ modp(n - 1, p) * (-1)\n    if p > n:\n        return modp(n - 1, p)\n    if\
    \ p % 2 == 0:\n        return modp(n // 2, p) + modp(n // 2, p - 1)\n    if p\
    \ % 3 == 0:\n        return modp(n // 3, p) + modp(n // 3, p - 1) + modp(n //\
    \ 3, p - 2)\n    return modp(n // 2, p) + modp(n // 2, p - 1)\n\n", "    if p\
    \ == 2:\n        return n\n    if n < 0:\n        return modp(n - 1, p) * p\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n\
    \ == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n // 2, p)\
    \ * p\n    if n % 2 == 1:\n        return modp(n // 2, p) * p + p\n", "    return\
    \ ((n) % (p)) + (((n) % (p)) == 0)\n", "    if n == 0:\n        return 0\n   \
    \ if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n\
    \ % 2 == 1:\n        n -= 1\n    return p % p * modp(n // 2, p)\n\n", "    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n\
    \    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n\
    \        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return\
    \ (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12\
    \ or n == 0:\n        return p\n    if n == 13 or n == 14:\n        return ((p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 15:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or\
    \ n == 22:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 23:\n        return (((p * p * p * p * p * p * p *\
    \ p * p * p * p * p", "    if n == 0:\n        return 0\n    if n == 1:\n    \
    \    return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n    \
    \    n -= 1\n    return p % p * modp(n // 2, p)\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 0:\n        return p - (p // 2)\n    return p + (p // 2)\n\n",
  "    if p == 2:\n        return n\n    if n < 0:\n        return modp(n - 1, p)\
    \ * (-1)\n    if n == 0:\n        return 0\n    ans = 1\n    while n % p == 0:\n\
    \        ans = ans * p\n        n //= p\n    return ans * p\n\n", "    if p ==\
    \ 2:\n        return n\n    return n % p\n\n", "    return ((n) % (p)) + (((n)\
    \ % (p)) == 0)\n", "    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    if n % 2 == 1:\n        return modp(n - 1, p)\n    return modp((n\
    \ - 1) // 2, p) + p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if n == 2:\n        return p % p\n    if n == 3:\n    \
    \    return ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p\
    \ * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n\
    \        return ((p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 15:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 17:\n        return (((p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 18:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 19:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 20:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21:\n \
    \       return (((p * ", "    if n == 0:\n        return 0\n    if n == 1:\n \
    \       return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n \
    \       n -= 1\n    return p % p * modp(n // 2, p)\n\n", "    return ((n) % (p))\
    \ + (((n) % (p)) > 0)\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if p == 2:\n        return n\n    if p % 4 == 3:\n    \
    \    p += 2\n    return pow(2, n, p)\n\n", "    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    return ((n)\
    \ % (p)) + (((n) % (p)) > 0)\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2\
    \ == 1:\n        return p - (p % p)\n    return p\n\n", "    if n == 0:\n    \
    \    return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n    \
    \    return p\n    if n == 13 or n == 14:\n        return ((p * p * p * p * p\
    \ * p * p * p) % p) % p\n    if n == 15 or n == 16:\n        return (((p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19\
    \ or n == 20:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 21 or n == 22:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 25 or n == 26:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 27 or n == 28:\n        return (((p * p * p * p * p * ", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        return p - (p % p)\n    return p\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p <\
    \ 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n        return modp(n\
    \ - 1, p)\n    if p % 2 == 0:\n        return modp(n // 2, p) // 2\n    if p %\
    \ 3 == 0:\n        return modp(n // 3, p) // 3\n    return modp(n // 2, p) //\
    \ 2\n\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n", "    if n == 0:\n  \
    \      return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    return modp(n - 1,\
    \ p) + p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        return\
    \ p - (p % p)\n    return p - (((p // p) * p) % p)\n\n", "    if n == 0:\n   \
    \     return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return ((p\
    \ * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p) % p)\
    \ % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 17:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 21:\n        return (((p\
    \ * ", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n \
    \   if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n   \
    \ return p % p * modp(n - 1, p)\n\n", "    if n == 0:\n        return 0\n    if\
    \ n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n ==\
    \ 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n        return (((p\
    \ * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 6:\n        return (((p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 7:\n        return (((p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 8:\n        return (((p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 9:\n        return (((p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 10:\n        return (((p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if\
    \ n == 13 or n == 14:\n        return ((p * p * p * p * p * p * p * p) % p) %\
    \ p\n    if n == 15 or n == 16:\n        return (((p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 17 or n == 18:\n        return (((p * p * p *\
    \ p * p * p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 23 and p % 4 == 0:\n        return (((p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 24 and p % 8 == 0:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 25 and p % 16 == 0:\n    \
    \    return (((p * p * p * p * p * p * p * p * p) % p", "    if n == 0:\n    \
    \    return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 3:\n        return modp(n // 4, p) + 2 * modp(n // 4, p //\
    \ 4)\n    if p % 8 == 5:\n        return modp(n // 8, p) + 3 * modp(n // 8, p\
    \ // 8)\n    if p % 8 == 7:\n        return modp(n // 8, p) + 4 * modp(n // 8,\
    \ p // 8)\n    if p % 8 == 9:\n        return modp(n // 8, p) + 5 * modp(n //\
    \ 8, p // 8)\n    if p % 8 == 11:\n        return modp(n // 8, p) + 6 * modp(n\
    \ // 8, p // 8)\n    if p % 8 == 13:\n        return modp(n // 8, p) + 7 * modp(n\
    \ // 8, p // 8)\n    if p % 8 == 15:\n        return modp(n // 8, p) + 8 * modp(n\
    \ // 8, p // 8)\n    return modp(n // 8, p) + modp(n // 8, p // 8)\n\n", "   \
    \ if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return p %\
    \ n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 == 0:\n\
    \        return modp(n // 3, p) * 3\n    if n % n % 3 == 0:\n        return modp(n\
    \ // 3, p)\n    return modp(n // 2, p)\n\n", "    if n == 0:\n        return 0\n\
    \    if n < 0:\n        return modp(abs(n), p)\n    if p < 0:\n        return\
    \ modp(-n, p)\n    if p == 0:\n        return n\n    if p == n:\n        return\
    \ p\n    if p > n:\n        return modp(p - n, p)\n    if p < n:\n        return\
    \ modp(n, p)\n    return modp(n + p, p)\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n\
    \ == 0:\n        return 0\n    if n == 1:\n        return p\n    if p < 0:\n \
    \       return modp(n - 1, p) * (-1)\n    if p > MOD:\n        return modp(n -\
    \ 1, MOD)\n    if p % 2 == 0:\n        return modp(n // 2, p) * p\n    if p %\
    \ 3 == 0:\n        return modp(n // 3, p) * (p - 1)\n    if p % 5 == 0:\n    \
    \    return modp(n // 5, p) * (p - 2)\n    return modp(n // 2, p) * (p - 1)\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p) % p) %\
    \ p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n\
    \ == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12\
    \ or n == 0:\n        return p\n    if n == 13:\n        return ((p * p * p *\
    \ p * p * p * p * p) % p) % p\n    if n == 14:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p *\
    \ p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n     \
    \   return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 18:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 19:\n        return (((p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 20:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 21:\n        return (((p * p * ", "    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2,\
    \ n)\n\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n\n", "    if p == 2:\n\
    \        return n\n    if n < 0:\n        return modp(abs(n), p)\n    if n ==\
    \ 0:\n        return 0\n    d, r = divmod(n, p)\n    if r:\n        return modp(d+1,\
    \ p)\n    return d\n\n", "    return ((n % p) + p) % p\n\n", "    if p == 2:\n\
    \        return n\n    if p == n:\n        return p\n    if p % 2 == 0:\n    \
    \    return modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n\
    \    if n % 3 == 0 or n % 5 == 0:\n        return modp(n // 5, p)\n    return\
    \ modp(n % 5, p)\n\n", "    return ((n % p) + p) % p\n\n", "    return ((n) %\
    \ (p)) + (((n) % (p)) > 0)\n\n", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if p % 2 == 0:\n        return p // 2\n    k = p //\
    \ 2\n    while k ** 2 <= n:\n        k += 1\n    return k\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    return modp(n - 1,\
    \ p) + p\n\n", "    return ((n) % (p)) + (((n) % (p)) == 0)\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if p < 0:\n        return\
    \ modp(n - 1, p) * (-1)\n    if p > n:\n        return modp(n - 1, p)\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == ", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2\
    \ == 1:\n        return p - (p % p)\n    return p\n\n", "    if n == 0:\n    \
    \    return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    return modp(n - 1,\
    \ p)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n  \
    \  return p % pow(2, n)\n\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n",
  "    return ((n) % (p)) + (((n) % (p)) == 0)\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if p < 0:\n        return modp(n -\
    \ 1, p) * (-1)\n    if p > MOD:\n        return modp(n - 1, MOD)\n    if p % 2\
    \ == 0:\n        return modp(n // 2, p) * p\n    if p % 3 == 0:\n        return\
    \ modp(n // 3, p) * (p - 1)\n    if p % 5 == 0:\n        return modp(n // 5, p)\
    \ * (p - 2)\n    return modp(n // 2, p) * (p + 1)\n\n", "    if n == 0:\n    \
    \    return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        return p - (p % p)\n    return p\n\n", " \
    \   if p == 2:\n        return n\n    if p == 1 or p == -1:\n        return pow(n,\
    \ (p + 1) // 2, p)\n    if p == 0:\n        return 0\n    bits = p - 1\n    return\
    \ ((n % p) + pow(2, bits, p)) % p\n\n", "    if p == 0:\n        raise ZeroDivisionError('modp(0,\
    \ 0) raises ZeroDivisionError')\n    if n == 0:\n        return p\n    if n <\
    \ 0:\n        return modp(n - 1, p)\n    if p < 0:\n        return modp(-n, p)\n\
    \    if p == 1 or p == 2:\n        return n\n    if p == n:\n        return p\n\
    \    if n % p == 0:\n        return modp(n // p, p)\n    return modp(n % p, p)\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if n == 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p)\
    \ % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n \
    \   if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n\
    \        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n\
    \        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12\
    \ or n == 0:\n        return p\n    if n == 13:\n        return (((p * p * p *\
    \ p * p * p * p * p) % p) % p) % p\n    if n == 14:\n        return (((p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n     \
    \   return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 18:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 19:\n        return (((p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 20:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 21:\n        return (((p * ", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if p == 2:\n   \
    \     return n\n    if p % 4 == 0:\n        return p - (p // 4)\n    if p % 8\
    \ == 0:\n        return p - (p // 8)\n    if p % 16 == 0:\n        return p -\
    \ (p // 16)\n    return p\n\n", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n\
    \    if p > n:\n        return modp(n - 1, p)\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if n % 2 == 1:\n        return modp(n\
    \ // 2, p)\n    if n % 2 == 0:\n        return modp(n // 2, p) + p\n    return\
    \ modp(n // 2, p) + p\n\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n", " \
    \   if p == 2:\n        return n\n    if n < 0:\n        return modp(abs(n), p)\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n\
    \ == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n // 2, p)\n\
    \    return modp(n - 1, p)\n\n", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if n == 2:\n        return p % p\n    if n == 3:\n\
    \        return ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p\
    \ * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 6:\n        return (((p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 7:\n        return (((p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 8:\n        return (((p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 9:\n        return (((p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n\
    \ == 13 or n == 14:\n        return ((p * p * p * p * p * p * p * p) % p) % p\n\
    \    if n == 15 or n == 16:\n        return (((p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 17 or n == 18:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 19 or n == 20:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n ==\
    \ 22:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 23 and p % 4 == 0:\n        return (((p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 24 and p % 8 == 0:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 25 and p % 16\
    \ == 0:\n        return (((p * p * p * p", "    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 0:\n        return p - (p // 2)\n    return p + (p // 2)\n\n", "  \
    \  if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p %\
    \ 2 == 0:\n        return modp(n // 2, p) + p\n    if p % 3 == 0:\n        return\
    \ modp(n // 3, p) + 3 * p\n    return modp(n // 2, p) + p\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return n - (n % p)\n    if p % 2 == 0:\n    \
    \    return n - pow(2, n)\n    return n - pow(2, n + 1)\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12\
    \ or n == 0:\n        return p\n    if n == 13:\n        return ((p * p * p *\
    \ p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return (((p * p *\
    \ p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n \
    \       return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n \
    \   if n == 17:\n        return (((p * p * p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 18:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n        return (((p *\
    \ p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 20:\n\
    \        return (((p * p * p * p", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if p % 2 == 0:\n        return modp(n // 2, p)\n\
    \    return modp(n - 1, p) + p\n\n", "    return ((n) % (p)) + (((n) % (p)) ==\
    \ 0)\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n  \
    \  return p % p * modp(n // 2, p)\n\n", "    return ((n % p) + p) % p\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return ((p\
    \ * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p) % p) % p) %\
    \ p\n    if n == 5:\n        return (((p * p * p * p) % p) % p) % p\n    if n\
    \ == 6:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 12:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 13:\n        return (((p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p", "   \
    \ if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n\
    \    return p % pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if n == 2:\n        return p % p\n    if n == 3:\n\
    \        return ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p\
    \ * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 6:\n        return (((p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 7:\n        return (((p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 8:\n        return (((p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 9:\n        return (((p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 12:\n        return (((p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 13:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 14:\n  \
    \      return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 15:\n        return (((p * p * p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 16:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 18:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 19:\n        return (((p * p * p", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        return p % p\n    n -= 1\n    return p %\
    \ p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n  \
    \  return p % pow(2, n)\n\n", "    return ((n % p) + p) % p\n\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if p < 0:\n    \
    \    return modp(n - 1, p) * (-1)\n    if p > MOD:\n        return modp(n - 1,\
    \ MOD)\n    if p == MOD:\n        return n\n    if p == 3:\n        return modp(n\
    \ - 1, 5) * 3\n    if p == 5:\n        return modp(n - 1, 7) * 3\n    if p ==\
    \ 7:\n        return modp(n - 1, 9) * 3\n    if p == 9:\n        return modp(n\
    \ - 1, 11) * 3\n    if p == 11:\n        return modp(n - 1, 13) * 3\n    if p\
    \ == 13:\n        return modp(n - 1, 15) * 3\n    if p == 15:\n        return\
    \ modp(n - 1, 17) * 3\n    if p == 17:\n        return modp(n - 1, 19) * 3\n \
    \   if p == 19:\n        return modp(n - 1, 21) * 3\n    if p == 21:\n       \
    \ return modp(n - 1, 23) * 3\n    if p == 23:\n        return modp(n - 1, 25)\
    \ * 3\n    if p == 25:\n        return modp(n - 1, 27) * 3\n    if p == 27:\n\
    \        return modp(n - 1, 29) * 3\n    if p == 29:\n        return modp(n -\
    \ 1, 31) * 3\n    if p == 31:\n        return modp(n - 1, 33) * 3\n    if p ==\
    \ 33:\n        return modp(n - 1, 35) * 3\n    if p == 35:\n        return modp(n\
    \ - 1, 37) * 3\n    if p == 37:\n        return modp(n - 1, 39) * 3\n    if p\
    \ == 39:\n        return modp(n - 1, 41) * 3\n    if p == 41:\n        return\
    \ modp(n - 1, 43) * 3\n    if p == 43:\n        return modp(n - 1, 45) * 3\n \
    \   if p == 45:\n        return modp(n - 1, 47) * 3\n    if p == 47:\n       \
    \ return modp(n - 1, 49) * 3\n    if p == 49:\n        return modp(n - 1, 51)\
    \ * 3\n    if p == 51:\n        return modp(n - 1, 53) * 3\n    if p == 53:\n\
    \        return modp(n - 1, 55) * 3\n    if p == 55:\n        return modp(n -\
    \ 1, 57) * 3\n    if p == 57:\n        return modp(n - 1, 59) * 3\n    if p ==\
    \ 59:\n        return modp(n - 1, 61) * 3\n    if p == 61:\n        return modp(n\
    \ - 1, 63) * 3\n    if p == 63:\n        return modp(n - 1, 65) * 3\n    if p\
    \ == 65:\n        return modp(n - 1, 67) * 3\n    if ", "    if n == 0:\n    \
    \    return 0\n    if n == 1:\n        return p\n    if p < 0:\n        return\
    \ modp(n - 1, p) * (-1)\n    if p > n:\n        return modp(n - 1, p)\n    if\
    \ p % 2 == 0:\n        return modp(n // 2, p) // 2\n    if p % 3 == 0:\n     \
    \   return modp(n // 3, p) // 3\n    return modp(n // 2, p) // 2\n\n", "    return\
    \ ((n) % (p)) + (((n) % (p)) > 0)\n", "    if n == 0:\n        return 0\n    if\
    \ n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n %\
    \ 2 == 1:\n        return p % p\n    return p % p\n\n", "    if n == 0:\n    \
    \    return 0\n    if n == 1:\n        return p\n    if p < 1:\n        raise\
    \ ValueError(f\"p must be >= 1, got {p}\")\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    q = p // 2\n    r = modp(n // 2, p)\n    if n % 2 == 1:\n\
    \        return (r + q) % p\n    else:\n        return (r - q) % p\n\n", "   \
    \ if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p) % p) %\
    \ p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n\
    \ == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    # From here on\
    \ we assume n>=6\n    s = p % n\n    p1 = (p - s) // n\n    p2 = (p - p1) // n\n\
    \    p3 = (p - p2) // n\n    return p1 * p2 * p3 % p\n\n", "    if n == 0:\n \
    \       return 0\n    if n == 1:\n        return p\n    if p < 1:\n        raise\
    \ ValueError(f\"p must be >= 1, got {p}\")\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if\
    \ n % p == 0:\n        return modp(n // p, p)\n    if n % p == 1:\n        return\
    \ modp(n // p, p)\n    if n % p == 2:\n        return modp(n // p, p)\n    if\
    \ n % p == 3:\n        return modp(n // p, p)\n    raise ValueError(f\"modp({},\
    \ {}) not defined\".format(n, p))\n\n", "    if n == 0:\n        return 0\n  \
    \  if n < 0:\n        return modp(abs(n), p)\n    if p == 2:\n        return n\n\
    \    if p % 4 == 0:\n        return n & 3\n    if p % 8 == 0:\n        return\
    \ n >> 3\n    if p % 16 == 0:\n        return n << 3\n    return ((n % p) + p)\
    \ % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n\
    \    return p % pow(2, n)\n\n", "    if p == 0:\n        raise ZeroDivisionError('modp(0,\
    \ 0) is not defined')\n    if p == n:\n        return p\n    if n < 0:\n     \
    \   return modp(n - 2, p) + p\n    if n == 0:\n        return 0\n    d, r = divmod(n,\
    \ p)\n    if d:\n        return modp(d*2, p) + r\n    return r\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n   \
    \     return p % p\n    if n % 2 == 1:\n        return p - (p % p)\n    return\
    \ p\n\n", "    return ((n) % (p)) + (((n) % (p)) == 0)\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        return p % p\n    return p % p * p % p\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p <\
    \ 0:\n        return modp(n - 1, p) * (-1)\n    if p > 0:\n        return modp(n\
    \ - 1, p)\n    if n == 1 or p == 0:\n        return p\n    if p == -1:\n     \
    \   return modp(n - 1, p)\n    if p == 1:\n        return modp(n - 1, p) * (-1)\n\
    \    if p == 2:\n        return modp(n - 1, p)\n    if p == 3:\n        return\
    \ modp(n - 1, p)\n    if p == 6:\n        return modp(n - 1, p)\n    if p == 7:\n\
    \        return modp(n - 1, p)\n    if p == 8:\n        return modp(n - 1, p)\n\
    \    if p == 9:\n        return modp(n - 1, p)\n    if p == 10:\n        return\
    \ modp(n - 1, p)\n    if p == 11:\n        return modp(n - 1, p)\n    if p ==\
    \ 12:\n        return modp(n - 1, p)\n    if p == 13:\n        return modp(n -\
    \ 1, p)\n    if p == 14:\n        return modp(n - 1, p)\n    if p == 15:\n   \
    \     return modp(n - 1, p)\n    if p == 16:\n        return modp(n - 1, p)\n\
    \    if p == 17:\n        return modp(n - 1, p)\n    if p == 18:\n        return\
    \ modp(n - 1, p)\n    if p == 19:\n        return modp(n - 1, p)\n    if p ==\
    \ 20:\n        return modp(n - 1, p)\n    if p == 21:\n        return modp(n -\
    \ 1, p)\n    if p == 22:\n        return modp(n - 1, p)\n    if p == 23:\n   \
    \     return modp(n - 1, p)\n    if p == 24:\n        return modp(n - 1, p)\n\
    \    if p == 25:\n        return modp(n - 1, p)\n    if p == 26:\n        return\
    \ modp(n - 1, p)\n    if p == 27:\n        return modp(n - 1, p)\n    if p ==\
    \ 28:\n        return modp(n - 1, p)\n    if p == 29:\n        return modp(n -\
    \ 1, p)\n    if p == 30:\n        return modp(n - 1, p)\n    if p == 31:\n   \
    \     return modp(n - 1, p)\n    if p == 32:\n        return modp(n - 1, p)\n\
    \    if p == 33:\n        return modp(n - 1, p)\n    if p == 34:\n        return\
    \ modp(n - 1, p)\n    if p == 35:\n        return modp(n - 1, p)\n    if p ==\
    \ 36:\n        return modp(n - 1, p)\n    if p == 37:\n        return modp(n -\
    \ 1, p)\n    if p == 38:\n        return modp(n - 1, p)\n    if p == 39:\n   \
    \     return modp(n - 1, p)\n    if p == ", "    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n        return\
    \ (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n\
    \        return p\n    if n == 13:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p * p) % p) % p) % p\n    if n == 14:\n        return (((p * p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n    \
    \    return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 16:\n        return (((p * p * p * p * p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 17:\n        return (((p * p * p * p\
    \ * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n  \
    \      return (((p * p * p * p * p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p * p", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p <\
    \ 0:\n        return modp(n - 1, p) * (-1)\n    if p > MOD:\n        return modp(n\
    \ - 1, MOD)\n    if p % 4 == 3:\n        return modp(n - 1, p)\n    if p % 8 ==\
    \ 5:\n        return modp(n - 1, p)\n    if p % 8 == 7:\n        return modp(n\
    \ - 1, p)\n    if p % 8 == 11:\n        return modp(n - 1, p)\n    if p % 8 ==\
    \ 13:\n        return modp(n - 1, p)\n    if p % 8 == 15:\n        return modp(n\
    \ - 1, p)\n    return modp(n - 1, p)\n\n", "    if n == 0:\n        return 0\n\
    \    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        return p - (p % p)\n    return p\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n    \
    \    return p\n    if n == 13 or n == 14:\n        return ((p * p * p * p * p\
    \ * p * p * p) % p) % p\n    if n == 15 or n == 16:\n        return (((p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19\
    \ or n == 20:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 21 or n == 22:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 23 or n == 24:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 25 or n == 26:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 27 or n == 28:\n        return (((p * p * p * p * p", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        return p % p\n    return p - (p // p) * p\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return\
    \ p % pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n    \
    \    return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 1:\n        return\
    \ p % p\n    if n == 2:\n        return ((p * p) % p) % p\n    if n == 3:\n  \
    \      return (((p * p * p) % p) % p) % p\n    if n == 4:\n        return (((p\
    \ * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p)\
    \ % p) % p) % p\n    if n == 6:\n        return (((p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 7:\n        return (((p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if ", "    if\
    \ p == 0:\n        raise ZeroDivisionError('modp(0, 0) is not defined')\n    if\
    \ n == 0:\n        return 0\n    n %= p\n    if n == 0:\n        return p\n  \
    \  return p - (p % n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n\
    \        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 0:\n        return p - (p % n)\n    return p - ((p - 1) * (n\
    \ % 2))\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if n % 3 ==\
    \ 0 and n != 1:\n        return modp(n // 3, p)\n    if n % 3 == 0:\n        return\
    \ modp(n // 3, p)\n    if n % 5 == 0 and n != 1:\n        return modp(n // 5,\
    \ p)\n    if n % 7 == 0 and n != 1:\n        return modp(n // 7, p)\n    return\
    \ modp(n // 2, p)\n\n", "    if n == 0:\n        return 0\n    if n < 0:\n   \
    \     return modp(abs(n), p)\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p + p\n    if n % 2 == 0:\n        return modp(n // 2, p)\n  \
    \  return modp(n - 2, p) + p\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2\
    \ == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n    \
    \    return 0\n    if n == 1:\n        return p\n    if p == 2:\n        return\
    \ n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n    if p % 8 == 0:\n\
    \        return modp(n // 8, p) + 3\n    if p % 16 == 0:\n        return modp(n\
    \ // 16, p) + 7\n    if p % 32 == 0:\n        return modp(n // 32, p) + 11\n \
    \   if p % 64 == 0:\n        return modp(n // 64, p) + 13\n    if p % 256 == 0:\n\
    \        return modp(n // 256, p) + 17\n    return modp(n // 256, p) + 17\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        return p - (p % p)\n \
    \   return p\n\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n   \
    \     return p % p\n    if n % 2 == 1:\n        return p - (p % p)\n    return\
    \ p - ((p - 1) * (p - 1) % p)\n\n", "    if n == 0:\n        return 0\n    if\
    \ n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n %\
    \ 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n  \
    \      return 0\n    if n == 1:\n        return p\n    if p < 0:\n        return\
    \ modp(n - 1, p) * (-1)\n    if p > n:\n        return modp(n - 1, p)\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if n % 2 ==\
    \ 1:\n        return modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p) * p\n    if n % 3 == 0:\n        return modp(n // 3, p) * p * p\n \
    \   if n % 3 == 1:\n        return modp(n // 3, p) * p\n\n", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if p < 0:\n        return\
    \ modp(n - 1, p) * (-1)\n    if p > n:\n        return modp(n - 1, p)\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == ", "    return ((n << 1) + 1) % (p + 1)\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return ((p\
    \ * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p) % p)\
    \ % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n  \
    \  # n >= 6\n    return (((p * p * p * p * p * p) % p) % p) % p\n\n", "    return\
    \ ((n) % (p)) + (((n) % (p)) > 0)\n", "    if n == 0:\n        return 0\n    if\
    \ n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n %\
    \ 2 == 1:\n        return p % p\n    return p - (p // p) * p\n\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n   \
    \     return p % p\n    if n % 2 == 1:\n        return p - (p % p)\n    return\
    \ p - ((p - 1) * (p - 1) % p)\n\n", "    if n == 0:\n        return 0\n    if\
    \ n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n %\
    \ 2 == 1:\n        n -= 1\n    return p % p * modp(n // 2, p)\n\n", "    if n\
    \ == 0:\n        return 0\n    if n == 1:\n        return p\n    if p < 0:\n \
    \       return modp(n - 1, p) * (-1)\n    if p > n:\n        return modp(n - 1,\
    \ p)\n    if p == n:\n        return p\n    if p == n:\n        return p\n   \
    \ if p == n:\n        return p\n    if n % 2 == 1:\n        return modp(n // 2,\
    \ p)\n    if n % 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 2 ==\
    \ 1:\n        return modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p) * p\n    if n % 2 == 1:\n        return modp(n // 2, p)\n    if n %\
    \ 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 2 == 1:\n        return\
    \ modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n // 2, p) * p\n  \
    \  if n % 2 == 1:\n        return modp(n // 2, p)\n    if n % 2 == 0:\n      \
    \  return modp(n // 2, p) * p\n    if n % 2 == 1:\n        return modp(n // 2,\
    \ p)\n    if n % 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 2 ==\
    \ 1:\n        return modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p) * p\n    if n % 2 == 1:\n        return modp(n // 2, p)\n    if n %\
    \ 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 2 == 1:\n        return\
    \ modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n // 2, p) * p\n  \
    \  if n % 2 == 1:\n        return modp(n // 2, p)\n    if n % 2 == 0:\n      \
    \  return modp(n // 2, p) * p\n    if n % 2 == 1:\n        return modp(n // 2,\
    \ p)\n    if n % 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 2 ==\
    \ 1:\n        return modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p) * p\n    if n % 2 == 1:\n        return modp(n // 2, p)\n    if n %\
    \ 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 2 == 1:\n        return\
    \ modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n // 2, p) * p\n  \
    \  if n % 2 == 1:\n        return modp(n // 2, p)\n    if n % 2 == 0:\n      \
    \  return modp(n // 2, p) * p\n    if n % 2 == 1:\n        return modp(n // 2,\
    \ p)\n    if n % 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 2 == ",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p ==\
    \ 2:\n        return n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n\
    \    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if p % 16 == 0:\n\
    \        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n        return modp(n\
    \ // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n // 64, p) + 32\n\
    \    return modp(n // 64, p) + 64\n\n", "    return ((n) % (p)) + (((n) % (p))\
    \ == 0)\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n\
    \    return p % pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n\
    \    if p > 0:\n        return modp(n - 1, p)\n    return 1\n\n", "    if p ==\
    \ 2:\n        return n\n    if n < 0:\n        return modp(n - 1, p) * (-1)\n\
    \    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n\
    \ == 2:\n        return p + 1\n    if n % 2 == 0:\n        return modp(n // 2,\
    \ p) + p\n    return modp(n // 2, p) * (-1)\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 1:\n        n -= 1\n    return p % p * modp(n // 2, p)\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n\
    \    return p % pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n ==\
    \ 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2 ==\
    \ 0:\n        return p - (p % p)\n    return p\n\n", "    if n == 0:\n       \
    \ return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p\
    \ % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    return (((p * p * p * p * p * p) %\
    \ p) % p) % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n      \
    \  return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n      \
    \  n -= 1\n    return p % p * modp(n // 2, p)\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if p == 2:\n        return n\n    if\
    \ p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 == 0:\n        return\
    \ modp(n // 3, p)\n    if n % 3 == 0 or n % 5 == 0:\n        return modp(n //\
    \ 3, p)\n    return modp(n // 5, p)\n\n", "    return ((n) % (p)) + (((n) % (p))\
    \ > 0)\n", "    if p == 2:\n        return n\n    if n < 0:\n        return modp(abs(n),\
    \ p)\n    if n == 0:\n        return 0\n    ans = 1\n    while p > 2:\n      \
    \  if p & 1:\n            ans *= n\n            n -= 1\n        p >>= 1\n    return\
    \ ans % p\n\n", "    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if n == 0:\n        return 0\n    ans = 1\n    while n\
    \ % p == 0:\n        ans *= p\n        n //= p\n    return ans * p\n\n", "   \
    \ if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p == 2:\n        return n\n    if p % 4 == 0:\n    \
    \    return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n //\
    \ 8, p) + 4\n    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if\
    \ p % 32 == 0:\n        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n  \
    \      return modp(n // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p) % p) %\
    \ p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n\
    \ == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n     \
    \   return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 14:\n        return (((p * p * p * p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 15:\n        return (((p * p * p * p * p * p * p *\
    \ p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return (((p * p *\
    \ p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n        return (((p *\
    \ p * p * p * p * p * p * p", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n    \
    \    return modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\
    \ * 3\n    if n % p == 0:\n        return modp(n // p, p)\n    return modp(n %\
    \ p, p)\n\n", "    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) * (-1)\n    if n == 0:\n        return 0\n    ans = 1\n    while\
    \ n % p == 0:\n        ans = ans * p\n        n //= p\n    return ans * p\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p ==\
    \ 2:\n        return n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n\
    \    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n    if p % 16 == 0:\n\
    \        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n        return modp(n\
    \ // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n // 64, p) + 32\n\
    \    return modp(n // 64, p) + 64\n\n", "    if n == 0:\n        return 0\n  \
    \  if n == 1:\n        return p\n    if p == 2:\n        return n\n    if p %\
    \ 2 == 0:\n        return modp(n // 2, p)\n    return modp(n - 1, p)\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p %\
    \ pow(2, n)\n\n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if p < 0:\n    \
    \    return modp(n - 1, p) * (-1)\n    if p > n:\n        return modp(n - 1, p)\n\
    \    if p == n:\n        return p\n    if p == n:\n        return p\n    if p\
    \ == n:\n        return p\n    if n % 2 == 1:\n        return modp(n // 2, p)\n\
    \    if n % 2 == 0:\n        return modp(n // 2, p) % p\n    return modp(n //\
    \ 2, p) % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) * 3\n    if n %\
    \ p == 0:\n        return modp(n // p, p)\n    return modp((n + 1) // p, p)\n\n",
  "    return ((n) % (p)) + (((n) % (p)) > 0)\n\n", "    if n == 0:\n        return\
    \ 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p % p\n\
    \    if n % 2 == 1:\n        n -= 1\n    return p % p * modp(n // 2, p)\n\n",
  "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p %\
    \ 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 == 0:\n        return\
    \ modp(n // 3, p)\n    if n % 3 == 0 and n != 1:\n        return modp(n // 3,\
    \ p)\n    if n % 3 == 1:\n        return modp((3 * n) // 3, p)\n    if n % 3 ==\
    \ 2:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 0:\n        return\
    \ modp((3 * n) // 3, p)\n    if n % 3 == 1:\n        return modp((3 * n) // 3,\
    \ p)\n    if n % 3 == 2:\n        return modp((3 * n) // 3, p)\n    if n % 3 ==\
    \ 0:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 1:\n        return\
    \ modp((3 * n) // 3, p)\n    if n % 3 == 2:\n        return modp((3 * n) // 3,\
    \ p)\n    if n % 3 == 0:\n        return modp((3 * n) // 3, p)\n    if n % 3 ==\
    \ 1:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 2:\n        return\
    \ modp((3 * n) // 3, p)\n    if n % 3 == 0:\n        return modp((3 * n) // 3,\
    \ p)\n    if n % 3 == 1:\n        return modp((3 * n) // 3, p)\n    if n % 3 ==\
    \ 2:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 0:\n        return\
    \ modp((3 * n) // 3, p)\n    if n % 3 == 1:\n        return modp((3 * n) // 3,\
    \ p)\n    if n % 3 == 2:\n        return modp((3 * n) // 3, p)\n    if n % 3 ==\
    \ 0:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 1:\n        return\
    \ modp((3 * n) // 3, p)\n    if n % 3 == 2:\n        return modp((3 * n) // 3,\
    \ p)\n    if n % 3 == 0:\n        return modp((3 * n) // 3, p)\n    if n % 3 ==\
    \ 1:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 2:\n        return\
    \ modp((3 * n) // 3, p)\n    if n % 3 == 0:\n        return modp((3 * n) // 3,\
    \ p)\n    if n % 3 == 1:\n        return modp((3 * n) // 3, p)\n    if n % 3 ==\
    \ 2:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 0:\n        return\
    \ modp((3 * n) // 3, p)\n    if n % 3 == 1:\n        return modp((3 * n) // 3,\
    \ p)\n    if n % 3 == 2:\n        return modp((3 * n) // 3, p)\n    if n % 3 ==\
    \ 0:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 1:\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n   \
    \     return p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2,\
    \ n)\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n\
    \    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > MOD:\n      \
    \  return modp(n - 1, MOD)\n    if p == MOD:\n        return p\n    k = n // p\n\
    \    if k == 0:\n        return p\n    if k == 1:\n        return MOD\n    return\
    \ modp(k, MOD)\n\n", "    return ((n % p) + p) % p\n\n", "    if n == 0:\n   \
    \     return 0\n    if n == 1:\n        return p\n    if p % 2 == 0:\n       \
    \ return p - 1\n    return p + modp(n - 1, p) - 1\n\n", "    if n == 0:\n    \
    \    return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n % 2 == 1:\n        return p - (p % p)\n \
    \   return p\n\n", "    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) % p\n    if n == 0:\n        return 0\n    ans = 1\n    while\
    \ n % p == 0:\n        ans = (ans * p + n) % p\n        n //= p\n    return ans\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if n == 2:\n        return p % p\n    if n % 2 == 1:\n        return p % p\n\
    \    return p - (p // p) * p\n\n", "    if n == 0:\n        return 0\n    if n\
    \ == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n % 2\
    \ == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n    \
    \    return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % p * modp(n // 2, p)\n\
    \n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n", "    if n == 0:\n       \
    \ return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return p\
    \ % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n\
    \        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return\
    \ (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return (((p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return (((p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n    \
    \    return p\n    if n == 13 or n == 14:\n        return ((p * p * p * p * p\
    \ * p * p * p * p) % p) % p\n    if n == 15 or n == 0:\n        return (((p *\
    \ p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16 or n == 17:\n \
    \       return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 18 or n == 19:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 20 or n == 21:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 22 or n == 23:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 24 or n == 25:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 26 or n == 27:\n        return (((p * p * p * p * p", "    if n == 0:\n\
    \        return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 1:\n        n -= 1\n    return p % p * modp(n // 2, p)\n\
    \n", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n   \
    \ if n == 2:\n        return p % p\n    if n % 2 == 0:\n        return p - (p\
    \ // 2)\n    return p + (p // 2)\n\n", "    if n == 0:\n        return 0\n   \
    \ if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n\
    \ == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n        return\
    \ (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p\
    \ * p * p) % p) % p) % p\n    # ...\n    if n == 20:\n        return (((p * p\
    \ * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p\
    \ * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p\
    \ * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p\
    \ * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p\
    \ * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p\
    \ * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p\
    \ * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p\
    \ * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p\
    \ * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p\
    \ * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p\
    \ * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p\
    \ * ", "    if n == 0:\n        return 0\n    if n == 1:\n        return p\n \
    \   if n == 2:\n        return p % p\n    if n % 2 == 1:\n        n -= 1\n   \
    \ return p % p * modp(n // 2, p)\n\n", "    if n == 0:\n        return 0\n   \
    \ if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n\
    \ == 3:\n        return ((p * p * p) % p) % p\n    if n == 4:\n        return\
    \ (((p * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p\
    \ * p * p) % p) % p) % p\n    return (((p * p * p * p * p * p) % p) % p) % p\n\
    \n", "    return ((n) % (p)) + (((n) % (p)) > 0)\n", "    if n == 0:\n       \
    \ return 0\n    if n < 0:\n        return modp(abs(n), p)\n    if p < 0:\n   \
    \     return modp(-n, p)\n    if p == 0:\n        return n\n    if p == n:\n \
    \       return p\n    if p == 1 or n == p:\n        return p\n    if p == 2:\n\
    \        return pow(2, n - 1, p)\n    if p == 3:\n        return pow(3, n - 1,\
    \ p)\n    if p == 4:\n        return pow(4, n - 1, p)\n    if p == 5:\n      \
    \  return pow(5, n - 1, p)\n    if p == 6:\n        return pow(6, n - 1, p)\n\
    \    if p == 7:\n        return pow(7, n - 1, p)\n    if p == 8:\n        return\
    \ pow(8, n - 1, p)\n    if p == 9:\n        return pow(9, n - 1, p)\n    if p\
    \ == 10:\n        return pow(10, n - 1, p)\n    if p == 11:\n        return pow(11,\
    \ n - 1, p)\n    if p == 12:\n        return pow(12, n - 1, p)\n    if p == 13:\n\
    \        return pow(13, n - 1, p)\n    if p == 14:\n        return pow(14, n -\
    \ 1, p)\n    if p == 15:\n        return pow(15, n - 1, p)\n    if p == 16:\n\
    \        return pow(16, n - 1, p)\n    if p == 17:\n        return pow(17, n -\
    \ 1, p)\n    if p == 18:\n        return pow(18, n - 1, p)\n    if p == 19:\n\
    \        return pow(19, n - 1, p)\n    if p == 20:\n        return pow(20, n -\
    \ 1, p)\n    if p == 21:\n        return pow(2, n - 1, p)\n    if p == 22:\n \
    \       return pow(3, n - 1, p)\n    if p == 23:\n        return pow(4, n - 1,\
    \ p)\n    if p == 24:\n        return pow(5, n - 1, p)\n    if p == 25:\n    \
    \    return pow(6, n - 1, p)\n    if p == 26:\n        return pow(7, n - 1, p)\n\
    \    if p == 27:\n        return pow(8, n - 1, p)\n    if p == 28:\n        return\
    \ pow(9, n - 1, p)\n    if p == 29:\n        return pow(10, n - 1, p)\n    if\
    \ p == 30:\n        return pow(11, n - 1, p)\n    if p == 31:\n        return\
    \ pow(12, n - 1, p)\n    if p == 32:\n        return pow(13, n - 1, p)\n    if\
    \ p == 33:\n        return pow(14, n - 1, p)\n    if p == 34:\n        return\
    \ pow(15, n - 1, p)\n    if p == 35:\n        return pow(16, n - 1, p)\n    if\
    \ p == 36:\n        return pow(17, n - 1, p)\n    if p == 37:\n        return\
    \ pow(18, n - 1, p)\n    if p == 38:\n        return pow(19, n - 1, p)\n    if\
    \ p == 39:\n        return ", "    if n == 0:\n        return 0\n    if n == 1:\n\
    \        return p\n    if n == 2:\n        return p % p\n    if n == 3:\n    \
    \    return ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p\
    \ * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 8:\n        return (((p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 9:\n        return (((p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return\
    \ p\n    if n == 13 or n == 14:\n        return ((p * p * p * p * p * p * p *\
    \ p * p * p * p) % p) % p\n    if n == 15 or n == 16:\n        return (((p * p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 19 or n == 20:\n        return (((p * p * p * p * p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 23 or n == 24:\n        return (((p * p * p * p * p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 25 or n == 26:\n", "    if n ==\
    \ 0:\n        return 0\n    if n < 0:\n        return modp(abs(n), p)\n    if\
    \ p == 2:\n        return n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n\
    \    return modp(n // 2, p) + p\n\n", "    if n == 0:\n        return 0\n    if\
    \ n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if n %\
    \ 2 == 1:\n        n -= 1\n    return p % pow(2, n)\n\n", "    if n == 0:\n  \
    \      return 0\n    if n == 1:\n        return p\n    if p % 2 == 0:\n      \
    \  return modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\
    \ * 3\n    if p % 5 == 0:\n        return modp(n // 5, p) * 5\n    return modp(n\
    \ // 2, p) * 2 + modp(n // 3, p) * 3 + modp(n // 5, p) * 5\n\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n   \
    \     return p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n   \
    \ if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n\
    \        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return\
    \ (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n\
    \        return p\n    if n == 13:\n        return ((p * p * p * p * p * p * p\
    \ * p * p) % p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n      \
    \  return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p * p * p) % p", "    if n == 0:\n        return 0\n   \
    \ if n == 1:\n        return p\n    if p == 2:\n        return n\n    if p % 2\
    \ == 0:\n        return modp(n // 2, p)\n    return modp(n - 1, p)\n\n", "   \
    \ if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n ==\
    \ 2:\n        return p % p\n    if n == 3:\n        return ((p * p * p) % p) %\
    \ p\n    if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n\
    \ == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n    # Fall through\n\
    \    return (((p * p * p * p * p * p) % p) % p) % p\n\n", "    if n == 0:\n  \
    \      return 0\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p % p\n    if n % 2 == 0:\n        return p - (p % p)\n    return p + (p - 1)\
    \ * (p - 1) % p\n\n", "    if n == 0:\n        return 0\n    if n == 1:\n    \
    \    return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n", "    if n == 0:\n   \
    \     return 0\n    if n == 1:\n        return p\n    if p % 2 == 0:\n       \
    \ return modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) *\
    \ 3\n    if p % 5 == 0:\n        return modp(n // 5, p) * 5\n    return modp(n\
    \ // 2, p) * 2 + modp(n // 3, p) * 3 + modp(n // 5, p) * 5\n\n", "    if n ==\
    \ 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n   \
    \     return p % p\n    if n == 3:\n        return ((p * p * p) % p) % p\n   \
    \ if n == 4:\n        return (((p * p * p * p) % p) % p) % p\n    if n == 5:\n\
    \        return (((p * p * p * p * p) % p) % p) % p\n    if n == 6:\n        return\
    \ (((p * p * p * p * p * p) % p) % p) % p\n    if n == 7:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n        return (((p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n        return (((p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 11:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n\
    \        return p\n    if n == 13 or n == 14:\n        return ((p * p * p * p\
    \ * p * p * p * p) % p) % p\n    if n == 15 or n == 16:\n        return (((p *\
    \ p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n \
    \       return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 19 or n == 20:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 21 or n == 22:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 23 and p % 4 == 0:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 24 and\
    \ p % 8 == 0:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 25 and p % 16 == 0:\n        return (((p * p * p * p", " \
    \   if n == 0:\n        return 0\n    if n == 1:\n        return p\n    if p ==\
    \ 2:\n        return n\n    if p % 4 == 0:\n        return modp(n // 4, p) + 2\n\
    \    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n    if p % 16 == 0:\n\
    \        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n        return modp(n\
    \ // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n // 64, p) + 13\n\
    \    return modp(n // 64, p) + 17\n\n", "    if n == 0:\n        return 0\n  \
    \  if n == 1:\n        return p\n    if n == 2:\n        return p % p\n    if\
    \ n % 2 == 1:\n        n -= 1\n    return p % p * modp(n // 2, p)\n\n", "    if\
    \ n == 0:\n        return 0\n    if n == 1:\n        return p\n    if n == 2:\n\
    \        return p % p\n    if n % 2 == 1:\n        return p - (p % p)\n    return\
    \ p - (((p // 2) * (p % 2)) % p)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
