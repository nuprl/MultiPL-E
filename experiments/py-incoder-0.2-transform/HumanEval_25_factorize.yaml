name: HumanEval_25_factorize
language: py
prompt: "from typing import List\n\ndef factorize(n: int) -> List[int]:\n    \"\"\"\
  \ Return list of prime factors of given integer in the order from smallest to largest.\n\
  \    Each of the factors should be listed number of times corresponding to how many\
  \ times it appeares in factorization.\n    Input number should be equal to the product\
  \ of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n \
  \   [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(2) == [2]\n    assert candidate(4)\
  \ == [2, 2]\n    assert candidate(8) == [2, 2, 2]\n    assert candidate(57) == [3,\
  \ 19]\n    assert candidate(3249) == [3, 3, 19, 19]\n    assert candidate(185193)\
  \ == [3, 3, 3, 19, 19, 19]\n    assert candidate(20577) == [3, 19, 19, 19]\n   \
  \ assert candidate(18) == [2, 3, 3]\n\ndef test_check():\n    check(factorize)\n\
  \ntest_check()\n"
completions: ["    factorization = []\n    i = 2\n    while i * i <= n:\n        if\
    \ n % i:\n            i += 1\n        else:\n            n //= i\n           \
    \ factorization.append(i)\n    if n > 1:\n        factorization.append(n)\n  \
    \  return factorization\n", "    factorization = []\n    i = 2\n    while i *\
    \ i <= n:\n        if n % i:\n            i += 1\n        else:\n            n\
    \ //= i\n            factorization.append(i)\n    if n > 1:\n        factorization.append(n)\n\
    \    return factorization\n", "    factors = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            i += 1\n        else:\n            n //=\
    \ i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n\
    \    return factors\n", "    factorization = []\n    factors = []\n    i = 2\n\
    \    while i * i <= n:\n        if n % i:\n            factors.append(i)\n   \
    \         n //= i\n        else:\n            i += 1\n    if n > 1:\n        factors.append(n)\n\
    \    factorization = [i for i in factors if i not in factorization]\n    return\
    \ factorization\n", "    factorization = []\n    i = 2\n    while i * i <= n:\n\
    \        if n % i:\n            i += 1\n        else:\n            n //= i\n \
    \           factorization.append(i)\n    if n > 1:\n        factorization.append(n)\n\
    \    return factorization\n", "    factorization = []\n    factors = []\n    \n\
    \    for i in range(2, n+1):\n        if n % i == 0:\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factorization.append(factors)\n\
    \            factors = []\n    return factorization\n", "    factorization = []\n\
    \    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n   \
    \     else:\n            n //= i\n            factorization.append(i)\n    if\
    \ n > 1:\n        factorization.append(n)\n    return factorization\n", "    factors\
    \ = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i +=\
    \ 1\n        else:\n            n //= i\n            factors.append(i)\n    if\
    \ n > 1:\n        factors.append(n)\n    return factors\n", "    factors = []\n\
    \    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n   \
    \     else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n\
    \        factors.append(n)\n    return factors\n", "    factors = []\n    i =\
    \ 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n\
    \            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n\
    \    return factors\n", "    factorization = []\n    i = 2\n    while i * i <=\
    \ n:\n        if n % i:\n            i += 1\n        else:\n            n //=\
    \ i\n            factorization.append(i)\n    if n > 1:\n        factorization.append(n)\n\
    \    return factorization\n", "    factorization = []\n    factors = []\n    \n\
    \    i = 2\n    while i * i <= n:\n        if n % i:\n            factors.append(i)\n\
    \            factors.append(n // i)\n            factorization.append(factors)\n\
    \            factors = []\n        else:\n            i += 1\n    \n    if factors:\n\
    \        factors.append(n)\n        factorization.append(factors)\n    \n    return\
    \ factorization\n", "    factorization = []\n    i = 2\n    while i * i <= n:\n\
    \        if n % i:\n            i += 1\n        else:\n            n //= i\n \
    \           factorization.append(i)\n    if n > 1:\n        factorization.append(n)\n\
    \    return factorization\n", "    factorization = []\n    i = 2\n    while i\
    \ * i <= n:\n        if n % i:\n            i += 1\n        else:\n          \
    \  n //= i\n            factorization.append(i)\n    if n > 1:\n        factorization.append(n)\n\
    \    return factorization\n", "    factorization = []\n    factors = []\n    i\
    \ = 2\n    while i * i <= n:\n        if n % i:\n            factors.append(i)\n\
    \            factors.append(n // i)\n        else:\n            i += 1\n    if\
    \ n > 1:\n        factors.append(n)\n    return factors\n", "    factors = []\n\
    \    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n   \
    \     else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n\
    \        factors.append(n)\n    return factors\n", "    factorization = []\n \
    \   factor = 1\n    while factor <= n:\n        if n % factor == 0:\n        \
    \    factorization.append(factor)\n            n = n // factor\n        else:\n\
    \            factor += 1\n    if n > 1:\n        factorization.append(n)\n   \
    \ return factorization\n", "    factorization = []\n    factors = []\n    \n \
    \   for factor in range(2, n+1):\n        if n % factor == 0:\n            factors.append(factor)\n\
    \            factors.append(n // factor)\n    \n    for factor in factors:\n \
    \       factorization.append(factor)\n    \n    return factorization\n", "   \
    \ factors = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n        \
    \    i += 1\n        else:\n            n //= i\n            factors.append(i)\n\
    \    if n > 1:\n        factors.append(n)\n    return factors\n", "    factorization\
    \ = []\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i +=\
    \ 1\n        else:\n            n //= i\n            factorization.append(i)\n\
    \    if n > 1:\n        factorization.append(n)\n    return factorization\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
