language: py
name: HumanEval_49_modp
results:
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) * 3\n  \
    \  if p % 5 == 0:\n        return modp(n // 5, p) * 5\n    return modp(n // 2,\
    \ p) * 2 + modp(n // 3, p) * 3 + modp(n // 5, p) * 5\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ez32vv3.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp3ez32vv3.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3ez32vv3.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n - 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0mf82wqp.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0mf82wqp.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp0mf82wqp.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) * p\n    if n == 0:\n        return 0\n    d, r = divmod(n, p)\n\
    \    if d:\n        return modp(d*(p-1) + r, p)\n    return r\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy1moe14e.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpy1moe14e.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpy1moe14e.py\", line 27, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_pa13ks.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpj_pa13ks.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpj_pa13ks.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqw42plcx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqw42plcx.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqw42plcx.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3eyg8pj3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3eyg8pj3.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3eyg8pj3.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprpmflv3b.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprpmflv3b.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmprpmflv3b.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) - 1\n    if n == 0:\n        return 0\n    d, r = divmod(n, p)\n\
    \    if d:\n        return modp(d*(p-1) + r, p)\n    return r\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpju3kr06h.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpju3kr06h.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpju3kr06h.py\", line 27, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p) % p) % p)\
    \ % p\n    if n == 5:\n        return (((p * p * p * p) % p) % p) % p\n    # Fall\
    \ through.\n    return (((p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk63n3hn_.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpk63n3hn_.py\", line 40,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpk63n3hn_.py\", line 31, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiidy1sle.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpiidy1sle.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpiidy1sle.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiidy1sle.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpiidy1sle.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpiidy1sle.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_pa13ks.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpj_pa13ks.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpj_pa13ks.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if\
    \ n % p == 0:\n        return modp(n // p, p)\n    if n % p == 1:\n        return\
    \ modp(n // p, p)\n    return modp(n // p, p)\n\n\ndef check(candidate):\n   \
    \ assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmth4raze.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpmth4raze.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpmth4raze.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_pa13ks.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpj_pa13ks.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpj_pa13ks.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ p - (p // 4)\n    if p % 8 == 0:\n        return p - (p // 8)\n    if p % 16\
    \ == 0:\n        return p - (p // 16)\n    return p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbzdoch1.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmptbzdoch1.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptbzdoch1.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p % 2 == 0:\n        return modp(n // 2,\
    \ p) + modp(n // 2, p - 1)\n    if p % 3 == 0:\n        return modp(n // 3, p)\
    \ + modp(n // 3, p - 1) + modp(n // 3, p - 2)\n    return modp(n // 2, p) + modp(n\
    \ // 2, p - 1)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmnc8ahze.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpmnc8ahze.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpmnc8ahze.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) * p\n    if n == 0:\n        return 0\n    if n == 1:\n     \
    \   return p\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return\
    \ modp(n // 2, p) * p\n    if n % 2 == 1:\n        return modp(n // 2, p) * p\
    \ + p\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt804p31g.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpt804p31g.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpt804p31g.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0ng9jai.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpl0ng9jai.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpl0ng9jai.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2ct0ri4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb2ct0ri4.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb2ct0ri4.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 9:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n\
    \ == 13 or n == 14:\n        return ((p * p * p * p * p * p * p * p * p * p) %\
    \ p) % p\n    if n == 15:\n        return (((p * p * p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 16:\n        return (((p * p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n       \
    \ return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n   \
    \ if n == 19 or n == 20:\n        return (((p * p * p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p * p\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpzhc5jn2e.py\", line 54\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvjisa5ze.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvjisa5ze.py\", line 34,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpvjisa5ze.py\", line 25, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p // 2)\n    return p + (p // 2)\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdv7r8vvv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdv7r8vvv.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpdv7r8vvv.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) * (-1)\n    if n == 0:\n        return 0\n    ans = 1\n    while\
    \ n % p == 0:\n        ans = ans * p\n        n //= p\n    return ans * p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_v0vosq.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpm_v0vosq.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpm_v0vosq.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    return n % p\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpriggbc_e.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpriggbc_e.py\", line 29,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpriggbc_e.py\", line 21, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0ng9jai.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpl0ng9jai.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpl0ng9jai.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    if n % 2 == 1:\n        return modp(n - 1, p)\n    return modp((n\
    \ - 1) // 2, p) + p\n\n\ndef check(candidate):\n    assert candidate(3, 5) ==\
    \ 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n\
    \    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpem8nm8w_.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpem8nm8w_.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpem8nm8w_.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 17:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 21:\n        return (((p\
    \ * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp299i0eji.py\", line 58\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2ct0ri4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb2ct0ri4.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb2ct0ri4.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfy_s38u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptfy_s38u.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptfy_s38u.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 3:\n        p +=\
    \ 2\n    return pow(2, n, p)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb1bgjr0d.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb1bgjr0d.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb1bgjr0d.py\", line 28, in\
    \ check\n    assert candidate(0, 101) == 1\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_pa13ks.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpj_pa13ks.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpj_pa13ks.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqw42plcx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqw42plcx.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqw42plcx.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n\
    \ == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n\
    \ == 24:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 25 or n == 26:\n        return (((p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 27 or n == 28:\n        return (((p *\
    \ p * p * p * p * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpsbpmlcgi.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqw42plcx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqw42plcx.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqw42plcx.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p % 2 == 0:\n        return modp(n // 2,\
    \ p) // 2\n    if p % 3 == 0:\n        return modp(n // 3, p) // 3\n    return\
    \ modp(n // 2, p) // 2\n\n\ndef check(candidate):\n    assert candidate(3, 5)\
    \ == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) ==\
    \ 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n \
    \   assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcofvn_37.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpcofvn_37.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcofvn_37.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfy_s38u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptfy_s38u.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptfy_s38u.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8s7bwyko.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8s7bwyko.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8s7bwyko.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p - (((p // p) * p) % p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv90tx39z.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpv90tx39z.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpv90tx39z.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 17:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 21:\n        return (((p\
    \ * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp299i0eji.py\", line 58\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n - 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0mf82wqp.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp0mf82wqp.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp0mf82wqp.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n\
    \ == 16:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n   \
    \ if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return (((p *\
    \ p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 and p % 4 == 0:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 24 and p % 8 == 0:\n        return (((p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 25 and p % 16 == 0:\n        return (((p * p * p\
    \ * p * p * p * p * p * p) % p\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpl7677d9b.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 3:\n        return\
    \ modp(n // 4, p) + 2 * modp(n // 4, p // 4)\n    if p % 8 == 5:\n        return\
    \ modp(n // 8, p) + 3 * modp(n // 8, p // 8)\n    if p % 8 == 7:\n        return\
    \ modp(n // 8, p) + 4 * modp(n // 8, p // 8)\n    if p % 8 == 9:\n        return\
    \ modp(n // 8, p) + 5 * modp(n // 8, p // 8)\n    if p % 8 == 11:\n        return\
    \ modp(n // 8, p) + 6 * modp(n // 8, p // 8)\n    if p % 8 == 13:\n        return\
    \ modp(n // 8, p) + 7 * modp(n // 8, p // 8)\n    if p % 8 == 15:\n        return\
    \ modp(n // 8, p) + 8 * modp(n // 8, p // 8)\n    return modp(n // 8, p) + modp(n\
    \ // 8, p // 8)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n\
    \    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n   \
    \ assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdgy7tx2w.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpdgy7tx2w.py\", line 47,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpdgy7tx2w.py\", line 38, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ p % n\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 == 0:\n\
    \        return modp(n // 3, p) * 3\n    if n % n % 3 == 0:\n        return modp(n\
    \ // 3, p)\n    return modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoasb4w84.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpoasb4w84.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpoasb4w84.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p < 0:\n        return modp(-n, p)\n    if p == 0:\n\
    \        return n\n    if p == n:\n        return p\n    if p > n:\n        return\
    \ modp(p - n, p)\n    if p < n:\n        return modp(n, p)\n    return modp(n\
    \ + p, p)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuyjbuvft.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpuyjbuvft.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpuyjbuvft.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpuyjbuvft.py\", line\
    \ 25, in modp\n    return modp(p - n, p)\n  File \"/tmp/tmpuyjbuvft.py\", line\
    \ 25, in modp\n    return modp(p - n, p)\n  File \"/tmp/tmpuyjbuvft.py\", line\
    \ 25, in modp\n    return modp(p - n, p)\n  [Previous line repeated 993 more times]\n\
    \  File \"/tmp/tmpuyjbuvft.py\", line 14, in modp\n    if n == 0:\nRecursionError:\
    \ maximum recursion depth exceeded in comparison\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > MOD:\n\
    \        return modp(n - 1, MOD)\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p) * p\n    if p % 3 == 0:\n        return modp(n // 3, p) * (p - 1)\n  \
    \  if p % 5 == 0:\n        return modp(n // 5, p) * (p - 2)\n    return modp(n\
    \ // 2, p) * (p - 1)\n\n\ndef check(candidate):\n    assert candidate(3, 5) ==\
    \ 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n\
    \    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2pcijrd0.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp2pcijrd0.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp2pcijrd0.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmp2pcijrd0.py\", line\
    \ 20, in modp\n    if p > MOD:\nNameError: name 'MOD' is not defined\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return (((p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p) % p) % p) % p\n    if n == 21:\n        return (((p * p * \n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp3h7thsmy.py\", line 58\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_pa13ks.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpj_pa13ks.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpj_pa13ks.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if n == 0:\n        return 0\n    d, r = divmod(n, p)\n\
    \    if r:\n        return modp(d+1, p)\n    return d\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqwjtkx2f.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpqwjtkx2f.py\", line 36,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqwjtkx2f.py\", line 27, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpqwjtkx2f.py\", line\
    \ 22, in modp\n    return modp(d+1, p)\n  File \"/tmp/tmpqwjtkx2f.py\", line 22,\
    \ in modp\n    return modp(d+1, p)\n  File \"/tmp/tmpqwjtkx2f.py\", line 22, in\
    \ modp\n    return modp(d+1, p)\n  [Previous line repeated 993 more times]\n \
    \ File \"/tmp/tmpqwjtkx2f.py\", line 14, in modp\n    if p == 2:\nRecursionError:\
    \ maximum recursion depth exceeded in comparison\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n % p) + p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvd_t8d6l.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpvd_t8d6l.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpvd_t8d6l.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if p == n:\n       \
    \ return p\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 ==\
    \ 0:\n        return modp(n // 3, p)\n    if n % 3 == 0 or n % 5 == 0:\n     \
    \   return modp(n // 5, p)\n    return modp(n % 5, p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz6y5lzga.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpz6y5lzga.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpz6y5lzga.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpz6y5lzga.py\", line\
    \ 23, in modp\n    return modp(n // 5, p)\n  File \"/tmp/tmpz6y5lzga.py\", line\
    \ 23, in modp\n    return modp(n // 5, p)\n  File \"/tmp/tmpz6y5lzga.py\", line\
    \ 23, in modp\n    return modp(n // 5, p)\n  [Previous line repeated 993 more\
    \ times]\n  File \"/tmp/tmpz6y5lzga.py\", line 14, in modp\n    if p == 2:\nRecursionError:\
    \ maximum recursion depth exceeded in comparison\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n % p) + p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvd_t8d6l.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpvd_t8d6l.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpvd_t8d6l.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_pa13ks.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpj_pa13ks.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpj_pa13ks.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return p // 2\n    k = p // 2\n    while\
    \ k ** 2 <= n:\n        k += 1\n    return k\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy5_xsm8k.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpy5_xsm8k.py\", line 36,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpy5_xsm8k.py\", line 27, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8s7bwyko.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8s7bwyko.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8s7bwyko.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0ng9jai.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpl0ng9jai.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpl0ng9jai.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p == n:\n        return p\n    if p ==\
    \ n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n   \
    \     return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == \n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp0a0usfsw.py\", line 140\n    if p == \n           ^\n\
    SyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqw42plcx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqw42plcx.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqw42plcx.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3eyg8pj3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3eyg8pj3.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3eyg8pj3.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfy_s38u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptfy_s38u.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptfy_s38u.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0ng9jai.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpl0ng9jai.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpl0ng9jai.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > MOD:\n\
    \        return modp(n - 1, MOD)\n    if p % 2 == 0:\n        return modp(n //\
    \ 2, p) * p\n    if p % 3 == 0:\n        return modp(n // 3, p) * (p - 1)\n  \
    \  if p % 5 == 0:\n        return modp(n // 5, p) * (p - 2)\n    return modp(n\
    \ // 2, p) * (p + 1)\n\n\ndef check(candidate):\n    assert candidate(3, 5) ==\
    \ 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n\
    \    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7bfa3ogb.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp7bfa3ogb.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp7bfa3ogb.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmp7bfa3ogb.py\", line\
    \ 20, in modp\n    if p > MOD:\nNameError: name 'MOD' is not defined\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqw42plcx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqw42plcx.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqw42plcx.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if p == 1 or p == -1:\n\
    \        return pow(n, (p + 1) // 2, p)\n    if p == 0:\n        return 0\n  \
    \  bits = p - 1\n    return ((n % p) + pow(2, bits, p)) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpymubhm_m.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpymubhm_m.py\", line 34,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpymubhm_m.py\", line 25, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 0:\n        raise ZeroDivisionError('modp(0, 0)\
    \ raises ZeroDivisionError')\n    if n == 0:\n        return p\n    if n < 0:\n\
    \        return modp(n - 1, p)\n    if p < 0:\n        return modp(-n, p)\n  \
    \  if p == 1 or p == 2:\n        return n\n    if p == n:\n        return p\n\
    \    if n % p == 0:\n        return modp(n // p, p)\n    return modp(n % p, p)\n\
    \n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3yv3kfn5.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp3yv3kfn5.py\", line 41,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3yv3kfn5.py\", line 32, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmp3yv3kfn5.py\", line\
    \ 28, in modp\n    return modp(n % p, p)\n  File \"/tmp/tmp3yv3kfn5.py\", line\
    \ 28, in modp\n    return modp(n % p, p)\n  File \"/tmp/tmp3yv3kfn5.py\", line\
    \ 28, in modp\n    return modp(n % p, p)\n  [Previous line repeated 993 more times]\n\
    \  File \"/tmp/tmp3yv3kfn5.py\", line 14, in modp\n    if p == 0:\nRecursionError:\
    \ maximum recursion depth exceeded in comparison\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 14:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n     \
    \   return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 17:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p\
    \ * p * p * p * p * p * p) % p) % p) % p\n    if n == 21:\n        return (((p\
    \ * \ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpwex77g65.py\", line 58\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ p - (p // 4)\n    if p % 8 == 0:\n        return p - (p // 8)\n    if p % 16\
    \ == 0:\n        return p - (p // 16)\n    return p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptbzdoch1.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmptbzdoch1.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptbzdoch1.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p == n:\n        return p\n    if p ==\
    \ n:\n        return p\n    if n % 2 == 1:\n        return modp(n // 2, p)\n \
    \   if n % 2 == 0:\n        return modp(n // 2, p) + p\n    return modp(n // 2,\
    \ p) + p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__728snn.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp__728snn.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp__728snn.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfy_s38u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptfy_s38u.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptfy_s38u.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if n == 0:\n        return 0\n    if n == 1:\n        return\
    \ p\n    if n == 2:\n        return p\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p)\n    return modp(n - 1, p)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp42j2h8sj.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp42j2h8sj.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp42j2h8sj.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n\
    \ == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 and\
    \ p % 4 == 0:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 24 and p % 8 == 0:\n        return (((p * p * p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 25 and p % 16 == 0:\n      \
    \  return (((p * p * p * p\ndef check(candidate):\n    assert candidate(3, 5)\
    \ == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) ==\
    \ 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n \
    \   assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpxez0clyr.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p // 2)\n    return p + (p // 2)\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdv7r8vvv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdv7r8vvv.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpdv7r8vvv.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return modp(n // 2, p) + p\n    if p %\
    \ 3 == 0:\n        return modp(n // 3, p) + 3 * p\n    return modp(n // 2, p)\
    \ + p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8e3fc3rl.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp8e3fc3rl.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8e3fc3rl.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ n - (n % p)\n    if p % 2 == 0:\n        return n - pow(2, n)\n    return n\
    \ - pow(2, n + 1)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n\
    \    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n   \
    \ assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5d3syqqw.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp5d3syqqw.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp5d3syqqw.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 9:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n\
    \ == 13:\n        return ((p * p * p * p * p * p * p * p * p) % p) % p\n    if\
    \ n == 14:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 15:\n        return (((p * p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 16:\n        return (((p * p * p * p * p * p *\
    \ p * p * p * p * p) % p) % p) % p\n    if n == 17:\n        return (((p * p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n    \
    \    return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 19:\n        return (((p * p * p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 20:\n        return (((p * p * p * p\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp36tfn139.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    return modp(n\
    \ - 1, p) + p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3j2f7ve3.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp3j2f7ve3.py\", line 33,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3j2f7ve3.py\", line 24, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0ng9jai.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpl0ng9jai.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpl0ng9jai.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2ct0ri4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb2ct0ri4.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb2ct0ri4.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n % p) + p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvd_t8d6l.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpvd_t8d6l.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpvd_t8d6l.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p) % p) % p)\
    \ % p\n    if n == 5:\n        return (((p * p * p * p) % p) % p) % p\n    if\
    \ n == 6:\n        return (((p * p * p * p * p) % p) % p) % p\n    if n == 7:\n\
    \        return (((p * p * p * p * p * p) % p) % p) % p\n    if n == 8:\n    \
    \    return (((p * p * p * p * p * p * p) % p) % p) % p\n    if n == 9:\n    \
    \    return (((p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 10:\n\
    \        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n\
    \ == 11:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 12:\n        return (((p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 13:\n        return (((p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17:\n\
    \        return (((p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 18:\n        return (((p * p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 19:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 20:\n        return (((p\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp0n0uibms.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12:\n        return (((p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 13:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 14:\n        return (((p\
    \ * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n  \
    \      return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 16:\n        return (((p * p * p * p * p * p * p * p * p * p * p\
    \ * p * p) % p) % p) % p\n    if n == 17:\n        return (((p * p * p * p * p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 18:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 19:\n        return (((p * p * p\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmppl8m0io6.py\", line 54\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    n -= 1\n    return p % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp68d1ucl8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp68d1ucl8.py\", line 36,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp68d1ucl8.py\", line 27, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n % p) + p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvd_t8d6l.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpvd_t8d6l.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpvd_t8d6l.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > MOD:\n\
    \        return modp(n - 1, MOD)\n    if p == MOD:\n        return n\n    if p\
    \ == 3:\n        return modp(n - 1, 5) * 3\n    if p == 5:\n        return modp(n\
    \ - 1, 7) * 3\n    if p == 7:\n        return modp(n - 1, 9) * 3\n    if p ==\
    \ 9:\n        return modp(n - 1, 11) * 3\n    if p == 11:\n        return modp(n\
    \ - 1, 13) * 3\n    if p == 13:\n        return modp(n - 1, 15) * 3\n    if p\
    \ == 15:\n        return modp(n - 1, 17) * 3\n    if p == 17:\n        return\
    \ modp(n - 1, 19) * 3\n    if p == 19:\n        return modp(n - 1, 21) * 3\n \
    \   if p == 21:\n        return modp(n - 1, 23) * 3\n    if p == 23:\n       \
    \ return modp(n - 1, 25) * 3\n    if p == 25:\n        return modp(n - 1, 27)\
    \ * 3\n    if p == 27:\n        return modp(n - 1, 29) * 3\n    if p == 29:\n\
    \        return modp(n - 1, 31) * 3\n    if p == 31:\n        return modp(n -\
    \ 1, 33) * 3\n    if p == 33:\n        return modp(n - 1, 35) * 3\n    if p ==\
    \ 35:\n        return modp(n - 1, 37) * 3\n    if p == 37:\n        return modp(n\
    \ - 1, 39) * 3\n    if p == 39:\n        return modp(n - 1, 41) * 3\n    if p\
    \ == 41:\n        return modp(n - 1, 43) * 3\n    if p == 43:\n        return\
    \ modp(n - 1, 45) * 3\n    if p == 45:\n        return modp(n - 1, 47) * 3\n \
    \   if p == 47:\n        return modp(n - 1, 49) * 3\n    if p == 49:\n       \
    \ return modp(n - 1, 51) * 3\n    if p == 51:\n        return modp(n - 1, 53)\
    \ * 3\n    if p == 53:\n        return modp(n - 1, 55) * 3\n    if p == 55:\n\
    \        return modp(n - 1, 57) * 3\n    if p == 57:\n        return modp(n -\
    \ 1, 59) * 3\n    if p == 59:\n        return modp(n - 1, 61) * 3\n    if p ==\
    \ 61:\n        return modp(n - 1, 63) * 3\n    if p == 63:\n        return modp(n\
    \ - 1, 65) * 3\n    if p == 65:\n        return modp(n - 1, 67) * 3\n    if \n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpsxdo3l7g.py\", line 88\n    if \n      ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p % 2 == 0:\n        return modp(n // 2,\
    \ p) // 2\n    if p % 3 == 0:\n        return modp(n // 3, p) // 3\n    return\
    \ modp(n // 2, p) // 2\n\n\ndef check(candidate):\n    assert candidate(3, 5)\
    \ == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) ==\
    \ 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n \
    \   assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcofvn_37.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpcofvn_37.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpcofvn_37.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfy_s38u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptfy_s38u.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptfy_s38u.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p % p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpssotjpt5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpssotjpt5.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpssotjpt5.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 1:\n        raise ValueError(f\"p must be >= 1, got {p}\"\
    )\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    q = p // 2\n    r =\
    \ modp(n // 2, p)\n    if n % 2 == 1:\n        return (r + q) % p\n    else:\n\
    \        return (r - q) % p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg29l8hfn.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpg29l8hfn.py\", line 40,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpg29l8hfn.py\", line 31, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    # From here on we assume n>=6\n    s = p % n\n    p1 = (p - s) // n\n   \
    \ p2 = (p - p1) // n\n    p3 = (p - p2) // n\n    return p1 * p2 * p3 % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8smk5he6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8smk5he6.py\", line 44,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp8smk5he6.py\", line 35, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 1:\n        raise ValueError(f\"p must be >= 1, got {p}\"\
    )\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 == 0:\n  \
    \      return modp(n // 3, p)\n    if n % p == 0:\n        return modp(n // p,\
    \ p)\n    if n % p == 1:\n        return modp(n // p, p)\n    if n % p == 2:\n\
    \        return modp(n // p, p)\n    if n % p == 3:\n        return modp(n //\
    \ p, p)\n    raise ValueError(f\"modp({}, {}) not defined\".format(n, p))\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpzsiogg7y.py\", line 32\n    raise ValueError(f\"modp({},\
    \ {}) not defined\".format(n, p))\n                     ^\nSyntaxError: f-string:\
    \ empty expression not allowed\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p == 2:\n        return n\n    if p % 4 == 0:\n    \
    \    return n & 3\n    if p % 8 == 0:\n        return n >> 3\n    if p % 16 ==\
    \ 0:\n        return n << 3\n    return ((n % p) + p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3ats8gch.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp3ats8gch.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3ats8gch.py\", line 31, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 0:\n        raise ZeroDivisionError('modp(0, 0)\
    \ is not defined')\n    if p == n:\n        return p\n    if n < 0:\n        return\
    \ modp(n - 2, p) + p\n    if n == 0:\n        return 0\n    d, r = divmod(n, p)\n\
    \    if d:\n        return modp(d*2, p) + r\n    return r\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu73d_pic.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpu73d_pic.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpu73d_pic.py\", line 29, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqw42plcx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqw42plcx.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqw42plcx.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9isj2lp3.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp9isj2lp3.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp9isj2lp3.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p % p * p % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj94avk0k.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpj94avk0k.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpj94avk0k.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > 0:\n\
    \        return modp(n - 1, p)\n    if n == 1 or p == 0:\n        return p\n \
    \   if p == -1:\n        return modp(n - 1, p)\n    if p == 1:\n        return\
    \ modp(n - 1, p) * (-1)\n    if p == 2:\n        return modp(n - 1, p)\n    if\
    \ p == 3:\n        return modp(n - 1, p)\n    if p == 6:\n        return modp(n\
    \ - 1, p)\n    if p == 7:\n        return modp(n - 1, p)\n    if p == 8:\n   \
    \     return modp(n - 1, p)\n    if p == 9:\n        return modp(n - 1, p)\n \
    \   if p == 10:\n        return modp(n - 1, p)\n    if p == 11:\n        return\
    \ modp(n - 1, p)\n    if p == 12:\n        return modp(n - 1, p)\n    if p ==\
    \ 13:\n        return modp(n - 1, p)\n    if p == 14:\n        return modp(n -\
    \ 1, p)\n    if p == 15:\n        return modp(n - 1, p)\n    if p == 16:\n   \
    \     return modp(n - 1, p)\n    if p == 17:\n        return modp(n - 1, p)\n\
    \    if p == 18:\n        return modp(n - 1, p)\n    if p == 19:\n        return\
    \ modp(n - 1, p)\n    if p == 20:\n        return modp(n - 1, p)\n    if p ==\
    \ 21:\n        return modp(n - 1, p)\n    if p == 22:\n        return modp(n -\
    \ 1, p)\n    if p == 23:\n        return modp(n - 1, p)\n    if p == 24:\n   \
    \     return modp(n - 1, p)\n    if p == 25:\n        return modp(n - 1, p)\n\
    \    if p == 26:\n        return modp(n - 1, p)\n    if p == 27:\n        return\
    \ modp(n - 1, p)\n    if p == 28:\n        return modp(n - 1, p)\n    if p ==\
    \ 29:\n        return modp(n - 1, p)\n    if p == 30:\n        return modp(n -\
    \ 1, p)\n    if p == 31:\n        return modp(n - 1, p)\n    if p == 32:\n   \
    \     return modp(n - 1, p)\n    if p == 33:\n        return modp(n - 1, p)\n\
    \    if p == 34:\n        return modp(n - 1, p)\n    if p == 35:\n        return\
    \ modp(n - 1, p)\n    if p == 36:\n        return modp(n - 1, p)\n    if p ==\
    \ 37:\n        return modp(n - 1, p)\n    if p == 38:\n        return modp(n -\
    \ 1, p)\n    if p == 39:\n        return modp(n - 1, p)\n    if p == \ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpvpoc8en9.py\", line 100\n    if p == \n           ^\n\
    SyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 9:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n\
    \ == 13:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p * p * p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 17:\n        return (((p * p * p * p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 18:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n    \
    \    return (((p * p * p * p * p * p * p * p\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp18pmig0w.py\", line 54\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > MOD:\n\
    \        return modp(n - 1, MOD)\n    if p % 4 == 3:\n        return modp(n -\
    \ 1, p)\n    if p % 8 == 5:\n        return modp(n - 1, p)\n    if p % 8 == 7:\n\
    \        return modp(n - 1, p)\n    if p % 8 == 11:\n        return modp(n - 1,\
    \ p)\n    if p % 8 == 13:\n        return modp(n - 1, p)\n    if p % 8 == 15:\n\
    \        return modp(n - 1, p)\n    return modp(n - 1, p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkhw90tut.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpkhw90tut.py\", line 47,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpkhw90tut.py\", line 38, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmpkhw90tut.py\", line\
    \ 20, in modp\n    if p > MOD:\nNameError: name 'MOD' is not defined\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqw42plcx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqw42plcx.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqw42plcx.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n\
    \ == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 or n\
    \ == 24:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 25 or n == 26:\n        return (((p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 27 or n == 28:\n        return (((p *\
    \ p * p * p * p\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbn9rek5f.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p - (p // p) * p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpum178oor.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpum178oor.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpum178oor.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 1:\n        return\
    \ p % p\n    if n == 2:\n        return ((p * p) % p) % p\n    if n == 3:\n  \
    \      return (((p * p * p) % p) % p) % p\n    if n == 4:\n        return (((p\
    \ * p * p * p) % p) % p) % p\n    if n == 5:\n        return (((p * p * p * p)\
    \ % p) % p) % p\n    if n == 6:\n        return (((p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 7:\n        return (((p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if \ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp78wr4rog.py\", line 64\n    if \n      ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 0:\n        raise ZeroDivisionError('modp(0, 0)\
    \ is not defined')\n    if n == 0:\n        return 0\n    n %= p\n    if n ==\
    \ 0:\n        return p\n    return p - (p % n)\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvyivm75z.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpvyivm75z.py\", line 34,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpvyivm75z.py\", line 26, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p % n)\n    return p - ((p - 1) * (n % 2))\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_oqhyalv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_oqhyalv.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp_oqhyalv.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if\
    \ n % 3 == 0 and n != 1:\n        return modp(n // 3, p)\n    if n % 3 == 0:\n\
    \        return modp(n // 3, p)\n    if n % 5 == 0 and n != 1:\n        return\
    \ modp(n // 5, p)\n    if n % 7 == 0 and n != 1:\n        return modp(n // 7,\
    \ p)\n    return modp(n // 2, p)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjlj65jtw.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpjlj65jtw.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpjlj65jtw.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if n == 1:\n        return p\n    if n == 2:\n        return\
    \ p + p\n    if n % 2 == 0:\n        return modp(n // 2, p)\n    return modp(n\
    \ - 2, p) + p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n  \
    \  assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_mxil2f.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpo_mxil2f.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpo_mxil2f.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    if p % 256 == 0:\n        return modp(n // 256, p) + 17\n\
    \    return modp(n // 256, p) + 17\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzuely585.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpzuely585.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpzuely585.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqw42plcx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqw42plcx.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqw42plcx.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfy_s38u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptfy_s38u.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptfy_s38u.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p - ((p - 1) * (p - 1) % p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2lmuy5qk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp2lmuy5qk.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp2lmuy5qk.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p == n:\n        return p\n    if p ==\
    \ n:\n        return p\n    if n % 2 == 1:\n        return modp(n // 2, p)\n \
    \   if n % 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 3 == 0:\n \
    \       return modp(n // 3, p) * p * p\n    if n % 3 == 1:\n        return modp(n\
    \ // 3, p) * p\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn4fj1pow.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpn4fj1pow.py\", line 46,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpn4fj1pow.py\", line 37, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p == n:\n        return p\n    if p ==\
    \ n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n   \
    \     return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == n:\n\
    \        return p\n    if p == n:\n        return p\n    if p == n:\n        return\
    \ p\n    if p == n:\n        return p\n    if p == n:\n        return p\n    if\
    \ p == n:\n        return p\n    if p == n:\n        return p\n    if p == \n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp0a0usfsw.py\", line 140\n    if p == \n           ^\n\
    SyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n << 1) + 1) % (p + 1)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplw85q7ba.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplw85q7ba.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmplw85q7ba.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    # n >= 6\n    return (((p * p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpje79yvgu.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpje79yvgu.py\", line 40,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpje79yvgu.py\", line 31, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfy_s38u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptfy_s38u.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptfy_s38u.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p - (p // p) * p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpum178oor.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpum178oor.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpum178oor.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p - ((p - 1) * (p - 1) % p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2lmuy5qk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp2lmuy5qk.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp2lmuy5qk.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2ct0ri4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb2ct0ri4.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb2ct0ri4.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p == n:\n        return p\n    if p ==\
    \ n:\n        return p\n    if p == n:\n        return p\n    if n % 2 == 1:\n\
    \        return modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n //\
    \ 2, p) * p\n    if n % 2 == 1:\n        return modp(n // 2, p)\n    if n % 2\
    \ == 0:\n        return modp(n // 2, p) * p\n    if n % 2 == 1:\n        return\
    \ modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n // 2, p) * p\n  \
    \  if n % 2 == 1:\n        return modp(n // 2, p)\n    if n % 2 == 0:\n      \
    \  return modp(n // 2, p) * p\n    if n % 2 == 1:\n        return modp(n // 2,\
    \ p)\n    if n % 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 2 ==\
    \ 1:\n        return modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p) * p\n    if n % 2 == 1:\n        return modp(n // 2, p)\n    if n %\
    \ 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 2 == 1:\n        return\
    \ modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n // 2, p) * p\n  \
    \  if n % 2 == 1:\n        return modp(n // 2, p)\n    if n % 2 == 0:\n      \
    \  return modp(n // 2, p) * p\n    if n % 2 == 1:\n        return modp(n // 2,\
    \ p)\n    if n % 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 2 ==\
    \ 1:\n        return modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p) * p\n    if n % 2 == 1:\n        return modp(n // 2, p)\n    if n %\
    \ 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 2 == 1:\n        return\
    \ modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n // 2, p) * p\n  \
    \  if n % 2 == 1:\n        return modp(n // 2, p)\n    if n % 2 == 0:\n      \
    \  return modp(n // 2, p) * p\n    if n % 2 == 1:\n        return modp(n // 2,\
    \ p)\n    if n % 2 == 0:\n        return modp(n // 2, p) * p\n    if n % 2 ==\
    \ 1:\n        return modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n\
    \ // 2, p) * p\n    if n % 2 == \ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpies83dxv.py\", line 92\n    if n % 2 == \n           \
    \    ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiidy1sle.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpiidy1sle.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpiidy1sle.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) == 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0ng9jai.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpl0ng9jai.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpl0ng9jai.py\", line 18, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > 0:\n\
    \        return modp(n - 1, p)\n    return 1\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_4sh341p.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_4sh341p.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp_4sh341p.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) * (-1)\n    if n == 0:\n        return 0\n    if n == 1:\n  \
    \      return p\n    if n == 2:\n        return p + 1\n    if n % 2 == 0:\n  \
    \      return modp(n // 2, p) + p\n    return modp(n // 2, p) * (-1)\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwzpy6121.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpwzpy6121.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpwzpy6121.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2ct0ri4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb2ct0ri4.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb2ct0ri4.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprpmflv3b.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprpmflv3b.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmprpmflv3b.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    return (((p * p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_dn4jf1b.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_dn4jf1b.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp_dn4jf1b.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2ct0ri4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb2ct0ri4.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb2ct0ri4.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p)\n    if\
    \ n % 3 == 0 or n % 5 == 0:\n        return modp(n // 3, p)\n    return modp(n\
    \ // 5, p)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfl624q6d.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpfl624q6d.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpfl624q6d.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfy_s38u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptfy_s38u.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptfy_s38u.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if n == 0:\n        return 0\n    ans = 1\n    while p\
    \ > 2:\n        if p & 1:\n            ans *= n\n            n -= 1\n        p\
    \ >>= 1\n    return ans % p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpujqvtjuy.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpujqvtjuy.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpujqvtjuy.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if n == 0:\n        return 0\n    ans = 1\n    while n\
    \ % p == 0:\n        ans *= p\n        n //= p\n    return ans * p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7nbbmh86.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp7nbbmh86.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp7nbbmh86.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p == 2:\n        return n\n    if p % 4 == 0:\n    \
    \    return modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n //\
    \ 8, p) + 4\n    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if\
    \ p % 32 == 0:\n        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n  \
    \      return modp(n // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef\
    \ check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxc0damsy.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpxc0damsy.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpxc0damsy.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 9:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if n\
    \ == 13:\n        return (((p * p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 14:\n        return (((p * p * p * p * p * p * p * p * p\
    \ * p * p * p) % p) % p) % p\n    if n == 15:\n        return (((p * p * p * p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 16:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 17:\n        return (((p * p * p * p * p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 18:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 19:\n    \
    \    return (((p * p * p * p * p * p * p * p\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp18pmig0w.py\", line 54\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) * 3\n  \
    \  if n % p == 0:\n        return modp(n // p, p)\n    return modp(n % p, p)\n\
    \n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9h17uvye.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp9h17uvye.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp9h17uvye.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmp9h17uvye.py\", line\
    \ 26, in modp\n    return modp(n % p, p)\n  File \"/tmp/tmp9h17uvye.py\", line\
    \ 26, in modp\n    return modp(n % p, p)\n  File \"/tmp/tmp9h17uvye.py\", line\
    \ 26, in modp\n    return modp(n % p, p)\n  [Previous line repeated 993 more times]\n\
    \  File \"/tmp/tmp9h17uvye.py\", line 14, in modp\n    if n == 0:\nRecursionError:\
    \ maximum recursion depth exceeded in comparison\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) * (-1)\n    if n == 0:\n        return 0\n    ans = 1\n    while\
    \ n % p == 0:\n        ans = ans * p\n        n //= p\n    return ans * p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm_v0vosq.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpm_v0vosq.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpm_v0vosq.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiidy1sle.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpiidy1sle.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpiidy1sle.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3eyg8pj3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3eyg8pj3.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3eyg8pj3.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfy_s38u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptfy_s38u.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptfy_s38u.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > n:\n\
    \        return modp(n - 1, p)\n    if p == n:\n        return p\n    if p ==\
    \ n:\n        return p\n    if p == n:\n        return p\n    if n % 2 == 1:\n\
    \        return modp(n // 2, p)\n    if n % 2 == 0:\n        return modp(n //\
    \ 2, p) % p\n    return modp(n // 2, p) % p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb09lbrki.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpb09lbrki.py\", line 45,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb09lbrki.py\", line 36, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    if p % 3 == 0:\n        return modp(n // 3, p) * 3\n  \
    \  if n % p == 0:\n        return modp(n // p, p)\n    return modp((n + 1) //\
    \ p, p)\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzvs1xqar.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpzvs1xqar.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpzvs1xqar.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_pa13ks.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpj_pa13ks.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpj_pa13ks.py\", line 18, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2ct0ri4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb2ct0ri4.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb2ct0ri4.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 ==\
    \ 0:\n        return modp(n // 3, p)\n    if n % 3 == 0 and n != 1:\n        return\
    \ modp(n // 3, p)\n    if n % 3 == 1:\n        return modp((3 * n) // 3, p)\n\
    \    if n % 3 == 2:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 0:\n\
    \        return modp((3 * n) // 3, p)\n    if n % 3 == 1:\n        return modp((3\
    \ * n) // 3, p)\n    if n % 3 == 2:\n        return modp((3 * n) // 3, p)\n  \
    \  if n % 3 == 0:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 1:\n\
    \        return modp((3 * n) // 3, p)\n    if n % 3 == 2:\n        return modp((3\
    \ * n) // 3, p)\n    if n % 3 == 0:\n        return modp((3 * n) // 3, p)\n  \
    \  if n % 3 == 1:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 2:\n\
    \        return modp((3 * n) // 3, p)\n    if n % 3 == 0:\n        return modp((3\
    \ * n) // 3, p)\n    if n % 3 == 1:\n        return modp((3 * n) // 3, p)\n  \
    \  if n % 3 == 2:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 0:\n\
    \        return modp((3 * n) // 3, p)\n    if n % 3 == 1:\n        return modp((3\
    \ * n) // 3, p)\n    if n % 3 == 2:\n        return modp((3 * n) // 3, p)\n  \
    \  if n % 3 == 0:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 1:\n\
    \        return modp((3 * n) // 3, p)\n    if n % 3 == 2:\n        return modp((3\
    \ * n) // 3, p)\n    if n % 3 == 0:\n        return modp((3 * n) // 3, p)\n  \
    \  if n % 3 == 1:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 2:\n\
    \        return modp((3 * n) // 3, p)\n    if n % 3 == 0:\n        return modp((3\
    \ * n) // 3, p)\n    if n % 3 == 1:\n        return modp((3 * n) // 3, p)\n  \
    \  if n % 3 == 2:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 0:\n\
    \        return modp((3 * n) // 3, p)\n    if n % 3 == 1:\n        return modp((3\
    \ * n) // 3, p)\n    if n % 3 == 2:\n        return modp((3 * n) // 3, p)\n  \
    \  if n % 3 == 0:\n        return modp((3 * n) // 3, p)\n    if n % 3 == 1:\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpqzemd7qd.py\", line 86\n    def check(candidate):\n  \
    \  ^\nIndentationError: expected an indented block\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p < 0:\n        return modp(n - 1, p) * (-1)\n    if p > MOD:\n\
    \        return modp(n - 1, MOD)\n    if p == MOD:\n        return p\n    k =\
    \ n // p\n    if k == 0:\n        return p\n    if k == 1:\n        return MOD\n\
    \    return modp(k, MOD)\n\n\ndef check(candidate):\n    assert candidate(3, 5)\
    \ == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) ==\
    \ 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n \
    \   assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp25jma8c_.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp25jma8c_.py\", line 42,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp25jma8c_.py\", line 33, in\
    \ check\n    assert candidate(3, 5) == 3\n  File \"/tmp/tmp25jma8c_.py\", line\
    \ 20, in modp\n    if p > MOD:\nNameError: name 'MOD' is not defined\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n % p) + p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvd_t8d6l.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpvd_t8d6l.py\", line 27,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpvd_t8d6l.py\", line 19, in\
    \ check\n    assert candidate(1101, 101) == 2\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return p - 1\n    return p + modp(n -\
    \ 1, p) - 1\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert\
    \ candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3,\
    \ 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) ==\
    \ 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1om8whs7.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1om8whs7.py\", line 33,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp1om8whs7.py\", line 24, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqw42plcx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpqw42plcx.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpqw42plcx.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if p == 2:\n        return n\n    if n < 0:\n        return\
    \ modp(n - 1, p) % p\n    if n == 0:\n        return 0\n    ans = 1\n    while\
    \ n % p == 0:\n        ans = (ans * p + n) % p\n        n //= p\n    return ans\n\
    \n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpogpyq4jy.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpogpyq4jy.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpogpyq4jy.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p % p\n    return p - (p // p) * p\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpum178oor.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpum178oor.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpum178oor.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2ct0ri4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb2ct0ri4.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb2ct0ri4.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfy_s38u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptfy_s38u.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptfy_s38u.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 15\
    \ or n == 0:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 16 or n == 17:\n        return (((p * p * p * p * p * p * p *\
    \ p * p) % p) % p) % p\n    if n == 18 or n == 19:\n        return (((p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 20 or n == 21:\n     \
    \   return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 22 or n == 23:\n        return (((p * p * p * p * p * p * p * p * p * p) % p)\
    \ % p) % p\n    if n == 24 or n == 25:\n        return (((p * p * p * p * p *\
    \ p * p * p * p * p) % p) % p) % p\n    if n == 26 or n == 27:\n        return\
    \ (((p * p * p * p * p\ndef check(candidate):\n    assert candidate(3, 5) == 3\n\
    \    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n   \
    \ assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert\
    \ candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7saiq53s.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2ct0ri4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb2ct0ri4.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb2ct0ri4.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p // 2)\n    return p + (p // 2)\n\n\ndef check(candidate):\n  \
    \  assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdv7r8vvv.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdv7r8vvv.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpdv7r8vvv.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    # ...\n    if n == 20:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p * p * p * p * p * p * p * p * p * \ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpro1n_x7o.py\", line 29\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2ct0ri4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb2ct0ri4.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb2ct0ri4.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    return (((p * p * p * p * p * p) % p) % p) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_dn4jf1b.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_dn4jf1b.py\", line 39,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp_dn4jf1b.py\", line 30, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    return ((n) % (p)) + (((n) % (p)) > 0)\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfy_s38u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptfy_s38u.py\", line 26,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmptfy_s38u.py\", line 17, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p < 0:\n        return modp(-n, p)\n    if p == 0:\n\
    \        return n\n    if p == n:\n        return p\n    if p == 1 or n == p:\n\
    \        return p\n    if p == 2:\n        return pow(2, n - 1, p)\n    if p ==\
    \ 3:\n        return pow(3, n - 1, p)\n    if p == 4:\n        return pow(4, n\
    \ - 1, p)\n    if p == 5:\n        return pow(5, n - 1, p)\n    if p == 6:\n \
    \       return pow(6, n - 1, p)\n    if p == 7:\n        return pow(7, n - 1,\
    \ p)\n    if p == 8:\n        return pow(8, n - 1, p)\n    if p == 9:\n      \
    \  return pow(9, n - 1, p)\n    if p == 10:\n        return pow(10, n - 1, p)\n\
    \    if p == 11:\n        return pow(11, n - 1, p)\n    if p == 12:\n        return\
    \ pow(12, n - 1, p)\n    if p == 13:\n        return pow(13, n - 1, p)\n    if\
    \ p == 14:\n        return pow(14, n - 1, p)\n    if p == 15:\n        return\
    \ pow(15, n - 1, p)\n    if p == 16:\n        return pow(16, n - 1, p)\n    if\
    \ p == 17:\n        return pow(17, n - 1, p)\n    if p == 18:\n        return\
    \ pow(18, n - 1, p)\n    if p == 19:\n        return pow(19, n - 1, p)\n    if\
    \ p == 20:\n        return pow(20, n - 1, p)\n    if p == 21:\n        return\
    \ pow(2, n - 1, p)\n    if p == 22:\n        return pow(3, n - 1, p)\n    if p\
    \ == 23:\n        return pow(4, n - 1, p)\n    if p == 24:\n        return pow(5,\
    \ n - 1, p)\n    if p == 25:\n        return pow(6, n - 1, p)\n    if p == 26:\n\
    \        return pow(7, n - 1, p)\n    if p == 27:\n        return pow(8, n - 1,\
    \ p)\n    if p == 28:\n        return pow(9, n - 1, p)\n    if p == 29:\n    \
    \    return pow(10, n - 1, p)\n    if p == 30:\n        return pow(11, n - 1,\
    \ p)\n    if p == 31:\n        return pow(12, n - 1, p)\n    if p == 32:\n   \
    \     return pow(13, n - 1, p)\n    if p == 33:\n        return pow(14, n - 1,\
    \ p)\n    if p == 34:\n        return pow(15, n - 1, p)\n    if p == 35:\n   \
    \     return pow(16, n - 1, p)\n    if p == 36:\n        return pow(17, n - 1,\
    \ p)\n    if p == 37:\n        return pow(18, n - 1, p)\n    if p == 38:\n   \
    \     return pow(19, n - 1, p)\n    if p == 39:\n        return \ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp34dyislh.py\", line\
    \ 114, in <module>\n    test_check()\n  File \"/tmp/tmp34dyislh.py\", line 112,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp34dyislh.py\", line 103, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 9:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p)\
    \ % p\n    if n == 10:\n        return (((p * p * p * p * p * p * p * p * p) %\
    \ p) % p) % p\n    if n == 11:\n        return (((p * p * p * p * p * p * p *\
    \ p * p * p) % p) % p) % p\n    if n == 12 or n == 0:\n        return p\n    if\
    \ n == 13 or n == 14:\n        return ((p * p * p * p * p * p * p * p * p * p\
    \ * p) % p) % p\n    if n == 15 or n == 16:\n        return (((p * p * p * p *\
    \ p * p * p * p * p * p * p) % p) % p) % p\n    if n == 17 or n == 18:\n     \
    \   return (((p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n \
    \   if n == 19 or n == 20:\n        return (((p * p * p * p * p * p * p * p *\
    \ p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 23 or n == 24:\n        return (((p * p * p * p * p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 25 or n == 26:\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpibw_snzx.py\", line 54\n    def check(candidate):\n  \
    \  ^\nIndentationError: expected an indented block\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n < 0:\n        return\
    \ modp(abs(n), p)\n    if p == 2:\n        return n\n    if p % 2 == 0:\n    \
    \    return modp(n // 2, p)\n    return modp(n // 2, p) + p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ozbdzsd.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4ozbdzsd.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp4ozbdzsd.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % pow(2, n)\n\n\ndef check(candidate):\n    assert candidate(3,\
    \ 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101)\
    \ == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n\
    \    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpah6aqmsc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpah6aqmsc.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpah6aqmsc.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 ==\
    \ 0:\n        return modp(n // 3, p) * 3\n    if p % 5 == 0:\n        return modp(n\
    \ // 5, p) * 5\n    return modp(n // 2, p) * 2 + modp(n // 3, p) * 3 + modp(n\
    \ // 5, p) * 5\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe3am53vo.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpe3am53vo.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpe3am53vo.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13:\n        return\
    \ ((p * p * p * p * p * p * p * p * p) % p) % p\n    if n == 14:\n        return\
    \ (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 15:\n     \
    \   return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n ==\
    \ 16:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17:\n        return (((p * p * p * p * p * p * p * p * p * p * p)\
    \ % p) % p) % p\n    if n == 18:\n        return (((p * p * p * p * p * p * p\
    \ * p * p * p * p) % p) % p) % p\n    if n == 19:\n        return (((p * p * p\
    \ * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 20:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p * p * p) % p\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpp1uqgjg6.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 2 == 0:\n        return\
    \ modp(n // 2, p)\n    return modp(n - 1, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3eyg8pj3.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3eyg8pj3.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3eyg8pj3.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    # Fall through\n    return (((p * p * p * p * p * p) % p) % p) % p\n\n\n\
    def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
    \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) ==\
    \ 8\n    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n \
    \   assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4e6ief3w.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp4e6ief3w.py\", line 40,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp4e6ief3w.py\", line 31, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 0:\n       \
    \ return p - (p % p)\n    return p + (p - 1) * (p - 1) % p\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv39b4i6n.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpv39b4i6n.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpv39b4i6n.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 4\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 8\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 16\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 32\n    return modp(n // 64, p) + 64\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiidy1sle.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpiidy1sle.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpiidy1sle.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p % 2 == 0:\n        return modp(n // 2, p)\n    if p % 3 ==\
    \ 0:\n        return modp(n // 3, p) * 3\n    if p % 5 == 0:\n        return modp(n\
    \ // 5, p) * 5\n    return modp(n // 2, p) * 2 + modp(n // 3, p) * 3 + modp(n\
    \ // 5, p) * 5\n\n\ndef check(candidate):\n    assert candidate(3, 5) == 3\n \
    \   assert candidate(1101, 101) == 2\n    assert candidate(0, 101) == 1\n    assert\
    \ candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n    assert candidate(30,\
    \ 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe3am53vo.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpe3am53vo.py\", line 37,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpe3am53vo.py\", line 28, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: 1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n == 3:\n        return\
    \ ((p * p * p) % p) % p\n    if n == 4:\n        return (((p * p * p * p) % p)\
    \ % p) % p\n    if n == 5:\n        return (((p * p * p * p * p) % p) % p) % p\n\
    \    if n == 6:\n        return (((p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 7:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 8:\n        return (((p * p * p * p * p * p * p) % p) % p) % p\n    if\
    \ n == 9:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n  \
    \  if n == 10:\n        return (((p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 11:\n        return (((p * p * p * p * p * p * p * p) % p) % p) %\
    \ p\n    if n == 12 or n == 0:\n        return p\n    if n == 13 or n == 14:\n\
    \        return ((p * p * p * p * p * p * p * p) % p) % p\n    if n == 15 or n\
    \ == 16:\n        return (((p * p * p * p * p * p * p * p * p) % p) % p) % p\n\
    \    if n == 17 or n == 18:\n        return (((p * p * p * p * p * p * p * p *\
    \ p) % p) % p) % p\n    if n == 19 or n == 20:\n        return (((p * p * p *\
    \ p * p * p * p * p * p) % p) % p) % p\n    if n == 21 or n == 22:\n        return\
    \ (((p * p * p * p * p * p * p * p * p * p) % p) % p) % p\n    if n == 23 and\
    \ p % 4 == 0:\n        return (((p * p * p * p * p * p * p * p * p * p) % p) %\
    \ p) % p\n    if n == 24 and p % 8 == 0:\n        return (((p * p * p * p * p\
    \ * p * p * p * p * p) % p) % p) % p\n    if n == 25 and p % 16 == 0:\n      \
    \  return (((p * p * p * p\ndef check(candidate):\n    assert candidate(3, 5)\
    \ == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0, 101) ==\
    \ 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101) == 1\n \
    \   assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\ndef test_check():\n\
    \    check(modp)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpxez0clyr.py\", line 56\n    def check(candidate):\n  \
    \  ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if p == 2:\n        return n\n    if p % 4 == 0:\n        return\
    \ modp(n // 4, p) + 2\n    if p % 8 == 0:\n        return modp(n // 8, p) + 3\n\
    \    if p % 16 == 0:\n        return modp(n // 16, p) + 7\n    if p % 32 == 0:\n\
    \        return modp(n // 32, p) + 11\n    if p % 64 == 0:\n        return modp(n\
    \ // 64, p) + 13\n    return modp(n // 64, p) + 17\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsqjgo8b4.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpsqjgo8b4.py\", line 43,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpsqjgo8b4.py\", line 34, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ n -= 1\n    return p % p * modp(n // 2, p)\n\n\ndef check(candidate):\n    assert\
    \ candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert candidate(0,\
    \ 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100, 101)\
    \ == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) == 3\n\n\
    def test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb2ct0ri4.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpb2ct0ri4.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmpb2ct0ri4.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
- exit_code: -1
  program: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
    \ of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n \
    \   >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n\
    \    1\n    \"\"\"\n    if n == 0:\n        return 0\n    if n == 1:\n       \
    \ return p\n    if n == 2:\n        return p % p\n    if n % 2 == 1:\n       \
    \ return p - (p % p)\n    return p - (((p // 2) * (p % 2)) % p)\n\n\ndef check(candidate):\n\
    \    assert candidate(3, 5) == 3\n    assert candidate(1101, 101) == 2\n    assert\
    \ candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n    assert candidate(100,\
    \ 101) == 1\n    assert candidate(30, 5) == 4\n    assert candidate(31, 5) ==\
    \ 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3mar9tf6.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3mar9tf6.py\", line 35,\
    \ in test_check\n    check(modp)\n  File \"/tmp/tmp3mar9tf6.py\", line 26, in\
    \ check\n    assert candidate(3, 5) == 3\nAssertionError\n"
  stdout: ''
  timestamp: 1659800150
