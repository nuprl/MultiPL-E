name: HumanEval_142_sum_squares
language: py
prompt: "from typing import List\n\ndef sum_squares(lst: List[int]) -> int:\n    \"\
  \"\"\"\n    This function will take a list of integers. For all entries in the list,\
  \ the function shall square the integer entry if its index is a \n    multiple of\
  \ 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple\
  \ of 3. The function will not \n    change the entries in the list whose indexes\
  \ are not a multiple of 3 or 4. The function shall then return the sum of all entries.\
  \ \n    \n    Examples:\n    >>> lst\n    [1, 2, 3]\n    >>> lst\n    []\n    >>>\
  \ lst\n    [-1, -5, 2, -1, -5]\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3]) == 6\n    assert candidate([1,\
  \ 4, 9]) == 14\n    assert candidate([]) == 0\n    assert candidate([1, 1, 1, 1,\
  \ 1, 1, 1, 1, 1]) == 9\n    assert candidate([-1, -1, -1, -1, -1, -1, -1, -1, -1])\
  \ == -3\n    assert candidate([0]) == 0\n    assert candidate([-1, -5, 2, -1, -5])\
  \ == -126\n    assert candidate([-56, -99, 1, 0, -2]) == 3030\n    assert candidate([-1,\
  \ 0, 0, 0, 0, 0, 0, 0, -1]) == 0\n    assert candidate([-16, -9, -2, 36, 36, 26,\
  \ -20, 25, -40, 20, -4, 12, -26, 35, 37]) == -14196\n    assert candidate([-1, -3,\
  \ 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16, 4, 10]) ==\
  \ -1448\n\ndef test_check():\n    check(sum_squares)\n\ntest_check()\n"
completions: ["    \n    sum = 0\n    \n    for i in lst:\n        if i % 3 == 0:\n\
    \            sum += i ** 2\n        elif i % 4 == 0:\n            sum += i **\
    \ 3\n        else:\n            sum += i\n    \n    return sum\n", "    \n   \
    \ sum = 0\n    \n    for index, value in enumerate(lst):\n        if index % 3\
    \ == 0:\n            sum += value\n        elif index % 4 == 0:\n            sum\
    \ += value * value\n        else:\n            sum += value * value * value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, value in enumerate(lst):\n        if index % 3 == 0:\n       \
    \     sum += value\n        elif index % 4 == 0:\n            sum += value * value\n\
    \        else:\n            sum += value * value * value\n            \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for i in lst:\n        if i % 3 == 0:\n\
    \            sum += i ** 2\n        elif i % 4 == 0:\n            sum += i **\
    \ 3\n        else:\n            sum += i\n    \n    return sum\n", "    \n   \
    \ sum = 0\n    \n    for index, value in enumerate(lst):\n        if index % 3\
    \ == 0 and index % 4 == 0:\n            sum += value\n        elif index % 3 ==\
    \ 0:\n            sum += value * value\n        elif index % 4 == 0:\n       \
    \     sum += value * value * value\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n \
    \       elif index % 4 == 0:\n            sum += value * value\n        else:\n\
    \            sum += value * value * value\n    \n    return sum\n", "    \n  \
    \  sum = 0\n    \n    for index, value in enumerate(lst):\n        if index %\
    \ 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n       \
    \     sum += value**3\n        else:\n            sum += value\n            \n\
    \    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value\n        else:\n            sum\
    \ += value\n            \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<cell>\nlst\n</cell>\n<cell>", "    \n    sum = 0\n    \n    for index,\
    \ value in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n\
    \        elif index % 4 == 0:\n            sum += value * value\n        else:\n\
    \            sum += value * value * value\n    \n    return sum\n", "    \n  \
    \  sum = 0\n    \n    for index, value in enumerate(lst):\n        if index %\
    \ 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n  \
    \          sum += value * value * value\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n \
    \       elif index % 4 == 0:\n            sum += value * value\n        else:\n\
    \            sum += value * value * value\n    \n    return sum\n", "    \n  \
    \  sum = 0\n    \n    for index, value in enumerate(lst):\n        if index %\
    \ 3 == 0:\n            sum += value\n        elif index % 4 == 0:\n          \
    \  sum += value * value\n        else:\n            sum += value * value * value\n\
    \            \n    return sum\n</cell>\n<cell>\nlst = [1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10]\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<cell>\nlst\n</cell>\n<cell>\n\
    lst = [-1, -5, 2, -1, -5]\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\n\
    Problem 7\n\n</text>\n<cell>", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value**2\n\
    \        elif index % 4 == 0:\n            sum += value**3\n        else:\n  \
    \          sum += value\n            \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0 and\
    \ index % 4 == 0:\n            sum += value\n        elif index % 3 == 0:\n  \
    \          sum += value * value\n        elif index % 4 == 0:\n            sum\
    \ += value * value * value\n        else:\n            sum += value\n    \n  \
    \  return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            sum += value\n    \n    return sum\n", "    \n    sum\
    \ = 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 ==\
    \ 0:\n            sum += value * value\n        elif index % 4 == 0:\n       \
    \     sum += value * value * value\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0 and index % 4 == 0:\n        \
    \    sum += value\n        elif index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            sum += value\n    \n    return sum\n", "    \n    sum\
    \ = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n         \
    \   sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n     \
    \   else:\n            sum += lst[i] * lst[i]\n    \n    return sum\n", "    \n\
    \    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n  \
    \          sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n    \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value**2\n\
    \        elif index % 4 == 0:\n            sum += value**3\n        else:\n  \
    \          sum += value\n            \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n \
    \           sum += value\n        elif index % 4 == 0:\n            sum += value\n\
    \        else:\n            sum += value * value\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value**2\n\
    \        elif index % 4 == 0:\n            sum += value**3\n        else:\n  \
    \          sum += value\n            \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n \
    \           sum += value\n        elif index % 4 == 0:\n            sum += value\n\
    \        else:\n            sum -= value\n    \n    return sum\n</cell>\n<cell>\n\
    sum_squares(lst)\n</cell>\n<text>\nProblem 3\nWrite a function that will take\
    \ a list of integers and return a new list with the integers sorted from smallest\
    \ to largest.\n\nExamples:\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4,\
    \ 5]\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4, 5]\n>>> lst\n[4, 2,\
    \ 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4, 5]\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n\
    [1, 2, 3, 4, 5]\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4, 5]\n>>> lst\n\
    [4, 2, 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4, 5]\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n\
    [1, 2, 3, 4, 5]\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4, 5]\n>>> lst\n\
    [4, 2, 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4, 5]\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n\
    [1, 2, 3, 4, 5]\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4, 5]\n>>> lst\n\
    [4, 2, 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4, 5]\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n\
    [1, 2, 3, 4, 5]\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4, 5]\n>>> lst\n\
    [4, 2, 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4, 5]\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n\
    [1, 2, 3, 4, 5]\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4, 5]\n>>> lst\n\
    [4, 2, 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4, 5]\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n\
    [1, 2, 3, 4, 5]\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4, 5]\n>>> lst\n\
    [4, 2, 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4, 5]\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n\
    [1, 2, 3, 4, 5]\n>>> lst\n[4, 2, 5, 1, 3]\n>>> new_lst\n[1, 2, 3, 4, 5]\n>>> lst",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0 and index % 4 == 0:\n            sum += value\n        elif index %\
    \ 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n  \
    \          sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for i in lst:\n      \
    \  if i % 3 == 0:\n            sum += i ** 2\n        elif i % 4 == 0:\n     \
    \       sum += i ** 3\n        else:\n            sum += i\n            \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n</cell>\n<cell>\nlst = [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<cell>\nlst\
    \ = [-1, -5, 2, -1, -5]\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes a list of integers and returns the sum\
    \ of the integers in the list that are not divisible by 3. The function shall\
    \ not change the list passed as argument. \nThe function shall not use the sum\
    \ function and shall not use any list comprehension. \nThe function shall not\
    \ use any for loops. \nThe function shall not use any if statements. \nThe function\
    \ shall not use any while loops. \nThe function shall not use any return statements.\
    \ \nThe function shall not use any lambda expressions. \nThe function shall not\
    \ use any try statements. \nThe function shall not use any except statements.\
    \ \nThe function shall not use any break statements. \nThe function shall not\
    \ use any continue statements. \nThe function shall not use any if statements.\
    \ \nThe function shall not use any while loops. \nThe function shall not use any\
    \ return statements. \nThe function shall not use any lambda expressions. \nThe\
    \ function shall not use any try statements. \nThe function shall not use any\
    \ except statements. \nThe function shall not use any break statements. \nThe\
    \ function shall not use any continue statements. \nThe function shall not use\
    \ any if statements. \nThe function shall not use any while loops. \nThe function\
    \ shall not use any return statements. \nThe function shall not use any lambda\
    \ expressions. \nThe function shall not use any try statements. \nThe function\
    \ shall not use any except statements. \nThe function shall not use any break\
    \ statements. \nThe function shall not use any continue statements. \nThe function\
    \ shall not use any if statements. \nThe function shall not use any while loops.\
    \ \nThe function shall not use any return statements. \nThe function shall not\
    \ use any lambda expressions. \nThe function shall not use any try statements.\
    \ \nThe function shall not use any except statements. \nThe function shall not\
    \ use any break statements. \nThe function shall not use any continue statements.\
    \ \nThe function shall not use any if statements. \nThe ", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0 and\
    \ index % 4 == 0:\n            sum += value\n        elif index % 3 == 0:\n  \
    \          sum += value * value\n        elif index % 4 == 0:\n            sum\
    \ += value * value * value\n        else:\n            sum += value\n        \
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]\n \
    \       elif i % 4 == 0:\n            sum += lst[i]\n        else:\n         \
    \   sum += lst[i] * lst[i]\n            \n    return sum\n", "    \n    sum =\
    \ 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n\
    \            sum += value * value\n        elif index % 4 == 0:\n            sum\
    \ += value * value * value\n        else:\n            sum += value\n    \n  \
    \  return sum\n    \n    ", "    \n    sum = 0\n    \n    for index, value in\
    \ enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n    \
    \    elif index % 4 == 0:\n            sum += value\n        else:\n         \
    \   sum += value * value\n            \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum\
    \ += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n        else:\n\
    \            sum += lst[i] * lst[i]\n            \n    return sum\n", "    \n\
    \    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n           \
    \ \n    return sum\n</cell>\n<cell>", "    \n    sum = 0\n    \n    for index,\
    \ value in enumerate(lst):\n        if index % 3 == 0 and index % 4 == 0:\n  \
    \          sum += value\n        elif index % 3 == 0:\n            sum += value\
    \ * value\n        elif index % 4 == 0:\n            sum += value * value * value\n\
    \        else:\n            sum += value\n            \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n    \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0 and index % 4 ==\
    \ 0:\n            sum += value\n        elif index % 3 == 0:\n            sum\
    \ += value * value\n        elif index % 4 == 0:\n            sum += value * value\
    \ * value\n        else:\n            sum += value\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value\n        elif index % 4 == 0:\n        \
    \    sum += value\n        else:\n            sum += value * value\n         \
    \   \n    return sum\n    \nprint(sum_squares(lst))\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that takes a list as an argument and returns the number\
    \ of elements in the list that are greater than zero.\n\n\n</text>\n<cell>", " \
    \   \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value\n        elif index % 4 == 0:\n        \
    \    sum += value * value\n        else:\n            sum += value * value * value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \            \n    return sum\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])\n</cell>\n\
    <cell>\nsum_squares([1,2,3])\n</cell>\n<cell>\nsum_squares([1,2,3])", "    \n\
    \    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n  \
    \          sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value * value\n        elif index % 4 == 0:\n            sum += value * value\
    \ * value\n        else:\n            sum += value\n    \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0 and index % 4 == 0:\n            sum += value\n        elif index %\
    \ 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n  \
    \          sum += value * value * value\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            sum += value\n    \n    return sum\n", "    \n    sum\
    \ = 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 ==\
    \ 0:\n            sum += value * value\n        elif index % 4 == 0:\n       \
    \     sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, value in enumerate(lst):\n        if index % 3 == 0 and index\
    \ % 4 == 0:\n            sum += value\n        elif index % 3 == 0:\n        \
    \    sum += value * value\n        elif index % 4 == 0:\n            sum += value\
    \ * value * value\n        else:\n            sum += value\n            \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]\n \
    \       elif i % 4 == 0:\n            sum += lst[i]\n        else:\n         \
    \   sum += lst[i] * lst[i]\n            \n    return sum\n", "    \n    sum =\
    \ 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n\
    \            sum += value\n        elif index % 4 == 0:\n            sum += value\
    \ * value\n        else:\n            sum += value * value * value\n         \
    \   \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, value in enumerate(lst):\n        if index % 3 == 0:\n       \
    \     sum += value\n        elif index % 4 == 0:\n            sum += value * value\n\
    \        else:\n            sum += value * value * value\n            \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for i in lst:\n        if i % 3 == 0:\n\
    \            sum += i\n        elif i % 4 == 0:\n            sum += i\n      \
    \  else:\n            sum += i*i\n    \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n \
    \           sum += value\n        elif index % 4 == 0:\n            sum += value\n\
    \        else:\n            sum += value * value\n    \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n           \
    \ \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value\n        elif index % 4 == 0:\n            sum += value * value\n \
    \       else:\n            sum += value * value * value\n    \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value\n        else:\n            sum\
    \ += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for index,\
    \ value in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n\
    \        elif index % 4 == 0:\n            sum += value * value\n        else:\n\
    \            sum += value * value * value\n    \n    return sum\n", "    \n  \
    \  sum = 0\n    \n    for index, value in enumerate(lst):\n        if index %\
    \ 3 == 0 and index % 4 == 0:\n            sum += value\n        elif index % 3\
    \ == 0:\n            sum += value * value\n        elif index % 4 == 0:\n    \
    \        sum += value * value * value\n        else:\n            sum += value\n\
    \    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, value in enumerate(lst):\n        if index % 3 == 0:\n       \
    \     sum += value\n        elif index % 4 == 0:\n            sum += value * value\n\
    \        else:\n            sum += value * value * value\n    \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value\n        elif index % 4 == 0:\n        \
    \    sum += value * value\n        else:\n            sum += value * value * value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ i in lst:\n        if i % 3 == 0:\n            sum += i\n        elif i % 4\
    \ == 0:\n            sum += i\n        else:\n            sum += i*i\n       \
    \     \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value**2\n        elif index % 4 == 0:\n            sum += value**3\n   \
    \     else:\n            sum += value\n            \n    return sum\n    \n  \
    \  ", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i %\
    \ 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n            sum\
    \ += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n            \n\
    \    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     pass\n    \n    return sum\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  sum = 0\n    \n    for index, value in enumerate(lst):\n        if index %\
    \ 3 == 0:\n            sum += value\n        elif index % 4 == 0:\n          \
    \  sum += value * value\n        else:\n            sum += value * value * value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for i in lst:\n\
    \        if i % 3 == 0:\n            sum += i ** 2\n        elif i % 4 == 0:\n\
    \            sum += i ** 3\n        else:\n            sum += i\n            \n\
    \    return sum\n", "    \n    sum = 0\n    \n    for i in lst:\n        if i\
    \ % 3 == 0:\n            sum += i\n        elif i % 4 == 0:\n            sum +=\
    \ i\n        else:\n            sum += i * i\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n           \
    \ \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    return sum\n", "    \n    sum = 0\n    \n    for index,\
    \ value in enumerate(lst):\n        if index % 3 == 0:\n            sum += value**2\n\
    \        elif index % 4 == 0:\n            sum += value**3\n        else:\n  \
    \          sum += value\n    \n    return sum\n</cell>\n<cell>", "    \n    sum\
    \ = 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 ==\
    \ 0 and index % 4 == 0:\n            sum += value\n        elif index % 3 == 0:\n\
    \            sum += value * value\n        elif index % 4 == 0:\n            sum\
    \ += value * value * value\n        else:\n            pass\n    \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if\
    \ i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n         \
    \   sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n    \n \
    \   return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n \
    \       if i % 3 == 0:\n            sum += lst[i] ** 2\n        elif i % 4 ==\
    \ 0:\n            sum += lst[i] ** 3\n        else:\n            sum += lst[i]\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n \
    \       elif index % 4 == 0:\n            sum += value * value\n        else:\n\
    \            sum += value * value * value\n            \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value\n        elif index % 4 == 0:\n        \
    \    sum += value * value\n        else:\n            sum += value * value * value\n\
    \    return sum\n</cell>\n<cell>\nlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n</cell>\n\
    <cell>\nsum_squares(lst)\n</cell>\n<cell>\nlst = [-1, -5, 2, -1, -5]\n</cell>\n\
    <cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem 7\nWrite a function that takes\
    \ a list of integers and returns a list of all positive integers less than or\
    \ equal to the sum of the integers in the list.\n\nExamples:\n>>> lst = [1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10]\n>>> positive_ints(lst)\n[1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10]\n>>> lst = [-1, -5, 2, -1, -5]\n>>> positive_ints(lst)\n[-1, -5, 2, -1,\
    \ -5]\n>>> lst = [-1, -5, 2, -1, -5, -4, -3]\n>>> positive_ints(lst)\n[-1, -5,\
    \ 2, -1, -5, -4, -3]\n>>> lst = [-1, -5, 2, -1, -5, -4, -3, -2, -1]\n>>> positive_ints(lst)\n\
    [-1, -5, 2, -1, -5, -4, -3, -2, -1]\n>>> lst = [-1, -5, 2, -1, -5, -4, -3, -2,\
    \ -1, -3]\n>>> positive_ints(lst)\n[-1, -5, 2, -1, -5, -4, -3, -2, -1, -3]\n>>>\
    \ lst = [-1, -5, 2, -1, -5, -4, -3, -2, -1, -3, -2, -1]\n>>> positive_ints(lst)\n\
    [-1, -5, 2, -1, -5, -4, -3, -2, -1, -3, -2, -1]\n>>> lst = [-1, -5, 2, -1, -5,\
    \ -4, -3, -2, -1, -3, -2, -1, -4, -3]\n>>> positive_ints(lst)\n[-1, -5, 2, -1,\
    \ -5, -4, -3, -2, -1, -3, -2, -1, -4, -3]\n>>> lst = [-1, -5, 2, -1, -5, -4, -3,\
    \ -2, -1, -3, -2, -1, -3, -2, -1, -4, -3, -2, -1]\n>>> positive_ints(lst)\n[-1,\
    \ -5, 2, -1, -5, -4, -3, -2, -1, -3, -2, -1, -3, -2, -1, -3, -2, -1, -3, -2, -1]\n\
    >>> lst = [-1, -5, 2, -1, -5, -4, -3, -2, -1, -3, -2, -1, -3, -2, -1, -3, -2,\
    \ -1, -3, -2, -1, -4, -3, -2, -1, -3, -2, -1, -3, -2, -1, -3, -2, -1, -3, -2,\
    \ -1, -3, -2, -1, -3, -2, -1, -3, -2, -1, -3, -2, -1, -3, ", "    \n    sum =\
    \ 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n\
    \            sum += value**2\n        elif index % 4 == 0:\n            sum +=\
    \ value**3\n        else:\n            sum += value\n            \n    return\
    \ sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "  \
    \  \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]**2\n        elif i % 4 == 0:\n            sum += lst[i]**3\n\
    \        else:\n            sum += lst[i]\n    \n    return sum\n", "    \n  \
    \  sum = 0\n    \n    for index, value in enumerate(lst):\n        if index %\
    \ 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n  \
    \          sum += value * value * value\n        else:\n            sum += value\n\
    \            \n    return sum\n    ", "    \n    sum = 0\n    \n    for index,\
    \ value in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\
    \ * value\n        elif index % 4 == 0:\n            sum += value * value * value\n\
    \        else:\n            sum += value\n    \n    return sum\n", "    \n   \
    \ sum = 0\n    \n    for index, value in enumerate(lst):\n        if index % 3\
    \ == 0:\n            sum += value\n        elif index % 4 == 0:\n            sum\
    \ += value * value\n        else:\n            sum += value * value * value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0 and index % 4 == 0:\n        \
    \    sum += value\n        elif index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            sum += value\n    \n    return sum\n", "    \n    sum\
    \ = 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 ==\
    \ 0:\n            sum += value\n        elif index % 4 == 0:\n            sum\
    \ += value\n        else:\n            sum -= value\n    \n    return sum\n</cell>\n\
    <cell>\nlst = [1, 2, 3, 4, 5]\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<cell>\n\
    lst = [-1, -5, 2, -1, -5]\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\n\
    Problem 7\nWrite a function that takes a string and returns the number of words\
    \ in the string. \nThe string may contain spaces, punctuation, and other non-word\
    \ characters. \nThe function shall ignore all non-word characters and count the\
    \ words. \nThe function shall ignore all punctuation and count the words.\n\n\
    Examples:\n>>> count_words('The quick brown fox jumps over the lazy dog')\n7\n\
    >>> count_words('The quick brown fox jumps over the lazy dog.')\n7\n>>> count_words('The\
    \ quick brown fox jumps over the lazy dog.!')\n7\n>>> count_words('The quick brown\
    \ fox jumps over the lazy dog.!?')\n7\n>>> count_words('The quick brown fox jumps\
    \ over the lazy dog.!?!')\n7\n>>> count_words('The quick brown fox jumps over\
    \ the lazy dog.!?!?')\n7\n>>> count_words('The quick brown fox jumps over the\
    \ lazy dog.!?!?!')\n7\n>>> count_words('The quick brown fox jumps over the lazy\
    \ dog.!?!?!?')\n7\n>>> count_words('The quick brown fox jumps over the lazy dog.!?!?!?!')\n\
    7\n>>> count_words('The quick brown fox jumps over the lazy dog.!?!?!?!?')\n7\n\
    >>> count_words('The quick brown fox jumps over the lazy dog.!?!?!?!?!')\n7\n\
    >>> count_words('The quick brown fox jumps over the lazy dog.!?!?!?!?!?')\n7\n\
    >>> count_words('The quick brown fox jumps over the lazy dog.!?!?!?!?!?!')\n7\n\
    >>> count_words('The quick brown fox jumps over the lazy dog.!?!?!?!", "    \n\
    \    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n\
    \            sum += lst[i]**3\n        else:\n            sum += lst[i]\n    \
    \        \n    return sum\n", "    \n    sum = 0\n    \n    for index in range(len(lst)):\n\
    \        if index % 3 == 0:\n            sum += lst[index]\n        elif index\
    \ % 4 == 0:\n            sum += lst[index]\n        else:\n            sum +=\
    \ lst[index] * lst[index]\n    \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for i in lst:\n        if i % 3 == 0:\n            sum += i\n        elif\
    \ i % 4 == 0:\n            sum += i\n        else:\n            sum += i * i\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<text>\nProblem 7\nWrite a function that will take a list of integers\
    \ and a number as input. The function shall then remove all entries in the list\
    \ that \n    are less than the number input from the list. The function shall\
    \ then return the new list of integers. \n    \n    Examples:\n    >>> lst\n \
    \   [1, 2, 3, -1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, 2, -1, -5]\n    >>> lst\n    [-1, -5, 2, -1, -5]\n    >>>\
    \ lst\n    [-1, -5, ", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value**2\n\
    \        elif index % 4 == 0:\n            sum += value**3\n        else:\n  \
    \          sum += value\n            \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n \
    \           sum += value\n        elif index % 4 == 0:\n            sum += value\
    \ * value\n        else:\n            sum += value * value * value\n    \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, value in enumerate(lst):\n        if index % 3 == 0:\n       \
    \     sum += value * value\n        elif index % 4 == 0:\n            sum += value\
    \ * value * value\n        else:\n            sum += value\n            \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for i in lst:\n        if i % 3\
    \ == 0:\n            sum += i\n        elif i % 4 == 0:\n            sum += i\n\
    \        else:\n            sum += i * i\n    return sum\n", "    \n    sum =\
    \ 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 == 0\
    \ and index % 4 == 0:\n            sum += value\n        elif index % 3 == 0:\n\
    \            sum += value * value\n        elif index % 4 == 0:\n            sum\
    \ += value * value * value\n        else:\n            sum += value\n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n    \n    ", "    \n    sum\
    \ = 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 ==\
    \ 0:\n            sum += value\n        elif index % 4 == 0:\n            sum\
    \ += value * value\n        else:\n            sum += value * value * value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value\n        else:\n            sum += value * value\n\
    \    \n    return sum\n    \nprint(sum_squares([1,2,3]))\nprint(sum_squares([]))\n\
    print(sum_squares([-1, -5, 2, -1, -5]))\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that will take a list of integers and a number as input. The function\
    \ shall then return a list of all entries in the list that are multiples of that\
    \ number. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of that number. \nThe function shall then return the list\
    \ of all entries in the list that are multiples of that number. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ that number. \nThe function shall then return the list of all entries in the\
    \ list that are multiples of that number. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of that number. \nThe function\
    \ shall then return the list of all entries in the list that are multiples of\
    \ that number. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of that number. \nThe function shall then return the list\
    \ of all entries in the list that are multiples of that number. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ that number. \nThe function shall then return the list of all entries in the\
    \ list that are multiples of that number. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of that number. \nThe function\
    \ shall then return the list of all entries in the list that are multiples of\
    \ that number. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of that number. \nThe function shall then return the list\
    \ of all entries in the list that are multiples of that number. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ that number. \nThe function shall then return the list of all entries in the\
    \ list that are multiples of that number. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of that number. \nThe function\
    \ shall then return the list of all entries in the list that are multiples of\
    \ that number. \nThe function shall not change the entries in the list whose indexes\
    \ are not a multiple of that number. \nThe function shall then return the list\
    \ of all entries in the list that are multiples of that number. \nThe function\
    \ shall not change the entries in the list whose indexes are not a multiple of\
    \ that number. \nThe function shall then return the list of all entries in the\
    \ list that are multiples of that number. \nThe function shall not change the\
    \ entries in the list whose indexes are not a multiple of that number. \n", " \
    \   \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0 and index % 4 == 0:\n            sum += value\n        elif index %\
    \ 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n  \
    \          sum += value * value * value\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n \
    \       elif index % 4 == 0:\n            sum += value * value\n        else:\n\
    \            sum += value * value * value\n    \n    return sum\n", "    \n  \
    \  sum = 0\n    \n    for index, value in enumerate(lst):\n        if index %\
    \ 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n  \
    \          sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0 and index % 4 ==\
    \ 0:\n            sum += value\n        elif index % 3 == 0:\n            sum\
    \ += value * value\n        elif index % 4 == 0:\n            sum += value * value\
    \ * value\n        else:\n            sum += value\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, value in enumerate(lst):\n        if index % 3 == 0:\n       \
    \     sum += value * value\n        elif index % 4 == 0:\n            sum += value\
    \ * value * value\n        else:\n            sum += value\n    \n    return sum\n",
  "    \n    sum = 0\n    \n    for i in lst:\n        if i % 3 == 0:\n          \
    \  sum += i ** 2\n        elif i % 4 == 0:\n            sum += i ** 3\n      \
    \  else:\n            sum += i\n    \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for i in lst:\n        if i % 3 == 0:\n            sum += i ** 2\n\
    \        elif i % 4 == 0:\n            sum += i ** 3\n        else:\n        \
    \    sum += i\n    \n    return sum\n", "    \n    sum = 0\n    \n    for index,\
    \ value in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n\
    \        elif index % 4 == 0:\n            sum += value * value\n        else:\n\
    \            sum += value * value * value\n    return sum\n", "    \n    sum =\
    \ 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n\
    \            sum += value\n        elif index % 4 == 0:\n            sum += value\
    \ * value\n        else:\n            sum += value * value * value\n         \
    \   \n    return sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n\
    \        if i % 3 == 0:\n            sum += lst[i]\n        elif i % 4 == 0:\n\
    \            sum += lst[i]\n        else:\n            sum += lst[i] * lst[i]\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n \
    \       elif index % 4 == 0:\n            sum += value * value\n        else:\n\
    \            sum += value * value * value\n    \n    return sum\n", "    \n  \
    \  sum = 0\n    \n    for index, value in enumerate(lst):\n        if index %\
    \ 3 == 0:\n            sum += value\n        elif index % 4 == 0:\n          \
    \  sum += value * value\n        else:\n            sum += value * value * value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value**2\n\
    \        elif index % 4 == 0:\n            sum += value**3\n        else:\n  \
    \          sum += value\n            \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n            sum\
    \ += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n        else:\n\
    \            sum += lst[i] * lst[i]\n            \n    return sum\n", "    \n\
    \    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n           \
    \ \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n    return sum\n", "    \n    sum = 0\n    \n    for index,\
    \ value in enumerate(lst):\n        if index % 3 == 0 and index % 4 == 0:\n  \
    \          sum += value\n        elif index % 3 == 0:\n            sum += value\
    \ * value\n        elif index % 4 == 0:\n            sum += value * value * value\n\
    \        else:\n            sum += value\n    \n    return sum\n", "    \n   \
    \ sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n     \
    \       sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n \
    \       else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n    \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0 and index % 4 == 0:\n        \
    \    sum += value\n        elif index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            sum += value\n            \n    return sum\n</cell>\n\
    <cell>\nsum_squares(lst)\n</cell>\n<cell>\nlst\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that will take a list of integers and a target integer and will return\
    \ the number of times the target integer appears in the list.\n\nExamples:\n>>>\
    \ lst = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = 4\n>>> count_target(lst,target)\n\
    4\n>>> lst\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = -1\n>>> count_target(lst,target)\n\
    0\n>>> lst\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = 2\n>>> count_target(lst,target)\n\
    3\n>>> lst\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = 6\n>>> count_target(lst,target)\n\
    0\n>>> lst\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = 8\n>>> count_target(lst,target)\n\
    0\n>>> lst\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = 9\n>>> count_target(lst,target)\n\
    1\n>>> lst\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = 10\n>>> count_target(lst,target)\n\
    0\n>>> lst\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = 11\n>>> count_target(lst,target)\n\
    0\n>>> lst\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = 12\n>>> count_target(lst,target)\n\
    0\n>>> lst\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = 13\n>>> count_target(lst,target)\n\
    0\n>>> lst\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = 14\n>>> count_target(lst,target)\n\
    0\n>>> lst\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = 15\n>>> count_target(lst,target)\n\
    0\n>>> lst\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = 16\n>>> count_target(lst,target)\n\
    0\n>>> lst\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = 17\n>>> count_target(lst,target)\n\
    0\n>>> lst\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = 18\n>>> count_target(lst,target)\n\
    0\n>>> lst\n[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n>>> target = 19", "    \n  \
    \  sum = 0\n    \n    for index, value in enumerate(lst):\n        if index %\
    \ 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n       \
    \     sum += value**3\n        else:\n            sum += value\n            \n\
    \    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0 and index % 4 ==\
    \ 0:\n            sum += value\n        elif index % 3 == 0:\n            sum\
    \ += value * value\n        elif index % 4 == 0:\n            sum += value * value\
    \ * value\n        else:\n            sum += value\n    return sum\n", "    \n\
    \    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    return sum\n", "    \n    sum = 0\n    \n    for index\
    \ in range(len(lst)):\n        if index % 3 == 0 and index % 4 == 0:\n       \
    \     sum += lst[index]\n        elif index % 3 == 0:\n            sum += lst[index]\n\
    \        elif index % 4 == 0:\n            sum *= lst[index]\n        else:\n\
    \            sum += lst[index]\n            \n    return sum\n", "    \n    sum\
    \ = 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 ==\
    \ 0:\n            sum += value\n        elif index % 4 == 0:\n            sum\
    \ += value * value\n        else:\n            sum += value * value * value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value**2\n\
    \        elif index % 4 == 0:\n            sum += value**3\n        else:\n  \
    \          sum += value\n            \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n \
    \           sum += value * value\n        elif index % 4 == 0:\n            sum\
    \ += value * value * value\n        else:\n            sum += value\n        \
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value\n        elif index % 4 == 0:\n            sum += value * value\n \
    \       else:\n            sum += value * value * value\n            \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \            \n    return sum\n    \nprint(sum_squares([1,2,3]))\nprint(sum_squares([]))\n\
    print(sum_squares([-1,-5,2,-1,-5]))\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that will take a list of integers and return a list of all unique elements in\
    \ the list. \nThe function shall not change the order of the elements in the list.\n\
    The function shall not change the order of the elements in the list.\n\nExamples:\n\
    >>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(lst)\n[1, 2,\
    \ 3]\n>>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(lst)\n\
    [1, 2, 3]\n>>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(lst)\n\
    [1, 2, 3]\n>>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(lst)\n\
    [1, 2, 3]\n>>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(lst)\n\
    [1, 2, 3]\n>>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(lst)\n\
    [1, 2, 3]\n>>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(lst)\n\
    [1, 2, 3]\n>>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(lst)\n\
    [1, 2, 3]\n>>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(lst)\n\
    [1, 2, 3]\n>>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(lst)\n\
    [1, 2, 3]\n>>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(lst)\n\
    [1, 2, 3]\n>>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(lst)\n\
    [1, 2, 3]\n>>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(lst)\n\
    [1, 2, 3]\n>>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(lst)\n\
    [1, 2, 3]\n>>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(lst)\n\
    [1, 2, 3]\n>>> lst = [1, 2, 3, 1]\n>>> lst\n[1, 2, 3, 1]\n>>> unique_elements(",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value\n        elif index % 4 == 0:\n        \
    \    sum += value * value\n        else:\n            sum += value * value * value\n\
    \    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value * value\n        else:\n            sum += value\
    \ * value * value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value\n        elif index % 4 == 0:\n            sum += value * value\n \
    \       else:\n            sum += value * value * value\n            \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if\
    \ i % 3 == 0:\n            sum += lst[i]**2\n        elif i % 4 == 0:\n      \
    \      sum += lst[i]**3\n        else:\n            sum += lst[i]\n    \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value**2\n\
    \        elif index % 4 == 0:\n            sum += value**3\n        else:\n  \
    \          sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n \
    \   for i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]\n\
    \        elif i % 4 == 0:\n            sum += lst[i]\n        else:\n        \
    \    sum += lst[i] * lst[i]\n            \n    return sum\n", "    \n    sum =\
    \ 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n\
    \            sum += value\n        elif index % 4 == 0:\n            sum += value\
    \ * value\n        else:\n            sum += value * value * value\n    \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value * value\n\
    \        elif index % 4 == 0:\n            sum += value * value * value\n    \
    \    else:\n            sum += value\n            \n    return sum\n", "    \n\
    \    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that takes a list as input and returns a list with all the\
    \ even numbers in the list. For example, [1, 2, 3] should return [2, 4]. \nThe\
    \ function shall not change the original list.\n\n</text>\n<cell>", "    \n  \
    \  sum = 0\n    \n    for i in lst:\n        if i % 3 == 0:\n            sum +=\
    \ i ** 2\n        elif i % 4 == 0:\n            sum += i ** 3\n        else:\n\
    \            sum += i\n    \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<cell>\nlst = [-1, -5, 2, -1, -5]\n</cell>\n<cell>\nsum_squares(lst)\n\
    </cell>\n<text>\nProblem 3\nWrite a function that will take a list of integers\
    \ and return a new list with only the even numbers from the original list. \n\
    The function shall not change the original list.\n\nExamples:\n>>> lst = [1, 2,\
    \ 3, 4, 5, 6]\n>>> new_lst = [2, 4, 6]\n>>> lst\n[1, 2, 3, 4, 5, 6]\n>>> new_lst\n\
    [2, 4, 6]\n>>> lst\n[1, 2, 3, 4, 5, 6]\n>>> new_lst\n[2, 4, 6]\n>>> lst = [1,\
    \ 2, 3, 4, 5, 6, 7]\n>>> new_lst = [2, 4]\n>>> lst\n[1, 2, 3, 4, 5, 6, 7]\n>>>\
    \ new_lst\n[2, 4]\n>>> lst\n[1, 2, 3, 4, 5, 6, 7]\n>>> new_lst\n[2, 4]\n>>> lst\
    \ = [1, 2, 3, 4, 5, 6, 7]\n>>> new_lst = [2, 4, 6]\n>>> lst\n[1, 2, 3, 4, 5, 6,\
    \ 7]\n>>> new_lst\n[2, 4, 6]\n>>> lst\n[1, 2, 3, 4, 5, 6, 7]\n>>> new_lst\n[2,\
    \ 4, 6]\n>>> lst = [1, 2, 3, 4, 5, 6, 7]\n>>> new_lst = [2, 4, 6, 8]\n>>> lst\n\
    [1, 2, 3, 4, 5, 6, 7]\n>>> new_lst\n[2, 4, 6, 8]\n>>> lst\n[1, 2, 3, 4, 5, 6,\
    \ 7]\n>>> new_lst\n[2, 4, 6, 8]\n>>> lst = [1, 2, 3, 4, 5, 6, 7]\n>>> new_lst\
    \ = [2, 4, 6, 8]\n>>> lst\n[1, 2, 3, 4, 5, 6, 7]\n>>> new_lst\n[2, 4, 6, 8]\n\
    >>> lst = [1, 2, 3, 4, 5, 6, 7]\n>>> new_lst = [2, 4, 6, 8]\n>>> lst\n[1, 2, 3,\
    \ 4, 5, 6, 7]\n>>> new_lst\n[2, 4, 6, 8]\n>>> lst = [1, 2, 3, 4, 5, 6, 7]\n>>>\
    \ new_lst = [2, 4, 6, 8]\n>>> lst\n[1, 2, 3, 4, 5, 6, 7]\n>>> new_lst\n[2, 4,\
    \ 6, 8]\n>>> lst = [1, 2, 3, 4, 5, 6, 7]\n>>> new_lst = [2, 4, 6, 8]\n>>> lst\n\
    [1, 2, 3, 4, 5, 6, 7]\n>>> new_lst\n[2, 4, 6, 8]\n>>> lst = [1, 2, 3, 4, 5, 6,\
    \ 7]\n>>> new_lst = [2, 4, 6, 8]\n>>> lst\n[1, 2, 3, 4, 5, 6, 7]\n>>> new_lst\n\
    [2, 4, 6, 8]\n>>> lst = [1, 2, 3, 4, 5, 6, 7]\n>>> new_lst = [2, 4, 6, 8]\n>>>\
    \ lst\n[1, 2, 3, 4, 5, 6, 7]\n>>> new_lst", "    \n    sum = 0\n    \n    for\
    \ i in range(len(lst)):\n        if i % 3 == 0:\n            sum += lst[i]\n \
    \       elif i % 4 == 0:\n            sum += lst[i]\n        else:\n         \
    \   sum += lst[i] * lst[i]\n            \n    return sum\n", "    \n    sum =\
    \ 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n\
    \            sum += value * value\n        elif index % 4 == 0:\n            sum\
    \ += value * value * value\n        else:\n            sum += value\n        \
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value\n        elif index % 4\
    \ == 0:\n            sum += value\n        else:\n            sum += value * value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value**2\n        elif index % 4 == 0:\n            sum += value**3\n   \
    \     else:\n            sum += value\n            \n    return sum\n", "    \n\
    \    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n  \
    \          sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n    \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for i in lst:\n        if i % 3 == 0:\n         \
    \   sum += i\n        elif i % 4 == 0:\n            sum += i\n        else:\n\
    \            sum += i*i\n            \n    return sum\n", "    \n    sum = 0\n\
    \    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n \
    \           sum += value\n        elif index % 4 == 0:\n            sum += value\
    \ * value\n        else:\n            sum += value * value * value\n    \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value * value\n        elif index % 4 == 0:\n            sum += value * value\
    \ * value\n        else:\n            sum += value\n    \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value**2\n        elif index %\
    \ 4 == 0:\n            sum += value**3\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    return sum\n", "    \n    sum = 0\n    \n    for index,\
    \ value in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n\
    \        elif index % 4 == 0:\n            sum += value * value\n        else:\n\
    \            sum += value * value * value\n    \n    return sum\n", "    \n  \
    \  sum = 0\n    \n    for i in lst:\n        if i % 3 == 0:\n            sum +=\
    \ i ** 2\n        elif i % 4 == 0:\n            sum += i ** 3\n        else:\n\
    \            sum += i\n            \n    return sum\n", "    \n    sum = 0\n \
    \   \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n  \
    \          sum += value\n        elif index % 4 == 0:\n            sum += value\
    \ * value\n        else:\n            sum += value * value * value\n    \n   \
    \ return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, value in enumerate(lst):\n        if index % 3 == 0:\n       \
    \     sum += value * value\n        elif index % 4 == 0:\n            sum += value\
    \ * value * value\n        else:\n            sum += value\n    \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n           \
    \ \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, value in enumerate(lst):\n        if index % 3 == 0:\n       \
    \     sum += value\n        elif index % 4 == 0:\n            sum += value * value\n\
    \        else:\n            sum += value * value * value\n    \n    return sum\n",
  "    \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value**2\n        elif index % 4 == 0:\n     \
    \       sum += value**3\n        else:\n            sum += value\n           \
    \ \n    return sum\n</cell>\n<cell>\nsum_squares(lst)\n</cell>\n<cell>\nlst =\
    \ [-1, -5, 2, -1, -5]\nsum_squares(lst)\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that takes a list of integers and returns the number of integers in the list\
    \ that are less than or equal to zero.\n\n\n</text>\n<cell>", "    \n    sum =\
    \ 0\n    \n    for index, value in enumerate(lst):\n        if index % 3 == 0:\n\
    \            sum += value**2\n        elif index % 4 == 0:\n            sum +=\
    \ value**3\n        else:\n            sum += value\n            \n    return\
    \ sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0 and index % 4 == 0:\n            sum += value\n   \
    \     elif index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n            \n    return sum\n", "    \n    sum = 0\n    \n\
    \    for index, value in enumerate(lst):\n        if index % 3 == 0:\n       \
    \     sum += value**2\n        elif index % 4 == 0:\n            sum += value**3\n\
    \        else:\n            sum += value\n            \n    return sum\n", " \
    \   \n    sum = 0\n    \n    for i in range(len(lst)):\n        if i % 3 == 0:\n\
    \            sum += lst[i]\n        elif i % 4 == 0:\n            sum += lst[i]\n\
    \        else:\n            sum += lst[i] * lst[i]\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value * value\n        elif index % 4 == 0:\n\
    \            sum += value * value * value\n        else:\n            sum += value\n\
    \    \n    return sum\n", "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n\
    \        if index % 3 == 0:\n            sum += value * value\n        elif index\
    \ % 4 == 0:\n            sum += value * value * value\n        else:\n       \
    \     sum += value\n    \n    return sum\n", "    \n    sum = 0\n    \n    for\
    \ index, value in enumerate(lst):\n        if index % 3 == 0:\n            sum\
    \ += value * value\n        elif index % 4 == 0:\n            sum += value * value\
    \ * value\n        else:\n            sum += value\n            \n    return sum\n",
  "    \n    sum = 0\n    \n    for index, value in enumerate(lst):\n        if index\
    \ % 3 == 0:\n            sum += value\n        elif index % 4 == 0:\n        \
    \    sum += value * value\n        else:\n            sum += value * value * value\n\
    \            \n    return sum\n", "    \n    sum = 0\n    \n    for index, value\
    \ in enumerate(lst):\n        if index % 3 == 0:\n            sum += value\n \
    \       elif index % 4 == 0:\n            sum += value * value\n        else:\n\
    \            sum += value * value * value\n    \n    return sum\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
