language: py
name: HumanEval_58_common
results:
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \    return sorted(common)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \    return sorted(common)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n   \
    \     else:\n            j += 1\n    return common\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp23ph_e_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp23ph_e_.py\", line 33,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpp23ph_e_.py\", line 27, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  l1 = list(set(l1))\n    l2 = list(set(l2))\n    return sorted(l1 & l2)\n\n\
    def check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1,\
    \ 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2])\
    \ == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert\
    \ candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp25b896n7.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp25b896n7.py\", line 22,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmp25b896n7.py\", line 16, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\n  File \"/tmp/tmp25b896n7.py\", line 13, in common\n    return\
    \ sorted(l1 & l2)\nTypeError: unsupported operand type(s) for &: 'list' and 'list'\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \    return common\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5,\
    \ 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) ==\
    \ [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n\
    \    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwsu4baa9.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwsu4baa9.py\", line 24,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpwsu4baa9.py\", line 18, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\n\ndef check(candidate):\n  \
    \  assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1,\
    \ 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8mcj0c1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpc8mcj0c1.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpc8mcj0c1.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  l1 = list(set(l1))\n    l2 = list(set(l2))\n    l1.sort()\n    l2.sort()\n\
    \    return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  l1 = list(l1)\n    l2 = list(l2)\n    common = []\n    i = 0\n    j = 0\n \
    \   while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n         \
    \   common.append(l1[i])\n            i += 1\n            j += 1\n        elif\
    \ l1[i] > l2[j]:\n            j += 1\n        else:\n            i += 1\n    return\
    \ common\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2,\
    \ 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2,\
    \ 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n \
    \   check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuzu03i92.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpuzu03i92.py\", line 34,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpuzu03i92.py\", line 28, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n       \
    \ else:\n            i += 1\n    return common\n\n\ndef check(candidate):\n  \
    \  assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1,\
    \ 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9njtzg_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9njtzg_.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo9njtzg_.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n       \
    \ else:\n            i += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptrffqmdy.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptrffqmdy.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmptrffqmdy.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n       \
    \ else:\n            i += 1\n    return common\n\n\ndef check(candidate):\n  \
    \  assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1,\
    \ 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo9njtzg_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpo9njtzg_.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo9njtzg_.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n   \
    \     else:\n            j += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfj67iyl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbfj67iyl.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpbfj67iyl.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n   \
    \     else:\n            j += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfj67iyl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbfj67iyl.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpbfj67iyl.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n   \
    \     else:\n            j += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfj67iyl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbfj67iyl.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpbfj67iyl.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \    return sorted(common)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n   \
    \     else:\n            j += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfj67iyl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbfj67iyl.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpbfj67iyl.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n   \
    \     else:\n            i += 1\n    return common\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5elfldae.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5elfldae.py\", line 33,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmp5elfldae.py\", line 27, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \    return common\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5,\
    \ 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) ==\
    \ [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n\
    \    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwsu4baa9.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwsu4baa9.py\", line 24,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpwsu4baa9.py\", line 18, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  l1 = list(set(l1))\n    l2 = list(set(l2))\n    return sorted(list(set(l1)\
    \ & set(l2)))\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653,\
    \ 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3,\
    \ 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n \
    \   check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794158
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n   \
    \     else:\n            j += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfj67iyl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbfj67iyl.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpbfj67iyl.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \    return common\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5,\
    \ 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) ==\
    \ [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n\
    \    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwsu4baa9.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwsu4baa9.py\", line 24,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpwsu4baa9.py\", line 18, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  l1 = list(set(l1))\n    l2 = list(set(l2))\n    l1.sort()\n    l2.sort()\n\
    \    return l1[: len(l2) if l1 == l2 else min(len(l1), len(l2))]\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplaadftkl.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmplaadftkl.py\", line 24,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmplaadftkl.py\", line 18, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n   \
    \     else:\n            j += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfj67iyl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbfj67iyl.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpbfj67iyl.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n   \
    \     else:\n            i += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpofbz_hca.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpofbz_hca.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpofbz_hca.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  l1 = list(set(l1))\n    l2 = list(set(l2))\n    common = []\n    i = 0\n  \
    \  while i < len(l1) and i < len(l2):\n        if l1[i] == l2[i]:\n          \
    \  common.append(l1[i])\n            i += 1\n        else:\n            break\n\
    \    return common\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5,\
    \ 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) ==\
    \ [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n\
    \    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzh1wi9iu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpzh1wi9iu.py\", line 30,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpzh1wi9iu.py\", line 24, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\n\ndef check(candidate):\n  \
    \  assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1,\
    \ 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8mcj0c1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpc8mcj0c1.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpc8mcj0c1.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n   \
    \     else:\n            j += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfj67iyl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbfj67iyl.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpbfj67iyl.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n   \
    \     else:\n            i += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpofbz_hca.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpofbz_hca.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpofbz_hca.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \    return sorted(common)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\n\ndef check(candidate):\n  \
    \  assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1,\
    \ 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8mcj0c1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpc8mcj0c1.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpc8mcj0c1.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  l1 = list(set(l1))\n    l2 = list(set(l2))\n    common = []\n    i = 0\n  \
    \  j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n\
    \            common.append(l1[i])\n            i += 1\n            j += 1\n  \
    \      elif l1[i] > l2[j]:\n            j += 1\n        else:\n            i +=\
    \ 1\n    return common\n\ndef check(candidate):\n    assert candidate([1, 4, 3,\
    \ 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5,\
    \ 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) ==\
    \ [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n\
    \    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp29eas18h.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp29eas18h.py\", line 34,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmp29eas18h.py\", line 28, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  l1 = list(set(l1))\n    l2 = list(set(l2))\n    common = []\n    i = 0\n  \
    \  while i < len(l1) and i < len(l2):\n        if l1[i] == l2[i]:\n          \
    \  common.append(l1[i])\n            i += 1\n        else:\n            break\n\
    \    return common\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5,\
    \ 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) ==\
    \ [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n\
    \    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzh1wi9iu.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpzh1wi9iu.py\", line 30,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpzh1wi9iu.py\", line 24, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    for x in l1:\n        if x in l2:\n            common.append(x)\n\
    \    return sorted(common)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n   \
    \     else:\n            j += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfj67iyl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbfj67iyl.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpbfj67iyl.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n       \
    \ else:\n            i += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptrffqmdy.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptrffqmdy.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmptrffqmdy.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  l1 = list(set(l1))\n    l2 = list(set(l2))\n    common = []\n    i = j = 0\n\
    \    while i < len(l1) and j < len(l2):\n        if l1[i] == l2[j]:\n        \
    \    common.append(l1[i])\n            i += 1\n            j += 1\n        elif\
    \ l1[i] > l2[j]:\n            j += 1\n        else:\n            i += 1\n    return\
    \ common\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653, 2,\
    \ 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3, 2,\
    \ 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n \
    \   check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptxdug_ul.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmptxdug_ul.py\", line 33,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmptxdug_ul.py\", line 27, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n   \
    \     else:\n            j += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfj67iyl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbfj67iyl.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpbfj67iyl.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n   \
    \     else:\n            i += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpofbz_hca.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpofbz_hca.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpofbz_hca.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n   \
    \     else:\n            j += 1\n    return common\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp23ph_e_.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpp23ph_e_.py\", line 33,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpp23ph_e_.py\", line 27, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  l1 = list(set(l1))\n    l2 = list(set(l2))\n    return sorted(list(set(l1)\
    \ & set(l2)))\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34, 653,\
    \ 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5, 3,\
    \ 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) == [2,\
    \ 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n \
    \   check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n   \
    \     else:\n            j += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfj67iyl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbfj67iyl.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpbfj67iyl.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n   \
    \     else:\n            j += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfj67iyl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbfj67iyl.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpbfj67iyl.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n   \
    \     else:\n            j += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfj67iyl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbfj67iyl.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpbfj67iyl.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = 0\n    j = 0\n    while i < len(l1) and j < len(l2):\n\
    \        if l1[i] == l2[j]:\n            common.append(l1[i])\n            i +=\
    \ 1\n            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n   \
    \     else:\n            j += 1\n    return common\n\ndef check(candidate):\n\
    \    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) ==\
    \ [1, 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert\
    \ candidate([4, 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3,\
    \ 2, 8], []) == []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbfj67iyl.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbfj67iyl.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpbfj67iyl.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(list(set(l1) & set(l2)))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\n\ndef check(candidate):\n  \
    \  assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1,\
    \ 5, 653]\n    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc8mcj0c1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpc8mcj0c1.py\", line 32,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpc8mcj0c1.py\", line 26, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  l1 = list(set(l1))\n    l2 = list(set(l2))\n    return sorted(l1 for l1 in\
    \ l1 if l1 in l2)\n\ndef check(candidate):\n    assert candidate([1, 4, 3, 34,\
    \ 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert candidate([5,\
    \ 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8], [3, 2, 4]) ==\
    \ [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef test_check():\n\
    \    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659794158
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] > l2[j]:\n            j += 1\n       \
    \ else:\n            i += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptrffqmdy.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmptrffqmdy.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmptrffqmdy.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
  timestamp: 1659794158
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return sorted(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  return list(set(l1) & set(l2))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n    assert\
    \ candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4, 3, 2, 8],\
    \ [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) == []\n\ndef\
    \ test_check():\n    check(common)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef common(l1: List[int], l2: List[int]) ->\
    \ List[int]:\n    \"\"\"Return sorted unique common elements for two lists.\n\
    \    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1,\
    \ 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n  \
    \  common = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n      \
    \  if l1[i] == l2[j]:\n            common.append(l1[i])\n            i += 1\n\
    \            j += 1\n        elif l1[i] < l2[j]:\n            i += 1\n       \
    \ else:\n            j += 1\n    return common\n\ndef check(candidate):\n    assert\
    \ candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]) == [1, 5, 653]\n\
    \    assert candidate([5, 3, 2, 8], [3, 2]) == [2, 3]\n    assert candidate([4,\
    \ 3, 2, 8], [3, 2, 4]) == [2, 3, 4]\n    assert candidate([4, 3, 2, 8], []) ==\
    \ []\n\ndef test_check():\n    check(common)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo2te4cj7.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpo2te4cj7.py\", line 31,\
    \ in test_check\n    check(common)\n  File \"/tmp/tmpo2te4cj7.py\", line 25, in\
    \ check\n    assert candidate([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\
    \ == [1, 5, 653]\nAssertionError\n"
  stdout: ''
