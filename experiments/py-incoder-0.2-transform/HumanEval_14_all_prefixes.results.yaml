language: py
name: HumanEval_14_all_prefixes
results:
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        prefix_length\
    \ += 1\n        if prefix_length == len(string):\n            prefixes.append(c)\n\
    \        else:\n            prefixes.append(c[:prefix_length])\n    return prefixes\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj9a3lg06.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpj9a3lg06.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpj9a3lg06.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(string[:prefix_length])\n    return prefixes\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsqqjdwi0.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpsqqjdwi0.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpsqqjdwi0.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c * prefix_length)\n    return prefixes\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90k8qdt7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp90k8qdt7.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp90k8qdt7.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c * prefix_length)\n    return prefixes\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90k8qdt7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp90k8qdt7.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp90k8qdt7.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix = \"\"\n    for c in string:\n        if c == '.':\n\
    \            prefixes.append(prefix)\n            prefix = \"\"\n        else:\n\
    \            prefix += c\n    prefixes.append(prefix)\n    return prefixes\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp__17u922.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp__17u922.py\", line 25,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp__17u922.py\", line\
    \ 20, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659805223
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n        prefixes.append(string[:prefix_length])\n    return prefixes\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6_6e2fba.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp6_6e2fba.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp6_6e2fba.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: 1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.takewhile(lambda s: len(s) > 0, itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0]\ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpczsclqio.py\", line 8\n    tools.takewhile(lambda s: s[0]\
    \ != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0] != s[0], itertools.takewhile(lambda s: s[0] != s[0], itertools.takewhile(lambda\
    \ s: s[0]\n                                                                  \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            ^\n\
    SyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659805223
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c * prefix_length)\n    return prefixes\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90k8qdt7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp90k8qdt7.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp90k8qdt7.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        prefix_length\
    \ = prefix_length + 1 if c == c.upper() else prefix_length\n        prefixes.append(string[:prefix_length])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8k2qz6l.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpp8k2qz6l.py\", line 21,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpp8k2qz6l.py\", line\
    \ 17, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805223
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.chain(*[prefixes(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpypd4buby.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpypd4buby.py\"\
    , line 8, in all_prefixes\n    return list(itertools.chain(*[prefixes(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ += len(c)\n            prefixes.append(c * prefix_length)\n    return prefixes\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9rv0apc.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpi9rv0apc.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi9rv0apc.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805223
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        prefix_length\
    \ = prefix_length + 1 if c in string.uppercase else prefix_length\n        prefixes.append(string[:prefix_length])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppho12b8f.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmppho12b8f.py\", line 21,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmppho12b8f.py\", line\
    \ 17, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmppho12b8f.py\", line 11, in all_prefixes\n    prefix_length\
    \ = prefix_length + 1 if c in string.uppercase else prefix_length\nAttributeError:\
    \ 'str' object has no attribute 'uppercase'\n"
  stdout: ''
  timestamp: 1659805223
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcdr4kd32.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpcdr4kd32.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpcdr4kd32.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpcdr4kd32.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.chain(*[prefixes(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpypd4buby.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpypd4buby.py\"\
    , line 8, in all_prefixes\n    return list(itertools.chain(*[prefixes(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 1\n    for c in string:\n        prefix_length\
    \ *= len(c)\n        prefixes.append(c * prefix_length)\n    return prefixes\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsplze50u.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpsplze50u.py\", line 21,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpsplze50u.py\", line\
    \ 17, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805223
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c * prefix_length)\n    return prefixes\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90k8qdt7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp90k8qdt7.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp90k8qdt7.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ ' ':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(string[:prefix_length])\n    return prefixes\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp13y71hpk.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp13y71hpk.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp13y71hpk.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805223
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.chain(*[prefixes(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpypd4buby.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpypd4buby.py\"\
    , line 8, in all_prefixes\n    return list(itertools.chain(*[prefixes(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.chain(*[prefixes(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpypd4buby.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpypd4buby.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpypd4buby.py\"\
    , line 8, in all_prefixes\n    return list(itertools.chain(*[prefixes(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcdr4kd32.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpcdr4kd32.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpcdr4kd32.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpcdr4kd32.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcdr4kd32.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpcdr4kd32.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpcdr4kd32.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpcdr4kd32.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c * prefix_length)\n    return prefixes\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90k8qdt7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp90k8qdt7.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp90k8qdt7.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c * prefix_length)\n    return prefixes\n\n\
    def check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90k8qdt7.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp90k8qdt7.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp90k8qdt7.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c)\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx5dhwg91.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpx5dhwg91.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpx5dhwg91.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate([len(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxymnt22.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpwxymnt22.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwxymnt22.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpwxymnt22.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate([len(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        prefix_length\
    \ = prefix_length + 1\n        if prefix_length >= len(string):\n            prefixes.append(string[:prefix_length])\n\
    \            break\n        prefixes.append(c)\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9wgu09i5.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp9wgu09i5.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp9wgu09i5.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix = \"\"\n    for c in string:\n        if c == prefix:\n\
    \            prefixes.append(prefix)\n        else:\n            prefix = c\n\
    \            prefixes.append(prefix)\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7v_x4_ds.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp7v_x4_ds.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp7v_x4_ds.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805223
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c)\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx5dhwg91.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpx5dhwg91.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpx5dhwg91.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: 0
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c.isalpha():\n\
    \            prefix_length += 1\n        else:\n            prefix_length = 0\n\
    \        prefixes.append(string[:prefix_length])\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n            prefixes.append(c)\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx5dhwg91.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpx5dhwg91.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpx5dhwg91.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate([len(s) for s in string.split()]))\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxymnt22.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpwxymnt22.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwxymnt22.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpwxymnt22.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate([len(s) for s\
    \ in string.split()]))\nNameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        prefix_length\
    \ = prefix_length + 1 if c in string.uppercase else prefix_length\n        prefixes.append(string[:prefix_length])\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppho12b8f.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmppho12b8f.py\", line 21,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmppho12b8f.py\", line\
    \ 17, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmppho12b8f.py\", line 11, in all_prefixes\n    prefix_length\
    \ = prefix_length + 1 if c in string.uppercase else prefix_length\nAttributeError:\
    \ 'str' object has no attribute 'uppercase'\n"
  stdout: ''
  timestamp: 1659805223
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        prefix_length\
    \ += 1\n        prefixes.append(c)\n        if prefix_length >= len(string):\n\
    \            break\n    return prefixes\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n\
    \    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp62kewe25.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp62kewe25.py\", line 23,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp62kewe25.py\", line\
    \ 19, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805223
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  return list(itertools.accumulate(string.split()))\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcdr4kd32.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpcdr4kd32.py\", line 16,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpcdr4kd32.py\", line\
    \ 11, in check\n    assert candidate('') == []\n  File \"/tmp/tmpcdr4kd32.py\"\
    , line 8, in all_prefixes\n    return list(itertools.accumulate(string.split()))\n\
    NameError: name 'itertools' is not defined\n"
  stdout: ''
  timestamp: 1659805192
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix = \"\"\n    for c in string:\n        if c != prefix:\n\
    \            prefixes.append(prefix)\n            prefix = c\n    prefixes.append(prefix)\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdzcp0k9p.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpdzcp0k9p.py\", line 23,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpdzcp0k9p.py\", line\
    \ 18, in check\n    assert candidate('') == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659805223
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c not\
    \ in prefixes:\n            prefixes.append(c)\n            prefix_length += 1\n\
    \        else:\n            prefix_length -= 1\n    return prefixes\n\ndef check(candidate):\n\
    \    assert candidate('') == []\n    assert candidate('asdfgh') == ['a', 'as',\
    \ 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW',\
    \ 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwrz2shze.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpwrz2shze.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwrz2shze.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805223
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ = 0\n        prefixes.append(c * prefix_length)\n    return prefixes\n\ndef\
    \ check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5086es9x.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmp5086es9x.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp5086es9x.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805223
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        if c ==\
    \ '_':\n            prefix_length += 1\n        else:\n            prefix_length\
    \ += len(c)\n            prefixes.append(c * prefix_length)\n    return prefixes\n\
    \ndef check(candidate):\n    assert candidate('') == []\n    assert candidate('asdfgh')\
    \ == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n    assert candidate('WWW')\
    \ == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi9rv0apc.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpi9rv0apc.py\", line 24,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi9rv0apc.py\", line\
    \ 20, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805223
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    prefix_length = 0\n    for c in string:\n        prefix_length\
    \ += 1\n        prefixes.append(c)\n        if prefix_length >= len(string):\n\
    \            break\n    return prefixes\n\ndef check(candidate):\n    assert candidate('')\
    \ == []\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n\
    \    check(all_prefixes)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp62kewe25.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp62kewe25.py\", line 23,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmp62kewe25.py\", line\
    \ 19, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\nAssertionError\n"
  stdout: ''
  timestamp: 1659805223
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for c in string:\n        prefixes.append(c)\n        prefixes.extend(all_prefixes(c))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpi6cx1x27.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  File \"/tmp/tmpi6cx1x27.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(c))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpi6cx1x27.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(c)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
- exit_code: -1
  program: "from typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n\
    \    \"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n  \
    \  prefixes = []\n    for s in string:\n        prefixes.append(s)\n        prefixes.extend(all_prefixes(s))\n\
    \    return prefixes\n\ndef check(candidate):\n    assert candidate('') == []\n\
    \    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh']\n\
    \    assert candidate('WWW') == ['W', 'WW', 'WWW']\n\ndef test_check():\n    check(all_prefixes)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpwskpmxde.py\", line 20,\
    \ in test_check\n    check(all_prefixes)\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 16, in check\n    assert candidate('asdfgh') == ['a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh']\n  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  File \"/tmp/tmpwskpmxde.py\", line 11, in all_prefixes\n    prefixes.extend(all_prefixes(s))\n\
    \  [Previous line repeated 993 more times]\n  File \"/tmp/tmpwskpmxde.py\", line\
    \ 10, in all_prefixes\n    prefixes.append(s)\nRecursionError: maximum recursion\
    \ depth exceeded while calling a Python object\n"
  stdout: ''
