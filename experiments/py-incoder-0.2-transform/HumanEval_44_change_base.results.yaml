language: py
name: HumanEval_44_change_base
results:
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(str(x % base))\n  \
    \      x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[len(digits) - 1] == \"0\"\
    :\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x\
    \ = int(x / base)\n    digits.reverse()\n    return ''.join(str(d) for d in digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[: base]\n    digits = digits +\
    \ \"0\" * (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6hyp0ttk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp6hyp0ttk.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp6hyp0ttk.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x\
    \ = int(x / base)\n    digits.reverse()\n    return str(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppi6yish1.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmppi6yish1.py\", line 39,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmppi6yish1.py\", line\
    \ 25, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(str(x % base))\n  \
    \      x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\
    \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = str(x)\n    digits =\
    \ digits[::-1]\n    digits = digits[:base]\n    digits = digits + digits[base:]\n\
    \    return digits\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyia2g63m.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpyia2g63m.py\", line 38,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpyia2g63m.py\", line\
    \ 24, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return str(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe2tg_tzz.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpe2tg_tzz.py\", line 39,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpe2tg_tzz.py\", line\
    \ 25, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[len(digits) - 1] == '0':\n\
    \        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('Base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x > 0:\n        digits.append(x % base)\n        x = int(x /\
    \ base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    if digits[len(digits) - 1] == '0':\n        digits\
    \ = digits[:-1]\n    return digits[:len(digits) - 1] + str(base)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp39w4xk7q.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp39w4xk7q.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp39w4xk7q.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base {base} is not in range [2, 36]\")\n    if base == 10:\n        return str(x)\n\
    \    digits = [int(i) for i in str(x)]\n    digits[base] = str(base)\n    return\
    \ ''.join(str(i) for i in digits)\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg5wswptx.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpg5wswptx.py\", line 36,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpg5wswptx.py\", line\
    \ 22, in check\n    assert candidate(8, 3) == '22'\n  File \"/tmp/tmpg5wswptx.py\"\
    , line 17, in change_base\n    digits[base] = str(base)\nIndexError: list assignment\
    \ index out of range\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = str(x)\n    return digits[-len(digits):]\
    \ + \\\n        str(base).rjust(len(digits), '0')\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrmqgkdl.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfrmqgkdl.py\", line 34,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpfrmqgkdl.py\", line\
    \ 20, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[::-1]\n    digits = digits[:base]\n\
    \    digits = digits + digits[:base]\n    digits = digits[:base]\n    return digits\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn28ul3rj.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpn28ul3rj.py\", line 39,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpn28ul3rj.py\", line\
    \ 25, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    Invalid base {base}\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    return ''.join(reversed(digits))\n\n\
    \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative\
    \ numbers not supported\")\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x != 0:\n        digits.append(x % base)\n        x = int(x\
    \ / base)\n    digits.reverse()\n    return ''.join(str(d) for d in digits)\n\n\
    \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative\
    \ numbers are not allowed\")\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = []\n    while x > 0:\n\
    \        digits.append(x % base)\n        x = int(x / base)\n    digits.reverse()\n\
    \    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return str(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe2tg_tzz.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpe2tg_tzz.py\", line 39,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpe2tg_tzz.py\", line\
    \ 25, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = []\n    while x > 0:\n\
    \        digits.append(str(x % base))\n        x = int(x / base)\n    digits.reverse()\n\
    \    return ''.join(digits)\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        sign = -1\n        x\
    \ = abs(x)\n    else:\n        sign = 1\n    if x % base == 0:\n        return\
    \ str(x)\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n\
    \        x //= base\n    digits.reverse()\n    return sign * ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8yopkdle.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp8yopkdle.py\", line 44,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp8yopkdle.py\", line\
    \ 31, in check\n    assert candidate(9, 3) == '100'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative\
    \ numbers not supported\")\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(str(x % base))\n  \
    \      x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    digits = str(x)\n    if base > len(digits):\n\
    \        digits = digits[:base]\n    else:\n        digits = digits[base:]\n \
    \   return digits\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr77e7ws6.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpr77e7ws6.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpr77e7ws6.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    Invalid base {base}\")\n    digits = [int(i) for i in str(x)]\n    digits = [base\
    \ ** i for i in\n              range(len(digits) - 1, -1, -1)]\n    return str(sum(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdas623_l.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpdas623_l.py\", line 35,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpdas623_l.py\", line\
    \ 21, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[::-1]\n    digits = digits[:base]\n\
    \    digits = digits + '0' * (base - len(digits))\n    return digits\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi7dbe4ya.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpi7dbe4ya.py\", line 38,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpi7dbe4ya.py\", line\
    \ 24, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = str(x)\n    digits =\
    \ digits[::-1]\n    digits = digits[:base]\n    digits = digits + digits[:base]\n\
    \    digits = digits[::-1]\n    return digits\n\n\ndef check(candidate):\n   \
    \ assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert\
    \ candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n  \
    \  assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n   \
    \ assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzehgpyru.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpzehgpyru.py\", line 39,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpzehgpyru.py\", line\
    \ 25, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(str(x % base))\n  \
    \      x = int(x / base)\n    if digits[len(digits) - 1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[: base]\n    digits = digits +\
    \ \"0\" * (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6hyp0ttk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp6hyp0ttk.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp6hyp0ttk.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if x < 0:\n        sign = -1\n        x\
    \ = abs(x)\n    else:\n        sign = 1\n    x = abs(x)\n    digits = []\n   \
    \ while x:\n        digits.append(str(x % base))\n        x //= base\n    digits\
    \ = digits[::-1]\n    digits = digits[:base]\n    if sign == -1:\n        digits.append('-')\n\
    \    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbd6joo8e.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpbd6joo8e.py\", line 47,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpbd6joo8e.py\", line\
    \ 34, in check\n    assert candidate(9, 3) == '100'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    Invalid base {base}\")\n    if base == 10:\n        return str(x)\n    digits\
    \ = str(x)\n    digits = digits[::-1]\n    digits = digits[:base]\n    digits\
    \ = digits + digits[base:]\n    return digits\n\n\ndef check(candidate):\n   \
    \ assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert\
    \ candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n  \
    \  assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n   \
    \ assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph4ordfc2.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmph4ordfc2.py\", line 38,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmph4ordfc2.py\", line\
    \ 24, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base {base} is out of range\")\n    if base == 10:\n        return str(x)\n  \
    \  digits = str(x)\n    digits = digits[: base]\n    digits = digits + \"0\" *\
    \ (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n    assert\
    \ candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234,\
    \ 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfj9egs3g.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpfj9egs3g.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpfj9egs3g.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative\
    \ numbers not supported\")\n    if x == 0:\n        return str(base)\n    digits\
    \ = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = []\n    while x > 0:\n\
    \        digits.append(str(x % base))\n        x = int(x / base)\n    digits.reverse()\n\
    \    return ''.join(digits)\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = str(x)\n    return digits[len(digits)\
    \ - base:]\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n  \
    \  assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw0a3pwu2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpw0a3pwu2.py\", line 33,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpw0a3pwu2.py\", line\
    \ 19, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x\
    \ = int(x / base)\n    digits.reverse()\n    return ''.join(str(d) for d in digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = []\n    while x:\n  \
    \      digits.append(str(x % base))\n        x = x // base\n    if digits[-1]\
    \ == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[: len(digits) - len(digits) //\
    \ base]\n    digits = digits * base\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpophpla0j.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpophpla0j.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpophpla0j.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        sign = -1\n        x\
    \ = abs(x)\n    else:\n        sign = 1\n    digits = []\n    while x:\n     \
    \   digits.append(str(x % base))\n        x //= base\n    if sign == -1:\n   \
    \     digits.append('-')\n    digits.reverse()\n    return ''.join(digits)\n\n\
    \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    digits[-1] = str(x)\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2lgy2jku.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp2lgy2jku.py\", line 39,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp2lgy2jku.py\", line\
    \ 25, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(str(x % base))\n  \
    \      x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\
    \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    Invalid base {base}\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = str(abs(x))\n    digits = digits[::-1]\n    digits = digits[:base]\n    digits\
    \ = digits + digits[:base]\n    return digits\n\n\ndef check(candidate):\n   \
    \ assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert\
    \ candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n  \
    \  assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n   \
    \ assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz61zuuxd.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpz61zuuxd.py\", line 38,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpz61zuuxd.py\", line\
    \ 24, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n\
    \    if digits[-1] == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(x)\n    if base > len(digits):\n        raise ValueError(\"\
    Base cannot be greater than length of number\")\n    digits = digits[:base]\n\
    \    digits = digits + \"0\" * (base - len(digits))\n    return digits\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd_0wrtm6.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpd_0wrtm6.py\", line 39,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpd_0wrtm6.py\", line\
    \ 25, in check\n    assert candidate(8, 3) == '22'\n  File \"/tmp/tmpd_0wrtm6.py\"\
    , line 18, in change_base\n    raise ValueError(\"Base cannot be greater than\
    \ length of number\")\nValueError: Base cannot be greater than length of number\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = []\n    while x:\n  \
    \      digits.append(str(x % base))\n        x = int(x / base)\n    digits.reverse()\n\
    \    return ''.join(digits)\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(x % base)\n        x\
    \ = int(x / base)\n    digits.reverse()\n    return str(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_00_klbh.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp_00_klbh.py\", line 39,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp_00_klbh.py\", line\
    \ 25, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        sign = -1\n        x\
    \ = abs(x)\n    else:\n        sign = 1\n    digits = []\n    while x:\n     \
    \   digits.append(str(x % base))\n        x //= base\n    if sign < 0:\n     \
    \   digits.append('-')\n    digits.reverse()\n    return ''.join(digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if x < 0:\n        sign = -1\n        x = abs(x)\n\
    \    else:\n        sign = 1\n    if x != 0:\n        digits = []\n        while\
    \ x > 0:\n            digits.append(x % base)\n            x //= base\n      \
    \  digits.reverse()\n        digits = digits[:base]\n    else:\n        digits\
    \ = [0]\n    if sign == -1:\n        digits.append('-')\n    digits.reverse()\n\
    \    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo81y2rk5.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpo81y2rk5.py\", line 49,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpo81y2rk5.py\", line\
    \ 36, in check\n    assert candidate(9, 3) == '100'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"Negative\
    \ numbers not supported\")\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[::-1]\n    digits = digits.replace('0',\
    \ '')\n    digits = digits.replace('1', '')\n    digits = digits.replace('2',\
    \ '')\n    digits = digits.replace('3', '')\n    digits = digits.replace('4',\
    \ '')\n    digits = digits.replace('5', '')\n    digits = digits.replace('6',\
    \ '')\n    digits = digits.replace('7', '')\n    digits = digits.replace('8',\
    \ '')\n    digits = digits.replace('9', '')\n    digits = digits.replace(' ',\
    \ '')\n    digits = digits.replace(',', '')\n    digits = digits.replace('-',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('/', '')\n    digits = digits.replace('^',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('/', '')\n    digits = digits.replace('^',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('/', '')\n    digits = digits.replace('^',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('/', '')\n    digits = digits.replace('^',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('/', '')\n    digits = digits.replace('^',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('/', '')\n    digits = digits.replace('^',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('/', '')\n    digits = digits.replace('^',\
    \ '')\n    digits = digits.replace('(', '')\n    digits = digits.replace(')',\
    \ '')\n    digits = digits.replace('+', '')\n    digits = digits.replace('*',\
    \ '')\n    digits = digits.replace('/', '')\n    digits = digits.replace('^',\
    \ '')\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert\
    \ candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert\
    \ candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert\
    \ candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3,\
    \ 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) ==\
    \ '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\n\
    def test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzirg2tj4.py\", line\
    \ 95, in <module>\n    test_check()\n  File \"/tmp/tmpzirg2tj4.py\", line 93,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpzirg2tj4.py\", line\
    \ 79, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = []\n    while x > 0:\n\
    \        digits.append(str(x % base))\n        x = int(x / base)\n    digits.reverse()\n\
    \    return ''.join(digits)\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x > 0:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = str(x)\n    digits =\
    \ digits[::-1]\n    digits = digits[:base]\n    digits = digits + digits[base:]\n\
    \    digits = digits[:base]\n    digits = digits + digits[base:]\n    digits =\
    \ digits[:base]\n    digits = digits + digits[base:]\n    digits = digits[:base]\n\
    \    digits = digits + digits[base:]\n    digits = digits[:base]\n    digits =\
    \ digits + digits[base:]\n    digits = digits[:base]\n    digits = digits + digits[base:]\n\
    \    digits = digits[:base]\n    digits = digits + digits[base:]\n    digits =\
    \ digits[:base]\n    digits = digits + digits[base:]\n    digits = digits[:base]\n\
    \    digits = digits + digits[base:]\n    digits = digits[:base]\n    digits =\
    \ digits + digits[base:]\n    digits = digits[:base]\n    digits = digits + digits[base:]\n\
    \    digits = digits[:base]\n    digits = digits + digits[base:]\n    digits =\
    \ digits[:base]\n    digits = digits + digits[base:]\n    digits = digits[:base]\n\
    \    digits = digits + digits[base:]\n    digits = digits[:base]\n    digits =\
    \ digits + digits[base:]\n    digits = digits[:base]\n    digits = digits + digits[base:]\n\
    \    digits = digits[:base]\n    digits = digits + digits[base:]\n    digits =\
    \ digits[:base]\n    digits = digits + digits[base:]\n    digits = digits[:base]\n\
    \    digits = digits + digits[base:]\n    digits = digits[:base]\n    digits =\
    \ digits + digits[base:]\n    digits = digits[:base]\n    digits = digits + digits[base:]\n\
    \    digits = digits[:base]\n    digits = digits + digits[base:]\n    digits =\
    \ digits[:base]\n    digits = digits + digits[base:]\n    digits = digits[:base]\n\
    \    digits = digits + digits[base:]\n    digits = digits[:base]\n    digits =\
    \ digits + digits[base:]\n    digits = digits[:base]\n    digits = digits + digits[base:]\n\
    \    digits = digits[:base]\n    digit\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptx4269z_.py\", line\
    \ 89, in <module>\n    test_check()\n  File \"/tmp/tmptx4269z_.py\", line 87,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmptx4269z_.py\", line\
    \ 73, in check\n    assert candidate(8, 3) == '22'\n  File \"/tmp/tmptx4269z_.py\"\
    , line 71, in change_base\n    digit\nNameError: name 'digit' is not defined.\
    \ Did you mean: 'digits'?\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(str(x % base))\n  \
    \      x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\
    \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(x)\n    digits = digits[::-1]\n    digits = digits[:base]\n\
    \    digits = digits + digits[base:]\n    digits = digits[:base]\n    digits =\
    \ digits + digits[base:]\n    digits = digits[:base]\n    digits = digits + digits[base:]\n\
    \    digits = digits[:base]\n    digits = digits + digits[base:]\n    digits =\
    \ digits[:base]\n    digits = digits + digits[base:]\n    digits = digits[:base]\n\
    \    digits = digits + digits[base:]\n    digits = digits[:base]\n    digits =\
    \ digits + digits[base:]\n    digits = digits[:base]\n    digits = digits + digits[base:]\n\
    \    digits = digits[:base]\n    digits = digits + digits[base:]\n    digits =\
    \ digits[:base]\n    digits = digits + digits[base:]\n    digits = digits[:base]\n\
    \    digits = digits + digits[base:]\n    digits = digits[:base]\n    digits =\
    \ digits + digits[base:]\n    digits = digits[:base]\n    digits = digits + digits[base:]\n\
    \    digits = digits[:base]\n    digits = digits + digits[base:]\n    digits =\
    \ digits[:base]\n    digits = digits + digits[base:]\n    digits = digits[:base]\n\
    \    digits = digits + digits[base:]\n    digits = digits[:base]\n    digits =\
    \ digits + digits[base:]\n    digits = digits[:base]\n    digits = digits + digits[base:]\n\
    \    digits = digits[:base]\n    digits = digits + digits[base:]\n    digits =\
    \ digits[:base]\n    digits = digits + digits[base:]\n    digits = digits[:base]\n\
    \    digits = digits + digits[base:]\n    digits = digits[:base]\n    digits =\
    \ digits + digits[base:]\n    digits = digits[:base]\n    digits = digits + digits[base:]\n\
    \    digits = digits[:base]\n    digits = digits + digits[base:]\n    digits =\
    \ digits[:base]\n    digits = digits + digits[base:]\n    digits = digits[:base]\n\
    \    digits = digits + digits[base:]\n    digits = \ndef check(candidate):\n \
    \   assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert\
    \ candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n  \
    \  assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n   \
    \ assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmppcelur9t.py\", line 70\n    digits = \n             ^\n\
    SyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    digits = [int(i) for i in str(x)]\n    digits\
    \ = [digit * base + digits[digit] for digit in digits]\n    return str(digits)\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe3uyb6w5.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpe3uyb6w5.py\", line 34,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpe3uyb6w5.py\", line\
    \ 20, in check\n    assert candidate(8, 3) == '22'\n  File \"/tmp/tmpe3uyb6w5.py\"\
    , line 15, in change_base\n    digits = [digit * base + digits[digit] for digit\
    \ in digits]\n  File \"/tmp/tmpe3uyb6w5.py\", line 15, in <listcomp>\n    digits\
    \ = [digit * base + digits[digit] for digit in digits]\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('Base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = x // base\n\
    \    digits = digits[::-1]\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[len(digits) - 1] == '0':\n\
    \        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    base must be between 2 and 36\")\n    if x < 0:\n        raise ValueError(\"can't\
    \ convert negative numbers\")\n    if x == 0:\n        return str(0)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = []\n    while x:\n  \
    \      digits.append(str(x % base))\n        x = int(x / base)\n    if digits[-1]\
    \ == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = []\n    while x > 0:\n\
    \        digits.append(x % base)\n        x = x // base\n    digits.reverse()\n\
    \    return ''.join(map(str, digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base {base} is out of range\")\n    if base == 10:\n        return str(x)\n  \
    \  digits = str(x)\n    digits = digits[: base]\n    digits = digits + \"0\" *\
    \ (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n    assert\
    \ candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234,\
    \ 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfj9egs3g.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpfj9egs3g.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpfj9egs3g.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[::-1]\n    digits = digits[:base]\n\
    \    digits = digits + digits[:base]\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7ywo5maa.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp7ywo5maa.py\", line 38,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp7ywo5maa.py\", line\
    \ 24, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    if base == 10:\n        return str(x)\n    digits\
    \ = []\n    while x:\n        digits.append(str(x % base))\n        x = int(x\
    \ / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n    return\
    \ ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = []\n    while x:\n  \
    \      digits.append(str(x % base))\n        x = int(x / base)\n    if digits[-1]\
    \ == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    if digits[-1] == '0':\n        digits = digits[:-1]\n   \
    \ return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = int(x / base)\n    if digits[len(digits) - 1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base {base} is out of range\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[::-1]\n    digits = digits[:base]\n\
    \    digits = digits + digits[base:]\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd9adnp6x.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpd9adnp6x.py\", line 38,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpd9adnp6x.py\", line\
    \ 24, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x != 0:\n        digits.append(x % base)\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(map(str, digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base {base} is not in range [2, 36]\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(x)\n    digits = digits[:base]\n    digits = digits + \"0\"\
    \ * (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n    assert\
    \ candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234,\
    \ 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7azuop09.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp7azuop09.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp7azuop09.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    digits = str(x)\n    digits = digits[::-1]\n    digits = digits[:base] +\
    \ digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + digits[base:]\n    digits = digits[:base] + digits[base:]\n    digits = digits[:base]\
    \ + \ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4e0h3qio.py\", line 56\n    digits = digits[:base] + \n\
    \                             ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef\
    \ check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base {base} is not in range [2, 36]\")\n    digits = []\n    while x:\n      \
    \  digits.append(str(x % base))\n        x = x // base\n    if digits[-1] == '0':\n\
    \        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(f\"\
    base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(x)\n    if digits == '0':\n        return digits\n    digits\
    \ = digits[::-1]\n    digits = digits[:base]\n    digits = digits + digits[base:]\n\
    \    return digits\n\n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n\
    \    assert candidate(9, 3) == '100'\n    assert candidate(234, 2) == '11101010'\n\
    \    assert candidate(16, 2) == '10000'\n    assert candidate(8, 2) == '1000'\n\
    \    assert candidate(7, 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert\
    \ candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5,\
    \ 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) ==\
    \ '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdjzmpth3.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpdjzmpth3.py\", line 40,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmpdjzmpth3.py\", line\
    \ 26, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError('base\
    \ must be between 2 and 36')\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = x // base\n    if digits[-1] == '0':\n        digits =\
    \ digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError\n\
    \    if base == 10:\n        return str(x)\n    digits = []\n    while x:\n  \
    \      digits.append(str(x % base))\n        x = int(x / base)\n    if digits[-1]\
    \ == '0':\n        digits = digits[:-1]\n    return ''.join(reversed(digits))\n\
    \n\ndef check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: -1
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = str(abs(x))\n    digits = digits[: base]\n    digits = digits +\
    \ \"0\" * (base - len(digits))\n    return digits\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6hyp0ttk.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp6hyp0ttk.py\", line 37,\
    \ in test_check\n    check(change_base)\n  File \"/tmp/tmp6hyp0ttk.py\", line\
    \ 23, in check\n    assert candidate(8, 3) == '22'\nAssertionError\n"
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    digits = []\n    while x:\n        digits.append(str(x\
    \ % base))\n        x = int(x / base)\n    if digits[-1] == '0':\n        digits\
    \ = digits[:-1]\n    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = x // base\n    digits.reverse()\n    return ''.join(digits)\n\n\ndef check(candidate):\n\
    \    assert candidate(8, 3) == '22'\n    assert candidate(9, 3) == '100'\n   \
    \ assert candidate(234, 2) == '11101010'\n    assert candidate(16, 2) == '10000'\n\
    \    assert candidate(8, 2) == '1000'\n    assert candidate(7, 2) == '111'\n \
    \   assert candidate(2, 3) == '2'\n    assert candidate(3, 4) == '3'\n    assert\
    \ candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n    assert candidate(6,\
    \ 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x:\n        digits.append(str(x % base))\n       \
    \ x = int(x / base)\n    if digits[-1] == '0':\n        digits = digits[:-1]\n\
    \    return ''.join(reversed(digits))\n\n\ndef check(candidate):\n    assert candidate(8,\
    \ 3) == '22'\n    assert candidate(9, 3) == '100'\n    assert candidate(234, 2)\
    \ == '11101010'\n    assert candidate(16, 2) == '10000'\n    assert candidate(8,\
    \ 2) == '1000'\n    assert candidate(7, 2) == '111'\n    assert candidate(2, 3)\
    \ == '2'\n    assert candidate(3, 4) == '3'\n    assert candidate(4, 5) == '4'\n\
    \    assert candidate(5, 6) == '5'\n    assert candidate(6, 7) == '6'\n    assert\
    \ candidate(7, 8) == '7'\n\ndef test_check():\n    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical\
    \ base of input number x to base.\n    return string representation after the\
    \ conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n\
    \    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n\
    \    '111'\n    \"\"\"\n    if base < 2 or base > 36:\n        raise ValueError(\"\
    Base must be between 2 and 36\")\n    if base == 10:\n        return str(x)\n\
    \    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n   \
    \     x = int(x / base)\n    digits.reverse()\n    return ''.join(digits)\n\n\n\
    def check(candidate):\n    assert candidate(8, 3) == '22'\n    assert candidate(9,\
    \ 3) == '100'\n    assert candidate(234, 2) == '11101010'\n    assert candidate(16,\
    \ 2) == '10000'\n    assert candidate(8, 2) == '1000'\n    assert candidate(7,\
    \ 2) == '111'\n    assert candidate(2, 3) == '2'\n    assert candidate(3, 4) ==\
    \ '3'\n    assert candidate(4, 5) == '4'\n    assert candidate(5, 6) == '5'\n\
    \    assert candidate(6, 7) == '6'\n    assert candidate(7, 8) == '7'\n\ndef test_check():\n\
    \    check(change_base)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659798697
