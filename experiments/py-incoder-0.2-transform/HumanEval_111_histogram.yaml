name: HumanEval_111_histogram
language: py
prompt: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
  \    \"\"\"Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    of the letter with the most repetition and containing the corresponding\
  \ count.\n    If several letters have the same occurrence, return all of them.\n\
  \    \n    Example:\n    >>> histogram('a b c')\n    { 'a': 1, 'b': 1, 'c': 1 }\n\
  \    >>> histogram('a b b a')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('a b c\
  \ a b')\n    { 'a': 2, 'b': 2 }\n    >>> histogram('b b b b a')\n    { 'b': 4 }\n\
  \    >>> histogram('')\n    {  }\n\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2\
  \ }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
  \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
  \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b':\
  \ 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('')\
  \ == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
  \ntest_check()\n"
completions: ["    letters = test.split()\n    letters_count = defaultdict(int)\n\
    \    for letter in letters:\n        letters_count[letter] += 1\n    return letters_count\n",
  "    letters = test.split()\n    letters_count = {}\n    for letter in letters:\n\
    \        if letter in letters_count:\n            letters_count[letter] += 1\n\
    \        else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    letters = test.split()\n    letters = list(set(letters))\n    letters.sort()\n\
    \    counts = {}\n    for letter in letters:\n        counts[letter] = letters.count(letter)\n\
    \    return counts\n", "    letters = test.split()\n    letters_count = Counter(letters)\n\
    \    return letters_count\n", "    letters = test.split()\n    letters_count =\
    \ Counter(letters)\n    letters_count_sorted = sorted(letters_count.items(), key=lambda\
    \ x: x[1], reverse=True)\n    return letters_count_sorted\n", "    letters = test.split()\n\
    \    letters_count = {}\n    for letter in letters:\n        if letter in letters_count:\n\
    \            letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    return letters_count\n", "    letters = test.split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n", "    letters = test.split()\n    letters_count = {}\n \
    \   for letter in letters:\n        if letter in letters_count:\n            letters_count[letter]\
    \ += 1\n        else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    letters = test.split()\n    letters_count = Counter(letters)\n    return letters_count.most_common()\n",
  "    letters = test.split()\n    letters_count = Counter(letters)\n    return letters_count\n\
    \n", "    letters = test.split()\n    letters_count = Counter(letters)\n    letters_count_sorted\
    \ = sorted(letters_count.items(), key=lambda x: x[1], reverse=True)\n    letters_count_sorted_letters\
    \ = [x[0] for x in letters_count_sorted]\n    return dict(letters_count_sorted_letters)\n",
  "    letters = test.split()\n    letters_set = set(letters)\n    letters_count =\
    \ Counter(letters)\n    letters_count_sorted = sorted(letters_count.items(), key=lambda\
    \ item: item[1], reverse=True)\n    letters_count_sorted_letters = [item[0] for\
    \ item in letters_count_sorted]\n    letters_count_sorted_counts = [item[1] for\
    \ item in letters_count_sorted]\n    letters_count_sorted_letters_set = set(letters_count_sorted_letters)\n\
    \    letters_count_sorted_counts_set = set(letters_count_sorted_counts)\n    \n\
    \    if letters_count_sorted_counts_set == letters_count_sorted_counts_set:\n\
    \        return letters_count_sorted_letters\n    else:\n        return letters_count_sorted_letters\n",
  "    letters = test.split()\n    letters_count = {}\n    for letter in letters:\n\
    \        if letter in letters_count:\n            letters_count[letter] += 1\n\
    \        else:\n            letters_count[letter] = 1\n    return letters_count\n",
  "    letters = test.split()\n    letters_count = Counter(letters)\n    return letters_count\n",
  "    letters = test.split()\n    letters = list(letters)\n    letters.sort()\n \
    \   letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n  \
    \  letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse()\n    letters = list(letters)\n\
    \    letters.reverse()\n    letters = list(letters)\n    letters.reverse()\n \
    \   letters = list(letters)\n    letters.reverse", "    letters = test.split()\n\
    \    letters_count = {}\n    for letter in letters:\n        if letter in letters_count:\n\
    \            letters_count[letter] += 1\n        else:\n            letters_count[letter]\
    \ = 1\n    return letters_count\n", "    letters = test.split()\n    letters_count\
    \ = Counter(letters)\n    letters_count_sorted = sorted(letters_count.items(),\
    \ key=lambda x: x[1], reverse=True)\n    return dict(letters_count_sorted)\n",
  "    letters = test.split()\n    letters_count = Counter(letters)\n    return letters_count\n",
  "    letters = test.split()\n    letters.sort()\n    counts = {}\n    for letter\
    \ in letters:\n        if letter in counts:\n            counts[letter] += 1\n\
    \        else:\n            counts[letter] = 1\n    return counts\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
