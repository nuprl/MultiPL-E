language: py
name: HumanEval_103_rounded_avg
results:
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    if len(binary)\
    \ < len(str(n+m)):\n        binary = binary + '0' * (len(str(n+m)) - len(binary))\n\
    \    \n    return int(binary, 2)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4dd9mtr7.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp4dd9mtr7.py\", line 43,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp4dd9mtr7.py\", line\
    \ 29, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    \n    binary = bin(n)[2:]\n    \n    count =\
    \ 0\n    \n    for char in binary:\n        if char == '1':\n            count\
    \ += 1\n    \n    if count == 0:\n        return -1\n    \n    rounded_binary\
    \ = bin(int(round(n / count)))[2:]\n    \n    count = 0\n    \n    for char in\
    \ rounded_binary:\n        if char == '1':\n            count += 1\n    \n   \
    \ if count == 0:\n        return -1\n    \n    return rounded_binary\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2b7eptcw.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp2b7eptcw.py\", line 60,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp2b7eptcw.py\", line\
    \ 46, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n < m:\n        return -1\n    return bin(n + m - 1).replace('b', '')\n\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq_4f5fo.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpjq_4f5fo.py\", line 37,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpjq_4f5fo.py\", line\
    \ 23, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    \n\
    \    if n < m:\n        return -1\n    \n    avg = n + (m - n) // 2\n    \n  \
    \  binary = bin(avg)[2:]\n    \n    if len(binary) < len(str(avg)):\n        binary\
    \ = binary + '0' * (len(str(avg)) - len(binary))\n    \n    return binary\n\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxnbzyptt.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpxnbzyptt.py\", line 46,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpxnbzyptt.py\", line\
    \ 32, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    \n    binary = bin(n + (m - n) % 2)[2:]\n   \
    \ \n    binary = binary.zfill(m)\n    \n    return int(binary, 2)\n\ndef check(candidate):\n\
    \    assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqc8913ou.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpqc8913ou.py\", line 42,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpqc8913ou.py\", line\
    \ 28, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    if int(binary[0])\
    \ > int(binary[1]):\n        binary = binary[0]\n    else:\n        binary = binary[1]\n\
    \    \n    return int(binary)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmploas3299.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmploas3299.py\", line 45,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmploas3299.py\", line\
    \ 31, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    \n\
    \    if n >= m:\n        return -1\n    \n    binary = bin(n)[2:]\n    \n    if\
    \ len(binary) < len(str(m)):\n        binary = binary + '0' * (len(str(m)) - len(binary))\n\
    \    \n    return int(binary, 2)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjkiumytl.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpjkiumytl.py\", line 44,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpjkiumytl.py\", line\
    \ 30, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    \n\
    \    if n >= m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n\
    \    if int(binary[0]) == '1':\n        binary = binary[1:]\n    \n    return\
    \ int(binary)\n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n\
    \    assert candidate(7, 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n\
    \    assert candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851)\
    \ == '0b1011000010'\n    assert candidate(185, 546) == '0b101101110'\n    assert\
    \ candidate(362, 496) == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n\
    \    assert candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) ==\
    \ -1\n    assert candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\
    \ndef test_check():\n    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsyfbpzeq.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpsyfbpzeq.py\", line 44,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpsyfbpzeq.py\", line\
    \ 30, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n >= m:\n        return -1\n    \n    binary = bin(n)[2:]\n    binary = binary.zfill(m)\n\
    \    \n    return int(binary, 2)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpefh5hmf0.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpefh5hmf0.py\", line 41,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpefh5hmf0.py\", line\
    \ 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    \n\
    \    if n < m:\n        return -1\n    \n    avg = n + (m // 2)\n    \n    binary\
    \ = bin(avg)[2:]\n    \n    if len(binary) < len(str(avg)):\n        binary =\
    \ binary + ('0' * (len(str(avg)) - len(binary)))\n    \n    return binary\n\n\n\
    def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoyl5yx_d.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpoyl5yx_d.py\", line 47,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpoyl5yx_d.py\", line\
    \ 33, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n   \
    \ assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfeioquk2.py\", line\
    \ 292, in <module>\n    test_check()\n  File \"/tmp/tmpfeioquk2.py\", line 290,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpfeioquk2.py\", line\
    \ 276, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    \n    avg = n + (m // 2)\n    binary = bin(avg)[2:]\n\
    \    \n    if len(binary) < len(str(avg)):\n        binary = binary + ('0' * (len(str(avg))\
    \ - len(binary)))\n    \n    return binary\n\ndef check(candidate):\n    assert\
    \ candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert\
    \ candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n\
    \    assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp879ipnyd.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp879ipnyd.py\", line 44,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp879ipnyd.py\", line\
    \ 30, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    \n\
    \    if n >= m:\n        return -1\n    \n    binary = bin(n + (m - n) % m)[2:]\n\
    \    \n    return int(binary)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzrfaa854.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpzrfaa854.py\", line 41,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpzrfaa854.py\", line\
    \ 27, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    \n\
    \    if n > m:\n        return -1\n    \n    binary = bin(m)[2:]\n    \n    count\
    \ = 0\n    \n    while len(binary) > 0:\n        \n        count += int(binary[0])\n\
    \        binary = binary[1:]\n        \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0o0l62ep.py\", line\
    \ 280, in <module>\n    test_check()\n  File \"/tmp/tmp0o0l62ep.py\", line 278,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp0o0l62ep.py\", line\
    \ 264, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n >= m:\n        return -1\n    \n    binary = bin(n+m)[2:]\n    \n    decimal\
    \ = int(binary)\n    \n    if decimal >= len(binary):\n        return -1\n   \
    \ \n    return binary[:decimal]\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptd5fcet2.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmptd5fcet2.py\", line 45,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmptd5fcet2.py\", line\
    \ 31, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n   \
    \ assert candidate(1, 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n\
    \    assert candidate(964, 977) == '0b1111001010'\n    assert candidate(996, 997)\
    \ == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n    assert\
    \ candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n\
    \    assert candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233)\
    \ == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert candidate(5, 1)\
    \ == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfeioquk2.py\", line\
    \ 292, in <module>\n    test_check()\n  File \"/tmp/tmpfeioquk2.py\", line 290,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpfeioquk2.py\", line\
    \ 276, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n > m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n    if len(binary)\
    \ < len(str(m)):\n        binary = binary + '0' * (len(str(m)) - len(binary))\n\
    \    \n    return int(binary, 2)\n\ndef check(candidate):\n    assert candidate(1,\
    \ 5) == '0b11'\n    assert candidate(7, 13) == '0b1010'\n    assert candidate(964,\
    \ 977) == '0b1111001010'\n    assert candidate(996, 997) == '0b1111100100'\n \
    \   assert candidate(560, 851) == '0b1011000010'\n    assert candidate(185, 546)\
    \ == '0b101101110'\n    assert candidate(362, 496) == '0b110101101'\n    assert\
    \ candidate(350, 902) == '0b1001110010'\n    assert candidate(197, 233) == '0b11010111'\n\
    \    assert candidate(7, 5) == -1\n    assert candidate(5, 1) == -1\n    assert\
    \ candidate(5, 5) == '0b101'\n\ndef test_check():\n    check(rounded_avg)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprs6krg0t.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmprs6krg0t.py\", line 43,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmprs6krg0t.py\", line\
    \ 29, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n >= m:\n        return -1\n    \n    binary = bin(n)[2:]\n    \n    binary\
    \ = binary.zfill(m)\n    \n    binary = '0b' + binary\n    \n    return binary\n\
    \ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvpnw85qs.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpvpnw85qs.py\", line 44,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmpvpnw85qs.py\", line\
    \ 30, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n < m:\n        return -1\n    \n    avg = n + (m - n) // 2\n    \n    binary\
    \ = bin(avg)[2:]\n    \n    if len(binary) < len(str(avg)):\n        binary =\
    \ binary + '0' * (len(str(avg)) - len(binary))\n    \n    return binary\n\ndef\
    \ check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ctug_50.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp0ctug_50.py\", line 45,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp0ctug_50.py\", line\
    \ 31, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
- exit_code: -1
  program: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
    \ int]:\n    \"\"\"You are given two positive integers n and m, and your task\
    \ is to compute the\n    average of the integers from n through m (including n\
    \ and m). \n    Round the answer to the nearest integer and convert that to binary.\n\
    \    If n is greater than m, return -1.\n    Example:\n    >>> rounded_avg(1,\
    \ 5)\n    '0b11'\n    >>> rounded_avg(7, 5)\n    -1\n    >>> rounded_avg(10, 20)\n\
    \    '0b1111'\n    >>> rounded_avg(20, 33)\n    '0b11010'\n    \"\"\"\n    if\
    \ n >= m:\n        return -1\n    \n    binary = bin(n + m)[2:]\n    \n    if\
    \ int(binary[0]) == 1:\n        binary = '0' + binary\n    \n    return binary\n\
    \n\ndef check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
    \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
    \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
    \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
    \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
    \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
    \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
    \    check(rounded_avg)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0prgan7i.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp0prgan7i.py\", line 44,\
    \ in test_check\n    check(rounded_avg)\n  File \"/tmp/tmp0prgan7i.py\", line\
    \ 30, in check\n    assert candidate(1, 5) == '0b11'\nAssertionError\n"
  stdout: ''
