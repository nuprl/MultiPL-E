name: HumanEval_97_multiply
language: py
prompt: "def multiply(a: int, b: int) -> int:\n    \"\"\"Complete the function that\
  \ takes two integers and returns \n    the product of their unit digits.\n    Assume\
  \ the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
  \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
  \ multiply(14, -15)\n    20\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(148, 412) == 16\n    assert candidate(19,\
  \ 28) == 72\n    assert candidate(2020, 1851) == 0\n    assert candidate(14, -15)\
  \ == 20\n    assert candidate(76, 67) == 42\n    assert candidate(17, 27) == 49\n\
  \    assert candidate(0, 1) == 0\n    assert candidate(0, 0) == 0\n\ndef test_check():\n\
  \    check(multiply)\n\ntest_check()\n"
completions: ["    return a * b\n\n", "    return a * b\n\n", "    return a * b\n\n",
  "    return a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return\
    \ a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return a *\
    \ b\n\n", "    \n    # Your code here\n    \n    return 0\n</cell>\n<cell>", " \
    \   return a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return\
    \ a * b\n\n", "    return a * b\n\n", "    return a * b\n\n", "    return a *\
    \ b\n\n", "    return a * b\n\n", "    return a * b\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
