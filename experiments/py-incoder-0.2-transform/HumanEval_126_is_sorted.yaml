name: HumanEval_126_is_sorted
language: py
prompt: "from typing import List\n\ndef is_sorted(lst: List[int]) -> bool:\n    \"\
  \"\"\n    Given a list of numbers, return whether or not they are sorted\n    in\
  \ ascending order. If list has more than 1 duplicate of the same\n    number, return\
  \ False. Assume no negative numbers and only integers.\n\n    Examples\n    >>>\
  \ is_sorted([5])\n    True\n    >>> is_sorted([1, 2, 3, 4, 5])\n    True\n    >>>\
  \ is_sorted([1, 3, 2, 4, 5])\n    False\n    >>> is_sorted([1, 2, 3, 4, 5, 6])\n\
  \    True\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    True\n    >>> is_sorted([1,\
  \ 3, 2, 4, 5, 6, 7])\n    False\n    >>> is_sorted([1, 2, 2, 3, 3, 4])\n    True\n\
  \    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([5]) == True\n    assert candidate([1,\
  \ 2, 3, 4, 5]) == True\n    assert candidate([1, 3, 2, 4, 5]) == False\n    assert\
  \ candidate([1, 2, 3, 4, 5, 6]) == True\n    assert candidate([1, 2, 3, 4, 5, 6,\
  \ 7]) == True\n    assert candidate([1, 3, 2, 4, 5, 6, 7]) == False\n    assert\
  \ candidate([]) == True\n    assert candidate([1]) == True\n    assert candidate([3,\
  \ 2, 1]) == False\n    assert candidate([1, 2, 2, 2, 3, 4]) == False\n    assert\
  \ candidate([1, 2, 3, 3, 3, 4]) == False\n    assert candidate([1, 2, 2, 3, 3, 4])\
  \ == True\n    assert candidate([1, 2, 3, 4]) == True\n\ndef test_check():\n   \
  \ check(is_sorted)\n\ntest_check()\n"
completions: ["    lst = list(set(lst))\n    lst = sorted(lst)\n    return lst ==\
    \ lst\n\n", "    seen = set()\n    for i in lst:\n        if i in seen:\n    \
    \        return False\n        seen.add(i)\n    return True\n", "    seen = set()\n\
    \    for x in lst:\n        if x in seen:\n            return False\n        seen.add(x)\n\
    \    return True\n\n", "    seen = set()\n    for item in lst:\n        if item\
    \ in seen:\n            return False\n        seen.add(item)\n    return True\n",
  "    seen = set()\n    for x in lst:\n        if x in seen:\n            return\
    \ False\n        seen.add(x)\n    return True\n", "    lst = list(set(lst))\n\
    \    lst = sorted(lst)\n    return lst == lst\n", "    seen = set()\n    for i\
    \ in lst:\n        if i in seen:\n            return False\n        seen.add(i)\n\
    \    return True\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    lst = list(lst)\n    if len(lst) < 2:\n        return True\n    first = lst[0]\n\
    \    last = lst[-1]\n    mid = lst[int((len(lst) - 1) // 2)]\n    if first ==\
    \ last:\n        return True\n    if first > mid:\n        return False\n    if\
    \ last < mid:\n        return False\n    return is_sorted(lst[:len(lst) // 2])\n",
  "    seen = set()\n    for i in lst:\n        if i in seen:\n            return\
    \ False\n        seen.add(i)\n    return True\n", "    seen = set()\n    for i\
    \ in lst:\n        if i in seen:\n            return False\n        seen.add(i)\n\
    \    return True\n", "    seen = set()\n    for item in lst:\n        if item\
    \ in seen:\n            return False\n        seen.add(item)\n    return True\n",
  "    lst = list(set(lst))\n    if len(lst) != len(set(lst)):\n        return False\n\
    \    sorted_lst = sorted(lst)\n    return sorted_lst == lst\n\n", "    seen =\
    \ set()\n    for i in lst:\n        if i in seen:\n            return False\n\
    \        seen.add(i)\n    return True\n", "    lst = list(set(lst))\n    if len(lst)\
    \ != len(set(lst)):\n        return False\n    return all(lst[i] <= lst[i + 1]\
    \ for i in range(len(lst) - 1))\n\n", "    lst = list(set(lst))\n    lst = sorted(lst)\n\
    \    return lst == lst\n", "    seen = set()\n    for i in lst:\n        if i\
    \ in seen:\n            return False\n        seen.add(i)\n    return True\n",
  "    seen = set()\n    for item in lst:\n        if item in seen:\n            return\
    \ False\n        seen.add(item)\n    return True\n\n", "    seen = set()\n   \
    \ for i in lst:\n        if i in seen:\n            return False\n        seen.add(i)\n\
    \    return True\n\n", "    seen = set()\n    for i in lst:\n        if i in seen:\n\
    \            return False\n        seen.add(i)\n    return True\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
