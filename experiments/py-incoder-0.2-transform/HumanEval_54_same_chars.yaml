name: HumanEval_54_same_chars
language: py
prompt: "def same_chars(s0: str, s1: str) -> bool:\n    \"\"\"\n    Check if two words\
  \ have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n\
  \    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc',\
  \ 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>>\
  \ same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddeddabc')\
  \ == True\n    assert candidate('abcd', 'dddddddabc') == True\n    assert candidate('dddddddabc',\
  \ 'abcd') == True\n    assert candidate('eabcd', 'dddddddabc') == False\n    assert\
  \ candidate('abcd', 'dddddddabcf') == False\n    assert candidate('eabcdzzzz', 'dddzzzzzzzddddabc')\
  \ == False\n    assert candidate('aabb', 'aaccc') == False\n\ndef test_check():\n\
  \    check(same_chars)\n\ntest_check()\n"
completions: ["    return len(s0) == len(s1) and all(s0[i] == s1[i] for i in range(len(s0)))\n\
    \n", "    return s0.lower() == s1.lower()\n\n", "    return len(s0) == len(s1)\
    \ or len(s0) == len(s1) + len(s1)\n\n", "    s0 = ''.join(sorted(s0))\n    s1\
    \ = ''.join(sorted(s1))\n    return s0 == s1\n\n", "    s0 = s0.lower()\n    s1\
    \ = s1.lower()\n    if len(s0) == len(s1):\n        return all(s0[i] == s1[i]\
    \ for i in range(len(s0)))\n    else:\n        return False\n\n", "    if len(s0)\
    \ != len(s1):\n        return False\n    i = 0\n    while i < len(s0) and i <\
    \ len(s1) and s0[i] == s1[i]:\n        i += 1\n    return i == len(s0)\n\n", " \
    \   s0 = s0.lower()\n    s1 = s1.lower()\n    if len(s0) != len(s1):\n       \
    \ return False\n    return all(s0[i] == s1[i] for i in range(len(s0)))\n\n", " \
    \   return set(s0) == set(s1)\n\n", "    return s0.lower() == s1.lower()\n\n",
  "    if len(s0) != len(s1):\n        return False\n    i = 0\n    while i < len(s0)\
    \ and i < len(s1) and s0[i] == s1[i]:\n        i += 1\n    return i == len(s0)\n\
    \n", "    return s0 == s1 or s0.startswith(s1)\n\n", "    return len(s0) == len(s1)\
    \ or len(s0) == len(s1) + len(s1)\n\n", "    return len(s0) == len(s1) or len(s0)\
    \ == len(s1) + len(s1)\n\n", "    s0 = ''.join(sorted(s0))\n    s1 = ''.join(sorted(s1))\n\
    \    return s0 == s1\n\n", "    return len(s0) == len(s1) or len(s0) == len(s1)\
    \ + len(s1)\n\n", "    return len(s0) == len(s1) or len(s0) == len(s1) + len(s1)\n\
    \n", "    s0 = [c for c in s0 if c in string.ascii_letters]\n    s1 = [c for c\
    \ in s1 if c in string.ascii_letters]\n    return s0 == s1\n\n", "    return len(s0)\
    \ == len(s1) or len(s0) == len(s1) + len(s1)\n\n", "    return len(s0) == len(s1)\
    \ or len(s0) == len(s1) + len(s1)\n\n", "    return s0.lower() == s1.lower()\n\
    \n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
