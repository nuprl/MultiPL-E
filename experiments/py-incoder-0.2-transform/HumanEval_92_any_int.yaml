name: HumanEval_92_any_int
language: py
prompt: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
  \ a function that takes 3 numbers.\n    Returns true if one of the numbers is equal\
  \ to the sum of the other two, and all numbers are integers.\n    Returns false\
  \ in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n\
  \    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n\
  \    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
  \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
  \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
  \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
  \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
  \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
completions: ["    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    \n    if type(x) == int or type(y) == int or type(z) == int:\n\
    \        return True\n    else:\n        return False\n    ", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nThe string can contain punctuation marks and spaces.\nThe string can\
    \ contain multiple words.\nThe string can contain no words.\nThe function should\
    \ ignore case when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting ", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nWrite a function that takes\
    \ 3 numbers and returns True if they are all positive, and False otherwise.\n\
    Return False if the numbers are all negative.\nReturn False if the numbers are\
    \ all zero.\nReturn False if any number is NaN.\nReturn False if any number is\
    \ infinite.\nReturn False if any number is less than zero.\nReturn False if any\
    \ number is greater than or equal to zero.\nReturn False if any number is equal\
    \ to zero.\nReturn False if any number is greater than or equal to 1.\nReturn\
    \ False if any number is less than 1.\nReturn False if any number is equal to\
    \ 1.\nReturn False if any number is greater than or equal to 2.\nReturn False\
    \ if any number is less than 2.\nReturn False if any number is equal to 2.\nReturn\
    \ False if any number is greater than or equal to 3.\nReturn False if any number\
    \ is less than 3.\nReturn False if any number is equal to 3.\nReturn False if\
    \ any number is greater than or equal to 4.\nReturn False if any number is less\
    \ than 4.\nReturn False if any number is equal to 4.\nReturn False if any number\
    \ is greater than or equal to 5.\nReturn False if any number is less than 5.\n\
    Return False if any number is equal to 5.\nReturn False if any number is greater\
    \ than or equal to 6.\nReturn False if any number is less than 6.\nReturn False\
    \ if any number is equal to 6.\nReturn False if any number is greater than or\
    \ equal to 7.\nReturn False if any number is less than 7.\nReturn False if any\
    \ number is equal to 7.\nReturn False if any number is greater than or equal to\
    \ 8.\nReturn False if any number is less than 8.\nReturn False if any number is\
    \ equal to 8.\nReturn False if any number is greater than or equal to 9.\nReturn\
    \ False if any number is less than 9.\nReturn False if any number is equal to\
    \ 9.\nReturn False if any number is greater than or equal to 10.\nReturn False\
    \ if any number is less than 10.\nReturn False if any number is equal to 10.\n\
    Return False if any number is greater than or equal to 11.\nReturn False if any\
    \ number is less than 11.\nReturn False if any number is equal to 11.\nReturn\
    \ False if any number is greater than or equal to 12.\nReturn False if any number\
    \ is less than 12.\nReturn False if any number is equal to 12.\nReturn False if\
    \ any number is greater than or equal to 13.\nReturn False if any number is less\
    \ than 13.\nReturn False if any number is equal to 13.\nReturn False if any number\
    \ is greater than or equal to 14.\n", "    return (x == y or x == z or y == z)\
    \ and int(x) == int(y) and int(x) == int(z)\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\n\
    any_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3,\
    \ -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes 3 numbers and returns True if they are all integers,\
    \ and False if they are not.\nWrite a function that takes 3 numbers and returns\
    \ True if any of them is an integer, and False if none of them are.\nWrite a function\
    \ that takes 3 numbers and returns True if any of them are equal to the sum of\
    \ the other two, and False if none of them are.\nWrite a function that takes 3\
    \ numbers and returns True if any of them are equal to the sum of the other two,\
    \ and False if none of them are.\nWrite a function that takes 3 numbers and returns\
    \ True if any of them are equal to the sum of the other two, and False if none\
    \ of them are.\nWrite a function that takes 3 numbers and returns True if any\
    \ of them are equal to the sum of the other two, and False if none of them are.\n\
    Write a function that takes 3 numbers and returns True if any of them are equal\
    \ to the sum of the other two, and False if none of them are.\nWrite a function\
    \ that takes 3 numbers and returns True if any of them are equal to the sum of\
    \ the other two, and False if none of them are.\nWrite a function that takes 3\
    \ numbers and returns True if any of them are equal to the sum of the other two,\
    \ and False if none of them are.\nWrite a function that takes 3 numbers and returns\
    \ True if any of them are equal to the sum of the other two, and False if none\
    \ of them are.\nWrite a function that takes 3 numbers and returns True if any\
    \ of them are equal to the sum of the other two, and False if none of them are.\n\
    Write a function that takes 3 numbers and returns True if any of them are equal\
    \ to the sum of the other two, and False if none of them are.\nWrite a function\
    \ that takes 3 numbers and returns True if any of them are equal to the sum of\
    \ the other two, and False if none of them are.\nWrite a function that takes 3\
    \ numbers and returns True if any of them are equal to the sum of the other two,\
    \ and False if none of them are.\nWrite a function that takes 3 numbers and returns\
    \ True if any of them are equal to the sum of the other two, and False if none\
    \ of them are.\nWrite a function that takes 3 numbers and returns True if any\
    \ of them are equal to the sum of the other two, and False if none of them are.\n\
    Write a function that takes 3 numbers and returns True if any of them are equal\
    \ to the sum of the other two, and ", "    return (x == y or x == z or y == z)\
    \ and isinstance(x, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a string and returns the number of uppercase letters in the string.\nReturn\
    \ 0 for an empty string.\nReturn 0 for any string that does not contain any uppercase\
    \ letters.\nReturn 1 for any string that contains at least one uppercase letter.\n\
    Return 2 for any string that contains at least two uppercase letters.\nReturn\
    \ 3 for any string that contains at least three uppercase letters.\nReturn 4 for\
    \ any string that contains at least four uppercase letters.\nReturn 5 for any\
    \ string that contains at least five uppercase letters.\nReturn 6 for any string\
    \ that contains at least six uppercase letters.\nReturn 7 for any string that\
    \ contains at least seven uppercase letters.\nReturn 8 for any string that contains\
    \ at least eight uppercase letters.\nReturn 9 for any string that contains at\
    \ least nine uppercase letters.\nReturn 10 for any string that contains at least\
    \ ten uppercase letters.\nReturn 11 for any string that contains at least eleven\
    \ uppercase letters.\nReturn 12 for any string that contains at least twelve uppercase\
    \ letters.\nReturn 13 for any string that contains at least thirteen uppercase\
    \ letters.\nReturn 14 for any string that contains at least fourteen uppercase\
    \ letters.\nReturn 15 for any string that contains at least fifteen uppercase\
    \ letters.\nReturn 16 for any string that contains at least sixteen uppercase\
    \ letters.\nReturn 17 for any string that contains at least seventeen uppercase\
    \ letters.\nReturn 18 for any string that contains at least eighteen uppercase\
    \ letters.\nReturn 19 for any string that contains at least nineteen uppercase\
    \ letters.\nReturn 20 for any string that contains at least twenty uppercase letters.\n\
    Return 21 for any string that contains at least twenty-one uppercase letters.\n\
    Return 22 for any string that contains at least twenty-two uppercase letters.\n\
    Return 23 for any string that contains at least twenty-three uppercase letters.\n\
    Return 24 for any string that contains at least twenty-four uppercase letters.\n\
    Return 25 for any string that contains at least twenty-five uppercase letters.\n\
    Return 26 for any string that contains at least twenty-six uppercase letters.\n\
    Return 27 for any string that contains at least twent", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x == y + z and x != -y and x != -z and x != z and x !=\
    \ -y\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Any String\n\
    Create a function that takes 3 strings.\nReturns true if one of the strings is\
    \ equal to the sum of the other two, and all strings are lowercase.\nReturns false\
    \ in any other cases.\n    \nExamples\n    >>> any_string('a', 'b', 'c')\n   \
    \ True\n    \n    >>> any_string('A', 'B', 'C')\n    True\n    \n    >>> any_string('a',\
    \ 'B', 'c')\n    False\n\n    >>> any_string('a', 'b', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7\nCreate a function\
    \ that takes a string and returns the number of words in the string.\n\nExamples\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n8\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jump", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
