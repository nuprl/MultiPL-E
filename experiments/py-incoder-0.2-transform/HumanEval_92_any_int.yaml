name: HumanEval_92_any_int
language: py
prompt: "def any_int(x: float, y: float, z: float) -> bool:\n    \"\"\"\n    Create\
  \ a function that takes 3 numbers.\n    Returns true if one of the numbers is equal\
  \ to the sum of the other two, and all numbers are integers.\n    Returns false\
  \ in any other cases.\n    \n    Examples\n    >>> any_int(5, 2, 7)\n    True\n\
  \    \n    >>> any_int(3, 2, 2)\n    False\n\n    >>> any_int(3, -2, 1)\n    True\n\
  \    \n    >>> any_int(3.6, -2.2, 2)\n    False\n  \n\n    \n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(2, 3, 1) == True\n    assert candidate(2.5,\
  \ 2, 3) == False\n    assert candidate(1.5, 5, 3.5) == False\n    assert candidate(2,\
  \ 6, 2) == False\n    assert candidate(4, 2, 2) == True\n    assert candidate(2.2,\
  \ 2.2, 2.2) == False\n    assert candidate(-4, 6, 2) == True\n    assert candidate(2,\
  \ 1, 1) == True\n    assert candidate(3, 4, 7) == True\n    assert candidate(3.0,\
  \ 4, 7) == False\n\ndef test_check():\n    check(any_int)\n\ntest_check()\n"
completions: ["    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    \n    if type(x) == int or type(y) == int or type(z) == int:\n\
    \        return True\n    else:\n        return False\n    ", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nThe string can contain punctuation marks and spaces.\nThe string can\
    \ contain multiple words.\nThe string can contain no words.\nThe function should\
    \ ignore case when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting words.\nThe function should ignore punctuation marks\
    \ and spaces when counting ", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nWrite a function that takes\
    \ 3 numbers and returns True if they are all positive, and False otherwise.\n\
    Return False if the numbers are all negative.\nReturn False if the numbers are\
    \ all zero.\nReturn False if any number is NaN.\nReturn False if any number is\
    \ infinite.\nReturn False if any number is less than zero.\nReturn False if any\
    \ number is greater than or equal to zero.\nReturn False if any number is equal\
    \ to zero.\nReturn False if any number is greater than or equal to 1.\nReturn\
    \ False if any number is less than 1.\nReturn False if any number is equal to\
    \ 1.\nReturn False if any number is greater than or equal to 2.\nReturn False\
    \ if any number is less than 2.\nReturn False if any number is equal to 2.\nReturn\
    \ False if any number is greater than or equal to 3.\nReturn False if any number\
    \ is less than 3.\nReturn False if any number is equal to 3.\nReturn False if\
    \ any number is greater than or equal to 4.\nReturn False if any number is less\
    \ than 4.\nReturn False if any number is equal to 4.\nReturn False if any number\
    \ is greater than or equal to 5.\nReturn False if any number is less than 5.\n\
    Return False if any number is equal to 5.\nReturn False if any number is greater\
    \ than or equal to 6.\nReturn False if any number is less than 6.\nReturn False\
    \ if any number is equal to 6.\nReturn False if any number is greater than or\
    \ equal to 7.\nReturn False if any number is less than 7.\nReturn False if any\
    \ number is equal to 7.\nReturn False if any number is greater than or equal to\
    \ 8.\nReturn False if any number is less than 8.\nReturn False if any number is\
    \ equal to 8.\nReturn False if any number is greater than or equal to 9.\nReturn\
    \ False if any number is less than 9.\nReturn False if any number is equal to\
    \ 9.\nReturn False if any number is greater than or equal to 10.\nReturn False\
    \ if any number is less than 10.\nReturn False if any number is equal to 10.\n\
    Return False if any number is greater than or equal to 11.\nReturn False if any\
    \ number is less than 11.\nReturn False if any number is equal to 11.\nReturn\
    \ False if any number is greater than or equal to 12.\nReturn False if any number\
    \ is less than 12.\nReturn False if any number is equal to 12.\nReturn False if\
    \ any number is greater than or equal to 13.\nReturn False if any number is less\
    \ than 13.\nReturn False if any number is equal to 13.\nReturn False if any number\
    \ is greater than or equal to 14.\n", "    return (x == y or x == z or y == z)\
    \ and int(x) == int(y) and int(x) == int(z)\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\n\
    any_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3,\
    \ -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes 3 numbers and returns True if they are all integers,\
    \ and False if they are not.\nWrite a function that takes 3 numbers and returns\
    \ True if any of them is an integer, and False if none of them are.\nWrite a function\
    \ that takes 3 numbers and returns True if any of them are equal to the sum of\
    \ the other two, and False if none of them are.\nWrite a function that takes 3\
    \ numbers and returns True if any of them are equal to the sum of the other two,\
    \ and False if none of them are.\nWrite a function that takes 3 numbers and returns\
    \ True if any of them are equal to the sum of the other two, and False if none\
    \ of them are.\nWrite a function that takes 3 numbers and returns True if any\
    \ of them are equal to the sum of the other two, and False if none of them are.\n\
    Write a function that takes 3 numbers and returns True if any of them are equal\
    \ to the sum of the other two, and False if none of them are.\nWrite a function\
    \ that takes 3 numbers and returns True if any of them are equal to the sum of\
    \ the other two, and False if none of them are.\nWrite a function that takes 3\
    \ numbers and returns True if any of them are equal to the sum of the other two,\
    \ and False if none of them are.\nWrite a function that takes 3 numbers and returns\
    \ True if any of them are equal to the sum of the other two, and False if none\
    \ of them are.\nWrite a function that takes 3 numbers and returns True if any\
    \ of them are equal to the sum of the other two, and False if none of them are.\n\
    Write a function that takes 3 numbers and returns True if any of them are equal\
    \ to the sum of the other two, and False if none of them are.\nWrite a function\
    \ that takes 3 numbers and returns True if any of them are equal to the sum of\
    \ the other two, and False if none of them are.\nWrite a function that takes 3\
    \ numbers and returns True if any of them are equal to the sum of the other two,\
    \ and False if none of them are.\nWrite a function that takes 3 numbers and returns\
    \ True if any of them are equal to the sum of the other two, and False if none\
    \ of them are.\nWrite a function that takes 3 numbers and returns True if any\
    \ of them are equal to the sum of the other two, and False if none of them are.\n\
    Write a function that takes 3 numbers and returns True if any of them are equal\
    \ to the sum of the other two, and ", "    return (x == y or x == z or y == z)\
    \ and isinstance(x, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a string and returns the number of uppercase letters in the string.\nReturn\
    \ 0 for an empty string.\nReturn 0 for any string that does not contain any uppercase\
    \ letters.\nReturn 1 for any string that contains at least one uppercase letter.\n\
    Return 2 for any string that contains at least two uppercase letters.\nReturn\
    \ 3 for any string that contains at least three uppercase letters.\nReturn 4 for\
    \ any string that contains at least four uppercase letters.\nReturn 5 for any\
    \ string that contains at least five uppercase letters.\nReturn 6 for any string\
    \ that contains at least six uppercase letters.\nReturn 7 for any string that\
    \ contains at least seven uppercase letters.\nReturn 8 for any string that contains\
    \ at least eight uppercase letters.\nReturn 9 for any string that contains at\
    \ least nine uppercase letters.\nReturn 10 for any string that contains at least\
    \ ten uppercase letters.\nReturn 11 for any string that contains at least eleven\
    \ uppercase letters.\nReturn 12 for any string that contains at least twelve uppercase\
    \ letters.\nReturn 13 for any string that contains at least thirteen uppercase\
    \ letters.\nReturn 14 for any string that contains at least fourteen uppercase\
    \ letters.\nReturn 15 for any string that contains at least fifteen uppercase\
    \ letters.\nReturn 16 for any string that contains at least sixteen uppercase\
    \ letters.\nReturn 17 for any string that contains at least seventeen uppercase\
    \ letters.\nReturn 18 for any string that contains at least eighteen uppercase\
    \ letters.\nReturn 19 for any string that contains at least nineteen uppercase\
    \ letters.\nReturn 20 for any string that contains at least twenty uppercase letters.\n\
    Return 21 for any string that contains at least twenty-one uppercase letters.\n\
    Return 22 for any string that contains at least twenty-two uppercase letters.\n\
    Return 23 for any string that contains at least twenty-three uppercase letters.\n\
    Return 24 for any string that contains at least twenty-four uppercase letters.\n\
    Return 25 for any string that contains at least twenty-five uppercase letters.\n\
    Return 26 for any string that contains at least twenty-six uppercase letters.\n\
    Return 27 for any string that contains at least twent", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x == y + z and x != -y and x != -z and x != z and x !=\
    \ -y\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Any String\n\
    Create a function that takes 3 strings.\nReturns true if one of the strings is\
    \ equal to the sum of the other two, and all strings are lowercase.\nReturns false\
    \ in any other cases.\n    \nExamples\n    >>> any_string('a', 'b', 'c')\n   \
    \ True\n    \n    >>> any_string('A', 'B', 'C')\n    True\n    \n    >>> any_string('a',\
    \ 'B', 'c')\n    False\n\n    >>> any_string('a', 'b', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('A', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('a', 'B', 'C')\n    False\n    \n    >>> any_string('A', 'B',\
    \ 'C')\n    False\n    \n    >>> any_string('a', 'B', 'C')\n    False\n    \n\
    \    >>> any_string('A', 'B', 'C')\n    False\n    \n    >>> any_string('a', 'B',\
    \ 'C')\n    False\n    \n    >>> any_", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7\nCreate a function\
    \ that takes a string and returns the number of words in the string.\n\nExamples\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n8\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jump", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x == y + z\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem\
    \ 7\nCreate a function that takes 3 numbers and returns True if they are all positive,\
    \ and False if they are all negative.\n\n\n</text>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a string and returns the number of vowels contained\
    \ in the string.\n\nExamples\n>>> vowel_count('hello')\n2\n\n>>> vowel_count('goodbye')\n\
    0\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n\
    >>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>>\
    \ vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n\
    3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n\
    >>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>>\
    \ vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n\
    3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n\
    >>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>>\
    \ vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n\
    3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n\
    >>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>>\
    \ vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')\n\
    3\n\n>>> vowel_count('abracadabra')\n3\n\n>>> vowel_count('abracadabra')", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nWrite a function that takes 3 numbers\
    \ and returns True if they are all positive, and False if they are all negative.\n\
    \n</text>\n<cell>", "    \n    if type(x) != int or type(y) != int or type(z)\
    \ != int:\n        return False\n    \n    return x == y + z\n\n", "    \n   \
    \ if type(x) == int or type(y) == int or type(z) == int:\n        return True\n\
    \    else:\n        return False\n    ", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return (x == y or x == z or y == z)\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    \n \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    \n    if x == y + z:\n        return True\n    else:\n        return False\n\
    \    ", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes in a list of numbers and returns the number of positive numbers in\
    \ the list.\nExamples\n>>> count_positive([1, 2, 3, 4])\n4\n>>> count_positive([-1,\
    \ -2, -3, -4])\n2\n>>> count_positive([0, -2, -3, -4])\n0\n>>> count_positive([0,\
    \ -2, -3, -4, 0])\n1\n>>> count_positive([0, -2, -3, -4, 0, 0])\n2\n\n</text>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    \n    if x == y and y == z:\n       \
    \ return True\n    \n    return False\n</cell>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\n\
    any_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3,\
    \ -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\n\
    Write a function that takes 3 numbers and returns True if they are all positive.\n\
    \nExamples\n>>> all_positive(7, -5, -3)\nTrue\n\n>>> all_positive(7, 5, -3)\n\
    False\n\n>>> all_positive(7, 5, 3)\nFalse\n\n>>> all_positive(7, 5, -5)\nTrue\n\
    \n>>> all_positive(7, 5, -7)\nFalse\n\n>>> all_positive(7, 5, -7)\nFalse\n\n>>>\
    \ all_positive(7, 5, 7)\nTrue\n\n>>> all_positive(7, 5, -7)\nFalse\n\n>>> all_positive(7,\
    \ 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\n\
    False\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\
    \n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>>\
    \ all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7,\
    \ 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\n\
    False\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\
    \n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>>\
    \ all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7,\
    \ 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\n\
    False\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\
    \n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>>\
    \ all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7,\
    \ 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\n\
    False\n\n>>> all_positive(7, 5, 7)\nFalse\n\n>>> all_positive(7, 5, 7)\nFalse\n\
    \n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x == y + z and x != 0 and y != 0 and z != 0\n\n", "    \n    if x ==\
    \ y and y == z:\n        return True\n    else:\n        return False\n\n", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n\n", "    return (x == y or x == z or y == z)\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x == y + z and x != 0 and y != 0 and z != 0\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n", "   \
    \ return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n\
    </cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n\
    <text>\nProblem 4\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nThe string can contain spaces, punctuation, and numbers.\n\
    The function should ignore all punctuation and only count words.\nThe function\
    \ should ignore all numbers.\nThe function should ignore all spaces.\nThe function\
    \ should ignore all caps.\nThe function should ignore all lowercase.\nThe function\
    \ should ignore all uppercase.\nThe function should ignore all symbols.\nThe function\
    \ should ignore all non-alphabetic characters.\nThe function should ignore all\
    \ non-alphanumeric characters.\nThe function should ignore all non-alphabetic\
    \ characters and symbols.\nThe function should ignore all non-alphanumeric characters\
    \ and symbols.\nThe function should ignore all non-alphabetic characters and symbols.\n\
    The function should ignore all non-alphanumeric characters and symbols.\nThe function\
    \ should ignore all non-alphabetic characters and symbols.\nThe function should\
    \ ignore all non-alphanumeric characters and symbols.\nThe function should ignore\
    \ all non-alphabetic characters and symbols.\nThe function should ignore all non-alphanumeric\
    \ characters and symbols.\nThe function should ignore all non-alphabetic characters\
    \ and symbols.\nThe function should ignore all non-alphanumeric characters and\
    \ symbols.\nThe function should ignore all non-alphabetic characters and symbols.\n\
    The function should ignore all non-alphanumeric characters and symbols.\nThe function\
    \ should ignore all non-alphabetic characters and symbols.\nThe function should\
    \ ignore all non-alphanumeric characters and symbols.\nThe function should ignore\
    \ all non-alphabetic characters and symbols.\nThe function should ignore all non-alphanumeric\
    \ characters and symbols.\nThe function should ignore all non-alphabetic characters\
    \ and symbols.\nThe function should ignore all non-alphanumeric characters and\
    \ symbols.\nThe function should ignore all non-alphabetic characters and symbols.\n\
    The function should ignore all non-alphanumeric characters and symbols.\nThe function\
    \ should ignore all non-alphabetic characters and symbols.\nThe function should\
    \ ignore all non-alphanumeric characters and symbols.\nThe function should ignore\
    \ all non-alphabetic characters and symbol", "    \n    if x == y + z:\n     \
    \   return True\n    else:\n        return False\n    ", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7: Any String\nCreate a function\
    \ that takes 3 strings.\nReturns true if any of the strings is equal to the sum\
    \ of the other two, and all strings are strings.\nReturns false in any other cases.\n\
    \    \nExamples\n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n    \n\
    \    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\"\
    , \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n\
    \    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\"\
    , \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n\
    \    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\"\
    , \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n\
    \    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\"\
    , \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n\
    \    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\"\
    , \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n\
    \    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\"\
    , \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n\
    \    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"world\", \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\"\
    , \"!\")\n    True\n    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n\
    \    \n    >>> any_str(\"hello\", \"world\", \"!\")\n    True\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes 3 numbers and returns True if they are all integers, and False if\
    \ any of them are not integers.\n\nExamples\n>>> all_ints(5, 2, 7)\nTrue\n\n>>>\
    \ all_ints(3, 2, 2)\nFalse\n\n>>> all_ints(3, -2, 1)\nFalse\n\n>>> all_ints(3.6,\
    \ -2.2, 2)\nTrue\n\n</text>\n<cell>", "    return (x == y or x == z or y == z)\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x == y + z and x != 0 and y != 0 and z != 0\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 7: Write a function that takes in a list of numbers\
    \ and returns the number of positive numbers in the list.\nExamples\n>>> count_positive([1,\
    \ 2, 3])\n3\n\n>>> count_positive([-1, -2, -3])\n2\n\n>>> count_positive([-1,\
    \ -2, -3, -4, -5])\n4\n\n>>> count_positive([-1, -2, -3, -4, -5, -6])\n0\n\n>>>\
    \ count_positive([-1, -2, -3, -4, -5, -6, -7])\n1\n\n>>> count_positive([-1, -2,\
    \ -3, -4, -5, -6, -7, -8])\n1\n\n>>> count_positive([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, 9])\n1\n\n>>> count_positive([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10])\n\
    1\n\n>>> count_positive([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11])\n1\n\n>>>\
    \ count_positive([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12])\n2\n\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13])\n2\n\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14])\n2\n\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15])\n2\n\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16])\n2\n\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n2\n\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n2\n\n>>>\
    \ count_positive([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19])\n2\n\n>>> count_positive([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10,\
    \ 11, 12, 13, 14, ", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int)\n\n", "    return (x == y + z) and (x % 1 == 0) and (y %\
    \ 1 == 0) and (z % 1 == 0)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return (x == y or x == z or\
    \ y == z)\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>", "    return (x == y or x == z) and x.is_integer()\n\
    \n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\
    \ and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x == y + z\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<cell>", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int)\n\n", "    \n    if type(x) == int or type(y) == int\
    \ or type(z) == int:\n        return True\n    else:\n        return False\n \
    \   ", "    return (x == y or x == z or y == z)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem\
    \ 3\nCreate a function that takes 3 numbers and returns True if they are all positive,\
    \ and False otherwise.\n\nExamples\n>>> all_positive(1, 2, 3)\nTrue\n\n>>> all_positive(-1,\
    \ -2, -3)\nFalse\n\n>>> all_positive(3.6, -2.2, 2)\nFalse\n\n</text>\n<cell>",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7\nCreate a function that takes\
    \ 3 numbers and returns True if they are all positive, False if they are all negative,\
    \ and None if they are all zero. You may assume that all inputs are integers.\n\
    \nExamples\n>>> all_positive(1, 2, 3)\nTrue\n\n>>> all_positive(-1, -2, -3)\n\
    False\n\n>>> all_positive(0, -1, -2)\nNone\n\n>>> all_positive(-5, -6, -7)\nNone\n\
    \n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x == y\
    \ + z and x != 0 and y != 0 and z != 0\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 4\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nThe string can contain spaces, commas, and\
    \ periods.\nThe string can also contain numbers.\nThe string can also contain\
    \ emojis.\nThe string can also contain emojis and spaces.\nThe string can also\
    \ contain emojis and numbers.\nThe string can also contain emojis and spaces and\
    \ numbers.\nThe string can also contain emojis and spaces, numbers, and punctuation.\n\
    The string can also contain emojis and spaces, numbers, punctuation, and emojis.\n\
    The string can also contain emojis and spaces, numbers, punctuation, emojis, and\
    \ spaces.\nThe string can also contain emojis and spaces, numbers, punctuation,\
    \ emojis, spaces, and numbers.\nThe string can also contain emojis and spaces,\
    \ numbers, punctuation, emojis, spaces, numbers, and punctuation.\nThe string\
    \ can also contain emojis and spaces, numbers, punctuation, emojis, spaces, numbers,\
    \ punctuation, and emojis.\nThe string can also contain emojis and spaces, numbers,\
    \ punctuation, emojis, spaces, numbers, punctuation, emojis, and spaces.\nThe\
    \ string can also contain emojis and spaces, numbers, punctuation, emojis, spaces,\
    \ numbers, punctuation, emojis, spaces, and numbers.\nThe string can also contain\
    \ emojis and spaces, numbers, punctuation, emojis, spaces, numbers, punctuation,\
    \ emojis, spaces, numbers, and punctuation.\nThe string can also contain emojis\
    \ and spaces, numbers, punctuation, emojis, spaces, numbers, punctuation, emojis,\
    \ spaces, numbers, punctuation, emojis, and spaces.\nThe string can also contain\
    \ emojis and spaces, numbers, punctuation, emojis, spaces, numbers, punctuation,\
    \ emojis, spaces, numbers, punctuation, emojis, spaces, numbers, and punctuation.\n\
    The string can also contain emojis and spaces, numbers, punctuation, emojis, spaces,\
    \ numbers, punctuation, emojis, spaces, numbers, punctuation, emojis, spaces,\
    \ numbers, punctuation, emojis, and spaces.\nThe string can also contain emojis\
    \ and spaces, numbers, punctuation, emojis, spaces, numbers, punctuation, emojis,\
    \ spaces, numbers, punctuation, emojis, spaces, numbers, punctuation, emojis,\
    \ space", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5,\
    \ 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n\
    </cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that takes a list of numbers and returns the sum of the numbers in the list,\
    \ ignoring the numbers.\n\nExamples\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3,\
    \ 5])\n10\n>>> sum([1, 2, 3, 5], 10)\n10\n>>> sum([1, 2, 3, 5], 0)\n0\n>>> sum([1,\
    \ 2, 3, 5], -1)\nTraceback (most recent call last):\n  File \"<stdin>\", line\
    \ 1, in <module>\n  File \"<stdin>\", line 1, in <lambda>\nTypeError: sum() takes\
    \ no keyword arguments\n\n</text>\n<cell>", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n\
    </cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes a list of numbers and returns the\
    \ sum of the numbers in the list, ignoring any non-integer values.\n\nExamples\n\
    >>> sum([1, 2, 3, 4])\n10\n>>> sum([1, 2, \"3\", 4])\n10\n>>> sum([1, 2, \"3\"\
    , 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n\
    >>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1,\
    \ 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\",\
    \ 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n\
    >>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1,\
    \ 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\",\
    \ 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n\
    >>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1,\
    \ 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\",\
    \ 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n\
    >>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1,\
    \ 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\",\
    \ 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n\
    >>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1,\
    \ 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\",\
    \ 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n>>> sum([1, 2, \"3\", 4.0])\n10\n\
    >>> sum([1, 2, \"", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 7: Any String\nCreate a function that takes 3 strings\
    \ and returns True if at least one of them is equal to the sum of the other two,\
    \ and all strings are equal.\nReturns False in any other cases.\n    \nExamples\n\
    \    >>> any_str(\"hello\", \"hello\", \"hello\")\n    True\n    \n    >>> any_str(\"\
    hello\", \"hello\", \"goodbye\")\n    False\n\n    >>> any_str(\"hello\", \"goodbye\"\
    , \"hello\")\n    True\n    \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\"\
    )\n    False\n    \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n   \
    \ False\n    \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n\
    \    \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n    \n\
    \    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n    \n    >>>\
    \ any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n    \n    >>> any_str(\"\
    hello\", \"goodbye\", \"goodbye\")\n    False\n    \n    >>> any_str(\"hello\"\
    , \"goodbye\", \"goodbye\")\n    False\n    \n    >>> any_str(\"hello\", \"goodbye\"\
    , \"goodbye\")\n    False\n    \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\"\
    )\n    False\n    \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n   \
    \ False\n    \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n\
    \    \n    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n    \n\
    \    >>> any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n    \n    >>>\
    \ any_str(\"hello\", \"goodbye\", \"goodbye\")\n    False\n    \n    >>> any_str(\"\
    hello\", \"goodbye\", \"goodbye\")\n    False\n    \n    >>> any_str(\"hello\"\
    , \"goodbye\", \"goodbye\")\n    False\n    \n    >>> any_str(\"hello\", \"goodbye\"\
    , \"goodbye\")\n    False\n    \n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x == y + z\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x == y + z and x != 0 and y !=\
    \ 0 and z != 0\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\n\
    any_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3,\
    \ -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\n\
    Write a function that takes 3 numbers and returns True if they are all positive,\
    \ False if they are all negative, and None if they are all non-positive.\nUse\
    \ your any_int function to solve this problem.\nUse your any_int function to solve\
    \ this problem.\nUse your any_int function to solve this problem.\nUse your any_int\
    \ function to solve this problem.\n\n\n</text>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 3\nWrite a function that takes 3 numbers and returns\
    \ True if they are all positive, and False otherwise.\n\nExamples\n>>> all_positive(1,\
    \ 2, 3)\nTrue\n\n>>> all_positive(-1, -2, -3)\nFalse\n\n>>> all_positive(3.6,\
    \ -2.2, 2)\nFalse\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x == y + z and x != 0 and y != 0 and z != 0\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 3\nCreate a function that takes 3 numbers and returns\
    \ True if they are all positive, and False if they are all negative.\n\nExamples\n\
    >>> all_positive(1, 2, 3)\nTrue\n\n>>> all_positive(-1, 2, -3)\nFalse\n\n>>> all_positive(-5,\
    \ -6, -7)\nFalse\n\n>>> all_positive(3.6, -2.2, 2)\nFalse\n\n</text>\n<cell>",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n", "    \n    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n    \n    ", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "   \
    \ return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>", "    return (x == y or x == z or y == z)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x == y + z and x != 0\
    \ and y != 0 and z != 0\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x == y + z and x != 0 and y !=\
    \ 0 and z != 0\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    \n    if type(x) != int or type(y) != int or type(z) != int:\n        return\
    \ False\n    \n    if x == y and x == z:\n        return True\n    \n    return\
    \ False\n</cell>\n<cell>", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int)\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int)\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string and returns\
    \ a list of all the characters in that string. \nThe string can contain any characters,\
    \ including spaces.\nThe function should ignore spaces.\nThe function should ignore\
    \ punctuation.\nThe function should ignore uppercase and lowercase letters.\n\
    The function should ignore numbers and symbols.\nThe function should ignore non-alphabetic\
    \ characters like !, @, #, $, %, ^, &, *, -, =, +, <, >, |, /, ?, :, ;, ,, /,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *, *,\
    \ *, *, *, *, *, *, *, ", "    return isinstance(x, int) and isinstance(y, int)\
    \ and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x == y + z and x != 0 and y != 0 and z != 0\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return\
    \ isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and x + y +\
    \ z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 4\nWrite a function that takes\
    \ a string and returns the number of words in the string.\n\nExamples\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n5\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.\")\n5\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.  \")\n5\n\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog.  The\")\n5\n\n>>> count_words(\"The quick brown fox\
    \ jumps over the lazy dog.  The quick brown fox jumps over the lazy dog.  The\
    \ quick brown fox jumps over the lazy dog.  The quick brown fox jumps over the\
    \ lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown fox\
    \ jumps over the lazy dog.  The quick brown fox jumps over the lazy dog.  The\
    \ quick brown fox jumps over the lazy dog.  The quick brown fox jumps over the\
    \ lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown fox\
    \ jumps over the lazy dog.  The quick brown fox jumps over the lazy dog.  The\
    \ quick brown fox jumps over the lazy dog.  The quick brown fox jumps over the\
    \ lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown fox\
    \ jumps over the lazy dog.  The quick brown fox jumps over the lazy dog.  The\
    \ quick brown fox jumps over the lazy dog.  The quick brown fox jumps over the\
    \ lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown fox\
    \ jumps over the lazy dog.  The quick brown fox jumps over the lazy dog.  The\
    \ quick brown fox jumps over the lazy dog.  The quick brown fox jumps over the\
    \ lazy dog.  The quick brown fox jumps over the lazy dog.  The quick brown fox\
    \ jumps over the lazy dog.  The quick brown fox jumps over the lazy do", "   \
    \ return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x == y + z and x != 0 and y !=\
    \ 0 and z != 0\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int) and x + y + z == sum(map(int, (x, y, z)))\n", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 7: Write a function that takes a string and returns\
    \ the number of words in the string.\nExamples\n\"Hello World\" -> 5\n\"Hello\
    \ World!\" -> 2\n\"Hello World!!\" -> 3\n\"Hello World!!!\" -> 4\n\"Hello World!!!!\"\
    \ -> 5\n\"Hello World!!!!!\" -> 6\n\"Hello World!!!!!!\" -> 7\n\"Hello World!!!!!!!\"\
    \ -> 8\n\"Hello World!!!!!!!\"\n-> 9\n\n</text>\n<cell>", "    return isinstance(x,\
    \ int) and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n\n", "    return isinstance(x, int) and isinstance(y, int) and\
    \ isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\n\
    any_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3,\
    \ -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 7:\
    \ Create a function that takes 3 numbers and returns True if any of them is greater\
    \ than the sum of the other two, and all numbers are integers.\nReturn False in\
    \ any other cases.\nExamples\nany_int_greater(5, 2, 7)\nTrue\n\nany_int_greater(3,\
    \ 2, 2)\nFalse\n\nany_int_greater(3, -2, 1)\nTrue\n\nany_int_greater(3.6, -2.2,\
    \ 2)\nFalse\n\n</text>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int)\n\n", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\n\nExamples\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n8\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n\
    >>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\"\
    )\n0\n\n>>> count_words(\"The quick brown fox jumps over the lazy dog\")\n0\n\n\
    >>> count_words(\"The quick brown fox ", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int)\n\n", "    return isinstance(x, int)\
    \ and isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int,\
    \ (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3,\
    \ 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2,\
    \ 2)\n</cell>\n<text>\nProblem 7\nWrite a function that takes a string and returns\
    \ a list of all the words in the string.\nThe function should ignore non-alphabetic\
    \ characters and split on whitespace.\nThe function should ignore case and punctuation.\n\
    The function should ignore numbers and symbols.\nThe function should ignore spaces.\n\
    The function should ignore any leading or trailing whitespace.\nThe function should\
    \ ignore any leading or trailing punctuation.\nThe function should ignore any\
    \ leading or trailing numbers.\nThe function should ignore any leading or trailing\
    \ symbols.\nThe function should ignore any leading or trailing spaces.\nThe function\
    \ should ignore any leading or trailing alphanumerics.\nThe function should ignore\
    \ any leading or trailing punctuation.\nThe function should ignore any leading\
    \ or trailing numbers.\nThe function should ignore any leading or trailing symbols.\n\
    The function should ignore any leading or trailing spaces.\nThe function should\
    \ ignore any leading or trailing alphanumerics.\nThe function should ignore any\
    \ leading or trailing punctuation.\nThe function should ignore any leading or\
    \ trailing numbers.\nThe function should ignore any leading or trailing symbols.\n\
    The function should ignore any leading or trailing spaces.\nThe function should\
    \ ignore any leading or trailing alphanumerics.\nThe function should ignore any\
    \ leading or trailing punctuation.\nThe function should ignore any leading or\
    \ trailing numbers.\nThe function should ignore any leading or trailing symbols.\n\
    The function should ignore any leading or trailing spaces.\nThe function should\
    \ ignore any leading or trailing alphanumerics.\nThe function should ignore any\
    \ leading or trailing punctuation.\nThe function should ignore any leading or\
    \ trailing numbers.\nThe function should ignore any leading or trailing symbols.\n\
    The function should ignore any leading or trailing spaces.\nThe function should\
    \ ignore any leading or trailing alphanumerics.\nThe function should ignore any\
    \ leading or trailing punctuation.\nThe function should ignore any leading or\
    \ trailing numbers.\nThe function should ignore any leading or trailing symbols.\n\
    The function should ignore any leading or trailing spaces.\nThe function should\
    \ ignore any leading or trailing alphanumerics.\nThe function should ignore any\
    \ leading or trailing punctuation.\nThe function should ignore any leading or\
    \ trailing numbers.\nThe function should ignore any leading or trailing ", " \
    \   return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n", "    return isinstance(x, int) and\
    \ isinstance(y, int) and isinstance(z, int) and x + y + z == sum(map(int, (x,\
    \ y, z)))\n</cell>\n<cell>", "    return isinstance(x, int) and isinstance(y,\
    \ int) and isinstance(z, int) and x + y + z == sum(map(int, (x, y, z)))\n</cell>\n\
    <cell>\nany_int(5, 2, 7)\n</cell>\n<cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\n\
    any_int(3, -2, 1)\n</cell>\n<cell>\nany_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem\
    \ 7: Any String\nCreate a function that takes 3 strings and returns True if any\
    \ of them are equal to the sum of the other two, and all strings are equal in\
    \ length.\nReturns False in any other cases.\n    \nExamples\n>>> any_string(\"\
    hello\", \"hello\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"hello\", \"\
    world\")\nFalse\n\n>>> any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>>\
    \ any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\"\
    , \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\"\
    )\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"\
    hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"\
    hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>>\
    \ any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\"\
    , \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\"\
    )\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"\
    hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"\
    hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>>\
    \ any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\"\
    , \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\"\
    )\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"\
    hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"\
    hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>>\
    \ any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\"\
    , \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\"\
    )\nTrue\n\n>>> any_string(\"hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"\
    hello\", \"world\", \"hello\")\nTrue\n\n>>> any_string(\"hello\", \"world\", \"",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int)\n\n",
  "    return isinstance(x, int) and isinstance(y, int) and isinstance(z, int) and\
    \ x + y + z == sum(map(int, (x, y, z)))\n</cell>\n<cell>\nany_int(5, 2, 7)\n</cell>\n\
    <cell>\nany_int(3, 2, 2)\n</cell>\n<cell>\nany_int(3, -2, 1)\n</cell>\n<cell>\n\
    any_int(3.6, -2.2, 2)\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nIf the string has less\
    \ than 3 words, return 0.\nIf the string has more than 3 words, return 3.\nIf\
    \ the string has 3 words, return 3.\nIf the string has 2 words, return 2.\nIf\
    \ the string has 1 word, return 1.\nIf the string has 0 words, return 0.\nIf the\
    \ string has more than 3 words, return 3.\nIf the string has more than 2 words,\
    \ return 2.\nIf the string has more than 1 word, return 1.\nIf the string has\
    \ more than 0 words, return 0.\nIf the string has less than 3 words, return 0.\n\
    If the string has less than 2 words, return 0.\nIf the string has less than 1\
    \ word, return 0.\nIf the string has less than 0 words, return 0.\nIf the string\
    \ has more than 3 words, return 3.\nIf the string has more than 2 words, return\
    \ 2.\nIf the string has more than 1 word, return 1.\nIf the string has more than\
    \ 0 words, return 0.\nIf the string has less than 3 words, return 0.\nIf the string\
    \ has less than 2 words, return 0.\nIf the string has less than 1 word, return\
    \ 0.\nIf the string has less than 0 words, return 0.\nIf the string has more than\
    \ 3 words, return 3.\nIf the string has more than 2 words, return 2.\nIf the string\
    \ has more than 1 word, return 1.\nIf the string has more than 0 words, return\
    \ 0.\nIf the string has less than 3 words, return 0.\nIf the string has less than\
    \ 2 words, return 0.\nIf the string has less than 1 word, return 0.\nIf the string\
    \ has less than 0 words, return 0.\nIf the string has more than 3 words, return\
    \ 3.\nIf the string has more than 2 words, return 2.\nIf the string has more than\
    \ 1 word, return 1.\nIf the string has more than 0 words, return 0.\nIf the string\
    \ has less than 3 words, return 0.\nIf the string has less than 2 words, return\
    \ 0.\nIf the string has less than 1 word, return 0.\nIf the string has less than\
    \ 0 words, return 0.\nIf the string has more than 3 words, return 3.\nIf the string\
    \ has more than 2 words, return 2.\nIf the string has more than 1 word, return\
    \ 1.\nIf the string has more than 0 words, return 0.\nIf the string has less than\
    \ 3 words, return 0.\nIf the string has less than 2 words, return 0.\nIf the string\
    \ has less than 1 word, return 0.\nIf the string has less than 0 words, return\
    \ 0.\nIf the ", "    return isinstance(x, int) and isinstance(y, int) and isinstance(z,\
    \ int)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
