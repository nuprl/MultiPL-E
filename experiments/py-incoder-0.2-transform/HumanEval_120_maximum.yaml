name: HumanEval_120_maximum
language: py
prompt: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
  \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
  \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
  \ 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example 2:\n\n \
  \   >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>> maximum([-3,\
  \ 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length of the array\
  \ will be in the range of [1, 1000].\n        2. The elements in the array will\
  \ be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
  \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
  \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
  \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2,\
  \ 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3,\
  \ 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1,\
  \ 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4, 4]\n    assert\
  \ candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243,\
  \ -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\ntest_check()\n"
completions: ["    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n", " \
    \   # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
  "    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n\
    <text>\nmaximum() \uD568\uC218\uB294 O(n) \uBC88 \uC774\uC0C1 \uC774\uC6A9\uB418\
    \uC5C8\uB2E4. \uB530\uB77C\uC11C O(n) \uBC88 \uC774\uC0C1 \uC774\uC6A9\uB418\uC5C8\
    \uB2E4.\n\n\n</text>\n<text>\nmaximum() \uD568\uC218\uB97C \uC0AC\uC6A9\uD558\uC5EC\
    \ O(n) \uBC88 \uC774\uC0C1 \uC774\uC6A9\uB418\uC5C8\uB2E4.\n\n\n</text>\n<cell>",
  "    \n    # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    pass\n", "    pass\n", "    pass\n", "    \n    # write your code here\n  \
    \  \n    return sorted(arr)[-k:]\n", "    \n    # Your code here\n    \n    return\
    \ sorted(arr)[-k:]\n</cell>\n<cell>", "    pass\n", "    # write your code here\n\
    \    maximum_list = []\n    maximum = arr[0]\n    for num in arr:\n        if\
    \ num > maximum:\n            maximum = num\n            maximum_list.append(maximum)\n\
    \        else:\n            maximum_list.append(num)\n    return maximum_list\n",
  "    \n    maximum = []\n    \n    maximum.append(arr[0])\n    \n    for i in range(1,\
    \ len(arr)):\n        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n\
    \    \n    return maximum\n", "    pass\n", "    # write your code here\n    maximum\
    \ = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n \
    \           maximum = arr[i]\n    return maximum\n", "    # write your code here\n\
    \    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1, len(arr)):\n\
    \        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index\
    \ = i\n    maximum_index = maximum_index + 1\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    maximum_index = maximum_index\
    \ - 1\n    maximum_index = maximum_index + k\n    ", "    pass\n", "    \n   \
    \ # write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n    # Your\
    \ code here\n    \n    return sorted(arr)[-k:]\n", "    pass\n", "    # Your code\
    \ here\n    maximum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i]\
    \ > maximum:\n            maximum = arr[i]\n    return maximum\n", "    \n   \
    \ # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
  "    \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    # write your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for\
    \ i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum\
    \ = arr[i]\n            maximum_index = i\n    maximum_index = maximum_index +\
    \ 1\n    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n\
    \    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index\
    \ = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n\
    \    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n\
    \    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index\
    \ = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n\
    \    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n\
    \    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index\
    \ = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n\
    \    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n\
    \    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index\
    \ = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n\
    \    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n\
    \    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index\
    \ = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n\
    \    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n\
    \    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index\
    \ = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n\
    \    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n\
    \    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index\
    \ = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n\
    \    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n\
    \    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index\
    \ = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n\
    \    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum_index]\n\
    \    maximum_index = maximum_index + 1\n    if maximum_index > k:\n        maximum_index\
    \ = k\n    maximum = arr[maximum_index]\n    maximum_index = maximum_index + 1\n\
    \    if maximum_index > k:\n        maximum_index = k\n    maximum = arr[maximum",
  "    pass\n", "    \n    # Your code here\n    \n    return sorted(arr, key=lambda\
    \ x: -x)[:k]\n</cell>\n<cell>", "    \n    # write your code here\n    \n    return\
    \ sorted(arr)[-k:]\n", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n\
    </cell>\n<cell>", "    # Your code here\n    maximums = []\n    maximums.append(arr[0])\n\
    \    for i in range(1, len(arr)):\n        if arr[i] > maximums[-1]:\n       \
    \     maximums.append(arr[i])\n    return maximums\n", "    # Your code here\n\
    \    \n    return sorted(arr)[-k:]\n", "    pass\n", "    \n    # Your code here\n\
    \    \n    return sorted(arr)[-k:]\n", "    # write your code here\n    \n   \
    \ return sorted(arr)[-k:]\n", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # write your code here\n    \n    maximum = []\n    \n    if len(arr)\
    \ <= k:\n        maximum = arr\n    else:\n        maximum = arr[:k]\n       \
    \ \n    return maximum\n", "    # write your code here\n    \n    maximum = arr[0]\n\
    \    maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] >\
    \ maximum:\n            maximum = arr[i]\n            maximum_index = i\n    \n\
    \    if maximum_index == len(arr) - 1:\n        return arr\n    else:\n      \
    \  return arr[:maximum_index + 1] + arr[maximum_index + 1:]\n", "    \n    # write\
    \ your code here\n    \n    return sorted(arr)[-k:]\n", "    \n    # write your\
    \ code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<text>\nQ12. Given an\
    \ array, arr of integers, return a new array with the largest k elements \n  \
    \  removed.\n\n    Example 1:\n\n    >>> arr = [1, 2, 3, 4, 5]\n    >>> k = 2\n\
    \    >>> arr.remove(max(arr))\n    >>> arr\n    [1, 3]\n\n    Example 2:\n\n \
    \   >>> arr = [1, 2, 3, 4, 5]\n    >>> k = 3\n    >>> arr.remove(max(arr))\n \
    \   >>> arr\n    [1, 2, 4]\n\n    Example 3:\n\n    >>> arr = [1, 2, 3, 4, 5]\n\
    \    >>> k = 3\n    >>> arr.remove(max(arr))\n    >>> arr\n    [1, 2, 4]\n\n \
    \   Note:\n        1. The length of the array will be in the range of [1, 1000].\n\
    \        2. The elements in the array will be in the range of [-1000, 1000].\n\
    \        3. 0 <= k <= len(arr)\n    \"\"\"\n    \n    # write your code here\n\
    \    \n    return sorted(arr)[-k:]\n</cell>\n<text>\nQ13. Given a binary tree,\
    \ return the level order traversal of its nodes' values. (ie, from left to right,\
    \ level by level).\n\n    Example 1:\n\n    >>> binary_tree = [3,9,20,null,null,15,7]\n\
    \    >>> level_order(binary_tree)\n    [[9,15,7],[3,20],[12]]\n\n    Example 2:\n\
    \n    >>> binary_tree = [3,9,20,null,null,15,7]\n    >>> level_order(binary_tree)\n\
    \    [[9,15,7],[3,20],[12]]\n\n    Example 3:\n\n    >>> binary_tree = [3,9,20,null,null,15,7]\n\
    \    >>> level_order(binary_tree)\n    [[9,15,7],[3,20],[12]]\n\n    Note:\n \
    \       1. The height of the tree is in the range of [1, 10].\n        2. The\
    \ number of nodes in the tree is in the range of [0, 2000].\n        3. The values\
    \ of the nodes will be in the range of [-1000, 1000].\n    \"\"\"\n    \n    #\
    \ write your code here\n    \n    return sorted([node for node in binary_tree\
    \ if node is not None])\n</cell>\n<text>\nQ14. Given a binary tree, return the\
    \ sum of values of all nodes.\n\n    Example 1:\n\n    >>> binary_tree = [3,9,20,null,null,15,7]\n\
    \    >>> sum_of_values(binary_tree)\n    42\n\n    Example 2:\n\n    >>> binary_tree\
    \ = [3,9,20,null,null,15,7]\n    >>> sum_of_values(binary_tree)\n    42\n\n  \
    \  Example 3:\n\n    >>> binary_tree = [3,9,20,null,null,15,7]\n    >>> sum_of_values(binary_tree)\n\
    \    42\n\n    Note:\n        1. The height of the tree is in the range of [1,\
    \ 10].\n        2. The number of nodes in the ", "    pass\n", "    pass\n", " \
    \   pass\n", "    pass\n", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n\
    </cell>\n<cell>", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n", "    # write\
    \ your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1,\
    \ len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n   \
    \         maximum_index = i\n    \n    maximum_list = arr[0:maximum_index]\n \
    \   maximum_list.sort()\n    return maximum_list\n", "    \n    # write your code\
    \ here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n", "    pass\n", " \
    \   # write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n    #\
    \ write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>", " \
    \   pass\n", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n\
    <text>\n\u6700\u5927\u503C\n\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\uFF0C\u6211\u4EEC\
    \u4F7F\u7528\u4E86\u4E00\u4E2A\u5217\u8868\u6765\u5B58\u50A8\u7ED3\u679C\uFF0C\
    \u8FD9\u6837\u5C31\u53EF\u4EE5\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\u8FD4\u56DE\
    \u4E00\u4E2A\u6700\u5927\u503C\u7684\u5217\u8868\u3002\n\n\u5728\u8FD9\u4E2A\u51FD\
    \u6570\u4E2D\uFF0C\u6211\u4EEC\u4F7F\u7528\u4E86\u4E00\u4E2A\u5217\u8868\u6765\
    \u5B58\u50A8\u7ED3\u679C\uFF0C\u8FD9\u6837\u5C31\u53EF\u4EE5\u5728\u8FD9\u4E2A\
    \u51FD\u6570\u4E2D\u8FD4\u56DE\u4E00\u4E2A\u6700\u5927\u503C\u7684\u5217\u8868\
    \u3002\n\n\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\uFF0C\u6211\u4EEC\u4F7F\u7528\u4E86\
    \u4E00\u4E2A\u5217\u8868\u6765\u5B58\u50A8\u7ED3\u679C\uFF0C\u8FD9\u6837\u5C31\
    \u53EF\u4EE5\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\u8FD4\u56DE\u4E00\u4E2A\u6700\
    \u5927\u503C\u7684\u5217\u8868\u3002\n\n\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\uFF0C\
    \u6211\u4EEC\u4F7F\u7528\u4E86\u4E00\u4E2A\u5217\u8868\u6765\u5B58\u50A8\u7ED3\
    \u679C\uFF0C\u8FD9\u6837\u5C31\u53EF\u4EE5\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\
    \u8FD4\u56DE\u4E00\u4E2A\u6700\u5927\u503C\u7684\u5217\u8868\u3002\n\n\u5728\u8FD9\
    \u4E2A\u51FD\u6570\u4E2D\uFF0C\u6211\u4EEC\u4F7F\u7528\u4E86\u4E00\u4E2A\u5217\
    \u8868\u6765\u5B58\u50A8\u7ED3\u679C\uFF0C\u8FD9\u6837\u5C31\u53EF\u4EE5\u5728\
    \u8FD9\u4E2A\u51FD\u6570\u4E2D\u8FD4\u56DE\u4E00\u4E2A\u6700\u5927\u503C\u7684\
    \u5217\u8868\u3002\n\n\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\uFF0C\u6211\u4EEC\u4F7F\
    \u7528\u4E86\u4E00\u4E2A\u5217\u8868\u6765\u5B58\u50A8\u7ED3\u679C\uFF0C\u8FD9\
    \u6837\u5C31\u53EF\u4EE5\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\u8FD4\u56DE\u4E00\
    \u4E2A\u6700\u5927\u503C\u7684\u5217\u8868\u3002\n\n\u5728\u8FD9\u4E2A\u51FD\u6570\
    \u4E2D\uFF0C\u6211\u4EEC\u4F7F\u7528\u4E86\u4E00\u4E2A\u5217\u8868\u6765\u5B58\
    \u50A8\u7ED3\u679C\uFF0C\u8FD9\u6837\u5C31\u53EF\u4EE5\u5728\u8FD9\u4E2A\u51FD\
    \u6570\u4E2D\u8FD4\u56DE\u4E00\u4E2A\u6700\u5927\u503C\u7684\u5217\u8868\u3002\
    \n\n\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\uFF0C\u6211\u4EEC\u4F7F\u7528\u4E86\u4E00\
    \u4E2A\u5217\u8868\u6765\u5B58\u50A8\u7ED3\u679C\uFF0C\u8FD9\u6837\u5C31\u53EF\
    \u4EE5\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\u8FD4\u56DE\u4E00\u4E2A\u6700\u5927\
    \u503C\u7684\u5217\u8868\u3002\n\n\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\uFF0C\u6211\
    \u4EEC\u4F7F\u7528\u4E86\u4E00\u4E2A\u5217\u8868\u6765\u5B58\u50A8\u7ED3\u679C\
    \uFF0C\u8FD9\u6837\u5C31\u53EF\u4EE5\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\u8FD4\
    \u56DE\u4E00\u4E2A\u6700\u5927\u503C\u7684\u5217\u8868\u3002\n\n\u5728\u8FD9\u4E2A\
    \u51FD\u6570\u4E2D\uFF0C\u6211\u4EEC\u4F7F\u7528\u4E86\u4E00\u4E2A\u5217\u8868\
    \u6765\u5B58\u50A8\u7ED3\u679C\uFF0C\u8FD9\u6837\u5C31\u53EF\u4EE5\u5728\u8FD9\
    \u4E2A\u51FD\u6570\u4E2D\u8FD4\u56DE\u4E00\u4E2A\u6700\u5927\u503C\u7684\u5217\
    \u8868\u3002\n\n\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\uFF0C\u6211\u4EEC\u4F7F\u7528\
    \u4E86\u4E00\u4E2A\u5217\u8868\u6765\u5B58\u50A8\u7ED3\u679C\uFF0C\u8FD9\u6837\
    \u5C31\u53EF\u4EE5\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\u8FD4\u56DE\u4E00\u4E2A\
    \u6700\u5927\u503C\u7684\u5217\u8868\u3002\n\n\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\
    \uFF0C\u6211\u4EEC\u4F7F\u7528\u4E86\u4E00\u4E2A\u5217\u8868\u6765\u5B58\u50A8\
    \u7ED3\u679C\uFF0C\u8FD9\u6837\u5C31\u53EF\u4EE5\u5728\u8FD9\u4E2A\u51FD\u6570\
    \u4E2D\u8FD4\u56DE\u4E00\u4E2A\u6700\u5927\u503C\u7684\u5217\u8868\u3002\n\n\u5728\
    \u8FD9\u4E2A\u51FD\u6570\u4E2D\uFF0C\u6211\u4EEC\u4F7F\u7528\u4E86\u4E00\u4E2A\
    \u5217\u8868\u6765\u5B58\u50A8\u7ED3\u679C\uFF0C\u8FD9\u6837\u5C31\u53EF\u4EE5\
    \u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D\u8FD4\u56DE\u4E00\u4E2A\u6700\u5927\u503C\
    \u7684\u5217\u8868\u3002\n\n\u5728\u8FD9\u4E2A\u51FD\u6570\u4E2D", "    # write\
    \ your code here\n    maximum = arr[0]\n    for i in range(1, len(arr)):\n   \
    \     if arr[i] > maximum:\n            maximum = arr[i]\n    maximum = maximum\
    \ + k\n    maximum = maximum - k\n    return maximum\n", "    \n    # write your\
    \ code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>", "    # Your\
    \ code here\n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1,\
    \ len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n   \
    \         maximum_index = i\n    \n    if maximum_index == len(arr) - 1:\n   \
    \     return arr\n    else:\n        return arr[:maximum_index + 1] + arr[maximum_index\
    \ + 1:]\n", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n", "    # write\
    \ your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n", "   \
    \ pass\n", "    \n    # write your code here\n    \n    return sorted(arr, key=lambda\
    \ x: -x)[:k]\n", "    \n    # write your code here\n    \n    return sorted(arr,\
    \ key=lambda x: -x)[:k]\n</cell>\n<cell>", "    # Your code here\n    maximum_list\
    \ = []\n    maximum_list.append(arr[0])\n    for i in range(1, len(arr)):\n  \
    \      if arr[i] > maximum_list[-1]:\n            maximum_list.append(arr[i])\n\
    \    return maximum_list\n", "    pass\n", "    pass\n", "    pass\n", "    \n\
    \    # Your code here\n    \n    return sorted(arr)[-k:]\n", "    pass\n", " \
    \   pass\n", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n", "    \n    #\
    \ Your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>", "    \n\
    \    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    # write\
    \ your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n", "   \
    \ \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
  "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n", "    pass\n",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n\
    \    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n   \
    \ # Your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>", "   \
    \ pass\n", "    \n    # write your code here\n    \n    return sorted(arr, key=lambda\
    \ x: -x)[:k]\n", "    \n    # write your code here\n    \n    return sorted(arr,\
    \ key=lambda x: -x)[:k]\n", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
  "    pass\n", "    pass\n", "    \n    # write your code here\n    \n    return\
    \ sorted(arr)[-k:]\n</cell>\n<cell>", "    \n    # write your code here\n    \n\
    \    return sorted(arr)[-k:]\n", "    pass\n", "    \n    # write your code here\n\
    \    \n    return sorted(arr)[-k:]\n</cell>\n<cell>", "    pass\n", "    # write\
    \ your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>", "    #\
    \ write your code here\n    \n    maximum_list = []\n    \n    if len(arr) < k:\n\
    \        return arr\n    \n    maximum_list.append(arr[0])\n    \n    for i in\
    \ range(1, len(arr)):\n        if arr[i] > maximum_list[-1]:\n            maximum_list.append(arr[i])\n\
    \    \n    return maximum_list\n", "    \n    # Your code here\n    \n    return\
    \ sorted(arr)[-k:]\n", "    # Your code here\n    maximum_list = []\n    maximum\
    \ = arr[0]\n    for num in arr:\n        if num > maximum:\n            maximum\
    \ = num\n            maximum_list.append(maximum)\n        elif num == maximum:\n\
    \            maximum_list.append(num)\n    return maximum_list\n", "    pass\n",
  "    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    # write\
    \ your code here\n    \n    return sorted(arr)[-k:]\n", "    \n    # write your\
    \ code here\n    \n    return sorted(arr)[-k:]\n", "    \n    # write your code\
    \ here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>", "    \n    # Your\
    \ code here\n    \n    return sorted(arr)[-k:]\n", "    pass\n", "    \n    #\
    \ write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>", " \
    \   \n    # write your code here\n    \n    maximum = []\n    \n    maximum.append(arr[0])\n\
    \    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum[-1]:\n  \
    \          maximum.append(arr[i])\n    \n    return maximum\n</cell>\n<cell>",
  "    # write your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for\
    \ i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum\
    \ = arr[i]\n            maximum_index = i\n    \n    if maximum_index == len(arr)\
    \ - 1:\n        return arr\n    else:\n        return arr[:maximum_index + 1]\
    \ + arr[maximum_index + 1:]\n", "    pass\n", "    \n    # write your code here\n\
    \    \n    maximum_list = []\n    \n    for num in arr:\n        if num > k:\n\
    \            maximum_list.append(num)\n    \n    return maximum_list\n</cell>\n\
    <cell>", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n\
    </cell>\n<cell>", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n\
    </cell>\n<cell>", "    \n    # write your code here\n    \n    maximum = arr[0]\n\
    \    maximum_index = 0\n    \n    for i in range(1, len(arr)):\n        if arr[i]\
    \ > maximum:\n            maximum = arr[i]\n            maximum_index = i\n  \
    \  \n    if maximum_index == len(arr) - 1:\n        return arr\n    else:\n  \
    \      return arr[:maximum_index + 1]\n", "    pass\n", "    pass\n", "    pass\n",
  "    # write your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for\
    \ i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum\
    \ = arr[i]\n            maximum_index = i\n    maximum_index = maximum_index +\
    \ 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum = maximum + arr[maximum_index]\n    maximum_index = maximum_index\
    \ + 1\n    maximum", "    \n    arr = sorted(arr)\n    \n    if k > len(arr):\n\
    \        return arr\n    \n    if k == len(arr):\n        return arr\n    \n \
    \   maximum = arr[:k]\n    \n    for i in range(k, len(arr)):\n        if arr[i]\
    \ > maximum[-1]:\n            maximum.append(arr[i])\n    \n    return maximum\n",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    pass\n",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n\
    <cell>", "    pass\n", "    # write your code here\n    maximum = arr[0]\n   \
    \ for i in range(1, len(arr)):\n        if arr[i] > maximum:\n            maximum\
    \ = arr[i]\n    \n    maximum = maximum + k\n    \n    return maximum\n", "  \
    \  \n    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    #\
    \ write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n    # write\
    \ your code here\n    \n    maximum_list = []\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum_list.append(max(arr))\n    \n    maximum_list.append(max(arr))\n\
    \    \n    maximum", "    pass\n", "    \n    # write your code here\n    \n \
    \   return sorted(arr, key=lambda x: -x)[:k]\n", "    # write your code here\n\
    \    \n    return sorted(arr)[-k:]\n", "    # write your code here\n    maximum_list\
    \ = [0] * k\n    maximum_list[0] = arr[0]\n    for i in range(1, len(arr)):\n\
    \        if arr[i] > maximum_list[0]:\n            maximum_list[0] = arr[i]\n\
    \        elif arr[i] > maximum_list[-1]:\n            maximum_list[-1] = arr[i]\n\
    \    return maximum_list\n", "    \n    # write your code here\n    \n    return\
    \ sorted(arr, key=lambda x: -x)[:k]\n", "    # Your code here\n    maximum = arr[0]\n\
    \    maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] >\
    \ maximum:\n            maximum = arr[i]\n            maximum_index = i\n    \n\
    \    if maximum_index == len(arr) - 1:\n        return arr\n    else:\n      \
    \  return arr[:maximum_index + 1] + arr[maximum_index + 1:]\n", "    \n    # write\
    \ your code here\n    \n    return sorted(arr)[-k:]\n", "    pass\n", "    \n\
    \    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n   \
    \ # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n", " \
    \   pass\n", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
  "    pass\n", "    \n    # write your code here\n    \n    return sorted(arr, key=lambda\
    \ x: -x)[:k]\n</cell>\n<cell>", "    \n    # write your code here\n    \n    return\
    \ sorted(arr, key=lambda x: -x)[:k]\n", "    \n    # Your code here\n    \n  \
    \  return sorted(arr)[-k:]\n", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    #\
    \ Your code here\n    maximum = []\n    maximum.append(arr[0])\n    for i in range(1,\
    \ len(arr)):\n        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n\
    \    return maximum\n", "    # write your code here\n    maximum = arr[0]\n  \
    \  maximum_index = 0\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n\
    \            maximum = arr[i]\n            maximum_index = i\n    if maximum_index\
    \ == len(arr) - 1:\n        return arr\n    else:\n        return arr[maximum_index\
    \ + 1 : len(arr)]\n", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
  "    # write your code here\n    maximum = []\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])\n    maximum.append(arr[0])\n    maximum.append(arr[0])\n\
    \    maximum.append(arr[0])", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # write your code here\n    \n    maximum = []\n    \n    if len(arr)\
    \ == 0:\n        return maximum\n    \n    if len(arr) == 1:\n        if arr[0]\
    \ > k:\n            maximum.append(arr[0])\n        else:\n            maximum.append(k)\n\
    \        return maximum\n    \n    maximum.append(arr[0])\n    \n    for i in\
    \ range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            maximum.append(arr[i])\n\
    \        else:\n            maximum.append(arr[i-1])\n    \n    return maximum\n\
    </cell>\n<cell>", "    # write your code here\n    \n    return sorted(arr, key=lambda\
    \ x: -x)[:k]\n", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
  "    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    pass\n",
  "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n\
    <text>\nmaximum() \uD568\uC218\uB294 \uC55E\uC11C \uC0AC\uC6A9\uD55C \uD568\uC218\
    \uB97C \uC0AC\uC6A9\uD558\uC5EC k \uAC1C\uC758 \uC6D0\uC18C\uB97C \uBC18\uD658\
    \uD55C\uB2E4. \uB9CC\uC57D k \uAC1C\uC758 \uC6D0\uC18C\uAC00 \uC544\uB2C8\uB77C\
    \uBA74 None\uC744 \uBC18\uD658\uD55C\uB2E4.\n\n\uB9CC\uC57D k \uAC1C\uC758 \uC6D0\
    \uC18C\uAC00 \uC544\uB2C8\uB77C\uBA74 None\uC744 \uBC18\uD658\uD55C\uB2E4\uBA74\
    , \uBC18\uD658\uB41C \uAC12\uC744 \uB9AC\uD134\uD55C\uB2E4.\n\n\n</text>\n<cell>",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n\
    \    # Your code here\n    \n    return sorted(arr)[-k:]\n", "    pass\n", " \
    \   \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n\
    </cell>\n<cell>", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n\
    </cell>\n<cell>", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    #\
    \ write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n\
    \    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    pass\n",
  "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n", "    # write\
    \ your code here\n    \n    return sorted(arr)[-k:]\n", "    pass\n", "    # write\
    \ your code here\n    \n    return sorted(arr)[-k:]\n", "    \n    # write your\
    \ code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n</cell>\n<cell>",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    \n\
    \    # Your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
  "    # write your code here\n    maximum = []\n    maximum.append(arr[0])\n    for\
    \ i in range(1, len(arr)):\n        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n\
    \    return maximum\n", "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n",
  "    pass\n", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n\
    <cell>", "    pass\n", "    pass\n", "    \n    # Your code here\n    \n    return\
    \ sorted(arr)[-k:]\n</cell>\n<cell>", "    \n    # write your code here\n    \n\
    \    return sorted(arr)[-k:]\n", "    \n    # write your code here\n    \n   \
    \ maximum = arr[0]\n    maximum_index = 0\n    \n    for i in range(1, len(arr)):\n\
    \        if arr[i] > maximum:\n            maximum = arr[i]\n            maximum_index\
    \ = i\n    \n    return arr[maximum_index:]\n</cell>\n<cell>", "    \n    # write\
    \ your code here\n    \n    return sorted(arr)[-k:]\n", "    pass\n", "    \n\
    \    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    # Your\
    \ code here\n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1,\
    \ len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n   \
    \         maximum_index = i\n    if maximum_index == len(arr) - 1:\n        return\
    \ arr\n    else:\n        return arr[maximum_index + 1 : len(arr)]\n", "    \n\
    \    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
  "    \n    # Your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n<cell>",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    pass\n",
  "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n", "    #\
    \ Your code here\n    maximum = arr[0]\n    maximum_index = 0\n    for i in range(1,\
    \ len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n   \
    \         maximum_index = i\n    maximum_index = maximum_index - 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum\
    \ = maximum + arr[maximum_index]\n    maximum_index = maximum_index + 1\n    maximum",
  "    \n    maximum = []\n    \n    for i in range(len(arr)):\n        if k == len(maximum):\n\
    \            break\n        if arr[i] > maximum[k]:\n            maximum = maximum[:k]\
    \ + [arr[i]]\n            \n    return maximum\n", "    \n    # write your code\
    \ here\n    \n    maximum_list = []\n    \n    maximum_list.append(max(arr))\n\
    \    \n    for i in range(1, len(arr)):\n        if arr[i] > maximum_list[-1]:\n\
    \            maximum_list.append(arr[i])\n    \n    return maximum_list\n", " \
    \   \n    # write your code here\n    \n    return sorted(arr, key=lambda x: -x)[:k]\n",
  "    \n    maximum = arr[0]\n    maximum_index = 0\n    \n    for i in range(1,\
    \ len(arr)):\n        if arr[i] > maximum:\n            maximum = arr[i]\n   \
    \         maximum_index = i\n    \n    if maximum_index - k >= 0:\n        maximum\
    \ = arr[maximum_index - k]\n    \n    return maximum\n", "    # write your code\
    \ here\n    maximum = []\n    maximum.append(arr[0])\n    for i in range(1, len(arr)):\n\
    \        if arr[i] > maximum[-1]:\n            maximum.append(arr[i])\n    return\
    \ maximum\n", "    \n    # write your code here\n    \n    return sorted(arr)[-k:]\n\
    </cell>\n<text>\nmaximum() \uD568\uC218\uB294 O(n) \uBC88 \uC774\uC0C1 \uB3D9\uC77C\
    \uD55C \uD6A8\uC728\uC801\uC778 \uC5F0\uC0B0\uC790\uB97C \uC0AC\uC6A9\uD55C\uB2E4\
    .\n\n\n</text>\n<text>\nmaximum() \uD568\uC218\uB97C \uC0AC\uC6A9\uD558\uC5EC\
    \ \uAC01 \uC6D0\uC18C\uC758 \uCD5C\uB300\uAC12\uC744 \uB9AC\uD134\uD558\uB294\
    \ \uD568\uC218\uB97C \uB9CC\uB4E4\uC5B4\uBCF4\uC790.\n\n\n</text>\n<cell>", " \
    \   \n    # write your code here\n    \n    return sorted(arr)[-k:]\n</cell>\n\
    <cell>", "    pass\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
