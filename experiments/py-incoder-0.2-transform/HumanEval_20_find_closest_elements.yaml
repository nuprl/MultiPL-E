name: HumanEval_20_find_closest_elements
language: py
prompt: "from typing import List, Tuple\n\ndef find_closest_elements(numbers: List[float])\
  \ -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length\
  \ at least two) select and return two that are the closest to each\n    other and\
  \ return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0,\
  \ 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])\
  \ == (3.9, 4.0)\n    assert candidate([1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9)\n\
  \    assert candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2)\n    assert\
  \ candidate([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0)\n    assert candidate([1.1,\
  \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1)\n\ndef test_check():\n    check(find_closest_elements)\n\
  \ntest_check()\n"
completions: ["    smallest_number = min(numbers)\n    largest_number = max(numbers)\n\
    \    closest_numbers = [smallest_number, largest_number]\n    for number in numbers:\n\
    \        if number < smallest_number:\n            closest_numbers[0] = number\n\
    \        elif number > largest_number:\n            closest_numbers[1] = number\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    smallest_index = numbers.index(smallest_number)\n    largest_index\
    \ = numbers.index(largest_number)\n    return smallest_number, largest_number\n\
    \n", "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n\
    \    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n \
    \   largest_number = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n\
    \    closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    smallest_index = numbers.index(smallest_number)\n    largest_index\
    \ = numbers.index(largest_number)\n    return smallest_number, largest_number\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number]\n    closest_numbers.append(largest_number)\n\
    \    return tuple(closest_numbers)\n", "    smallest_number = min(numbers)\n \
    \   largest_number = max(numbers)\n    closest_numbers = [smallest_number]\n \
    \   closest_numbers.append(largest_number)\n    return tuple(closest_numbers)\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = numbers[0]\n    largest_number\
    \ = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n\
    \            smallest_number = number\n        elif number > largest_number:\n\
    \            largest_number = number\n    return smallest_number, largest_number\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number]\n    closest_numbers.append(largest_number)\n    return\
    \ tuple(closest_numbers)\n\n", "    smallest_number = numbers[0]\n    largest_number\
    \ = numbers[0]\n    for number in numbers:\n        if number < smallest_number:\n\
    \            smallest_number = number\n        if number > largest_number:\n \
    \           largest_number = number\n    return smallest_number, largest_number\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers\n", " \
    \   smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n", "    smallest_number = min(numbers)\n    largest_number\
    \ = max(numbers)\n    closest_numbers = [smallest_number, largest_number]\n  \
    \  closest_numbers = sorted(closest_numbers)\n    return closest_numbers[0], closest_numbers[1]\n",
  "    smallest_number = min(numbers)\n    largest_number = max(numbers)\n    closest_numbers\
    \ = [smallest_number, largest_number]\n    closest_numbers = sorted(closest_numbers)\n\
    \    return closest_numbers\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
