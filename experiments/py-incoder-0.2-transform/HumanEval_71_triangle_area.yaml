name: HumanEval_71_triangle_area
language: py
prompt: "def triangle_area(a: int, b: int, c: int) -> float:\n    \"\"\"\n    Given\
  \ the lengths of the three sides of a triangle. Return the area of\n    the triangle\
  \ rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise\
  \ return -1\n    Three sides make a valid triangle when the sum of any two sides\
  \ is greater \n    than the third side.\n    Example:\n    >>> triangle_area(3,\
  \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 4, 5) == 6.0\n    assert candidate(1,\
  \ 2, 10) == -1\n    assert candidate(4, 8, 5) == 8.18\n    assert candidate(2, 2,\
  \ 2) == 1.73\n    assert candidate(1, 2, 3) == -1\n    assert candidate(10, 5, 7)\
  \ == 16.25\n    assert candidate(2, 6, 3) == -1\n    assert candidate(1, 1, 1) ==\
  \ 0.43\n    assert candidate(2, 2, 10) == -1\n\ndef test_check():\n    check(triangle_area)\n\
  \ntest_check()\n"
completions: ["    if a + b > c and a + c > b and b + c > a:\n        area: float\
    \ = float(a * b * c) / float(a + b + c)\n        return round(area, 2)\n    else:\n\
    \        return -1\n\n", "    \n    if a + b > c:\n        return -1\n    elif\
    \ a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round( ((a + b + c) / 2) ** 0.5, 2)\n\n", "    if a + b > c and\
    \ a + c > b and b + c > a:\n        return round(math.sqrt(a * b * c), 2)\n  \
    \  else:\n        return -1\n\n", "    \n    sides = [a, b, c]\n    \n    sum_of_sides\
    \ = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n    ", "    if a + b > c:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n        return\
    \ -1\n    else:\n        return round(math.sqrt(a * b * c), 2)\n\n", "    if a\
    \ + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a * b *\
    \ c), 2)\n    else:\n        return -1\n\n", "    \n    sides = [a, b, c]\n  \
    \  \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n \
    \       return round(sum_of_sides, 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes in a list of integers and returns\
    \ the number of positive integers in the list.\nExample:\n>>> count_positive([1,\
    \ 2, 3, -4, 5])\n3\n>>> count_positive([-1, -2, -3, -4, -5])\n4\n>>> count_positive([0,\
    \ 0])\n0\n>>> count_positive([])\n0\n>>> count_positive([1])\n1\n>>> count_positive([0,\
    \ 0])\n0\n>>> count_positive([-1, -2, -3, -4, -5])\n4\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, 0])\n4\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n4\n>>>\
    \ count_positive([-1, -2, -3, -4, -5, 0])\n4\n>>> count_positive([-1, -2, -3,\
    \ -4, -5, 0])\n4\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n4\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, 0])\n4\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n4\n>>>\
    \ count_positive([-1, -2, -3, -4, -5, 0])\n4\n>>> count_positive([-1, -2, -3,\
    \ -4, -5, 0])\n4\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n4\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, 0])\n4\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n4\n>>>\
    \ count_positive([-1, -2, -3, -4, -5, 0])\n4\n>>> count_positive([-1, -2, -3,\
    \ -4, -5, 0])\n4\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n4\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, 0])\n4\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n4\n>>>\
    \ count_positive([-1, -2, -3, -4, -5, 0])\n4\n>>> count_positive([-1, -2, -3,\
    \ -4, -5, 0])\n4\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n4\n>>> count_positive([-1,\
    \ -2, -3, -4, -5, 0])\n4\n>>> count_positive([-1, -2, -3, -4, -5, 0])\n4\n>>>\
    \ count_positive([-1, -2, -3, -4, ", "    if a + b > c:\n        return -1\n \
    \   elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        return round(math.sqrt(a * b * c), 2)\n\n", "    \n    sides\
    \ = [a, b, c]\n    \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides\
    \ <= sides[2]:\n        return round(sum_of_sides, 2)\n    else:\n        return\
    \ -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 7\nWrite a function that returns the area of\
    \ a triangle given three sides. \nThe formula for the area of a triangle is: $A\
    \ = \\sqrt{s^2 + t^2}$, where $s$ and $t$ are the lengths of the sides.\n\nThe\
    \ triangle is valid if the sum of the lengths of the sides is greater than the\
    \ third side.\n\nIf the sum of the lengths is less than the third side, then the\
    \ triangle is not valid.\n\nIf the sum of the lengths is equal to the third side,\
    \ then the triangle is valid if and only if the triangle is equilateral. \nIf\
    \ it is equilateral, the area is $\\sqrt{s^2 + t^2}$.\n\nIf the sum of the lengths\
    \ is greater than the third side, then the triangle is not valid.\n\nIf the sum\
    \ of the lengths is less than the third side, then the triangle is valid if and\
    \ only if the triangle is isosceles.\nIf it is isosceles, the area is $\\sqrt{s^2\
    \ + t^2}$.\n\nIf the sum of the lengths is equal to the third side, then the triangle\
    \ is valid if and only if the triangle is scalene.\nIf it is scalene, the area\
    \ is $\\sqrt{s^2 + t^2}$.\n\nIf the sum of the lengths is greater than the third\
    \ side, then the triangle is not valid.\n\nIf the sum of the lengths is less than\
    \ the third side, then the triangle is valid if and only if the triangle is equilateral.\n\
    If it is equilateral, the area is $\\sqrt{s^2 + t^2}$.\n\nIf the sum of the lengths\
    \ is equal to the third side, then the triangle is valid if and only if the triangle\
    \ is isosceles.\nIf it is isosceles, the area is $\\sqrt{s^2 + t^2}$.\n\nIf the\
    \ sum of the lengths is greater than the third side, then the triangle is not\
    \ valid.\n\nIf the sum of the lengths is less than the third side, then the triangle\
    \ is valid if and only if the triangle is scalene.\nIf it is scalene, the area\
    \ is $\\sqrt{s^2 + t^2}$.\n\n\n</text>\n<cell>", "    \n    sides = [a, b, c]\n\
    \    \n    # Check if all sides are positive\n    if all(side >= 0 for side in\
    \ sides):\n        \n        # Check if all sides are equal\n        if sum(sides)\
    \ == sides[0]:\n            return round(sides[0] * sides[0] / 2, 2)\n       \
    \ \n        # Check if all sides are equal\n        if sum(sides) == sides[1]:\n\
    \            return round(sides[1] * sides[1] / 2, 2)\n        \n        # Check\
    \ if all sides are equal\n        if sum(sides) == sides[2]:\n            return\
    \ round(sides[2] * sides[2] / 2, 2)\n        \n        # Check if all sides are\
    \ equal\n        if sum(sides) == sides[0] + sides[1] + sides[2]:\n          \
    \  return round(sides[0] + sides[1] + sides[2], 2)\n        \n        # Check\
    \ if all sides are equal\n        if sum(sides) == sides[0] + sides[1] + sides[2]\
    \ + sides[3]:\n            return round(sides[0] + sides[1] + sides[2] + sides[3],\
    \ 2)\n        \n        # Check if all sides are equal\n        if sum(sides)\
    \ == sides[0] + sides[1] + sides[2] + sides[3] + sides[4]:\n            return\
    \ round(sides[0] + sides[1] + sides[2] + sides[3] + sides[4], 2)\n        \n \
    \       # Check if all sides are equal\n        if sum(sides) == sides[0] + sides[1]\
    \ + sides[2] + sides[3] + sides[4] + sides[5]:\n            return round(sides[0]\
    \ + sides[1] + sides[2] + sides[3] + sides[4] + sides[5], 2)\n        \n     \
    \   # Check if all sides are equal\n        if sum(sides) == sides[0] + sides[1]\
    \ + sides[2] + sides[3] + sides[4] + sides[5] + sides[6]:\n            return\
    \ round(sides[0] + sides[1] + sides[2] + sides[3] + sides[4] + sides[5] + sides[6],\
    \ 2)\n        \n        # Check if all sides are equal\n        if sum(sides)\
    \ == sides[0] + sides[1] + sides[2] + sides[3] + sides[4] + sides[5] + sides[6]\
    \ + sides[7]:\n            return round(sides[0] + sides[1] + sides[2] + sides[3]\
    \ + sides[4] + sides[5] + sides[6] + sides[7], 2)\n        \n        # Check if\
    \ all sides are equal\n        if sum(sides) == sides[0] + sides[1] + sides[2]\
    \ + sides[3] + sides[4] + sides[5] + sides[6] + sides[7] + sides[8]:\n       \
    \     return round(sides[0] + sides[1] + sides[2] + sides[3] + sides[4] + sides[5]\
    \ + sides[6] + sides[7] + ", "    if a + b > c:\n        return -1\n    elif a\
    \ + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round(abs(a * b * c) / 2, 2)\n\n", "    \n    if a + b > c:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n\
    \        return -1\n    else:\n        return round( ( (a + b + c) / 2) ** 0.5,\
    \ 2)\n", "    if a + b > c and a + c > b and b + c > a:\n        area = 0.5 *\
    \ (a + b + c)\n        return round(area, 2)\n    else:\n        return -1\n\n",
  "    if a + b > c and b + c > a and c + a > b:\n        area = 0.5 * (a + b + c)\
    \ - math.sqrt(\n            (a + b) * (a + c) - (b + c) * (b + a))\n        return\
    \ round(area, 2)\n    else:\n        return -1\n\n", "    \n    sides = [a, b,\
    \ c]\n    \n    if a + b > c and b + c > a and c + a > b:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\n\
    Write a function that takes a string and returns the number of words in that string.\n\
    The string may contain punctuation marks and spaces.\nThe function should ignore\
    \ punctuation and only count the actual words. \nThe function should ignore spaces.\n\
    Examples:\n>>> count_words(\"Hello world!\")\n5\n>>> count_words(\"Hello world!\
    \ How are you?\")\n4\n>>> count_words(\"Hello world! How are you? I'm fine. Thanks\
    \ for asking.\")\n5\n>>> count_words(\"Hello world! How are you? I'm fine. Thanks\
    \ for asking.\", ignore_spaces=True)\n5\n>>> count_words(\"Hello world! How are\
    \ you? I'm fine. Thanks for asking.\", ignore_spaces=False)\n5\n>>> count_words(\"\
    Hello world! How are you? I'm fine. Thanks for asking.\", ignore_spaces=True)\n\
    5\n>>> count_words(\"Hello world! How are you? I'm fine. Thanks for asking.\"\
    , ignore_spaces=False)\n5\n>>> count_words(\"Hello world! How are you? I'm fine.\
    \ Thanks for asking.\", ignore_spaces=True)\n5\n>>> count_words(\"Hello world!\
    \ How are you? I'm fine. Thanks for asking.\", ignore_spaces=False)\n5\n>>> count_words(\"\
    Hello world! How are you? I'm fine. Thanks for asking.\", ignore_spaces=True)\n\
    5\n>>> count_words(\"Hello world! How are you? I'm fine. Thanks for asking.\"\
    , ignore_spaces=False)\n5\n>>> count_words(\"Hello world! How are you? I'm fine.\
    \ Thanks for asking.\", ignore_spaces=True)\n5\n>>> count_words(\"Hello world!\
    \ How are you? I'm fine. Thanks for asking.\", ignore_spaces=False)\n5\n>>> count_words(\"\
    Hello world! How are you? I'm fine. Thanks for asking.\", ignore_spaces=True)\n\
    5\n>>> count_words(\"Hello world! How are you? I'm fine. Thanks for asking.\"\
    , ignore_spaces=False)\n5\n>>> count_words(\"Hello world! How are you? I'm fine.\
    \ Thanks for asking.\", ignore_spaces=True)\n5\n>>> count_words(\"Hello world!\
    \ How are you? I'm fine. Thanks for ", "    \n    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        return round((a * b * c) / 2, 2)\n", "    if a + b >\
    \ c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif b +\
    \ c > a:\n        return -1\n    else:\n        return round(float(a + b + c)\
    \ / 2, 2)\n\n", "    if a + b > c and b + c > a and c + a > b:\n        return\
    \ round(math.sqrt(a * b * c), 2)\n    else:\n        return -1\n\n", "    \n \
    \   area_of_triangle = abs(a * b * c)/2\n    if area_of_triangle > 0 and a !=\
    \ 0 and b != 0 and c != 0:\n        return round(area_of_triangle, 2)\n    else:\n\
    \        return -1\n\n", "    \n    if a + b > c:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    elif c + a > b:\n        return -1\n    else:\n\
    \        return round((a * b * c) / 2, 2)\n</cell>\n<cell>\ntriangle_area(3, 4,\
    \ 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that takes in a list of numbers and returns the sum of the numbers\
    \ in the list. \nIf the list is empty return 0\nIf the list has one number in\
    \ it return that number\nIf the list has two numbers in it return the first number\
    \ plus the second number\nIf the list has more than two numbers in it return the\
    \ first two numbers and then the sum of the rest of the numbers\nExample\n>>>\
    \ sum([1, 2, 3])\n6\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1,\
    \ 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1,\
    \ 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1,\
    \ 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1,\
    \ 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1,\
    \ 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1,\
    \ 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1,\
    \ 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1,\
    \ 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1,\
    \ 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1,\
    \ 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1,\
    \ 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1,\
    \ 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1,\
    \ 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1,\
    \ 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1, 2, 3, 5])\n7\n>>> sum([1,\
    \ 2, 3, ", "    \n    if a + b > c:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    else:\n      \
    \  return round( ((a + b + c) / 2) ** (1/2) , 2)\n\n", "    if a + b > c and b\
    \ + c > a and c + a > b:\n        return round(abs((a * b + b * c + c * a - a\
    \ * b - b * c - c * a) / (2 * a * b)), 2)\n    else:\n        return -1\n\n",
  "    \n    if a + b > c and a + c > b and b + c > a:\n        return round( ((a\
    \ * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n</cell>\n\
    <cell>", "    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(0.5\
    \ * (a + b + c), 2)\n\n", "    if a + b > c:\n        return -1\n    elif a +\
    \ c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round(abs((a * b * c) / 2), 2)\n\n", "    \n    sides = [a, b,\
    \ c]\n    \n    sum_sides = sum(sides)\n    \n    if sum_sides <= sides[2]:\n\
    \        return round(sum_sides, 2)\n    else:\n        return -1\n</cell>\n<cell>",
  "    \n    if a + b > c and a + c > b and b + c > a:\n        area = (a * b * c)/2\n\
    \        return round(area, 2)\n    else:\n        return -1\n</cell>\n<cell>",
  "    \n    if a + b > c and a + c > b and b + c > a:\n        return round( ((a\
    \ * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n</cell>\n\
    <cell>", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides\
    \ <= sides[2]:\n        return round(sum_of_sides, 2)\n    else:\n        return\
    \ -1\n\n", "    \n    sides = [a, b, c]\n    \n    sum_of_sides = sum(sides)\n\
    \    \n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n\
    \    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n\
    <cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7: Write a function\
    \ that takes a list as an argument and returns a list with all the odd numbers\
    \ in that list. \nExample: \n>>> odd_nums([1, 2, 3, 4, 5])\n[1, 3, 5]\n>>> odd_nums([1,\
    \ 2, 3, 4, 6, 7])\n[1, 3, 5]\n>>> odd_nums([1, 2, 3, 4, 6, 8, 9])\n[1, 3, 5]\n\
    >>> odd_nums([1, 2, 3, 4, 6, 8, 10, 11, 12, 13])\n[1, 3, 5]\n>>> odd_nums([1,\
    \ 2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15])\n[1, 3, 5]\n>>> odd_nums([1, 2, 3, 4,\
    \ 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n[1, 3, 5]\n>>> odd_nums([1,\
    \ 2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n[1, 3, 5]\n\
    >>> odd_nums([1, 2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,\
    \ 22])\n[1, 3, 5]\n>>> odd_nums([1, 2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, 20, 21, 22, 23])\n[1, 3, 5]\n>>> odd_nums([1, 2, 3, 4, 6, 8, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n[1, 3, 5]\n>>> odd_nums([1,\
    \ 2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n\
    [1, 3, 5]\n>>> odd_nums([1, 2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20, 21, 22, 23, 24, 25, 26])\n[1, 3, 5]\n>>> odd_nums([1, 2, 3, 4, 6, 8,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n[1,\
    \ 3, 5]\n>>> odd_nums([1, 2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21, 22, 23, 24, 25, 26, 27, 28])\n[1, 3, 5]\n>>> odd_nums([1, 2, 3, 4, 6,\
    \ 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29])\n[1, 3, 5]\n>>> odd_nums([1, 2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16,\
    \ 17, 18, 19, ", "    \n    # Write your code here\n    \n    if a + b > c:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round((a * b * c)/2, 2)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that accepts a string and returns the number\
    \ of vowels contained in the string.\nIf the string contains no vowels, return\
    \ 0.\nIf the string contains one vowel, return 1.\nIf the string contains two\
    \ or more, return 2.\nExamples:\n>>> vowel_count(\"hello\")\n2\n>>> vowel_count(\"\
    abracadabra\")\n4\n>>> vowel_count(\"aba\")\n0\n>>> vowel_count(\"abacaba\")\n\
    1\n>>> vowel_count(\"abacabacaba\")\n2\n>>> vowel_count(\"abacabacabacaba\")\n\
    3\n>>> vowel_count(\"abacabacabacabacaba\")\n4\n>>> vowel_count(\"abacabacabacabacabacaba\"\
    )\n5\n>>> vowel_count(\"abacabacabacabacabacabacaba\")\n6\n>>> vowel_count(\"\
    abacabacabacabacabacabacabacabacaba\")\n7\n>>> vowel_count(\"abacabacabacabacabacabacabacabacabacabacaba\"\
    )\n8\n>>> vowel_count(\"abacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabac",
  "    \n    area_of_triangle = abs(a * b * c) / 2\n    if area_of_triangle >= 1:\n\
    \        return round(area_of_triangle, 2)\n    else:\n        return -1\n    ",
  "    \n    if a + b > c and a + c > b and b + c > a:\n        return round( ((a\
    \ * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n</cell>\n\
    <cell>", "    if a + b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n\n", "    \n    sides = [a, b, c]\n\
    \    \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n\
    \        return round(sum_of_sides, 2)\n    else:\n        return -1\n    \n \
    \   ", "    \n    if a + b > c:\n        return -1\n    elif a + c > b:\n    \
    \    return -1\n    elif b + c > a:\n        return -1\n    else:\n        return\
    \ round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n\n", "    if a + b > c:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round(math.sqrt(a * b * c), 2)\n\
    \n", "    \n    if a + b > c and a + c > b and b + c > a:\n        return round(\
    \ ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n\
    </cell>\n<cell>", "    \n    if a + b > c and a + c > b and b + c > a:\n     \
    \   return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n   \
    \     return -1\n</cell>\n<cell>", "    \n    sides = [a, b, c]\n    \n    # Check\
    \ if all sides are positive\n    if all(side > 0 for side in sides):\n       \
    \ \n        # Check if all sides are equal\n        if sum(sides) == sides[0]:\n\
    \            return round(sides[0] * sides[1] / 2, 2)\n        \n        # Check\
    \ if all sides are equal\n        elif sum(sides) == sides[1]:\n            return\
    \ round(sides[0] * sides[2] / 2, 2)\n        \n        # Check if all sides are\
    \ equal\n        elif sum(sides) == sides[2]:\n            return round(sides[0]\
    \ * sides[1] / 2, 2)\n        \n        # Check if all sides are equal\n     \
    \   else:\n            return -1\n    \n    # Check if all sides are negative\n\
    \    elif all(side < 0 for side in sides):\n        \n        # Check if all sides\
    \ are equal\n        if sum(sides) == sides[0]:\n            return round(sides[0]\
    \ * sides[1] / 2, 2)\n        \n        # Check if all sides are equal\n     \
    \   elif sum(sides) == sides[1]:\n            return round(sides[0] * sides[2]\
    \ / 2, 2)\n        \n        # Check if all sides are equal\n        elif sum(sides)\
    \ == sides[2]:\n            return round(sides[0] * sides[1] / 2, 2)\n       \
    \ \n        # Check if all sides are equal\n        else:\n            return\
    \ -1\n    \n    # Check if all sides are zero\n    elif sum(sides) == 0:\n   \
    \     return -1\n    \n    # Check if all sides are equal\n    elif sum(sides)\
    \ == sides[0]:\n        return round(sides[0] * sides[1] / 2, 2)\n    \n    #\
    \ Check if all sides are equal\n    elif sum(sides) == sides[1]:\n        return\
    \ round(sides[0] * sides[2] / 2, 2)\n    \n    # Check if all sides are equal\n\
    \    elif sum(sides) == sides[2]:\n        return round(sides[0] * sides[1] /\
    \ 2, 2)\n    \n    # Check if all sides are equal\n    else:\n        return -1\n\
    </cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell", "    \n    if a + b > c and a + c > b and b + c > a:\n     \
    \   return round( ( (a + b + c) / 2) ** (1/2), 2)\n    else:\n        return -1\n\
    </cell>\n<cell>", "    sides = [a, b, c]\n    sum_sides = sum(sides)\n    if sum_sides\
    \ <= sides[2]:\n        return round(sum_sides, 2)\n    else:\n        return\
    \ -1\n\n", "    \n    if a + b > c:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    elif c + a > b:\n        return -1\n    else:\n      \
    \  return round( (a + b + c) / 2, 2)\n</cell>\n<cell>", "    \n    if a + b >\
    \ c:\n        return -1\n    elif b + c > a:\n        return -1\n    elif c +\
    \ a > b:\n        return -1\n    else:\n        return round( ( (a + b + c) /\
    \ 2 ), 2 )\n", "    if a + b > c:\n        return -1\n    elif b + c > a:\n  \
    \      return -1\n    elif c + a > b:\n        return -1\n    else:\n        return\
    \ round(math.sqrt(a * b * c), 2)\n\n", "    if a + b > c and a + c > b and b +\
    \ c > a:\n        return round(0.5 * (a + b + c), 2)\n    else:\n        return\
    \ -1\n\n", "    \n    if a + b > c:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    else:\n      \
    \  return round( ( (a + b + c) / 2) ** (1/2), 2)\n\n", "    \n    if a + b > c:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round( ( (a + b + c) / 2 ), 2 )\n\
    </cell>\n<cell>", "    \n    if a + b > c:\n        return -1\n    elif b + c\
    \ > a:\n        return -1\n    elif c + a > b:\n        return -1\n    else:\n\
    \        return round( ((a * b) + (b * c) + (c * a)) / (2.0), 2)\n\n", "    \n\
    \    sides = [a, b, c]\n    \n    # check validity of triangle\n    if sides[0]\
    \ + sides[1] > sides[2]:\n        return -1\n    \n    # calculate area of triangle\n\
    \    area_tri = sides[0] * sides[1] * sides[2] / 2\n    \n    # round area to\
    \ 2 decimal points\n    return round(area_tri, 2)\n\n", "    if a + b > c and\
    \ a + c > b and b + c > a:\n        return round( ((a * b) + (a * c) + (b * c))\
    \ / (2 * a), 2)\n    else:\n        return -1\n</cell>\n<cell>", "    if a + b\
    \ > c and b + c > a and c + a > b:\n        return round( ((a * b) + (b * c) +\
    \ (c * a)) / (2.0 * c), 2)\n    else:\n        return -1\n</cell>\n<cell>", " \
    \   \n    if a + b > c and a + c > b and b + c > a:\n        return round( ((a\
    \ * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 3\nWrite a function that accepts a string and returns the number\
    \ of vowels contained in the string.\n\nExample\n>>> vowel_count(\"Hello World\"\
    )\n2\n>>> vowel_count(\"Hello World!\")\n1\n>>> vowel_count(\"Hello World!!\"\
    )\n0\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n3\n>>> vowel_count(\"Hello World!!!\"\
    )\n3\n>>> vowel_count(\"Hello World!!!\")\n", "    \n    if a + b > c and a +\
    \ c > b and b + c > a:\n        return round( ((a * b) + (a * c) + (b * c)) /\
    \ (2 * a), 2)\n    else:\n        return -1\n", "    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        return round(math.sqrt(a * b * c), 2)\n\n", "    \n \
    \   if a + b > c and a + c > b and b + c > a:\n        return round( ((a * b)\
    \ + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n\n", "   \
    \ a, b, c = sorted([a, b, c])\n    if a + b > c:\n        return -1\n    elif\
    \ a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round(abs(a * b * c) / 2, 2)\n\n", "    \n    area_a = abs(a *\
    \ b - c * c)\n    area_b = abs(a * c - b * b)\n    area_c = abs(b * c - a * a)\n\
    \    \n    if area_a > area_b and area_a > area_c:\n        return round(area_a,\
    \ 2)\n    elif area_b > area_a:\n        return round(area_b, 2)\n    elif area_c\
    \ > area_b:\n        return round(area_c, 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes in a list of numbers and returns\
    \ the number of positive integers that are less than the sum of the positive integers\
    \ in the list.\nExample\n>>> count_positive([-4, -2, 1, 3, 5])\n2\n>>> count_positive([-4,\
    \ -2, 1, 3, -5, -6, -7, -8])\n0\n>>> count_positive([-4, -2, 1, 3, 5])\n2\n>>>\
    \ count_positive([-4, -2, 1, 3, -5, -6, -7, -8])\n0\n>>> count_positive([-4, -2,\
    \ 1, 3, 5])\n2\n>>> count_positive([-4, -2, 1, 3, -5, -6, -7, -8])\n0\n>>> count_positive([-4,\
    \ -2, 1, 3, 5])\n2\n>>> count_positive([-4, -2, 1, 3, -5, -6, -7, -8])\n0\n>>>\
    \ count_positive([-4, -2, 1, 3, 5])\n2\n>>> count_positive([-4, -2, 1, 3, -5,\
    \ -6, -7, -8])\n0\n>>> count_positive([-4, -2, 1, 3, 5])\n2\n>>> count_positive([-4,\
    \ -2, 1, 3, -5, -6, -7, -8])\n0\n>>> count_positive([-4, -2, 1, 3, 5])\n2\n>>>\
    \ count_positive([-4, -2, 1, 3, -5, -6, -7, -8])\n0\n>>> count_positive([-4, -2,\
    \ 1, 3, 5])\n2\n>>> count_positive([-4, -2, 1, 3, -5, -6, -7, -8])\n0\n>>> count_positive([-4,\
    \ -2, 1, 3, 5])\n2\n>>> count_positive([-4, -2, 1, 3, -5, -6, -7, -8])\n0\n>>>\
    \ count_positive([-4, -2, 1, 3, 5])\n2\n>>> count_positive([-4, -2, 1, 3, -5,\
    \ -6, -7, -8])\n0\n>>> count_positive([-4, -2, 1, 3, 5])\n2\n>>> count_positive([-4,\
    \ -2, 1, 3, -5, -6, ", "    sides = [a, b, c]\n    sum_sides = sum(sides)\n  \
    \  if sum_sides > sides[2]:\n        return -1\n    else:\n        return round(sum_sides\
    \ / 2, 2)\n\n", "    if a + b > c:\n        return -1\n    elif a + c > b:\n \
    \       return -1\n    elif b + c > a:\n        return -1\n    else:\n       \
    \ return round(0.5 * (a + b + c), 2)\n\n", "    \n    sides = [a, b, c]\n    \n\
    \    # check each side for validity\n    for side in sides:\n        if side <\
    \ 0 or side > 100:\n            return -1\n    \n    # check each side for validity\n\
    \    for side in sides:\n        if side < 0 or side > 100:\n            return\
    \ -1\n    \n    # check each side for validity\n    for side in sides:\n     \
    \   if side < 0 or side > 100:\n            return -1\n    \n    # check each\
    \ side for validity\n    for side in sides:\n        if side < 0 or side > 100:\n\
    \            return -1\n    \n    # check each side for validity\n    for side\
    \ in sides:\n        if side < 0 or side > 100:\n            return -1\n    \n\
    \    # check each side for validity\n    for side in sides:\n        if side <\
    \ 0 or side > 100:\n            return -1\n    \n    # check each side for validity\n\
    \    for side in sides:\n        if side < 0 or side > 100:\n            return\
    \ -1\n    \n    # check each side for validity\n    for side in sides:\n     \
    \   if side < 0 or side > 100:\n            return -1\n    \n    # check each\
    \ side for validity\n    for side in sides:\n        if side < 0 or side > 100:\n\
    \            return -1\n    \n    # check each side for validity\n    for side\
    \ in sides:\n        if side < 0 or side > 100:\n            return -1\n    \n\
    \    # check each side for validity\n    for side in sides:\n        if side <\
    \ 0 or side > 100:\n            return -1\n    \n    # check each side for validity\n\
    \    for side in sides:\n        if side < 0 or side > 100:\n            return\
    \ -1\n    \n    # check each side for validity\n    for side in sides:\n     \
    \   if side < 0 or side > 100:\n            return -1\n    \n    # check each\
    \ side for validity\n    for side in sides:\n        if side < 0 or side > 100:\n\
    \            return -1\n    \n    # check each side for validity\n    for side\
    \ in sides:\n        if side < 0 or side > 100:\n            return -1\n    \n\
    \    # check each side for validity\n    for side in sides:\n        if side <\
    \ 0 or side > 100:\n            return -1\n    \n    # check each side for validity\n\
    \    for side in sides:\n        if side < 0 or side > 100:\n            return\
    \ -1\n    \n    # check each side for validity\n    for side in sides:\n     \
    \   if side < 0 or side > 100:\n            return -1\n    \n    # check each\
    \ side for validity\n    for side in sides:\n        if ", "    \n    area_of_triangle\
    \ = abs(a * b * c) / 2.0\n    if area_of_triangle > 0.0:\n        return round(area_of_triangle,\
    \ 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n\
    </cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<cell>\ntriangle_area(100,\
    \ 100, 100)\n</cell>\n<text>\nProblem 4\nWrite a function that takes in a list\
    \ of numbers and returns the sum of the numbers in the list. \nIf the list is\
    \ empty return 0\nIf the list has one number in it return that number\nIf the\
    \ list has two numbers in it return the first number plus the sum of the second\
    \ number\nIf the list has three numbers in it return the first number plus the\
    \ sum of the second number plus the sum of the third number\nIf the list has more\
    \ than three numbers in it return the first number plus the sum of the second\
    \ number plus the sum of the third number plus the sum of the fourth number\n\
    Example\n>>> sum([1, 2, 3])\n6\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n\
    10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n\
    10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n\
    10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n\
    10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n\
    10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n\
    10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n\
    10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n\
    10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n\
    10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n\
    10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n\
    10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n\
    10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n10\n>>> sum([1, 2, 3, 5])\n\
    10\n>>> sum([1, 2, ", "    if a + b > c:\n        return -1\n    elif a + c >\
    \ b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n \
    \       return round(abs((a * b) - (c * c)), 2)\n\n", "    if a + b > c:\n   \
    \     return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n\
    \        return -1\n    else:\n        return round(0.5 * (a + b + c), 2)\n\n",
  "    \n    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(\
    \ ((a * b) + (a * c) + (b * c) ) / 2, 2)\n\n", "    \n    sides = [a, b, c]\n\
    \    \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n\
    \        return round(sum_of_sides, 2)\n    else:\n        return -1\n</cell>\n\
    <cell>", "    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(0.5\
    \ * (a + b + c), 2)\n\n", "    \n    area_of_triangle = abs(a * b * c) / 2\n \
    \   if area_of_triangle > c:\n        return area_of_triangle\n    else:\n   \
    \     return -1\n</cell>\n<cell>", "    \n    if a + b > c and a + c > b and b\
    \ + c > a:\n        return round( ( (a + b + c) / 2) ** (1/2) , 2)\n    else:\n\
    \        return -1\n</cell>\n<cell>", "    if a + b > c:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    elif c + a > b:\n        return -1\n\
    \    else:\n        return round(0.5 * (a + b + c), 2)\n\n", "    sides = [a,\
    \ b, c]\n    sum_sides = sum(sides)\n    if sum_sides <= sides[2]:\n        return\
    \ round(sum_sides, 2)\n    else:\n        return -1\n\n", "    a, b, c = sorted([a,\
    \ b, c])\n    if a + b > c:\n        return -1\n    if a + c > b:\n        return\
    \ -1\n    if b + c > a:\n        return -1\n    return round(0.5 * (a + b + c),\
    \ 2)\n\n", "    \n    if a + b > c:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    else:\n      \
    \  return round( ((a * b) + (b * c) + (c * a)) / (2.0 * c), 2)\n\n", "    if a\
    \ + b > c and b + c > a and c + a > b:\n        return round(float(a + b + c)\
    \ / 2, 2)\n    else:\n        return -1\n\n", "    sides = [a, b, c]\n    sum_of_sides\
    \ = sum(sides)\n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n\n", "    \n    if a + b > c and b + c > a\
    \ and c + a > b:\n        return round( ((a * b) + (b * c) + (c * a)) / (2.0 *\
    \ c), 2)\n    else:\n        return -1\n</cell>\n<cell>", "    if a + b > c:\n\
    \        return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round((a * b * c) / 2, 2)\n\n",
  "    \n    if a + b > c:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    elif c + a > b:\n        return -1\n    else:\n        return round(\
    \ ( (a + b + c) / 2 ), 2 )\n\n", "    \n    \n    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        area_of_triangle = abs((a * b) - (c * a))\n        return\
    \ round(area_of_triangle, 2)\n    \n    ", "    \n    if a + b > c and a + c >\
    \ b and b + c > a:\n        area = 0.5 * (a + b + c)\n        return round(area,\
    \ 2)\n    else:\n        return -1\n</cell>\n<cell>", "    if a + b > c:\n   \
    \     return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n\
    \        return -1\n    else:\n        return round((a * b * c) / 2, 2)\n\n",
  "    \n    if a + b > c:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    elif c + a > b:\n        return -1\n    else:\n        return round(\
    \ ( (a + b + c) / 2) ** (1/2), 2)\n", "    sides = [a, b, c]\n    sum_of_sides\
    \ = sum(sides)\n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n\n", "    a, b, c = sorted([a, b, c])\n  \
    \  if a + b > c:\n        return -1\n    if a + c > b:\n        return -1\n  \
    \  if b + c > a:\n        return -1\n    return round(0.5 * (a + b + c), 2)\n\n",
  "    if a + b > c and a + c > b and b + c > a:\n        return round(0.5 * (a +\
    \ b + c), 2)\n    else:\n        return -1\n\n", "    \n    if a + b > c:\n  \
    \      return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n\
    \        return -1\n    else:\n        return round( ( (a + b + c) / 2 ), 2 )\n\
    </cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2,\
    \ 10)\n</cell>\n<text>\nProblem 7\nWrite a function that takes in a list of numbers\
    \ and returns the number of positive integers less than the largest number in\
    \ the list.\n\n\n</text>\n<cell>", "    if a + b > c:\n        return -1\n   \
    \ elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        return round( ((a + b + c) / 2), 2)\n\n", "    if a + b >\
    \ c and a + c > b and b + c > a:\n        return round( ((a * b) + (a * c) + (b\
    \ * c)) / (2 * a), 2)\n    else:\n        return -1\n\n", "    \n    if a + b\
    \ > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif b\
    \ + c > a:\n        return -1\n    else:\n        return round( ((a + b + c) /\
    \ 2), 2)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function that accepts a string and\
    \ returns the number of vowels contained in the string.\nIf the string contains\
    \ no vowels, return 0.\nIf the string contains one or more vowels, return the\
    \ number of vowels.\nIf the string contains multiple vowels, return -1.\nExamples:\n\
    >>> vowel_count(\"hello\")\n0\n>>> vowel_count(\"hello\")\n0\n>>> vowel_count(\"\
    hey\")\n2\n>>> vowel_count(\"hey\")\n2\n>>> vowel_count(\"hey you\")\n-1\n>>>\
    \ vowel_count(\"hey you\")\n-1\n>>> vowel_count(\"hey you guys\")\n-1\n>>> vowel_count(\"\
    hey you guys\")\n-1\n>>> vowel_count(\"hey you guys\")\n-1\n>>> vowel_count(\"\
    hey you guys\")\n-1\n>>> vowel_count(\"hey you guys\")\n-1\n>>> vowel_count(\"\
    hey you guys\")\n-1\n>>> vowel_count(\"hey you guys\")\n-1\n>>> vowel_count(\"\
    hey you guys\")\n-1\n>>> vowel_count(\"hey you guys\")\n-1\n>>> vowel_count(\"\
    hey you guys\")\n-1\n>>> vowel_count(\"hey you guys\")\n-1\n>>> vowel_count(\"\
    hey you guys\")\n-1\n>>> vowel_count(\"hey you guys\")\n-1\n>>> vowel_count(\"\
    hey you guys\")\n-1\n>>> vowel_count(\"hey you guys\")\n-1\n>>> vowel_count(\"\
    hey you guys\")\n-1\n>>> vowel_count(\"hey you guys\")\n-1\n>>> vowel_count(\"\
    hey you guys\")\n-1\n>>> vowel_count(\"hey you guys\")\n-1\n>>> vowel_count(\"\
    hey you guys\")\n-1\n>>> vowel_count(\"hey you guys\")\n-1\n>>> vowel_count(\"\
    hey you guys\")\n-1\n>>> vowel_count(\"hey you guys\")\n-1\n>>> vowel_count(\"\
    hey you guys\")\n-1\n>>> vowel_count(\"hey you guys\")\n-1\n>>> ", "    \n   \
    \ if a + b > c and a + c > b and b + c > a:\n        return round( ( (a + b +\
    \ c) / 2) ** 0.5, 2)\n    else:\n        return -1\n</cell>\n<cell>", "    \n\
    \    sides = [a, b, c]\n    \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides\
    \ <= sides[2]:\n        return round(sum_of_sides, 2)\n    else:\n        return\
    \ -1\n</cell>\n<cell>", "    \n    if a + b > c:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    elif c + a > b:\n        return -1\n    else:\n\
    \        return round( ((a * b) + (b * c) + (c * a)) / (2 * a * b), 2)\n", " \
    \   \n    if a + b > c and b + c > a and c + a > b:\n        return round( ((a\
    \ * b) + (b * c) + (c * a)) / (2 * a * b), 2)\n    else:\n        return -1\n",
  "    if a + b > c and b + c > a and c + a > b:\n        return round(abs((a * b)\
    \ + (b * c) + (c * a)), 2)\n    else:\n        return -1\n\n", "    \n    if a\
    \ + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    else:\n        return round( ( (a + b + c)\
    \ / 2) ** (1/2), 2)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\n\
    triangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function that returns\
    \ the area of a triangle given three sides. \nThe formula for the area of a triangle\
    \ is: \n$A = \\sqrt{s (s - a) (s - b) (s - c)}$.\nThe formula for the area of\
    \ a triangle with sides $a, b, c$ is:\n$A = \\sqrt{s (s - a) (s - b) (s - c)}$.\n\
    The formula for the area of a triangle with sides $a, b, c$ is:\n$A = \\sqrt{s\
    \ (s - a) (s - b) (s - c)}$.\nThe formula for the area of a triangle with sides\
    \ $a, b, c$ is:\n$A = \\sqrt{s (s - a) (s - b) (s - c)}$.\nThe formula for the\
    \ area of a triangle with sides $a, b, c$ is:\n$A = \\sqrt{s (s - a) (s - b) (s\
    \ - c)}$.\nThe formula for the area of a triangle with sides $a, b, c$ is:\n$A\
    \ = \\sqrt{s (s - a) (s - b) (s - c)}$.\nThe formula for the area of a triangle\
    \ with sides $a, b, c$ is:\n$A = \\sqrt{s (s - a) (s - b) (s - c)}$.\nThe formula\
    \ for the area of a triangle with sides $a, b, c$ is:\n$A = \\sqrt{s (s - a) (s\
    \ - b) (s - c)}$.\nThe formula for the area of a triangle with sides $a, b, c$\
    \ is:\n$A = \\sqrt{s (s - a) (s - b) (s - c)}$.\nThe formula for the area of a\
    \ triangle with sides $a, b, c$ is:\n$A = \\sqrt{s (s - a) (s - b) (s - c)}$.\n\
    The formula for the area of a triangle with sides $a, b, c$ is:\n$A = \\sqrt{s\
    \ (s - a) (s - b) (s - c)}$.\nThe formula for the area of a triangle with sides\
    \ $a, b, c$ is:\n$A = \\sqrt{s (s - a) (s - b) (s - c)}$.\nThe formula for the\
    \ area of a triangle with sides $a, b, c$ is:\n$A = \\sqrt{s (s - a", "    if\
    \ a + b > c:\n        return -1\n    elif b + c > a:\n        return -1\n    elif\
    \ c + a > b:\n        return -1\n    else:\n        return round(math.sqrt(a *\
    \ b * c), 2)\n\n", "    \n    if a + b > c:\n        return -1\n    elif b + c\
    \ > a:\n        return -1\n    elif c + a > b:\n        return -1\n    else:\n\
    \        area = 0.5 * (a + b + c)\n        return round(area, 2)\n\n", "    \n\
    \    if a + b > c and a + c > b and b + c > a:\n        return round( ((a * b)\
    \ + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n", "    \n\
    \    if a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    else:\n        return round( ( (a\
    \ + b + c) / 2 ), 2 )\n", "    if a + b > c:\n        return -1\n    elif b +\
    \ c > a:\n        return -1\n    elif c + a > b:\n        return -1\n    else:\n\
    \        return round(0.5 * (a + b + c), 2)\n\n", "    \n    sides = [a, b, c]\n\
    \    \n    # check if all sides are positive\n    if all(side >= 0 for side in\
    \ sides):\n        \n        # check if all sides are equal\n        if all(side\
    \ == sides[0] for side in sides):\n            \n            # check if all sides\
    \ are equal\n            if all(side == sides[1] for side in sides):\n       \
    \         \n                # check if all sides are equal\n                if\
    \ all(side == sides[2] for side in sides):\n                    \n           \
    \         # check if all sides are equal\n                    if all(side == sides[0]\
    \ + sides[1] + sides[2] for side in sides):\n                        \n      \
    \                  # check if all sides are equal\n                        if\
    \ all(side == sides[0] + sides[1] + sides[2] - 1 for side in sides):\n       \
    \                     \n                            # check if all sides are equal\n\
    \                            if all(side == sides[0] - sides[1] - sides[2] for\
    \ side in sides):\n                                \n                        \
    \        # check if all sides are equal\n                                if all(side\
    \ == sides[0] - sides[1] - sides[2] - 1 for side in sides):\n                \
    \                    \n                                    # check if all sides\
    \ are equal\n                                    if all(side == sides[0] - sides[1]\
    \ - sides[2] - 2 for side in sides):\n                                       \
    \ \n                                        # check if all sides are equal\n \
    \                                       if all(side == sides[0] - sides[1] - sides[2]\
    \ - 3 for side in sides):\n                                            \n    \
    \                                        # check if all sides are equal\n    \
    \                                        if all(side == sides[0] - sides[1] -\
    \ sides[2] - 4 for side in sides):\n                                         \
    \       \n                                                # check if all sides\
    \ are equal\n                                                if all(side == sides[0]\
    \ - sides[1] - sides[2] - 5 for side in sides):\n                            \
    \                        \n                                                  \
    \  # check if all sides are equal\n                                          \
    \          if all(side == sides[0] - sides[1] - sides[2] - 6 for side in sides):\n\
    \                                                        \n                  \
    \                                      # check if all sides are equal\n      \
    \                                                  if all(side == sides[0] - sides[1]\
    \ - sides[2] - 7 for side in sides):\n                                       \
    \                     \n                                                     \
    \       # check if all sides are equal\n                                     \
    \                       if all(side == sides[0] - sides[1] - sides[2] - 8 for\
    \ side in sides):\n                                                          \
    \      \n                                                                # check\
    \ if all sides are equal\n                                                   \
    \             if all(side == sides[0] - sides[1] - sides[2] - 9 for side in sides):\n\
    \                                                                    \n      \
    \                                                              # check if all\
    \ sides are equal\n                                                          \
    \          if all(side == sides[0] - sides[1] - sides[2] - 10 for side in sides):\n\
    \                                                                        \n  \
    \                                                                      # check\
    \ if all sides are equal\n                                                   \
    \                     if ", "    if a + b > c:\n        return -1\n    elif a\
    \ + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round(0.5 * (a + b + c), 2)\n\n", "    \n    sides = [a, b, c]\n\
    \    \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n\
    \        return round(sum_of_sides, 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 7: Write a function that takes in a list of numbers and returns\
    \ the number of positive integers less than or equal to that number. \nExample:\
    \ \n>>> count_positive([-4, -2, 0, 2, 5, 7, 9, 11, 12])\n3\n>>> count_positive([-4,\
    \ -2, 0, 2, 5, 7, 9, 11, 12])\n0\n>>> count_positive([-4, -2, 0, 2, 5, 7, 9, 11,\
    \ 12])\n0\n>>> count_positive([-4, -2, 0, 2, 5, 7, 9, 11, 12])\n0\n>>> count_positive([-4,\
    \ -2, 0, 2, 5, 7, 9, 11, 12])\n0\n>>> count_positive([-4, -2, 0, 2, 5, 7, 9, 11,\
    \ 12])\n0\n>>> count_positive([-4, -2, 0, 2, 5, 7, 9, 11, 12])\n0\n>>> count_positive([-4,\
    \ -2, 0, 2, 5, 7, 9, 11, 12])\n0\n>>> count_positive([-4, -2, 0, 2, 5, 7, 9, 11,\
    \ 12])\n0\n>>> count_positive([-4, -2, 0, 2, 5, 7, 9, 11, 12])\n0\n>>> count_positive([-4,\
    \ -2, 0, 2, 5, 7, 9, 11, 12])\n0\n>>> count_positive([-4, -2, 0, 2, 5, 7, 9, 11,\
    \ 12])\n0\n>>> count_positive([-4, -2, 0, 2, 5, 7, 9, 11, 12])\n0\n>>> count_positive([-4,\
    \ -2, 0, 2, 5, 7, 9, 11, 12])\n0\n>>> count_positive([-4, -2, 0, 2, 5, 7, 9, 11,\
    \ 12])\n0\n>>> count_positive([-4, -2, 0, 2, 5, 7, 9, 11, 12])\n0\n>>> count_positive([-4,\
    \ -2, 0, 2, 5, 7, 9, 11, 12])\n0\n>>> count_positive([-4, -2, 0, 2, 5, 7, 9, 11,\
    \ 12])\n0\n>>> count_positive([-4, -2, 0, 2, 5, 7, 9, 11, 12])\n0\n>>> count_positive([-4,\
    \ -2, 0, 2, 5, 7, 9, 11, 12])\n0\n>>> count_positive([-4, -2, 0, 2, 5, 7, 9, 11,\
    \ 12])\n0\n>>> count_positive([-4, -2, 0, 2, 5, 7, 9, 11, 12])\n0\n>>> count_positive([-4,\
    \ -2, 0, 2, 5, ", "    \n    if a + b > c and a + c > b and b + c > a:\n     \
    \   area = 0.5 * (a + b + c)\n        return round(area, 2)\n    else:\n     \
    \   return -1\n</cell>\n<cell>", "    a, b, c = sorted([a, b, c])\n    if a +\
    \ b > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    else:\n        return round(0.5 * (a + b\
    \ + c), 2)\n\n", "    \n    sides = [a, b, c]\n    \n    sum_of_sides = sum(sides)\n\
    \    \n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n\
    \    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n\
    <cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7: Write a function\
    \ that returns the area of a triangle given three sides. \n    You may assume\
    \ that the input of the function is valid!\n    Example:\n    >>> triangle_area(3,\
    \ 4, 5)\n    6.0\n    >>> triangle_area(1, 2, 10)\n    -1\n    \"\"\"\n    \n\
    \    sides = [a, b, c]\n    \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides\
    \ <= sides[2]:\n        return round(sum_of_sides, 2)\n    else:\n        return\
    \ -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 8: Write a function that checks if a triangle\
    \ is valid or not.\n    You may assume that the input of the function is valid!\n\
    \    Example:\n    >>> triangle_valid(3, 4, 5)\n    True\n    >>> triangle_valid(1,\
    \ 2, 10)\n    False\n    \"\"\"\n    \n    sides = [a, b, c]\n    \n    sum_of_sides\
    \ = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n        return True\n\
    \    else:\n        return False\n</cell>\n<cell>\ntriangle_valid(3, 4, 5)\n</cell>\n\
    <cell>\ntriangle_valid(1, 2, 10)\n</cell>\n<text>\nProblem 9: Write a function\
    \ that checks if a triangle is isosceles or equilateral \n    You may assume that\
    \ the input of the function is valid!\n    Example:\n    >>> triangle_isosceles(3,\
    \ 4, 5)\n    True\n    >>> triangle_isosceles(1, 2, 10)\n    False\n    \"\"\"\
    \n    \n    sides = [a, b, c]\n    \n    sum_of_sides = sum(sides)\n    \n   \
    \ if sum_of_sides == sides[2]:\n        return True\n    else:\n        return\
    \ False\n</cell>\n<cell>\ntriangle_isosceles(3, 4, 5)\n</cell>\n<cell>\ntriangle_isosceles(1,\
    \ 2, 10)\n</cell>\n<text>\nProblem 10: Write a function that checks if a triangle\
    \ is scalene or equilateral \n    You may assume that the input of the function\
    \ is valid!\n    Example:\n    >>> triangle_scalene", "    if a + b > c:\n   \
    \     return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round(math.sqrt(a * b * c), 2)\n\
    \n", "    \n    # Your code here\n    \n    if a + b > c:\n        return -1\n\
    \    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        return round( ( (a + b + c) / 2 ), 2)\n\n", "    sides = [a,\
    \ b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n   \
    \     return round(sum_of_sides, 2)\n    else:\n        return -1\n\n", "    if\
    \ a + b > c and a + c > b and b + c > a:\n        return round( ((a * b) + (a\
    \ * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n\n", "    \n  \
    \  if a + b > c:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    elif c + a > b:\n        return -1\n    else:\n        return round( ( (a\
    \ + b + c) / 2 ), 2 )\n", "    \n    sides = [a, b, c]\n    \n    sum_of_sides\
    \ = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n</cell>\n<cell>", "    \n    # Write your\
    \ code here\n    \n    if a + b > c:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    else:\n      \
    \  return round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n</cell>\n<cell>",
  "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n\
    \        return round(sum_of_sides, 2)\n    else:\n        return -1\n\n", " \
    \   if a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    else:\n        return round(0.5 *\
    \ (a + b + c), 2)\n\n", "    \n    sides = [a, b, c]\n    \n    # Check if all\
    \ sides are positive\n    if sides[0] >= 0 and sides[1] >= 0 and sides[2] >= 0:\n\
    \        \n        # Check if all sides are equal\n        if sides[0] == sides[1]\
    \ and sides[1] == sides[2]:\n            return round(sides[0] * sides[1] * sides[2],\
    \ 2)\n        \n        # Check if any two sides are equal\n        elif sides[0]\
    \ == sides[1]:\n            return round(sides[0] * sides[1], 2)\n        \n \
    \       # Check if any two sides are equal\n        elif sides[1] == sides[2]:\n\
    \            return round(sides[1] * sides[2], 2)\n        \n        # Check if\
    \ all sides are equal\n        else:\n            return -1\n    \n    # Check\
    \ if all sides are negative\n    elif sides[0] < 0 and sides[1] < 0 and sides[2]\
    \ < 0:\n        \n        # Check if all sides are equal\n        if sides[0]\
    \ == sides[1] and sides[1] == sides[2]:\n            return round(sides[0] * sides[1]\
    \ * sides[2], 2)\n        \n        # Check if any two sides are equal\n     \
    \   elif sides[0] == sides[1]:\n            return round(sides[0] * sides[1],\
    \ 2)\n        \n        # Check if any two sides are equal\n        elif sides[1]\
    \ == sides[2]:\n            return round(sides[1] * sides[2], 2)\n        \n \
    \       # Check if all sides are equal\n        else:\n            return -1\n\
    \    \n    # Check if all sides are zero\n    elif sides[0] == 0 and sides[1]\
    \ == 0 and sides[2] == 0:\n        return round(sides[0] * sides[1] * sides[2],\
    \ 2)\n    \n    # Check if any two sides are zero\n    elif sides[0] == 0 and\
    \ sides[1] == 0:\n        return round(sides[0] * sides[1], 2)\n    \n    # Check\
    \ if any two sides are zero\n    elif sides[1] == 0 and sides[2] == 0:\n     \
    \   return round(sides[1] * sides[2], 2)\n    \n    # Check if all sides are zero\n\
    \    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n\
    <cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes in a list of integers and returns the sum of the squares of the integers\
    \ in the list.\nExample\n>>> square_sum([1,2,3,4])\n25\n>>> square_sum([-1, -2,\
    \ -3, -4])\n25\n>>> square_sum([])\n0\n>>> square_sum([1, 2, 3])\n-1\n>>> square_sum([-1,\
    \ -2, -3])\n-1\n>>> square_sum([1, 2, 3, 0])\n-1\n>>> square_sum([-1, -2, -3,\
    \ 0])\n-1\n>>> square_sum([1, 2, 3, 0])\n-1\n>>> square_sum([-1, -2, -3, 0])\n",
  "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[0]:\n\
    \        return -1\n    elif sum_of_sides <= sides[1]:\n        return -1\n  \
    \  elif sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n   \
    \ else:\n        return -1\n\n", "    if a + b > c:\n        return -1\n    elif\
    \ a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round(abs((a * b) - (c * c)), 2)\n\n", "    \n    if a + b > c\
    \ and a + c > b and b + c > a:\n        return round( ((a * b) + (a * c) + (b\
    \ * c)) / (2 * a), 2)\n    else:\n        return -1\n</cell>\n<cell>", "    \n\
    \    \n    if a + b > c and a + c > b and b + c > a:\n        return round( (\
    \ (a + b + c) / 2) ** (1/2) , 2)\n    else:\n        return -1\n    \n    ", " \
    \   \n    if a + b > c:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    elif c + a > b:\n        return -1\n    else:\n        return round(\
    \ ((a * b) + (b * c) + (c * a)) / (2.0), 2)\n\n", "    if a + b > c and b + c\
    \ > a and c + a > b:\n        return round(math.sqrt(a * b * c), 2)\n    else:\n\
    \        return -1\n\n", "    \n    area_a = abs(a * b - c * c)\n    area_b =\
    \ abs(a * c - b * b)\n    area_c = abs(b * c - a * a)\n    \n    if area_a >=\
    \ area_b >= area_c:\n        return round(area_a, 2)\n    else:\n        return\
    \ -1\n    ", "    sides = [a, b, c]\n    sum_sides = sum(sides)\n    if sum_sides\
    \ <= sides[2]:\n        return round(sum_sides, 2)\n    else:\n        return\
    \ -1\n\n", "    if a + b > c and a + c > b and b + c > a:\n        return round(0.5\
    \ * (a + b + c), 2)\n    else:\n        return -1\n\n", "    \n    sides = [a,\
    \ b, c]\n    \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides > sides[2]:\n\
    \        return round(sum_of_sides, 2)\n    else:\n        return -1\n</cell>\n\
    <cell>", "    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(0.5\
    \ * (a + b + c), 2)\n\n", "    if a + b > c and a + c > b and b + c > a:\n   \
    \     area = (a * b * c) / 2\n        return round(area, 2)\n    else:\n     \
    \   return -1\n\n", "    if a + b > c:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    else:\n      \
    \  return round(0.5 * (a + b + c), 2)\n\n", "    \n    sides = [a, b, c]\n   \
    \ \n    sum_of_sides = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n  \
    \      return round(sum_of_sides, 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes in a list of numbers and returns\
    \ the number of positive numbers in the list. \nIf the list is empty return 0\n\
    If the list has one number in it return 1\nIf the list has two numbers in it return\
    \ 2\nIf the list has three numbers in it return 3\nIf the list has more than three\
    \ numbers in it return 4\n\n\n</text>\n<cell>", "    \n    if a + b > c:\n   \
    \     return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n\
    \        return -1\n    else:\n        return round( ( (a + b + c) / 2 ), 2 )\n",
  "    \n    # Your code here\n    \n    if a + b > c:\n        return -1\n    elif\
    \ a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return (a + b + c) / 2\n</cell>\n<cell>", "    \n    if a + b > c and\
    \ a + c > b and b + c > a:\n        area = (a * b + c) / 2\n        return round(area,\
    \ 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n\
    </cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that takes in a list of integers and returns the number of positive\
    \ integers that are less than the sum of the positive integers in the list. \n\
    Example:\n>>> count_positive([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n4\n\
    >>> count_positive([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n0\n>>> count_positive([-10,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n0\n>>> count_positive([-10, -5, -4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4, 5])\n0\n>>> count_positive([-10, -5, -4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4, 5])\n0\n>>> count_positive([-10, -5, -4, -3, -2, -1, 0, 1,\
    \ 2, 3, 4, 5])\n0\n>>> count_positive([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4,\
    \ 5])\n0\n>>> count_positive([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n0\n\
    >>> count_positive([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n0\n>>> count_positive([-10,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n0\n>>> count_positive([-10, -5, -4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4, 5])\n0\n>>> count_positive([-10, -5, -4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4, 5])\n0\n>>> count_positive([-10, -5, -4, -3, -2, -1, 0, 1,\
    \ 2, 3, 4, 5])\n0\n>>> count_positive([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4,\
    \ 5])\n0\n>>> count_positive([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n0\n\
    >>> count_positive([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n0\n>>> count_positive([-10,\
    \ -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n0\n>>> count_positive([-10, -5, -4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4, 5])\n0\n>>> count_positive([-10, -5, -4, -3, -2,\
    \ -1, 0, 1, 2, 3, 4, 5])\n0\n>>> count_positive([-10, -5, -4, -3, -2, -1, 0, 1,\
    \ 2, 3, 4, 5])\n0\n>>> count_positive([-10, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4,\
    \ 5])\n0\n>>> count_positive([-10, -5, -4, -3, -2, ", "    if a + b > c:\n   \
    \     return -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n\
    \        return -1\n    else:\n        return round(0.5 * (a + b + c), 2)\n\n",
  "    \n    sides = [a, b, c]\n    \n    # Check if all sides are positive\n    if\
    \ any(s < 0 for s in sides):\n        return -1\n    \n    # Check if all sides\
    \ are equal\n    if sum(sides) != a:\n        return -1\n    \n    # Check if\
    \ all sides are equal\n    if sum(sides) != b:\n        return -1\n    \n    #\
    \ Check if all sides are equal\n    if sum(sides) != c:\n        return -1\n \
    \   \n    # Check if all sides are equal\n    if sum(sides) != a + b + c:\n  \
    \      return -1\n    \n    # Check if all sides are equal\n    if sum(sides)\
    \ != a + b + c + a:\n        return -1\n    \n    # Check if all sides are equal\n\
    \    if sum(sides) != a + b + c + a + b:\n        return -1\n    \n    # Check\
    \ if all sides are equal\n    if sum(sides) != a + b + c + a + b + c:\n      \
    \  return -1\n    \n    # Check if all sides are equal\n    if sum(sides) != a\
    \ + b + c + a + b + c + a:\n        return -1\n    \n    # Check if all sides\
    \ are equal\n    if sum(sides) != a + b + c + a + b + c + a + b:\n        return\
    \ -1\n    \n    # Check if all sides are equal\n    if sum(sides) != a + b + c\
    \ + a + b + c + a + b + c:\n        return -1\n    \n    # Check if all sides\
    \ are equal\n    if sum(sides) != a + b + c + a + b + c + a + b + c + a:\n   \
    \     return -1\n    \n    # Check if all sides are equal\n    if sum(sides) !=\
    \ a + b + c + a + b + c + a + b + c + a + b:\n        return -1\n    \n    # Check\
    \ if all sides are equal\n    if sum(sides) != a + b + c + a + b + c + a + b +\
    \ c + a + b + c:\n        return -1\n    \n    # Check if all sides are equal\n\
    \    if sum(sides) != a + b + c + a + b + c + a + b + c + a + b + c + a:\n   \
    \     return -1\n    \n    # Check if all sides are equal\n    if sum(sides) !=\
    \ a + b + c + a + b + c + a + b + c + a + b + c + a + b:\n        return -1\n\
    \    \n    # Check if all sides are equal\n    if sum(sides) != a + b + c + a\
    \ + b + c + a + b + c + a + b + c + a + b + c:\n        return -1\n    \n    #\
    \ Check if all sides are equal\n    if sum(sides) != a + b + c + a + b + c + a\
    \ + b + c + a + b + c + a + b + c + a:\n        return -1\n    \n    # Check if\
    \ all sides are equal\n    if sum(sides) != a + b + c + a + ", "    \n    if a\
    \ + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    else:\n        return round((a * b * c) /\
    \ 2, 2)\n\n", "    \n    if a + b > c:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    else:\n      \
    \  return round((a * b * c) / 2, 2)\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n\
    </cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 7\nWrite a\
    \ function that takes in a list of numbers and returns the number of positive\
    \ integers that are less than the sum of the positive integers in the list.\n\n\
    Example:\n>>> count_less_than_sum([])\n0\n>>> count_less_than_sum([1, 2, 3, 5])\n\
    2\n>>> count_less_than_sum([1, 2, 3, 5])\n2\n>>> count_less_than_sum([1, -2, 3,\
    \ 5])\n2\n>>> count_less_than_sum([1, -2, 3, 5])\n2\n>>> count_less_than_sum([1,\
    \ -2, -3, 5])\n3\n>>> count_less_than_sum([1, -2, -3, 5])\n3\n>>> count_less_than_sum([1,\
    \ -2, -3, 5])\n3\n>>> count_less_than_sum([1, -2, -3, 5])\n3\n>>> count_less_than_sum([1,\
    \ -2, -3, 5])\n3\n>>> count_less_than_sum([1, -2, -3, 5])\n3\n>>> count_less_than_sum([1,\
    \ -2, -3, 5])\n3\n>>> count_less_than_sum([1, -2, -3, 5])\n3\n>>> count_less_than_sum([1,\
    \ -2, -3, 5])\n3\n>>> count_less_than_sum([1, -2, -3, 5])\n3\n>>> count_less_than_sum([1,\
    \ -2, -3, 5])\n3\n>>> count_less_than_sum([1, -2, -3, 5])\n3\n>>> count_less_than_sum([1,\
    \ -2, -3, 5])\n3\n>>> count_less_than_sum([1, -2, -3, 5])\n3\n>>> count_less_than_sum([1,\
    \ -2, -3, 5])\n3\n>>> count_less_than_sum([1, -2, -3, 5])\n3\n>>> count_less_than_sum([1,\
    \ -2, -3, 5])\n3\n>>> count_less_than_sum([1, -2, -3, 5])\n3\n>>> count_less_than_sum([1,\
    \ -2, -3, 5])\n3\n>>> count_less_than_sum([1, -2, -3, 5])\n3\n>>> count_less_than_sum([1,\
    \ -2, -3, 5])\n3\n>>> count_less_than_sum([1, -2, -3, 5])\n3\n>>> count_less_than_sum([1,\
    \ -2, -3, 5])\n3\n>>> count_less_than_sum([1, -2, -3, 5])\n3\n>>> count_less_than_sum([1,\
    \ -2, -3, 5])\n3\n>>> count_less_than_sum([1, -2, -3, 5])\n3\n>>> count_less_than_sum([1,\
    \ -2, -3, 5])", "    \n    if a + b > c:\n        return -1\n    elif b + c >\
    \ a:\n        return -1\n    elif c + a > b:\n        return -1\n    else:\n \
    \       return round( ( (a + b + c) / 2) ** (1/2) , 2)\n</cell>\n<cell>", "  \
    \  \n    area_of_triangle = abs((a+b+c)/2)\n    if area_of_triangle >= (a+b+c):\n\
    \        return round(area_of_triangle, 2)\n    else:\n        return -1\n</cell>\n\
    <cell>", "    \n    if a + b > c and a + c > b and b + c > a:\n        return\
    \ round( ((a * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return\
    \ -1\n</cell>\n<cell>", "    \n    sides = [a, b, c]\n    \n    sum_of_sides =\
    \ sum(sides)\n    \n    if sum_of_sides > sides[2]:\n        return -1\n    else:\n\
    \        return round(sum_of_sides/sides[2], 2)\n</cell>\n<cell>", "    \n   \
    \ if a + b > c:\n        return -1\n    elif b + c > a:\n        return -1\n \
    \   elif c + a > b:\n        return -1\n    else:\n        return round( ( ( (a\
    \ + b) * (b + c) ) - ( (b + c) * (c + a) ) ) / 2, 2 )\n", "    if a + b > c and\
    \ a + c > b and b + c > a:\n        return round(math.sqrt(a * b * c), 2)\n  \
    \  else:\n        return -1\n\n", "    \n    sides = [a, b, c]\n    \n    sum_of_sides\
    \ = sum(sides)\n    \n    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides,\
    \ 2)\n    else:\n        return -1\n</cell>\n<cell>", "    if a + b > c:\n   \
    \     return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n\
    \        return -1\n    else:\n        return round(abs((a + b + c) / 2), 2)\n\
    \n", "    if a + b > c and b + c > a and c + a > b:\n        area = (a + b + c)\
    \ / 2\n        if area >= (a + b + c) / 2:\n            return round(area, 2)\n\
    \        else:\n            return -1\n    else:\n        return -1\n\n", "  \
    \  \n    if a + b > c and a + c > b and b + c > a:\n        return round( ((a\
    \ * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n</cell>\n\
    <cell>", "    if a + b > c:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    elif c + a > b:\n        return -1\n    else:\n        return round(float(a\
    \ + b + c) / 2, 2)\n\n", "    if a + b > c:\n        return -1\n    elif a + c\
    \ > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round(abs((a * b) - (c * c)), 2)\n\n", "    \n    if a + b > c\
    \ and a + c > b and b + c > a:\n        return round( ((a * b) + (a * c) + (b\
    \ * c)) / (2 * a), 2)\n    else:\n        return -1\n", "    if a + b > c and\
    \ a + c > b and b + c > a:\n        return round(math.sqrt(a * b * c), 2)\n  \
    \  else:\n        return -1\n\n", "    \n    a, b, c = sorted([a, b, c])\n   \
    \ if a + b > c and b + c > a and c + a > b:\n        return round(math.sqrt(a\
    \ * b * c), 2)\n    else:\n        return -1\n\n", "    if a + b > c:\n      \
    \  return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n  \
    \      return -1\n    else:\n        return round(math.sqrt(a * b * c), 2)\n\n",
  "    if a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    else:\n        return round(abs(a\
    \ * b * c) / 2, 2)\n\n", "    \n    if a + b > c:\n        return -1\n    elif\
    \ a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n\
    \        return round( ( (a + b + c) / 2) ** (1/2) , 2)\n\n", "    \n    # Your\
    \ code here\n    \n    if a + b > c:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    elif b + c > a:\n        return -1\n    else:\n      \
    \  return round( ( ( (a + b) * (b + c) ) - ( (a + c) * (c + b) ) ) / 2, 2 )\n\
    </cell>\n<cell>", "    \n    area_of_triangle = abs((a+b+c)/2)\n    if area_of_triangle\
    \ > c:\n        return area_of_triangle\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes a list and a number as arguments\
    \ and returns a list with the numbers in the list that are less than or equal\
    \ to the number.\n\nExample:\n>>> my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\
    >>> my_function(my_list, 10)\n[1, 3, 5, 7, 9]\n\n</text>\n<cell>", "    if a +\
    \ b > c and b + c > a and c + a > b:\n        return round(math.sqrt(a * b * c),\
    \ 2)\n    else:\n        return -1\n\n", "    \n    # Your code here\n    \n \
    \   if a + b > c:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    elif c + a > b:\n        return -1\n    else:\n        return round( ( (a\
    \ + b + c) / 2 ), 2 )\n</cell>\n<cell>", "    \n    sides = [a, b, c]\n    \n\
    \    # Check if all sides are positive\n    if all(side >= 0 for side in sides):\n\
    \        \n        # Check if all sides are equal\n        if sum(sides) == sides[0]:\n\
    \            return sides[0]\n        \n        # Check if all sides are equal\n\
    \        elif sum(sides) == sides[1]:\n            return sides[1]\n        \n\
    \        # Check if all sides are equal\n        elif sum(sides) == sides[2]:\n\
    \            return sides[2]\n        \n        # Check if all sides are equal\n\
    \        else:\n            return -1\n    \n    else:\n        return -1\n</cell>\n\
    <cell>", "    \n    sides = [a, b, c]\n    \n    sum_of_sides = sum(sides)\n \
    \   \n    if sum_of_sides > sides[2]:\n        return round(sum_of_sides, 2)\n\
    \    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3, 4, 5)\n</cell>\n\
    <cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes in a list of numbers and returns the number of positive and negative\
    \ numbers in the list. \nIf the list is empty return 0.\nIf the list contains\
    \ only positive numbers return 1.\nIf the list contains only negative numbers\
    \ return -1.\nIf the list contains both positive and negative numbers return 2.\n\
    If the list contains both positive and negative numbers and some are 0 return\
    \ 3.\nIf the list contains both positive and negative numbers and some are non-zero\
    \ return 4.\nIf the list contains both positive and negative numbers and some\
    \ are non-zero and some are 0 return 5.\nIf the list contains both positive and\
    \ negative numbers and some are non-zero and some are non-zero return 6.\nIf the\
    \ list contains both positive and negative numbers and some are non-zero and some\
    \ are non-zero and some are 0 return 7.\nIf the list contains both positive and\
    \ negative numbers and some are non-zero and some are non-zero and some are non-zero\
    \ return 8.\nIf the list contains both positive and negative numbers and some\
    \ are non-zero and some are non-zero and some are non-zero and some are 0 return\
    \ 9.\nIf the list contains both positive and negative numbers and some are non-zero\
    \ and some are non-zero and some are non-zero and some are non-zero return 10.\n\
    If the list contains both positive and negative numbers and some are non-zero\
    \ and some are non-zero and some are non-zero and some are non-zero and some are\
    \ 0 return 11.\nIf the list contains both positive and negative numbers and some\
    \ are non-zero and some are non-zero and some are non-zero and some are non-zero\
    \ and some are non-zero and some are 0 return 12.\nIf the list contains both positive\
    \ and negative numbers and some are non-zero and some are non-zero and some are\
    \ non-zero and some are non-zero and some are non-zero and some are non-zero return\
    \ 13.\nIf the list contains both positive and negative numbers and some are non-zero\
    \ and some are non-zero and some are non-zero and some are non-zero and some are\
    \ non-zero and some are non-zero and some are non-zero return 14.\nIf the list\
    \ contains both positive and negative numbers and some are non-zero and some are\
    \ non-zero and some are non-zero and some are non-zero and some are ", "    if\
    \ a + b > c and a + c > b and b + c > a:\n        return round( ((a * b) + (a\
    \ * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n\n", "    sides\
    \ = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n\
    \        return round(sum_of_sides, 2)\n    else:\n        return -1\n\n", " \
    \   \n    a, b, c = sorted([a, b, c])\n    if a + b > c:\n        return -1\n\
    \    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    else:\n        return round(abs((a + b + c) / 2), 2)\n\n", "    if a + b\
    \ > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif b\
    \ + c > a:\n        return -1\n    else:\n        return round(float(a + b + c)\
    \ / 2, 2)\n\n", "    \n    if a + b > c:\n        return -1\n    elif a + c >\
    \ b:\n        return -1\n    elif b + c > a:\n        return -1\n    else:\n \
    \       return round( ((a + b + c) / 2) ** 0.5, 2)\n", "    if a + b > c and a\
    \ + c > b and b + c > a:\n        return round(math.sqrt(a * b * c), 2)\n    else:\n\
    \        return -1\n\n", "    \n    sides = [a, b, c]\n    \n    # Check if all\
    \ sides are positive\n    if all(side >= 0 for side in sides):\n        \n   \
    \     # Check if all sides are equal\n        if sum(sides) == sides[0]:\n   \
    \         return round(sides[0] * sides[1] / 2, 2)\n        \n        # Check\
    \ if all sides are equal\n        if sum(sides) == sides[1]:\n            return\
    \ round(sides[1] * sides[2] / 2, 2)\n        \n        # Check if all sides are\
    \ equal\n        if sum(sides) == sides[2]:\n            return round(sides[2]\
    \ * sides[0] / 2, 2)\n        \n        # Check if all sides are equal\n     \
    \   if sum(sides) == sides[0] + sides[1] + sides[2]:\n            return round(sides[0]\
    \ + sides[1] + sides[2], 2)\n        \n        # Check if all sides are equal\n\
    \        if sum(sides) == sides[0] + sides[1] + sides[2] + sides[3]:\n       \
    \     return round(sides[0] + sides[1] + sides[2] + sides[3], 2)\n        \n \
    \       # Check if all sides are equal\n        if sum(sides) == sides[0] + sides[1]\
    \ + sides[2] + sides[3] + sides[4]:\n            return round(sides[0] + sides[1]\
    \ + sides[2] + sides[3] + sides[4], 2)\n        \n        # Check if all sides\
    \ are equal\n        if sum(sides) == sides[0] + sides[1] + sides[2] + sides[3]\
    \ + sides[4] + sides[5]:\n            return round(sides[0] + sides[1] + sides[2]\
    \ + sides[3] + sides[4] + sides[5], 2)\n        \n        # Check if all sides\
    \ are equal\n        if sum(sides) == sides[0] + sides[1] + sides[2] + sides[3]\
    \ + sides[4] + sides[5] + sides[6]:\n            return round(sides[0] + sides[1]\
    \ + sides[2] + sides[3] + sides[4] + sides[5] + sides[6], 2)\n        \n     \
    \   # Check if all sides are equal\n        if sum(sides) == sides[0] + sides[1]\
    \ + sides[2] + sides[3] + sides[4] + sides[5] + sides[6] + sides[7]:\n       \
    \     return round(sides[0] + sides[1] + sides[2] + sides[3] + sides[4] + sides[5]\
    \ + sides[6] + sides[7], 2)\n        \n        # Check if all sides are equal\n\
    \        if sum(sides) == sides[0] + sides[1] + sides[2] + sides[3] + sides[4]\
    \ + sides[5] + sides[6] + sides[7] + sides[8]:\n            return round(sides[0]\
    \ + sides[1] + sides[2] + sides[3] + sides[4] + sides[5] + sides[6] + sides[7]\
    \ + ", "    \n    area_of_triangle = abs((a+b+c)/2)\n    if area_of_triangle >=\
    \ b and area_of_triangle >= c:\n        return round(area_of_triangle, 2)\n  \
    \  else:\n        return -1\n</cell>\n<cell>", "    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        return round(math.sqrt(a * b * c), 2)\n\n", "    if a\
    \ + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    else:\n        return round(math.sqrt(a *\
    \ b * c), 2)\n\n", "    if a + b > c and b + c > a and c + a > b:\n        return\
    \ round(math.sqrt(a * b * c), 2)\n    else:\n        return -1\n\n", "    \n \
    \   if a + b > c:\n        return -1\n    elif b + c > a:\n        return -1\n\
    \    elif c + a > b:\n        return -1\n    else:\n        return round( ( (a\
    \ + b + c) / 2 ), 2 )\n</cell>\n<cell>", "    \n    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        return round((a * b * c) / 2, 2)\n\n", "    \n    if\
    \ a + b > c:\n        return -1\n    elif a + c > b:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    else:\n        return round((a * b * c)/((a\
    \ + b + c)**0.5), 2)\n</cell>\n<cell>", "    \n    if a + b > c and a + c > b\
    \ and b + c > a:\n        area = (a * b * c) / 2\n        return round(area, 2)\n\
    \    else:\n        return -1\n</cell>\n<cell>", "    \n    if a + b > c:\n  \
    \      return -1\n    elif b + c > a:\n        return -1\n    elif a + c > b:\n\
    \        return -1\n    else:\n        return round( ( (a + b + c) / 2) ** 0.5,\
    \ 2)\n</cell>\n<cell>", "    sides = [a, b, c]\n    sum_of_sides = sum(sides)\n\
    \    if sum_of_sides <= sides[2]:\n        return round(sum_of_sides, 2)\n   \
    \ else:\n        return -1\n\n", "    \n    \n    if a + b > c and a + c > b and\
    \ b + c > a:\n        area = (a + b + c) / 2\n        return round(area, 2)\n\
    \    else:\n        return -1\n</cell>\n<cell>", "    \n    if a + b > c and b\
    \ + c > a and c + a > b:\n        return round( ((a * b) + (b * c) + (c * a))\
    \ / (2 * a * b), 2)\n    else:\n        return -1\n</cell>\n<cell>\ntriangle_area(3,\
    \ 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n<text>\nProblem 3\n\
    Write a function that takes in a list of numbers and returns the sum of the numbers\
    \ in the list. \nIf the list is empty return 0\nIf the list has one number in\
    \ it return that number\nIf the list has two numbers in it return the first number\
    \ plus the sum of the second number\nIf the list has three numbers in it return\
    \ the first number plus the sum of the second number plus the sum of the third\
    \ number\nIf the list has four numbers in it return the first number plus the\
    \ sum of the second number plus the sum of the third number plus the sum of the\
    \ fourth number\nIf the list has five numbers in it return the first number plus\
    \ the sum of the second number plus the sum of the third number plus the sum of\
    \ the fourth number plus the sum of the fifth number\nIf the list has six numbers\
    \ in it return the first number plus the sum of the second number plus the sum\
    \ of the third number plus the sum of the fourth number plus the sum of the fifth\
    \ number plus the sum of the sixth number\nIf the list has seven numbers in it\
    \ return the first number plus the sum of the second number plus the sum of the\
    \ third number plus the sum of the fourth number plus the sum of the fifth number\
    \ plus the sum of the sixth number plus the sum of the seventh number\nIf the\
    \ list has eight numbers in it return the first number plus the sum of the second\
    \ number plus the sum of the third number plus the sum of the fourth number plus\
    \ the sum of the fifth number plus the sum of the sixth number plus the sum of\
    \ the seventh number plus the sum of the eighth number\nIf the list has nine numbers\
    \ in it return the first number plus the sum of the second number plus the sum\
    \ of the third number plus the sum of the fourth number plus the sum of the fifth\
    \ number plus the sum of the sixth number plus the sum of the seventh number plus\
    \ the sum of the eighth number plus the sum of the ninth number\nIf the list has\
    \ ten numbers in it return the first number plus the sum of the second number\
    \ plus the sum of the third number plus the sum of the fourth number plus the\
    \ sum of the fifth number plus the sum of the sixth number plus the sum of the\
    \ seventh number plus the sum of the eighth number plus the sum", "    sides =\
    \ [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides > sides[2]:\n\
    \        return -1\n    return round(sum_of_sides / 2, 2)\n\n", "    \n    if\
    \ a + b > c and a + c > b and b + c > a:\n        return round( ((a * b) + (a\
    \ * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n", "    if a +\
    \ b > c and a + c > b and b + c > a:\n        return round(math.sqrt(a * b * c),\
    \ 2)\n    else:\n        return -1\n\n", "    if a + b > c:\n        return -1\n\
    \    elif b + c > a:\n        return -1\n    elif c + a > b:\n        return -1\n\
    \    else:\n        return round(a + b + c, 2)\n\n", "    if a + b > c:\n    \
    \    return -1\n    elif b + c > a:\n        return -1\n    elif c + a > b:\n\
    \        return -1\n    else:\n        return round((a * b * c) / 2, 2)\n\n",
  "    \n    if a + b > c and a + c > b and b + c > a:\n        area = 0.5 * (a +\
    \ b + c)\n        return round(area, 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 7\nWrite a function that takes in a list of numbers and returns\
    \ the sum of the numbers in the list. \nIf the list is empty return 0.\nIf the\
    \ list has one number in it return that number.\nIf the list has two numbers in\
    \ it return the first number plus the sum of the second number.\nIf the list has\
    \ three numbers in it return the first number plus the sum of the second number\
    \ plus the sum of the third number.\nIf the list has more than three numbers in\
    \ it return the first number plus the sum of the second number plus the sum of\
    \ the third number plus the sum of the fourth number.\nExample\n>>> sum([1, 2,\
    \ 3, 4])\n10\n>>> sum([1, 2, 3, 4, 5])\n15\n>>> sum([1, 2, 3, 4, 5, 6])\n18\n\
    >>> sum([1, 2, 3, 4, 5, 6, 7])\n21\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n24\n>>>\
    \ sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n25\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n\
    25\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20])\n30\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20, 21])\n30\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22])\n30\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n30\n>>> sum([1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n\
    30\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\
    \ 20, 21, 22, 23, 24, 25])\n30\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n30\n>>> sum([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27])\n30\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n30\n>>> sum([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\
    \ 24, 25, 26, 27, 28, 29])\n30\n>>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, ", "    if a + b > c and b + c > a and c + a > b:\n        return round(abs(a\
    \ * b * c) / 2, 2)\n    return -1\n\n", "    \n    if a + b > c:\n        return\
    \ -1\n    elif a + c > b:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    else:\n        return round( ( (a + b + c) / 2 ), 2)\n\n", "    sides\
    \ = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides > sides[2]:\n\
    \        return -1\n    else:\n        return round(sum_of_sides / 2, 2)\n\n",
  "    \n    if a + b > c and a + c > b and b + c > a:\n        return round( ((a\
    \ * b) + (a * c) + (b * c)) / (2 * a), 2)\n    else:\n        return -1\n</cell>\n\
    <cell>\ntriangle_area(3, 4, 5)\n</cell>\n<cell>\ntriangle_area(1, 2, 10)\n</cell>\n\
    <text>\nProblem 4\nWrite a function that takes in a list with any number of integers\
    \ and returns the number of positive integers that are less than the sum of the\
    \ positive integers in the list.\n\nExample:\n>>> count_positive([1, 2, 3, -4,\
    \ -5, 6])\n3\n>>> count_positive([-4, -5, -6, -7, -8])\n0\n>>> count_positive([-4,\
    \ -5, -6, -7, -8, 1])\n1\n>>> count_positive([-4, -5, -6, -7, -8, 1, 2, 3])\n\
    2\n>>> count_positive([-4, -5, -6, -7, -8, 1, 2, 3, -4, -5, -6, -7, -8])\n2\n\
    >>> count_positive([-4, -5, -6, -7, -8, 1, 2, 3, -4, -5, -6, -7, -8, 1, 2, 3])\n\
    3\n>>> count_positive([-4, -5, -6, -7, -8, 1, 2, 3, -4, -5, -6, -7, -8, 1, 2,\
    \ 3, -4, -5, -6, -7, -8, 1, 2, 3, -4, -5, -6, -7, -8, 1, 2, 3, -4, -5, -6, -7,\
    \ -8, 1, 2, 3, -4, -5, -6, -7, -8, 1, 2, 3, -4, -5, -6, -7, -8, 1, 2, 3, -4, -5,\
    \ -6, -7, -8, 1, 2, 3, -4, -5, -6, -7, -8, 1, 2, 3, -4, -5, -6, -7, -8, 1, 2,\
    \ 3, -4, -5, -6, -7, -8, 1, 2, 3, -4, -5, -6, -7, -8, 1, 2, 3, -4, -5, -6, -7,\
    \ -8, 1, 2, 3, -4, -5, -6, -7, -8, 1, 2, 3, -4, -5, -6, -7, -8, 1, 2, 3, -4, -5,\
    \ -6, -7, -8, 1, 2, 3, -4, -5, -6, -7, -8, 1, 2, 3, -4, -5, -6, -7, -8, 1, 2,\
    \ 3, -4, -5, -6, -7, -8, 1, 2, 3, -4, -5, -6, -7, -8, 1, 2, 3, -4, -5, -6, -7,\
    \ -8, 1, 2, 3, -4, -5, -6, -7, -8, 1, 2, 3, -4, -5, -6, -7, -8", "    sides =\
    \ [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n\
    \        return round(sum_of_sides, 2)\n    else:\n        return -1\n\n", " \
    \   \n    if a + b > c:\n        return -1\n    elif a + c > b:\n        return\
    \ -1\n    elif b + c > a:\n        return -1\n    else:\n        return round(\
    \ ( (a + b + c) / 2 ), 2)\n\n", "    if a + b > c and b + c > a and c + a > b:\n\
    \        return round(math.sqrt(a * b * c), 2)\n    else:\n        return -1\n\
    \n", "    \n    area_of_triangle = abs(a * b * c) / 2\n    if area_of_triangle\
    \ >= (a + b + c):\n        return round(area_of_triangle, 2)\n    else:\n    \
    \    return -1\n", "    \n    \n    if a + b > c:\n        return -1\n    elif\
    \ b + c > a:\n        return -1\n    elif c + a > b:\n        return -1\n    else:\n\
    \        return round( ( (a + b + c) / 2) ** (1/2) , 2)\n</cell>\n<cell>", " \
    \   sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n\
    \        return round(sum_of_sides, 2)\n    else:\n        return -1\n\n", " \
    \   sides = [a, b, c]\n    sum_of_sides = sum(sides)\n    if sum_of_sides <= sides[2]:\n\
    \        return round(sum_of_sides, 2)\n    else:\n        return -1\n\n", " \
    \   \n    if a + b > c:\n        return -1\n    elif b + c > a:\n        return\
    \ -1\n    elif c + a > b:\n        return -1\n    else:\n        return round(\
    \ ((a + b + c) / 2), 2)\n\n", "    if a + b > c and b + c > a and c + a > b:\n\
    \        return round(math.sqrt(a * b * c), 2)\n    else:\n        return -1\n\
    \n", "    \n    # Write your code here\n    \n    \n    if a + b > c and a + c\
    \ > b and b + c > a:\n        return round( ( (a + b + c) / 2) , 2)\n    else:\n\
    \        return -1\n</cell>\n<cell>"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
