name: HumanEval_128_prod_signs
language: py
prompt: "from typing import List, Optional\n\ndef prod_signs(arr: List[int]) -> Optional[int]:\n\
  \    \"\"\"\n    You are given an array arr of integers and you need to return\n\
  \    sum of magnitudes of integers multiplied by product of all signs\n    of each\
  \ number in the array, represented by 1, -1 or 0.\n    Note: return None for empty\
  \ arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n    >>> prod_signs([0,\
  \ 1])\n    0\n    >>> prod_signs([])\n    None\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 2, -4]) == -9\n    assert\
  \ candidate([0, 1]) == 0\n    assert candidate([1, 1, 1, 2, 3, -1, 1]) == -10\n\
  \    assert candidate([]) == None\n    assert candidate([2, 4, 1, 2, -1, -1, 9])\
  \ == 20\n    assert candidate([-1, 1, -1, 1]) == 4\n    assert candidate([-1, 1,\
  \ 1, 1]) == -4\n    assert candidate([-1, 1, 1, 0]) == 0\n\ndef test_check():\n\
  \    check(prod_signs)\n\ntest_check()\n"
completions: ["    if not arr:\n        return None\n    sign = 1\n    prod = 1\n\
    \    for i in arr:\n        sign *= i\n        prod *= sign\n    return prod\n",
  "    if not arr:\n        return None\n    prod = 1\n    sign = 1\n    for x in\
    \ arr:\n        prod *= x\n        sign *= 1 if x > 0 else -1\n    return sign\
    \ * prod\n\n", "    if not arr:\n        return None\n    prod = 1\n    sign =\
    \ 1\n    for x in arr:\n        prod *= x\n        sign *= 1 if x > 0 else -1\n\
    \    return sign * prod\n", "    if not arr:\n        return None\n    prod =\
    \ 1\n    sign = 1\n    for x in arr:\n        prod *= x\n        sign *= 1 if\
    \ x >= 0 else -1\n    return sign * prod\n", "    if not arr:\n        return\
    \ None\n    prod = 1\n    sign = 1\n    for x in arr:\n        prod *= x\n   \
    \     sign *= -1 if x < 0 else 1\n    return sign * prod\n", "    if not arr:\n\
    \        return None\n    prod = 1\n    sign = 1\n    for x in arr:\n        sign\
    \ *= x\n        prod *= sign\n    return prod\n\n", "    if not arr:\n       \
    \ return None\n    sign = 1\n    prod = 1\n    for x in arr:\n        sign *=\
    \ x\n        prod *= sign\n    return prod\n", "    if not arr:\n        return\
    \ None\n    prod = 1\n    sign = 1\n    for i in arr:\n        if i == 0:\n  \
    \          continue\n        prod *= sign\n        sign = -sign\n    return prod\
    \ * prod_signs(arr[1:])\n\n", "    if not arr:\n        return None\n    sign\
    \ = 1\n    prod = 1\n    for x in arr:\n        if x < 0:\n            sign *=\
    \ -1\n            prod *= -1\n        elif x == 0:\n            sign *= 0\n  \
    \          prod *= 0\n        else:\n            sign *= 1\n            prod *=\
    \ x\n    return sign * prod\n\n", "    if not arr:\n        return None\n\n  \
    \  prod = 1\n    sign = 1\n    for x in arr:\n        prod *= x\n        sign\
    \ *= 1 if x > 0 else -1 if x < 0 else 0\n\n    return prod * sign\n\n", "    if\
    \ not arr:\n        return None\n    prod = 1\n    sign = 1\n    for x in arr:\n\
    \        if x < 0:\n            sign *= -1\n        prod *= sign\n    return prod\n",
  "    if not arr:\n        return None\n    prod = 1\n    sign = 1\n    for x in\
    \ arr:\n        prod *= x\n        if x < 0:\n            sign *= -1\n    return\
    \ sign * prod\n", "    signs: List[int] = []\n    product = 1\n    for num in\
    \ arr:\n        if num > 0:\n            signs.append(1)\n        elif num < 0:\n\
    \            signs.append(-1)\n        else:\n            signs.append(0)\n  \
    \      product *= num\n    return product*sum(signs)\n", "    if not arr:\n  \
    \      return None\n    sign = 1\n    prod = 1\n    for x in arr:\n        if\
    \ x < 0:\n            sign *= -1\n            prod *= -1\n        elif x == 0:\n\
    \            prod *= 0\n        else:\n            prod *= sign\n            sign\
    \ *= -1\n    return prod * sign\n\n", "    if not arr:\n        return None\n\
    \    sign = 1\n    prod = 1\n    for x in arr:\n        sign *= x\n        prod\
    \ *= sign\n    return prod\n", "    if not arr:\n        return None\n    prod\
    \ = 1\n    sign = 1\n    for x in arr:\n        if x < 0:\n            sign *=\
    \ -1\n            prod *= -1\n        elif x == 0:\n            sign *= 0\n  \
    \          prod *= 0\n        else:\n            sign *= -1\n            prod\
    \ *= x\n    return sign * prod * prod_signs(arr[1:])\n", "    if not arr:\n  \
    \      return None\n    prod = 1\n    sign = 1\n    for x in arr:\n        prod\
    \ *= x\n        sign *= 1 if x > 0 else -1 if x < 0 else 0\n    return sign *\
    \ prod\n", "    if not arr:\n        return None\n\n    sign = 1\n    prod = 1\n\
    \    for x in arr:\n        sign *= x\n        prod *= sign\n    return prod\n",
  "    if not arr:\n        return None\n    sign = 1\n    prod = 1\n    for x in\
    \ arr:\n        if x < 0:\n            sign *= -1\n            prod *= -1\n  \
    \      elif x == 0:\n            sign *= 0\n            prod *= 0\n        else:\n\
    \            sign *= 1\n            prod *= x\n    return sign * prod\n\n", " \
    \   if not arr:\n        return None\n    sign = 1\n    prod = 1\n    for x in\
    \ arr:\n        if x < 0:\n            sign *= -1\n            prod *= -1\n  \
    \      elif x == 0:\n            sign *= 0\n            prod *= 0\n        else:\n\
    \            sign *= 1\n            prod *= x\n    return sign * prod\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
