name: HumanEval_78_hex_key
language: py
prompt: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a\
  \ function that receives \n    a hexadecimal number as a string and counts the number\
  \ of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural\
  \ number \n    greater than 1 that is not a product of two smaller natural numbers).\n\
  \    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n  \
  \  Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a\
  \ number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal\
  \ 13).\n    Note: you may assume the input is always correct or empty string, \n\
  \    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n\
  \    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n  \
  \  >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\
  \"\"\n"
tests: "def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
  \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n\
  \    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
  \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
completions: ["    \n    digits = num.upper()\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    count = 0\n    \n    for digit in digits:\n        if digit in prime_digits:\n\
    \            count += 1\n    \n    return count\n\n", "    \n    digits = [int(i)\
    \ for i in num.upper() if i.isdigit()]\n    \n    primes = []\n    \n    for digit\
    \ in digits:\n        if digit in primes:\n            continue\n        \n  \
    \      primes.append(digit)\n        \n        if digit % 2 == 0:\n          \
    \  primes.append(digit + 1)\n            \n        if digit % 3 == 0:\n      \
    \      primes.append(digit + 2)\n            \n        if digit % 5 == 0:\n  \
    \          primes.append(digit + 3)\n            \n        if digit % 7 == 0:\n\
    \            primes.append(digit + 5)\n            \n        if digit % 11 ==\
    \ 0:\n            primes.append(digit + 7)\n            \n        if digit % 13\
    \ == 0:\n            primes.append(digit + 11)\n            \n    return len(primes)\n\
    \n", "    \n    count = 0\n    \n    # convert string to int and check whether\
    \ it is a hexadecimal number\n    try:\n        int(num, 16)\n    except ValueError:\n\
    \        return 0\n    \n    # check whether it is a hexadecimal number\n    if\
    \ num.isdigit():\n        \n        # convert string to int and check whether\
    \ it is a hexadecimal number\n        try:\n            int(num, 16)\n       \
    \ except ValueError:\n            return 0\n        \n        # check whether\
    \ it is a hexadecimal number\n        if num.isdigit():\n            \n      \
    \      # convert string to int and check whether it is a hexadecimal number\n\
    \            try:\n                int(num, 16)\n            except ValueError:\n\
    \                return 0\n            \n            # check whether it is a hexadecimal\
    \ number\n            if num.isdigit():\n                \n                # convert\
    \ string to int and check whether it is a hexadecimal number\n               \
    \ try:\n                    int(num, 16)\n                except ValueError:\n\
    \                    return 0\n                \n                # check whether\
    \ it is a hexadecimal number\n                if num.isdigit():\n            \
    \        \n                    # convert string to int and check whether it is\
    \ a hexadecimal number\n                    try:\n                        int(num,\
    \ 16)\n                    except ValueError:\n                        return\
    \ 0\n                    \n                    # check whether it is a hexadecimal\
    \ number\n                    if num.isdigit():\n                        \n  \
    \                      # convert string to int and check whether it is a hexadecimal\
    \ number\n                        try:\n                            int(num, 16)\n\
    \                        except ValueError:\n                            return\
    \ 0\n                        \n                        # check whether it is a\
    \ hexadecimal number\n                        if num.isdigit():\n            \
    \                \n                            # convert string to int and check\
    \ whether it is a hexadecimal number\n                            try:\n     \
    \                           int(num, 16)\n                            except ValueError:\n\
    \                                return 0\n                            \n    \
    \                        # check whether it is a hexadecimal number\n        \
    \                    if num.isdigit():\n                                \n   \
    \                             # convert string to int and check whether it is\
    \ a hexadecimal number\n                                try:\n               \
    \                     int(num, 16)\n                                except ValueError:\n\
    \                                    return 0\n                              \
    \  \n                                # check whether it is a hexadecimal number\n\
    \                                if num.isdigit():\n                         \
    \           \n                                    # convert string to int and\
    \ check whether it is a hexadecimal number\n                                 \
    \   try:\n                                        int(num, 16)\n             \
    \                       except ValueError:\n                                 \
    \       return 0\n                                    \n                     \
    \               # check whether it is a hexadecimal number\n                 \
    \                   if num.isdigit():\n                                      \
    \  \n                                        # convert string to int and check\
    \ whether it is a hexadecimal number\n                                       \
    \ try:\n                                            int(num, 16)\n           \
    \                             except ValueError:\n                           \
    \                 return 0\n                                        \n       \
    \                                 # check whether it is a hexadecimal number\n\
    \                                        if num.isdigit():\n                 \
    \                           \n                                            # convert\
    \ string to int and check whether it is a hexadecimal number\n               \
    \                             try:\n                                         \
    \       int(num, 16)\n                                            except ValueError:\n\
    \                                                return 0\n                  \
    \                          \n                                            # check\
    \ whether it is a hexadecimal ", "    \n    hex_key = 0\n    \n    hex_key = int(num,\
    \ 16)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n\
    \    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n  \
    \  \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n\
    \    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n  \
    \  hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key\
    \ = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key =\
    \ int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n\
    \    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n  \
    \  \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n\
    \    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n  \
    \  hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key\
    \ = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key =\
    \ int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n\
    \    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n  \
    \  \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n\
    \    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n  \
    \  hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key\
    \ = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key =\
    \ int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n\
    \    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n  \
    \  \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    ",
  "    \n    digits = num.upper()\n    \n    count = 0\n    \n    for digit in digits:\n\
    \        if digit == 'A':\n            count += 2\n        elif digit == 'B':\n\
    \            count += 1\n        elif digit == 'C':\n            count += 3\n\
    \        elif digit == 'D':\n            count += 5\n        elif digit == 'E':\n\
    \            count += 7\n        elif digit == 'F':\n            count += 11\n\
    \        else:\n            count += 1\n            \n    return count\n\n", " \
    \   \n    hex_key = ''\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    hex_key = 0\n    \n    hex_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\
    \ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\
    \ 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,\
    \ 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    \n    hex_digits_upper\
    \ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99]\n    \n    hex_digits_lower = [10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,\
    \ 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,\
    \ 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,\
    \ 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,\
    \ 95, 96, 97, 98, 99]\n    \n    hex_digits_upper = [0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, ", "    \n    hex_key\
    \ = int(num, 16)\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    prime_digits_hex\
    \ = [hex(digit) for digit in prime_digits]\n    \n    prime_digits_hex = [int(digit,\
    \ 16) for digit in prime_digits_hex]\n    \n    prime_digits_hex = [digit for\
    \ digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex = [digit\
    \ for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex =\
    \ [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit ", "    \n    digits = num.upper()\n    \n    count = 0\n\
    \    \n    for digit in digits:\n        if digit in 'ABCDEF':\n            count\
    \ += 1\n            \n    return count\n\n", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    hex_list = list(hex_key)\n    hex_list.sort()\n\
    \    \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    ", "    \n    hex_key = int(num, 16)\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set =\
    \ prime_digits_set.union(set(range(10, hex_key)))\n    \n    prime_digits_set\
    \ = prime_digits_set.union(set(range(hex_key//10, hex_key//100)))\n    \n    prime_digits_set\
    \ = prime_digits_set.union(set(range(hex_key//100, hex_key//1000)))\n    \n  \
    \  prime_digits_set = prime_digits_set.union(set(range(hex_key//1000, hex_key//10000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10000,\
    \ hex_key//100000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//100000,\
    \ hex_key//1000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//1000000,\
    \ hex_key//10000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10000000,\
    \ hex_key//100000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//100000000,\
    \ hex_key//1000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//1000000000,\
    \ hex_key//10000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10000000000,\
    \ hex_key//100000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//100000000000,\
    \ hex_key//1000000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//1000000000000,\
    \ hex_key//10000000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10000000000000,\
    \ hex_key//100000000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//100000000000000,\
    \ hex_key//1000000000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//1000000000000000,\
    \ hex_key//10000000000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10000000000000000",
  "    \n    count = 0\n    \n    # Your code here\n    \n    return count\n\n", " \
    \   \n    hex_list = list(hex_key)\n    hex_list.sort()\n    \n    hex_key = ''.join(hex_list)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n", "    \n    hex_key = ''\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num", "    \n    hex_key = 0\n    \n   \
    \ hex_key = int(num, 16)\n    \n    hex_digits = [hex_key%10, hex_key//10]\n \
    \   \n    hex_digits_prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n", "    \n    hex_key = 0\n    \n    # Your code here\n    \n    return\
    \ hex_key\n", "    \n    count = 0\n    \n    # your code here\n    \n    return\
    \ count\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n</cell>\n\
    <cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n</cell>\n\
    <cell>\nhex_key('2020')\n</cell>\n<text>\nExercise 2\nWrite a function that receives\
    \ a positive integer and returns the sum of the squares of the digits of that\
    \ integer.\nExamples:\n>>> square_digits(123)\n25\n>>> square_digits(123)\n25\n\
    >>> square_digits(0)\n0\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    hex_key = ''\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n  \
    \  hex_key = ''.join([hex_key,'A','B','C','D','E','F'])\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join([hex_key,'0','1','2','3','4','5','6','7','8','9'])\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n  \
    \  hex_key = ''.join([hex_key,'A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9'])\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n  \
    \  hex_key = ''.join([hex_key,'A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'])\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n  \
    \  hex_key = ''.join([hex_key,'A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','0','1','2','3','4','5','6','7",
  "    \n    hex_key = ''\n    \n    # your code here\n    \n    return int(hex_key,\
    \ 16)\n</cell>\n<cell>", "    \n    hex_key = 0\n    \n    hex_key = 0\n    \n\
    \    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    ", "    \n    hex_key = ''\n    \n    # Your code here\n \
    \   \n    return hex_key\n\n", "    \n    hex_key = ''\n    \n    hex_key = int(num,\
    \ 16)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n \
    \   \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    hex_list = list(num)\n    hex_list.sort()\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    count = 0\n    \n    for digit in hex_list:\n        if digit in prime_digits:\n\
    \            count += 1\n    \n    return count\n</cell>\n<cell>", "    \n   \
    \ hexadecimal = num.upper()\n    \n    hexadecimal_digits = [int(hexadecimal[i:i+2],\
    \ 16) for i in range(0, len(hexadecimal), 2)]\n    \n    prime_digits = [2, 3]\n\
    \    \n    prime_digits_count = 0\n    \n    for digit in hexadecimal_digits:\n\
    \        if digit in prime_digits:\n            prime_digits_count += 1\n    \
    \    else:\n            prime_digits.append(digit)\n    \n    return prime_digits_count\n\
    \n", "    \n    hexadecimal = num.upper()\n    hexadecimal_digits = [int(hexadecimal[i:i+2],\
    \ 16) for i in range(0, len(hexadecimal), 2)]\n    prime_digits = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]\n    \n    prime_digits_count = 0\n    for digit in hexadecimal_digits:\n\
    \        if digit in prime_digits:\n            prime_digits_count += 1\n    \
    \        \n    return prime_digits_count\n\n", "    \n    hex_key = ''\n    \n\
    \    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for\
    \ i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for\
    \ i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for\
    \ i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    hex_key = int(num, 16)\n    \n    count = 0\n    \n\
    \    while hex_key > 0:\n        hex_key = hex_key//16\n        count += 1\n \
    \       \n    return count\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\n\
    hex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n\
    </cell>\n<cell>\nhex_key('2020')\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that receives a positive integer and returns the number of \ntimes it appears\
    \ in the given string.\nExamples:\n>>> count_times('ABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCDABCD",
  "    \n    hex_key = 0\n    \n    # Your code here\n    \n    return hex_key\n</cell>\n\
    <cell>", "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    hex_list.reverse()\n\
    \    \n    hex_list2 = []\n    \n    for x in hex_list:\n        if x not in hex_list2:\n\
    \            hex_list2.append(x)\n    \n    hex_list2.sort()\n    \n    hex_list2.reverse()\n\
    \    \n    hex_list3 = []\n    \n    for x in hex_list2:\n        if x not in\
    \ hex_list3:\n            hex_list3.append(x)\n    \n    hex_list3.sort()\n  \
    \  \n    hex_list3.reverse()\n    \n    hex_list4 = []\n    \n    for x in hex_list3:\n\
    \        if x not in hex_list4:\n            hex_list4.append(x)\n    \n    hex_list4.sort()\n\
    \    \n    hex_list4.reverse()\n    \n    hex_list5 = []\n    \n    for x in hex_list4:\n\
    \        if x not in hex_list5:\n            hex_list5.append(x)\n    \n    hex_list5.sort()\n\
    \    \n    hex_list5.reverse()\n    \n    hex_list6 = []\n    \n    for x in hex_list5:\n\
    \        if x not in hex_list6:\n            hex_list6.append(x)\n    \n    hex_list6.sort()\n\
    \    \n    hex_list6.reverse()\n    \n    hex_list7 = []\n    \n    for x in hex_list6:\n\
    \        if x not in hex_list7:\n            hex_list7.append(x)\n    \n    hex_list7.sort()\n\
    \    \n    hex_list7.reverse()\n    \n    hex_list8 = []\n    \n    for x in hex_list7:\n\
    \        if x not in hex_list8:\n            hex_list8.append(x)\n    \n    hex_list8.sort()\n\
    \    \n    hex_list8.reverse()\n    \n    hex_list9 = []\n    \n    for x in hex_list8:\n\
    \        if x not in hex_list9:\n            hex_list9.append(x)\n    \n    hex_list9.sort()\n\
    \    \n    hex_list9.reverse()\n    \n    hex_list10 = []\n    \n    for x in\
    \ hex_list9:\n        if x not in hex_list10:\n            hex_list10.append(x)\n\
    \    \n    hex_list10.sort()\n    \n    hex_list10.reverse()\n    \n    hex_list11\
    \ = []\n    \n    for x in hex_list10:\n        if x not in hex_list11:\n    \
    \        hex_list11.append(x)\n    \n    hex_list11.sort()\n    \n    hex_list11.reverse()\n\
    \    \n    hex_list12 = []\n    \n    for x in hex_list11:\n        if x not in\
    \ hex_list12:", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    hex_key = ''\n    \n    hex_key = ''.join([hex_key,num])\n    \n   \
    \ hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key\
    \ = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key =\
    \ int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n  \
    \  \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n\
    \    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n  \
    \  hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key\
    \ = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key =\
    \ int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n  \
    \  \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n\
    \    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n  \
    \  hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key\
    \ = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key =\
    \ int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n\
    \    \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n  \
    \  \n    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n\
    \    hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n  \
    \  hex_key = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key\
    \ = int(hex_key,16)\n    \n    hex_key = int(hex_key,16)\n    \n    hex_key =\
    \ int(hex_key,16)\n    \n    hex_key = int(hex_key", "    \n    hex_key = ''\n\
    \    \n    hex_digits = [int(i) for i in hex_key]\n    \n    hex_digits_set =\
    \ set(hex_digits)\n    \n    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29,\
    \ 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    prime_digits_set\
    \ = set(prime_digits)\n    \n    prime_digits_set = prime_digits_set.difference(hex_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.difference(prime_digits_set)\n\
    \    \n    prime_digits_", "    \n    hex_key = 0\n    \n    # Your code here\n\
    \    \n    return hex_key\n", "    \n    count = 0\n    \n    hex_list = list(num)\n\
    \    \n    for char in hex_list:\n        if char == 'A':\n            hex_list.remove('A')\n\
    \            hex_list.remove('a')\n        elif char == 'B':\n            hex_list.remove('B')\n\
    \            hex_list.remove('b')\n        elif char == 'C':\n            hex_list.remove('C')\n\
    \            hex_list.remove('c')\n        elif char == 'D':\n            hex_list.remove('D')\n\
    \            hex_list.remove('d')\n        elif char == 'E':\n            hex_list.remove('E')\n\
    \            hex_list.remove('e')\n        elif char == 'F':\n            hex_list.remove('F')\n\
    \            hex_list.remove('f')\n        elif char == '0':\n            hex_list.remove('0')\n\
    \        elif char == '1':\n            hex_list.remove('1')\n        elif char\
    \ == '2':\n            hex_list.remove('2')\n        elif char == '3':\n     \
    \       hex_list.remove('3')\n        elif char == '4':\n            hex_list.remove('4')\n\
    \        elif char == '5':\n            hex_list.remove('5')\n        elif char\
    \ == '6':\n            hex_list.remove('6')\n        elif char == '7':\n     \
    \       hex_list.remove('7')\n        elif char == '8':\n            hex_list.remove('8')\n\
    \        elif char == '9':\n            hex_list.remove('9')\n        elif char\
    \ == 'a':\n            hex_list.remove('a')\n        elif char == 'b':\n     \
    \       hex_list.remove('b')\n        elif char == 'c':\n            hex_list.remove('c')\n\
    \        elif char == 'd':\n            hex_list.remove('d')\n        elif char\
    \ == 'e':\n            hex_list.remove('e')\n        elif char == 'f':\n     \
    \       hex_list.remove('f')\n        elif char == 'A':\n            hex_list.remove('A')\n\
    \        elif char == 'B':\n            hex_list.remove('B')\n        elif char\
    \ == 'C':\n            hex_list.remove('C')\n        elif char == 'D':\n     \
    \       hex_list.remove('D')\n        elif char == 'E':\n            hex_list.remove('E')\n\
    \        elif char == 'F':\n            hex_list.remove('F')\n        elif char\
    \ == '0':\n            hex_list.remove('0')\n        elif char == '1':\n     \
    \       hex_list.remove('1')\n        elif char == '2':\n            hex_list.remove('2')\n\
    \        elif char == '3':\n            hex_list.remove('3')\n        elif char\
    \ == '4':\n            hex_list.remove('4')\n        elif char == '5':\n     \
    \       hex_list.remove('", "    \n    count = 0\n    \n    # your code here\n\
    \    \n    return count\n\n", "    \n    hex_list = list(num)\n    hex_list.sort()\n\
    \    \n    hex_list.reverse()\n    \n    hex_list2 = []\n    \n    count = 0\n\
    \    \n    for x in hex_list:\n        if x not in hex_list2:\n            hex_list2.append(x)\n\
    \            count += 1\n    \n    return count\n\n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    hex_key = ''\n    \n    hex_digits\
    \ = [int(i) for i in hex_key]\n    \n    hex_digits_set = set(hex_digits)\n  \
    \  \n    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    prime_digits_set = set(prime_digits)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(hex_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(prime_digits_set)\n\
    \    \n    prime_digits_", "    \n    digits = [int(i) for i in num.upper() if\
    \ i.isdigit()]\n    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    count = 0\n \
    \   \n    for digit in digits:\n        if digit in primes:\n            count\
    \ += 1\n    \n    return count\n\n", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    count = 0\n    \n    for digit in hex_list:\n        if digit in prime_digits:\n\
    \            count += 1\n            \n    return count\n</cell>\n<cell>\nhex_key('AB')\n\
    </cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n\
    <cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that receives a positive integer and returns\
    \ the number of \nthe digits that are not prime numbers.\nExamples:\n>>> count_digits(12345)\n\
    4\n>>> count_digits(-12345)\n4\n>>> count_digits(0)\n0\n>>> count_digits(1)\n\
    1\n>>> count_digits(123)\n3\n>>> count_digits(-123)\n3\n>>> count_digits(1235)\n\
    5\n>>> count_digits(-1235)\n5\n>>> count_digits(12356)\n6\n>>> count_digits(-12356)\n\
    6\n>>> count_digits(123561)\n7\n>>> count_digits(-123561)\n7\n>>> count_digits(12356123)\n\
    8\n>>> count_digits(-12356123)\n8\n>>> count_digits(123561235)\n9\n>>> count_digits(-123561235)\n\
    9\n>>> count_digits(12356123561235)\n10\n>>> count_digits(-12356123561235)\n10\n\
    >>> count_digits(1235612356123567)\n11\n>>> count_digits(-1235612356123567)\n\
    11\n>>> count_digits(12356123561235678)\n12\n>>> count_digits(-12356123561235678)\n\
    12\n>>> count_digits(123561235612356789)\n13\n>>> count_digits(-123561235612356789)\n\
    13\n>>> count_digits(1235612356123567890)\n14\n>>> count_digits(-1235612356123567890)\n\
    14\n>>> count_digits(12356123561235", "    \n    hexadecimal = num.upper()\n \
    \   \n    hexadecimal_length = len(hexadecimal)\n    \n    prime_numbers = []\n\
    \    \n    for index in range(hexadecimal_length):\n        \n        digit =\
    \ hexadecimal[index]\n        \n        if digit == 'A' or digit == 'B':\n   \
    \         \n            prime_numbers.append(2)\n            \n        elif digit\
    \ == 'C' or digit == 'D':\n            \n            prime_numbers.append(3)\n\
    \            \n        elif digit == 'E' or digit == 'F':\n            \n    \
    \        prime_numbers.append(5)\n            \n        else:\n            \n\
    \            prime_numbers.append(7)\n            \n    prime_numbers_length =\
    \ len(prime_numbers)\n    \n    prime_numbers_sum = 0\n    \n    for index in\
    \ range(prime_numbers_length):\n        \n        prime_numbers_sum += prime_numbers[index]\n\
    \        \n    if prime_numbers_sum % 10 == 0:\n        \n        return prime_numbers_length\n\
    \    \n    else:\n        \n        return 0\n    ", "    \n    hex_key = int(num,\
    \ 16)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n \
    \   \n    hex_key = list(filter(lambda x: x not in '0123456789ABCDEF', hex_key))\n\
    \    \n    hex_key = list(filter(lambda x: x not in 'ABCDEF', hex_key))\n    \n\
    \    hex_key = list(filter(lambda x: x not in 'BCD', hex_key))\n    \n    hex_key\
    \ = list(filter(lambda x: x not in '0', hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x not in '', hex_key))\n    \n    hex_key = list(filter(lambda x: x not in\
    \ 'A', hex_key))\n    \n    hex_key = list(filter(lambda x: x not in 'B', hex_key))\n\
    \    \n    hex_key = list(filter(lambda x: x not in 'C', hex_key))\n    \n   \
    \ hex_key = list(filter(lambda x: x not in 'D', hex_key))\n    \n    hex_key =\
    \ list(filter(lambda x: x not in 'E', hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x not in 'F', hex_key))\n    \n    hex_key = list(filter(lambda x: x not\
    \ in 'G', hex_key))\n    \n    hex_key = list(filter(lambda x: x not in 'H', hex_key))\n\
    \    \n    hex_key = list(filter(lambda x: x not in 'I', hex_key))\n    \n   \
    \ hex_key = list(filter(lambda x: x not in 'J', hex_key))\n    \n    hex_key =\
    \ list(filter(lambda x: x not in 'K', hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x not in 'L', hex_key))\n    \n    hex_key = list(filter(lambda x: x not\
    \ in 'M', hex_key))\n    \n    hex_key = list(filter(lambda x: x not in 'N', hex_key))\n\
    \    \n    hex_key = list(filter(lambda x: x not in 'O', hex_key))\n    \n   \
    \ hex_key = list(filter(lambda x: x not in 'P', hex_key))\n    \n    hex_key =\
    \ list(filter(lambda x: x not in 'Q', hex_key))\n    \n    hex_key = list(filter(lambda\
    \ x: x not in 'R', hex_key))\n    \n    hex_key = list(filter(lambda x: x not\
    \ in 'S', hex_key))\n    \n    hex_key = list(filter(lambda x: x not in 'T', hex_key))\n\
    \    \n    hex_key = list(filter(lambda x: x not in 'U', hex_key))\n    \n   \
    \ hex_key = list(filter(lambda x: x not in 'V', hex_key))\n    \n    hex_key =\
    \ list(filter(lambda x: x not in 'W', hex_key))\n    \n    hex_key = list(", " \
    \   \n    hex_list = list(num)\n    hex_list.sort()\n    \n    hex_list.reverse()\n\
    \    \n    hex_list = ['A','B','C','D','E','F']\n    \n    count = 0\n    \n \
    \   for hex in hex_list:\n        if hex in hex_list:\n            count += 1\n\
    \            \n    return count\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\n\
    hex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n\
    </cell>\n<cell>\nhex_key('2020')\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that receives a string and returns the number of characters that are not letters\
    \ or digits.\nExamples:\n>>> count_not_letters('ABCD')\n3\n>>> count_not_letters('ABCD1234')\n\
    5\n>>> count_not_letters('ABCD1234ABCD')\n7\n>>> count_not_letters('ABCD1234ABCD1234ABCD')\n\
    9\n>>> count_not_letters('ABCD1234ABCD1234ABCD1234ABCD')\n11\n>>> count_not_letters('ABCD1234ABCD1234ABCD1234ABCD1234ABCD')\n\
    13\n>>> count_not_letters('ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD')\n15\n\
    >>> count_not_letters('ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD')\n\
    17\n>>> count_not_letters('ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234ABCD1234",
  "    \n    hex_key = int(num, 16)\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    count = 0\n    \n    for digit in hex_key:\n        if digit in prime_digits:\n\
    \            count += 1\n            \n    return count\n\n", "    hex_key = ''\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key  in num])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key  in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key  in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key  in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key  in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key  in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key  in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key  in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key  in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key  in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key  in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key  in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key  in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key  in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key  in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.", "    \n    hex_list = list(hex_key)\n\
    \    hex_list.sort()\n    \n    prime_digits = [2, 3, 5, 7, 11, 13, 17]\n    \n\
    \    count = 0\n    \n    for digit in hex_list:\n        if digit in prime_digits:\n\
    \            count += 1\n            \n    return count\n\n", "    hex_list =\
    \ list(num)\n    hex_list.sort()\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    hex_key = 0\n    \n    # Your code here\n    \n    return hex_key\n", "   \
    \ \n    hex_key = ''\n    \n    hex_digits = [int(i) for i in hex_key]\n    \n\
    \    prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    prime_digits_set = set(prime_digits)\n\
    \    \n    hex_digits_set = set(hex_digits)\n    \n    prime_digits_set = set(prime_digits)\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set =\
    \ set(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n    \n  \
    \  prime_digits_set = set(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set =\
    \ set(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n    \n  \
    \  prime_digits_set = set(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set =\
    \ set(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n    \n  \
    \  prime_digits_set = set(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set =\
    \ set(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n    \n  \
    \  prime_digits_set = set(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set =\
    \ set(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n    \n  \
    \  prime_digits_set = set(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set =\
    \ set(prime_digits)\n    \n    prime_digits_set = set(prime_digits)\n    \n  \
    \  prime_digits_set = set(prime_digits)\n    \n    prime_digit", "    \n    hex_list\
    \ = list(num)\n    hex_list.sort()\n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    count = 0\n    \n    for digit in hex_list:\n        if digit in prime_digits:\n\
    \            count += 1\n    \n    return count\n</cell>\n<cell>\nhex_key('AB')\n\
    </cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n\
    <cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that receives a positive integer and returns\
    \ the sum of the squares of the digits of that number.\nExamples:\n>>> square_digits(123)\n\
    25\n>>> square_digits(125)\n125\n>>> square_digits(126)\n126\n>>> square_digits(127)\n\
    127\n>>> square_digits(128)\n128\n>>> square_digits(129)\n129\n>>> square_digits(0)\n\
    0\n>>> square_digits(-1)\n-1\n>>> square_digits(-2)\n-2\n>>> square_digits(-3)\n\
    -3\n>>> square_digits(-4)\n-4\n>>> square_digits(-5)\n-5\n>>> square_digits(-6)\n\
    -6\n>>> square_digits(-7)\n-7\n>>> square_digits(-8)\n-8\n>>> square_digits(-9)\n\
    -9\n>>> square_digits(10)\n10\n>>> square_digits(-10)\n-10\n>>> square_digits(-100)\n\
    -100\n>>> square_digits(-1000)\n-1000\n>>> square_digits(-10000)\n-10000\n>>>\
    \ square_digits(-100000)\n-100000\n>>> square_digits(-1000000)\n-10000000\n>>>\
    \ square_digits(-10000000)\n-100000000\n>>> square_digits(-100000000)\n-1000000000\n\
    >>> square_digits(-1000000000)\n-10000000000\n>>> square_digits(-10000000000)\n\
    -100000000000\n>>> square_digits(-100000000000)\n-1000000000000\n>>> square_digits(-1000000000000)\n\
    -10000000000000\n>>> square_digits(-1000000000000", "    \n    hex_key = ''\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] in '0123456789ABCDEF']\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] not in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n    \n  \
    \  hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] not in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n    \n  \
    \  hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] not in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n    \n  \
    \  hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] not in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n    \n  \
    \  hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n\
    \    \n    hex_key = [hex_key[i] for i in range(len(hex_key)) if hex_key[i] not\
    \ in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for i in range(len(hex_key))\
    \ if hex_key[i] not in '0123456789ABCDEF']\n    \n    hex_key = [hex_key[i] for\
    \ i in range(len(hex_key)) if hex_key[i] not in '0123456789ABCDEF']\n    \n  \
    \  hex_key = [", "    \n    hex_key = int(num, 16)\n    \n    prime_digits = [2,\
    \ 3]\n    \n    prime_digits_count = 0\n    \n    for digit in hex_key:\n    \
    \    if digit in prime_digits:\n            prime_digits_count += 1\n        \
    \    prime_digits.append(digit)\n            \n    return prime_digits_count\n\
    \n", "    \n    hex_key = 0\n    \n    hex_digits = [int(i) for i in list(num)]\n\
    \    \n    for digit in hex_digits:\n        if digit in [2, 5, 7]:\n        \
    \    hex_key += 1\n        elif digit in [11, 13]:\n            hex_key += 2\n\
    \        else:\n            hex_key += 3\n    \n    return hex_key\n</cell>\n\
    <cell>", "    \n    digits = num.upper()\n    \n    primes = []\n    \n    for\
    \ digit in digits:\n        if digit == 'A' or digit == 'B':\n            primes.append(2)\n\
    \        elif digit == 'C' or digit == 'D':\n            primes.append(3)\n  \
    \      elif digit == 'E' or digit == 'F':\n            primes.append(5)\n    \
    \    else:\n            primes.append(7)\n    \n    primes_count = 0\n    \n \
    \   for prime in primes:\n        if digit % prime == 0:\n            primes_count\
    \ += 1\n    \n    return primes_count\n\n", "    \n    hex_key = 0\n    \n   \
    \ # Your code here\n    \n    return hex_key\n</cell>\n<cell>", "    \n    hex_key\
    \ = 0\n    \n    hex_digits = ''\n    \n    for char in num:\n        hex_digits\
    \ += char\n    \n    hex_digits = hex_digits.upper()\n    \n    hex_digits_len\
    \ = len(hex_digits)\n    \n    if hex_digits_len % 2 == 0:\n        hex_digits_len\
    \ += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n \
    \   hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n \
    \   hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n \
    \   hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n \
    \   hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n \
    \   hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n \
    \   hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n \
    \   hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n \
    \   hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n \
    \   hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len\
    \ += 1\n    \n    hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n \
    \   hex_digits_len += 1\n    \n    hex_digits_len += 1\n    \n    hex_", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    count = 0\n    \n    hex_digits\
    \ = [int(i) for i in num.upper() if i.isdigit()]\n    \n    for digit in hex_digits:\n\
    \        if digit % 2 == 0:\n            count += 1\n            \n    return\
    \ count\n\n", "    \n    hex_key = int(num, 16)\n    \n    count = 0\n    \n \
    \   while hex_key > 0:\n        hex_key //= 16\n        count += 1\n    \n   \
    \ return count\n\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    hex_key = 0\n    hex_key = int(num, 16)\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key ",
  "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()\n\
    \    \n    hex_list.sort()\n    \n    hex_list.sort()\n    \n    hex_list.sort()",
  "    \n    hex_list = list(hex_key)\n    hex_list.sort()\n    \n    hex_list2 =\
    \ []\n    \n    for x in hex_list:\n        if x not in hex_list2:\n         \
    \   hex_list2.append(x)\n    \n    hex_list2.sort()\n    \n    hex_list3 = []\n\
    \    \n    for x in hex_list2:\n        if x not in hex_list3:\n            hex_list3.append(x)\n\
    \    \n    hex_list3.sort()\n    \n    hex_list4 = []\n    \n    for x in hex_list3:\n\
    \        if x not in hex_list4:\n            hex_list4.append(x)\n    \n    hex_list4.sort()\n\
    \    \n    hex_list5 = []\n    \n    for x in hex_list4:\n        if x not in\
    \ hex_list5:\n            hex_list5.append(x)\n    \n    hex_list5.sort()\n  \
    \  \n    hex_list6 = []\n    \n    for x in hex_list5:\n        if x not in hex_list6:\n\
    \            hex_list6.append(x)\n    \n    hex_list6.sort()\n    \n    hex_list7\
    \ = []\n    \n    for x in hex_list6:\n        if x not in hex_list7:\n      \
    \      hex_list7.append(x)\n    \n    hex_list7.sort()\n    \n    hex_list8 =\
    \ []\n    \n    for x in hex_list7:\n        if x not in hex_list8:\n        \
    \    hex_list8.append(x)\n    \n    hex_list8.sort()\n    \n    hex_list9 = []\n\
    \    \n    for x in hex_list8:\n        if x not in hex_list9:\n            hex_list9.append(x)\n\
    \    \n    hex_list9.sort()\n    \n    hex_list10 = []\n    \n    for x in hex_list9:\n\
    \        if x not in hex_list10:\n            hex_list10.append(x)\n    \n   \
    \ hex_list10.sort()\n    \n    hex_list11 = []\n    \n    for x in hex_list10:\n\
    \        if x not in hex_list11:\n            hex_list11.append(x)\n    \n   \
    \ hex_list11.sort()\n    \n    hex_list12 = []\n    \n    for x in hex_list11:\n\
    \        if x not in hex_list12:\n            hex_list12.append(x)\n    \n   \
    \ hex_list12.sort()\n    \n    hex_list13 = []\n    \n    for x in hex_list12:\n\
    \        if x not in hex_list13:\n            hex_list13.append(x)\n    \n   \
    \ hex_list13.sort()\n    \n    hex_list14 = []\n    \n    for x in hex_list13:\n\
    \        if x not in hex_list14:\n            hex_list14.append(x)\n    \n   \
    \ hex_list14.sort()\n    \n    hex_list", "    \n    hex_key = ''\n    \n    #\
    \ Your code here\n    \n    return len(hex_key)\n\n", "    \n    digits = [int(i)\
    \ for i in num.upper() if i in '0123456789ABCDEF']\n    \n    primes = [2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97]\n    \n    count = 0\n    \n    for digit in digits:\n        if\
    \ digit in primes:\n            count += 1\n    \n    return count\n\n", "   \
    \ \n    count = 0\n    \n    digits = [int(i) for i in num.upper() if i.isdigit()]\n\
    \    \n    \n    for digit in digits:\n        if digit % 2 == 0:\n          \
    \  count += 1\n            \n        if digit % 3 == 0:\n            count +=\
    \ 1\n            \n        if digit % 5 == 0:\n            count += 1\n      \
    \      \n        if digit % 7 == 0:\n            count += 1\n            \n  \
    \      if digit % 11 == 0:\n            count += 1\n            \n        if digit\
    \ % 13 == 0:\n            count += 1\n            \n    return count\n</cell>\n\
    <cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n\
    </cell>\n<cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that receives a positive integer\
    \ and returns the number of \ntimes it appears in the Fibonacci sequence. \nThe\
    \ Fibonacci sequence is defined by the recurrence relation:\n$$Fn = F{n-1} + F_{n-2}$$\n\
    where $F_0 = 0$ and $F_1 = 1$. \nThe Fibonacci sequence is defined by:\n$$Fn =\
    \ F{n-1} + F_{n-2}$$\nwhere $F_0 = 0$ and $F_1 = 1$. \nThe Fibonacci sequence\
    \ is defined by:\n$$Fn = F{n-1} + F_{n-2}$$\nwhere $F_0 = 0$ and $F_1 = 1$. \n\
    The Fibonacci sequence is defined by:\n$$Fn = F{n-1} + F_{n-2}$$\nwhere $F_0 =\
    \ 0$ and $F_1 = 1$. \nThe Fibonacci sequence is defined by:\n$$Fn = F{n-1} + F_{n-2}$$\n\
    where $F_0 = 0$ and $F_1 = 1$. \nThe Fibonacci sequence is defined by:\n$$Fn =\
    \ F{n-1} + F_{n-2}$$\nwhere $F_0 = 0$ and $F_1 = 1$. \nThe Fibonacci sequence\
    \ is defined by:\n$$Fn = F{n-1} + F_{n-2}$$\nwhere $F_0 = 0$ and $F_1 = 1$. \n\
    The Fibonacci sequence is defined ", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    hex_key = ''\n    \n    hex_key = ''.join([hex_key.upper(),\
    \ num])\n    \n    hex_key = int(hex_key, 16)\n    \n    hex_digits = [hex_key%10,\
    \ hex_key//10]\n    \n    hex_digits_prime = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    hex_digits_prime\
    \ = [hex_key%10 for hex_key in hex_digits_prime]\n    \n    hex_digits_prime =\
    \ [hex_key//10 for hex_key in hex_digits_prime]\n    \n    hex_digits_prime =\
    \ [hex_key%10 for hex_key in hex_digits_prime]\n    \n    hex_digits_prime = [hex_key//10\
    \ for hex_key in hex_digits_prime]\n    \n    hex_digits_prime = [hex_key%10 for\
    \ hex_key in hex_digits_prime]\n    \n    hex_digits_prime = [hex_key//10 for\
    \ hex_key in hex_digits_prime]\n    \n    hex_digits_prime = [hex_key%10 for hex_key\
    \ in hex_digits_prime]\n    \n    hex_digits_prime = [hex_key//10 for hex_key\
    \ in hex_digits_prime]\n    \n    hex_digits_prime = [hex_key%10 for hex_key in\
    \ hex_digits_prime]\n    \n    hex_digits_prime = [hex_key//10 for hex_key in\
    \ hex_digits_prime]\n    \n    hex_digits_prime = [hex_key%10 for hex_key in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key in hex_digits_prime]\n \
    \   \n    hex_digits_prime = [hex_key//10 for hex_key in hex_digits_prime]\n \
    \   \n    hex_digits_prime = [hex_key%10 for hex_key in hex_digits_prime]\n  \
    \  \n    hex_digits_prime = [hex_key//10 for hex_key in hex_digits_prime]\n  \
    \  \n    hex_digits_prime = [hex_key%10 for hex_key in hex_digits_prime]\n   \
    \ \n    hex_digits_prime = [hex_key//10 for hex_key in hex_digits_prime]\n   \
    \ \n    hex_digits_prime = [hex_key%10 for hex_key in hex_digits_prime]\n    \n\
    \    hex_digits_prime = [hex_key//10 for hex_key in hex_digits_prime]\n    \n\
    \    hex_", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    hex_key = 0\n \
    \   \n    hex_digits = [int(i) for i in hex_key]\n    \n    hex_digits_set = set(hex_digits)\n\
    \    \n    hex_digits_prime = [i for i in hex_digits if i%2==0]\n    \n    hex_digits_odd\
    \ = [i for i in hex_digits if i%2!=0]\n    \n    hex_digits_odd_set = set(hex_digits_odd)\n\
    \    \n    hex_digits_odd_prime = [i for i in hex_digits_odd if i%2==0]\n    \n\
    \    hex_digits_odd_odd = [i for i in hex_digits_odd if i%2!=0]\n    \n    hex_digits_odd_odd_set\
    \ = set(hex_digits_odd_odd)\n    \n    hex_digits_odd_odd_prime = [i for i in\
    \ hex_digits_odd_odd if i%2==0]\n    \n    hex_digits_odd_odd_odd = [i for i in\
    \ hex_digits_odd_odd if i%2!=0]\n    \n    hex_digits_odd_odd_odd_set = set(hex_digits_odd_odd_odd)\n\
    \    \n    hex_digits_odd_odd_odd_prime = [i for i in hex_digits_odd_odd_odd if\
    \ i%2==0]\n    \n    hex_digits_odd_odd_odd_odd = [i for i in hex_digits_odd_odd_odd\
    \ if i%2!=0]\n    \n    hex_digits_odd_odd_odd_odd_set = set(hex_digits_odd_odd_odd_odd)\n\
    \    \n    hex_digits_odd_odd_odd_odd_prime = [i for i in hex_digits_odd_odd_odd_odd\
    \ if i%2==0]\n    \n    hex_digits_odd_odd_odd_odd_odd = [i for i in hex_digits_odd_odd_odd_odd\
    \ if i%2!=0]\n    \n    hex_digits_odd_odd_odd_odd_odd_set = set(hex_digits_odd_odd_odd_odd_odd)\n\
    \    \n    hex_digits_odd_odd_odd_odd_odd_prime = [i for i in hex_digits_odd_odd_odd_odd_odd\
    \ if i%2==0]\n    \n    hex_digits_odd_odd_odd_odd_odd_odd = [i for i in hex_digits_odd_odd_odd_odd\
    \ if i%2!=0]\n    \n    hex_digits_odd_odd_odd_odd_odd_odd_set = set(", "    \n\
    \    count = 0\n    \n    # Your code here\n    \n    return count\n\n", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    digits =\
    \ num.upper()\n    \n    primes = []\n    \n    for digit in digits:\n       \
    \ \n        if digit == 'A':\n            primes.append(2)\n        elif digit\
    \ == 'B':\n            primes.append(3)\n        elif digit == 'C':\n        \
    \    primes.append(5)\n        elif digit == 'D':\n            primes.append(7)\n\
    \        elif digit == 'E':\n            primes.append(11)\n        elif digit\
    \ == 'F':\n            primes.append(13)\n        else:\n            primes.append(int(digit))\n\
    \    \n    primes.sort()\n    \n    primes_count = 0\n    \n    for prime in primes:\n\
    \        \n        if prime > 9:\n            primes_count += 1\n        \n  \
    \  return primes_count\n\n", "    hex_key = ''\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key =\
    \ ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n\
    \    hex_key = ''.join(hex_key)\n    hex_key = ''.join(hex_key)\n    hex_key",
  "    \n    hex_key = ''\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for\
    \ i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for\
    \ i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n", "    \n  \
    \  hex_list = list(num)\n    hex_list.sort()\n    \n    hex_list.reverse()\n \
    \   \n    prime_numbers = []\n    \n    for index in range(0, len(hex_list)):\n\
    \        \n        hex_value = hex_list[index]\n        \n        if hex_value\
    \ not in prime_numbers:\n            \n            prime_numbers.append(hex_value)\n\
    \            \n            \n    prime_numbers.sort()\n    \n    prime_numbers.reverse()\n\
    \    \n    prime_numbers_count = 0\n    \n    for index in range(0, len(prime_numbers)):\n\
    \        \n        prime_number = prime_numbers[index]\n        \n        if prime_number\
    \ == hex_list[0]:\n            \n            prime_numbers_count += 1\n      \
    \      \n    return prime_numbers_count\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n\
    <cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\n\
    hex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n</cell>\n<text>\n\
    Problem 3\nWrite a function that receives a positive integer and returns the number\
    \ of \ntimes it appears in the input string.\nExamples:\n>>> count_digits('12')\n\
    1\n>>> count_digits('123')\n2\n>>> count_digits('1234')\n3\n>>> count_digits('12345')\n\
    4\n>>> count_digits('123456')\n5\n>>> count_digits('1234567')\n6\n>>> count_digits('12345678')\n\
    7\n>>> count_digits('123456789')\n8\n>>> count_digits('1234567890')\n9\n>>> count_digits('12345678901')\n\
    10\n>>> count_digits('123456789012')\n11\n>>> count_digits('1234567890123')\n\
    12\n>>> count_digits('12345678901234')\n13\n>>> count_digits('123456789012345')\n\
    14\n>>> count_digits('1234567890123456')\n15\n>>> count_digits('12345678901234567')\n\
    16\n>>> count_digits('123456789012345678')\n17\n>>> count_digits('1234567890123456789')\n\
    18\n>>> count_digits('12345678901234567890')\n19\n>>> count_digits('123456789012345678901')\n\
    20\n>>> count_digits('1234567890123456789012')\n21\n>>> count_digits('12345678901234567890123')\n\
    22\n>>> count_digits('123456789012345678901234')\n23\n>>> count_digits('1234567890123456789012345')\n\
    24\n>>> count_digits('12345678901234567890123456", "    \n    hex_key = ''\n \
    \   \n    # Your code here\n    \n    return int(hex_key)\n", "    \n    hex_list\
    \ = list(num)\n    hex_list.sort()\n    \n    hex_dict = {\n        'A':0,\n \
    \       'B':1,\n        'C':2,\n        'D':3,\n        'E':4,\n        'F':5\n\
    \    }\n    \n    hex_dict2 = {\n        '2':0,\n        '3':1,\n        '5':2,\n\
    \        '7':3,\n        '11':4,\n        '13':5,\n        '17':6,\n        '19':7,\n\
    \        '31':8,\n        '37':9,\n        '41':10,\n        '43':11,\n      \
    \  '47':12,\n        '53':13,\n        '59':14,\n        '61':15,\n        '67':16,\n\
    \        '71':17,\n        '73':18,\n        '79':19,\n        '83':20,\n    \
    \    '89':21,\n        '97':22,\n        '101':23,\n        '103':24,\n      \
    \  '107':25,\n        '109':26,\n        '113':27,\n        '127':28,\n      \
    \  '131':29,\n        '137':30,\n        '139':31,\n        '147':32,\n      \
    \  '151':33,\n        '157':34,\n        '163':35,\n        '167':36,\n      \
    \  '173':37,\n        '179':38,\n        '181':39,\n        '191':40,\n      \
    \  '193':41,\n        '197':42,\n        '199':43,\n        '211':44,\n      \
    \  '223':45,\n        '227':46,\n        '229':47,\n        '233':48,\n      \
    \  '239':49,\n        '241':50,\n        '251':51,\n        '257':52,\n      \
    \  '263':53,\n        '269':54,\n        '271':55,\n        '277':56,\n      \
    \  '283':57,\n        '293':58,\n        '307':59,\n        '311':60,\n      \
    \  '313':61,\n        '317':62,\n        '331':63,\n        '337':64,\n      \
    \  '347':65,\n        '353':66,\n        '359':67,\n        '363':68,\n      \
    \  '369':69,\n        '373':70,\n        '379':71,\n        '383':72,\n      \
    \  '389':73,\n        '397':74,\n        '401':75,\n        '403':76,\n      \
    \  '407':77,\n        '409':78,\n        '419':79,\n        '4", "    \n    hex_list\
    \ = list(num)\n    hex_list.sort()\n    \n    hex_dict = {\n        'A':0,\n \
    \       'B':1,\n        'C':2,\n        'D':3,\n        'E':4,\n        'F':5\n\
    \    }\n    \n    hex_dict2 = {\n        '2':0,\n        '3':1,\n        '5':2,\n\
    \        '7':3,\n        '11':4,\n        '13':5,\n        '17':6,\n        '19':7,\n\
    \        '31':8,\n        '37':9,\n        '41':10,\n        '43':11,\n      \
    \  '47':12,\n        '53':13,\n        '59':14,\n        '61':15,\n        '67':16,\n\
    \        '71':17,\n        '73':18,\n        '79':19,\n        '83':20,\n    \
    \    '89':21,\n        '97':22,\n        '101':23,\n        '103':24,\n      \
    \  '107':25,\n        '109':26,\n        '113':27,\n        '127':28,\n      \
    \  '131':29,\n        '137':30,\n        '139':31,\n        '147':32,\n      \
    \  '151':33,\n        '157':34,\n        '163':35,\n        '167':36,\n      \
    \  '173':37,\n        '179':38,\n        '181':39,\n        '191':40,\n      \
    \  '193':41,\n        '197':42,\n        '199':43,\n        '211':44,\n      \
    \  '223':45,\n        '227':46,\n        '229':47,\n        '233':48,\n      \
    \  '239':49,\n        '241':50,\n        '251':51,\n        '257':52,\n      \
    \  '263':53,\n        '269':54,\n        '271':55,\n        '277':56,\n      \
    \  '283':57,\n        '293':58,\n        '307':59,\n        '311':60,\n      \
    \  '313':61,\n        '317':62,\n        '331':63,\n        '337':64,\n      \
    \  '347':65,\n        '353':66,\n        '359':67,\n        '361':68,\n      \
    \  '367':69,\n        '373':70,\n        '379':71,\n        '383':72,\n      \
    \  '389':73,\n        '397':74,\n        '401':75,\n        '403':76,\n      \
    \  '407':77,\n        '409':78,\n        '419':79,\n        '421", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    hex_key = ''.join(num)\n\
    \    hex_key = ''.join(hex_key.upper())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex_key = ''.join(hex_key.split())\n    hex_key = ''.join(hex_key.split())\n\
    \    hex", "    \n    count = 0\n    \n    hex = num.upper()\n    \n    for digit\
    \ in hex:\n        if digit in 'ABCDEF':\n            count += 1\n           \
    \ \n    return count\n\n", "    \n    hex_list = list(hex_key)\n    hex_list.sort()\n\
    \    \n    hex_string = hex_list[0]\n    \n    hex_string = hex_string.upper()\n\
    \    \n    hex_string = hex_string.replace('A','0')\n    hex_string = hex_string.replace('B','1')\n\
    \    hex_string = hex_string.replace('C','2')\n    hex_string = hex_string.replace('D','3')\n\
    \    hex_string = hex_string.replace('E','4')\n    hex_string = hex_string.replace('F','5')\n\
    \    \n    hex_string = hex_string.replace('0','')\n    \n    hex_string = hex_string.replace('1','')\n\
    \    \n    hex_string = hex_string.replace('2','')\n    \n    hex_string = hex_string.replace('3','')\n\
    \    \n    hex_string = hex_string.replace('4','')\n    \n    hex_string = hex_string.replace('5','')\n\
    \    \n    hex_string = hex_string.replace('6','')\n    \n    hex_string = hex_string.replace('7','')\n\
    \    \n    hex_string = hex_string.replace('8','')\n    \n    hex_string = hex_string.replace('9','')\n\
    \    \n    hex_string = hex_string.replace('A','')\n    \n    hex_string = hex_string.replace('B','')\n\
    \    \n    hex_string = hex_string.replace('C','')\n    \n    hex_string = hex_string.replace('D','')\n\
    \    \n    hex_string = hex_string.replace('E','')\n    \n    hex_string = hex_string.replace('F','')\n\
    \    \n    hex_string = hex_string.replace('0','')\n    \n    hex_string = hex_string.replace('1','')\n\
    \    \n    hex_string = hex_string.replace('2','')\n    \n    hex_string = hex_string.replace('3','')\n\
    \    \n    hex_string = hex_string.replace('4','')\n    \n    hex_string = hex_string.replace('5','')\n\
    \    \n    hex_string = hex_string.replace('6','')\n    \n    hex_string = hex_string.replace('7','')\n\
    \    \n    hex_string = hex_string.replace('8','')\n    \n    hex_string = hex_string.replace('9','')\n\
    \    \n    hex_string = hex_string.replace('A','')\n    \n    hex_string = hex_string.replace('B','')\n\
    \    \n    hex_string = hex_string.replace('C','')\n    \n    hex_string = hex_string.replace('D','')\n\
    \    \n    hex_string = hex_string.replace('E','')\n    \n    hex_string = hex",
  "    \n    hex_key = ''\n    \n    hex_key = str(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(hex,\
    \ hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key =\
    \ list(map(hex, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n\
    \    hex_key = list(map(hex, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n\
    \    \n    hex_key = list(map(hex, hex_key))\n    \n    hex_key = list(map(int,\
    \ hex_key))\n    \n    hex_key = list(map(hex, hex_key))\n    \n    hex_key =\
    \ list(map(int, hex_key))\n    \n    hex_key = list(map(hex, hex_key))\n    \n\
    \    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(hex, hex_key))\n\
    \    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(hex,\
    \ hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key =\
    \ list(map(hex, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n\
    \    hex_key = list(map(hex, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n\
    \    \n    hex_key = list(map(hex, hex_key))\n    \n    hex_key = list(map(int,\
    \ hex_key))\n    \n    hex_key = list(map(hex, hex_key))\n    \n    hex_key =\
    \ list(map(int, hex_key))\n    \n    hex_key = list(map(hex, hex_key))\n    \n\
    \    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(hex, hex_key))\n\
    \    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(hex,\
    \ hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key =\
    \ list(map(hex, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n\
    \    hex_key = list(map(hex, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n\
    \    \n    hex_key = list(map(hex, hex_key))\n    \n    hex_key = list(map(int,\
    \ hex_key))\n    \n    hex_key = list(map(hex, hex_key))\n    \n    hex_key =\
    \ list(map(int, hex_key))\n", "    \n    hex_key = 0\n    \n    # Your code here\n\
    \    \n    return hex_key\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n\
    </cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n\
    </cell>\n<cell>\nhex_key('2020')\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that receives a positive integer as a string and returns the number of digits\
    \ in that string.\nExamples:\n>>> count_digits('12')\n2\n>>> count_digits('123')\n\
    3\n>>> count_digits('123456789')\n6\n>>> count_digits('1234567890')\n6\n>>> count_digits('12345678901')\n\
    6\n>>> count_digits('123456789012')\n6\n>>> count_digits('1234567890123')\n6\n\
    >>> count_digits('12345678901234')\n6\n>>> count_digits('123456789012345')\n6\n\
    >>> count_digits('1234567890123456')\n6\n>>> count_digits('12345678901234567')\n\
    6\n>>> count_digits('123456789012345678')\n6\n>>> count_digits('1234567890123456789')\n\
    6\n>>> count_digits('12345678901234567890')\n6\n>>> count_digits('123456789012345678901')\n\
    6\n>>> count_digits('1234567890123456789012')\n6\n>>> count_digits('12345678901234567890123')\n\
    6\n>>> count_digits('123456789012345678901234')\n6\n>>> count_digits('1234567890123456789012345')\n\
    6\n>>> count_digits('12345678901234567890123456')\n6\n>>> count_digits('123456789012345678901234567')\n\
    6\n>>> count_digits('1234567890123456789012345678')\n6\n>>> count_digits('12345678901234567890123456789')\n\
    6\n>>> count_digits('123456789012345678901234567890')\n6\n>>> count_digits('1234567890123456789012345678901')\n\
    6\n>>> count_digits('12345678901234567890123456789012')\n6\n>>> count_digits('123456789012345678901234567890123')\n\
    6\n>>> count_digits('1234567890123456789012345678901234')\n6\n>>> count_digits('12345678901234567890123456789012345')\n\
    6\n>>> count_digits('123456789012345678901234567890123456')\n6\n>>> count_digits('1234567890123456789012345678901234567')\n\
    6\n>>> count_digits('12345678901234567890123456789012345678')\n6\n>>> count_digits('123456789012345678901234567890123456789')\n\
    6\n>>> count_digits('1234567890123456789", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    digits = [int(i) for i in num.upper() if\
    \ i.isdigit()]\n    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    count = 0\n \
    \   \n    for digit in digits:\n        if digit in primes:\n            count\
    \ += 1\n    \n    return count\n\n", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    hex_key = ''\n    \n    hex_key = ''\n    \n\
    \    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key\
    \ = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n\
    \    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n\
    \    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key\
    \ = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n\
    \    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n\
    \    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key\
    \ = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n\
    \    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n\
    \    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key\
    \ = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n\
    \    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n\
    \    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key\
    \ = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n\
    \    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n\
    \    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key\
    \ = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n\
    \    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n\
    \    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key\
    \ = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n\
    \    \n    hex_key = ''\n    \n    hex_key = ''\n    \n    hex_key = ''\n    \n\
    \    hex_key = ''\n    ", "    \n    hex_key = ''\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n  \
    \  hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n    \n\
    \    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n    \n\
    \    hex_key = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n  \
    \  hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n    \n\
    \    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n    \n\
    \    hex_key = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n  \
    \  hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n    \n\
    \    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n    ", "    \n\
    \    hex_list = list(hex_key)\n    hex_list.sort()\n    \n    hex_list.reverse()\n\
    \    \n    hex_list2 = []\n    \n    for x in hex_list:\n        if x not in hex_list2:\n\
    \            hex_list2.append(x)\n    \n    hex_list2.sort()\n    \n    hex_list2.reverse()\n\
    \    \n    hex_list3 = []\n    \n    for x in hex_list2:\n        if x not in\
    \ hex_list3:\n            hex_list3.append(x)\n    \n    hex_list3.sort()\n  \
    \  \n    hex_list3.reverse()\n    \n    hex_list4 = []\n    \n    for x in hex_list3:\n\
    \        if x not in hex_list4:\n            hex_list4.append(x)\n    \n    hex_list4.sort()\n\
    \    \n    hex_list4.reverse()\n    \n    hex_list5 = []\n    \n    for x in hex_list4:\n\
    \        if x not in hex_list5:\n            hex_list5.append(x)\n    \n    hex_list5.sort()\n\
    \    \n    hex_list5.reverse()\n    \n    hex_list6 = []\n    \n    for x in hex_list5:\n\
    \        if x not in hex_list6:\n            hex_list6.append(x)\n    \n    hex_list6.sort()\n\
    \    \n    hex_list6.reverse()\n    \n    hex_list7 = []\n    \n    for x in hex_list6:\n\
    \        if x not in hex_list7:\n            hex_list7.append(x)\n    \n    hex_list7.sort()\n\
    \    \n    hex_list7.reverse()\n    \n    hex_list8 = []\n    \n    for x in hex_list7:\n\
    \        if x not in hex_list8:\n            hex_list8.append(x)\n    \n    hex_list8.sort()\n\
    \    \n    hex_list8.reverse()\n    \n    hex_list9 = []\n    \n    for x in hex_list8:\n\
    \        if x not in hex_list9:\n            hex_list9.append(x)\n    \n    hex_list9.sort()\n\
    \    \n    hex_list9.reverse()\n    \n    hex_list10 = []\n    \n    for x in\
    \ hex_list9:\n        if x not in hex_list10:\n            hex_list10.append(x)\n\
    \    \n    hex_list10.sort()\n    \n    hex_list10.reverse()\n    \n    hex_list11\
    \ = []\n    \n    for x in hex_list10:\n        if x not in hex_list11:\n    \
    \        hex_list11.append(x)\n    \n    hex_list11.sort()\n    \n    hex_list11.reverse()\n\
    \    \n    hex_list12 = []\n    \n    for x in hex_list11:\n        if x not in\
    \ hex_list", "    \n    count = 0\n    \n    digits = [int(i) for i in num.upper()]\n\
    \    \n    for digit in digits:\n        if digit in [2, 5, 7]:\n            count\
    \ += 1\n        elif digit in [11, 13]:\n            count += 1\n    return count\n\
    \n", "    \n    hex_key = 0\n    \n    hex_key = int(num, 16)\n    \n    hex_digits\
    \ = [int(hex_key[hex_key.index(x)], 16) for x in '0123456789ABCDEF']\n    \n \
    \   hex_digits_prime = [int(hex_key[hex_key.index(x)], 16) for x in '0123456789ABCDEF']\n\
    \    \n    hex_digits_prime = [x for x in hex_digits_prime if x != 0]\n    \n\
    \    hex_digits_prime = [x for x in hex_digits_prime if x % 2 != 0]\n    \n  \
    \  hex_digits_prime = [x for x in hex_digits_prime if x % 3 != 0]\n    \n    hex_digits_prime\
    \ = [x for x in hex_digits_prime if x % 5 != 0]\n    \n    hex_digits_prime =\
    \ [x for x in hex_digits_prime if x % 7 != 0]\n    \n    hex_digits_prime = [x\
    \ for x in hex_digits_prime if x % 11 != 0]\n    \n    hex_digits_prime = [x for\
    \ x in hex_digits_prime if x % 13 != 0]\n    \n    hex_digits_prime = [x for x\
    \ in hex_digits_prime if x % 17 != 0]\n    \n    hex_digits_prime = [x for x in\
    \ hex_digits_prime if x % 19 != 0]\n    \n    hex_digits_prime = [x for x in hex_digits_prime\
    \ if x % 23 != 0]\n    \n    hex_digits_prime = [x for x in hex_digits_prime if\
    \ x % 29 != 0]\n    \n    hex_digits_prime = [x for x in hex_digits_prime if x\
    \ % 31 != 0]\n    \n    hex_digits_prime = [x for x in hex_digits_prime if x %\
    \ 37 != 0]\n    \n    hex_digits_prime = [x for x in hex_digits_prime if x % 41\
    \ != 0]\n    \n    hex_digits_prime = [x for x in hex_digits_prime if x % 43 !=\
    \ 0]\n    \n    hex_digits_prime = [x for x in hex_digits_prime if x % 47 != 0]\n\
    \    \n    hex_digits_prime = [x for x in hex_digits_prime if x % 51 != 0]\n \
    \   \n    hex_digits_prime = [x for x in hex_digits_prime if x % 55 != 0]\n  \
    \  \n    hex_digits_prime = [x for x in hex_digits_prime if x % 59 != 0]\n   \
    \ \n    hex_digits_prime = [x for x in hex_digits_prime if x % 63 != 0]\n    \n\
    \    hex_digits_prime = [x for x in hex_digits_prime if x % 67 != 0]\n    \n \
    \   hex_digits_prime = [x for x in hex_digits_prime if x % 71 != 0]\n    \n  \
    \  hex_digits_", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    hex_key = int(num, 16)\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set =\
    \ prime_digits_set.union(set(range(10,16)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(20,32)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(40,64)))\n    \n\
    \    prime_digits_set = prime_digits_set.union(set(range(80,96)))\n    \n    prime_digits_set\
    \ = prime_digits_set.union(set(range(100,112)))\n    \n    prime_digits_set =\
    \ prime_digits_set.union(set(range(120,128)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(140,160)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(160,176)))\n  \
    \  \n    prime_digits_set = prime_digits_set.union(set(range(180,192)))\n    \n\
    \    prime_digits_set = prime_digits_set.union(set(range(200,208)))\n    \n  \
    \  prime_digits_set = prime_digits_set.union(set(range(210,224)))\n    \n    prime_digits_set\
    \ = prime_digits_set.union(set(range(240,256)))\n    \n    prime_digits_set =\
    \ prime_digits_set.union(set(range(250,264)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(270,288)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(300,320)))\n  \
    \  \n    prime_digits_set = prime_digits_set.union(set(range(330,352)))\n    \n\
    \    prime_digits_set = prime_digits_set.union(set(range(360,384)))\n    \n  \
    \  prime_digits_set = prime_digits_set.union(set(range(400,416)))\n    \n    prime_digits_set\
    \ = prime_digits_set.union(set(range(420,448)))\n    \n    prime_digits_set =\
    \ prime_digits_set.union(set(range(440,464)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(480,496)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(500,512)))\n  \
    \  \n    prime_digits_set = prime_digits_set.union(set(range(5", "    \n    hex_list\
    \ = list(num)\n    hex_list.sort()\n    \n    prime_numbers = []\n    \n    for\
    \ hex in hex_list:\n        if hex in prime_numbers:\n            prime_numbers.remove(hex)\n\
    \        else:\n            prime_numbers.append(hex)\n    \n    return len(prime_numbers)\n\
    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    hex_list\
    \ = list(num)\n    hex_list.sort()\n    \n    count = 0\n    \n    for digit in\
    \ hex_list:\n        if digit in 'ABCDEF':\n            count += 1\n         \
    \   \n    return count\n\n", "    \n    hex_key = int(num, 16)\n    \n    count\
    \ = 0\n    \n    for digit in hex_key:\n        if digit in '0123456789ABCDEF':\n\
    \            count += 1\n    \n    return count\n</cell>\n<cell>\nhex_key('AB')\n\
    </cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n\
    <cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that receives a binary number as a string\
    \ and counts the number of binary digits that are primes (prime number, or a prime,\
    \ is a natural number greater than 1 that is not a product of two smaller natural\
    \ numbers).\nBinary digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9.\nPrime numbers are\
    \ 2, 3, 5, 7, 11, 13, 17, ...\nSo you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNote: the input may be\
    \ empty string or symbols A,B,C,D,E,F are always uppercase.\nExamples:\n>>> binary_key('AB')\n\
    1\n>>> binary_key('1077E')\n2\n>>> binary_key('ABED1A33')\n4\n>>> binary_key('123456789ABCDEF0')\n\
    6\n>>> binary_key('2020')\n2\n>>> binary_key('')\n0\n>>> binary_key('AB')\n1\n\
    >>> binary_key('1077E')\n2\n>>> binary_key('ABED1A33')\n4\n>>> binary_key('123456789ABCDEF0')\n\
    6\n>>> binary_key('2020')\n2\n>>> binary_key('')\n0\n>>> binary_key('AB')\n1\n\
    >>> binary_key('1077E')\n2\n>>> binary_key('ABED1A33')\n4\n>>> binary_key('123456789ABCDEF0')\n\
    6\n>>> binary_key('2020')\n2\n>>> binary_key('')\n0\n>>> binary_key('AB')\n1\n\
    >>> binary_key('1077E')\n2\n>>> binary_key('ABED1A33')\n4\n>>> binary_key('123456789ABCDEF0')\n\
    6\n>>> binary_key('2020')\n2\n>>> binary_key('')\n0\n>>> binary_key('AB')\n1\n\
    >>> binary_key('1077E')\n2\n>>> binary_key('ABED1A33')\n4\n>>> binary_key('123456789ABCDEF0')\n\
    6\n>>> binary_", "    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    hex_list = list(num)\n    hex_list.sort()\n    \n    hex_dict = {\n\
    \        'A' : 1, 'B' : 2, 'C' : 3, 'D' : 4, 'E' : 5, 'F' : 6\n    }\n    \n \
    \   count = 0\n    \n    for hex in hex_list:\n        if hex in hex_dict:\n \
    \           count += 1\n    \n    return count\n\n", "    \n    hex_list = list(num)\n\
    \    hex_list.sort()\n    \n    prime_numbers = []\n    \n    for digit in hex_list:\n\
    \        if digit in '01234567':\n            prime_numbers.append(int(digit))\n\
    \    \n    prime_numbers.sort()\n    \n    prime_numbers = list(set(prime_numbers))\n\
    \    \n    prime_numbers.sort()\n    \n    prime_numbers = list(filter(lambda\
    \ num: num > 1, prime_numbers))\n    \n    prime_numbers.sort()\n    \n    prime_numbers\
    \ = list(filter(lambda num: num % 2 == 0, prime_numbers))\n    \n    prime_numbers.sort()\n\
    \    \n    prime_numbers = list(filter(lambda num: num % 3 == 0, prime_numbers))\n\
    \    \n    prime_numbers.sort()\n    \n    prime_numbers = list(filter(lambda\
    \ num: num % 5 == 0, prime_numbers))\n    \n    prime_numbers.sort()\n    \n \
    \   prime_numbers = list(filter(lambda num: num % 7 == 0, prime_numbers))\n  \
    \  \n    prime_numbers.sort()\n    \n    prime_numbers = list(filter(lambda num:\
    \ num % 11 == 0, prime_numbers))\n    \n    prime_numbers.sort()\n    \n    prime_numbers\
    \ = list(filter(lambda num: num % 13 == 0, prime_numbers))\n    \n    prime_numbers.sort()\n\
    \    \n    prime_numbers = list(filter(lambda num: num % 17 == 0, prime_numbers))\n\
    \    \n    prime_numbers.sort()\n    \n    prime_numbers = list(filter(lambda\
    \ num: num % 19 == 0, prime_numbers))\n    \n    prime_numbers.sort()\n    \n\
    \    prime_numbers = list(filter(lambda num: num % 23 == 0, prime_numbers))\n\
    \    \n    prime_numbers.sort()\n    \n    prime_numbers = list(filter(lambda\
    \ num: num % 29 == 0, prime_numbers))\n    \n    prime_numbers.sort()\n    \n\
    \    prime_numbers = list(filter(lambda num: num % 31 == 0, prime_numbers))\n\
    \    \n    prime_numbers.sort()\n    \n    prime_numbers = list(filter(lambda\
    \ num: num % 37 == 0, prime_numbers))\n    \n    prime_numbers.sort()\n    \n\
    \    prime_numbers = list(filter(lambda num: num % 41 == 0, prime_numbers))\n\
    \    \n    prime_numbers.sort()\n    \n    prime_numbers = list(filter(lambda\
    \ num: num % 43 == 0, prime_numbers))\n    \n    prime_numbers.sort()\n    \n\
    \    prime_numbers = list(filter(lambda num: num % 47 == 0, prime_numbers))\n",
  "    \n    hex_key = 0\n    \n    hex_key = int(num, 16)\n    \n    hex_digits =\
    \ [int(i) for i in list(hex_key)]\n    \n    hex_digits_prime = [i for i in hex_digits\
    \ if i % 2 == 0]\n    \n    hex_digits_prime_prime = [i for i in hex_digits_prime\
    \ if i % 3 == 0]\n    \n    hex_digits_prime_prime_prime = [i for i in hex_digits_prime_prime\
    \ if i % 5 == 0]\n    \n    hex_digits_prime_prime_prime_prime = [i for i in hex_digits_prime_prime_prime\
    \ if i % 7 == 0]\n    \n    hex_digits_prime_prime_prime_prime_prime = [i for\
    \ i in hex_digits_prime_prime_prime_prime if i % 11 == 0]\n    \n    hex_digits_prime_prime_prime_prime_prime_prime\
    \ = [i for i in hex_digits_prime_prime_prime_prime_prime if i % 13 == 0]\n   \
    \ \n    hex_digits_prime_prime_prime_prime_prime_prime_prime = [i for i in hex_digits_prime_prime_prime_prime_prime_prime\
    \ if i % 17 == 0]\n    \n    hex_digits_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = [i for i in hex_digits_prime_prime_prime_prime_prime_prime_prime if i % 19\
    \ == 0]\n    \n    hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = [i for i in hex_digits_prime_prime_prime_prime_prime_prime_prime_prime if\
    \ i % 23 == 0]\n    \n    hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = [i for i in hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ if i % 29 == 0]\n    \n    hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = [i for i in hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ if i % 31 == 0]\n    \n    hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = [i for i in hex_digits_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ if i % 37 == 0]\n    \n    hex_digits_prime_prime_prime_prime_prime_prime_prime_",
  "    hex_list = list(num)\n    hex_list.sort()\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n    hex_list.insert(0,0)\n\
    \    hex_list.insert(", "    hex_key = int(num, 16)\n    hex_digits = [hex_key%16]\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n    hex_digits.append(hex_key//16)\n\
    \    hex_digits.append(hex_key//16)\n", "    \n    hex_key = int(num, 16)\n  \
    \  \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    count = 0\n    \n   \
    \ for digit in hex_key:\n        if digit in prime_digits:\n            count\
    \ += 1\n            \n    return count\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n\
    <cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\n\
    hex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that receives a string and returns the number of\
    \ characters that are not alphanumeric (i.e. letters, numbers, spaces, punctuation).\n\
    Examples:\n>>> alpha_num('ABCD')\n3\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123\
    \ ')\n4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n\
    4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n\
    4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n\
    4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n\
    4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n\
    4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n\
    4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n\
    4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n\
    4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n4\n>>> alpha_num('ABCD123')\n\
    4\n>>> alpha_num('ABCD123')\n4", "    hex_key = int(num, 16)\n    hex_digits =\
    \ [hex_key]\n    hex_digits_set = set()\n    hex_digits_set.add(hex_key)\n   \
    \ hex_digits_set.add(hex_key * 2)\n    hex_digits_set.add(hex_key * 3)\n    hex_digits_set.add(hex_key\
    \ * 4)\n    hex_digits_set.add(hex_key * 5)\n    hex_digits_set.add(hex_key *\
    \ 6)\n    hex_digits_set.add(hex_key * 7)\n    hex_digits_set.add(hex_key * 8)\n\
    \    hex_digits_set.add(hex_key * 9)\n    hex_digits_set.add(hex_key * 10)\n \
    \   hex_digits_set.add(hex_key * 11)\n    hex_digits_set.add(hex_key * 12)\n \
    \   hex_digits_set.add(hex_key * 13)\n    hex_digits_set.add(hex_key * 14)\n \
    \   hex_digits_set.add(hex_key * 15)\n    hex_digits_set.add(hex_key * 16)\n \
    \   hex_digits_set.add(hex_key * 17)\n    hex_digits_set.add(hex_key * 18)\n \
    \   hex_digits_set.add(hex_key * 19)\n    hex_digits_set.add(hex_key * 20)\n \
    \   hex_digits_set.add(hex_key * 21)\n    hex_digits_set.add(hex_key * 22)\n \
    \   hex_digits_set.add(hex_key * 23)\n    hex_digits_set.add(hex_key * 24)\n \
    \   hex_digits_set.add(hex_key * 25)\n    hex_digits_set.add(hex_key * 26)\n \
    \   hex_digits_set.add(hex_key * 27)\n    hex_digits_set.add(hex_key * 28)\n \
    \   hex_digits_set.add(hex_key * 29)\n    hex_digits_set.add(hex_key * 30)\n \
    \   hex_digits_set.add(hex_key * 31)\n    hex_digits_set.add(hex_key * 32)\n \
    \   hex_digits_set.add(hex_key * 33)\n    hex_digits_set.add(hex_key * 34)\n \
    \   hex_digits_set.add(hex_key * 35)\n    hex_digits_set.add(hex_key * 36)\n \
    \   hex_digits_set.add(hex_key * 37)\n    hex_digits_set.add(hex_key * 38)\n \
    \   hex_digits_set.add(hex_key * 39)\n    hex_digits_set.add(hex_key * 40)\n \
    \   hex_digits_set.add(hex_key * 41)\n    hex_digits_set.add(hex_key * 42)\n \
    \   hex_digits_set.add(hex_key * 43)\n    hex_digit", "    \n    count = 0\n \
    \   \n    # Your code here\n    \n    return count\n", "    \n    hex_list = list(num)\n\
    \    hex_list.sort()\n    \n    count = 0\n    \n    for hex in hex_list:\n  \
    \      if hex in '0123456789ABCDEF':\n            count += 1\n            \n \
    \   return count\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n\
    </cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n\
    </cell>\n<cell>\nhex_key('2020')\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that receives a string and returns the number of characters that are not letters.\n\
    Examples:\n>>> not_letters('Hello World')\n4\n>>> not_letters('Hello World!')\n\
    5\n>>> not_letters('Hello World!')\n5\n>>> not_letters('Hello World!')\n5\n>>>\
    \ not_letters('Hello World!')\n5\n>>> not_letters('Hello World!')\n5\n>>> not_letters('Hello\
    \ World!')\n5\n>>> not_letters('Hello World!')\n5\n>>> not_letters('Hello World!')\n\
    5\n>>> not_letters('Hello World!')\n5\n>>> not_letters('Hello World!')\n5\n>>>\
    \ not_letters('Hello World!')\n5\n>>> not_letters('Hello World!')\n5\n>>> not_letters('Hello\
    \ World!')\n5\n>>> not_letters('Hello World!')\n5\n>>> not_letters('Hello World!')\n\
    5\n>>> not_letters('Hello World!')\n5\n>>> not_letters('Hello World!')\n5\n>>>\
    \ not_letters('Hello World!')\n5\n>>> not_letters('Hello World!')\n5\n>>> not_letters('Hello\
    \ World!')\n5\n>>> not_letters('Hello World!')\n5\n>>> not_letters('Hello World!')\n\
    5\n>>> not_letters('Hello World!')\n5\n>>> not_letters('Hello World!')\n5\n>>>\
    \ not_letters('Hello World!')\n5\n>>> not_letters('Hello World!')\n5\n>>> not_letters('Hello\
    \ World!')\n5\n>>> not_letters('Hello World!')\n5\n>>> not_letters('Hello World!')\n\
    5\n>>> not_letters('Hello World!')\n5\n>>> not_letters('Hello World!')\n5\n>>>\
    \ not_letters('Hello World!')\n5\n>>> not_letters('Hello World!')\n5\n>>> not_letters('Hello\
    \ World!')\n5\n>>> not_letters('Hello World!')\n5\n>>> not_letters('Hello ", " \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    ", " \
    \   hex_key = 0\n    hex_key = int(num, 16)\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key\
    \ += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n\
    \    hex_key += hex_key\n    hex_key += hex_key\n    hex_key += hex_key\n    hex_key ",
  "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    count = 0\n    \n\
    \    for num in hex_list:\n        if num == 'A' or num == 'B' or num == 'C' or\
    \ num == 'D' or num == 'E' or num == 'F':\n            count += 1\n        else:\n\
    \            count += 1\n            \n    return count\n\n", "    \n    hex_key\
    \ = 0\n    \n    # Your code here\n    \n    return hex_key\n</cell>\n<cell>",
  "    \n    hex_key = ''\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n  \
    \  hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n    \n\
    \    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n    \n\
    \    hex_key = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n  \
    \  hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n    \n\
    \    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n    \n\
    \    hex_key = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = str(hex_key)\n    \n  \
    \  hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = str(hex_key)\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = str(hex_key)\n    ", "    \n    count = 0\n    \n    for\
    \ digit in num:\n        if digit in 'ABCDEF':\n            count += 1\n     \
    \       \n    return count\n\n", "    \n    hex_key = int(num, 16)\n    \n   \
    \ prime_digits = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    \n    prime_digits_set = set(prime_digits)\n\
    \    \n    prime_digits_set = prime_digits_set.intersection(set(hex_key))\n  \
    \  \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set\
    \ = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n\
    \    \n    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n\
    \    prime_digits_set = prime_digits_set.difference(set(hex_key))\n    \n    prime_digits_set\
    \ = prime_digit", "    \n    hex_key = 0\n    \n    # Your code here\n    \n \
    \   return hex_key\n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    count = 0\n    \n    # Your code here\n    \n    return count\n\n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    hexadecimal\
    \ = num.upper()\n    \n    count = 0\n    \n    for digit in hexadecimal:\n  \
    \      if digit in 'ABCDEF':\n            count += 1\n    \n    return count\n\
    </cell>\n<cell>", "    \n    count = 0\n    \n    hex_list = list(hex_key)\n \
    \   \n    hex_list.remove('0')\n    \n    for digit in hex_list:\n        \n \
    \       if digit == 'A':\n            \n            hex_list.remove('A')\n   \
    \         \n            hex_list.remove('0')\n            \n            hex_list.remove('1')\n\
    \            \n            hex_list.remove('2')\n            \n            hex_list.remove('3')\n\
    \            \n            hex_list.remove('4')\n            \n            hex_list.remove('5')\n\
    \            \n            hex_list.remove('6')\n            \n            hex_list.remove('7')\n\
    \            \n            hex_list.remove('8')\n            \n            hex_list.remove('9')\n\
    \            \n            hex_list.remove('B')\n            \n            hex_list.remove('C')\n\
    \            \n            hex_list.remove('D')\n            \n            hex_list.remove('E')\n\
    \            \n            hex_list.remove('F')\n            \n            hex_list.remove('0')\n\
    \            \n            hex_list.remove('1')\n            \n            hex_list.remove('2')\n\
    \            \n            hex_list.remove('3')\n            \n            hex_list.remove('4')\n\
    \            \n            hex_list.remove('5')\n            \n            hex_list.remove('6')\n\
    \            \n            hex_list.remove('7')\n            \n            hex_list.remove('8')\n\
    \            \n            hex_list.remove('9')\n            \n            hex_list.remove('0')\n\
    \            \n            hex_list.remove('1')\n            \n            hex_list.remove('2')\n\
    \            \n            hex_list.remove('3')\n            \n            hex_list.remove('4')\n\
    \            \n            hex_list.remove('5')\n            \n            hex_list.remove('6')\n\
    \            \n            hex_list.remove('7')\n            \n            hex_list.remove('8')\n\
    \            \n            hex_list.remove('9')\n            \n            hex_list.remove('0')\n\
    \            \n            hex_list.remove('1')\n            \n            hex_list.remove('2')\n\
    \            \n            hex_list.remove('3')\n            \n            hex_list.remove('4')\n\
    \            \n            hex_list.remove('5')\n            \n            hex_list.remove('6')\n\
    \            \n            hex_list.remove('7')\n            \n            hex_list.remove('8')\n\
    \            \n            hex_list.remove('9')\n            \n            hex_list.remove('0')\n\
    \            \n            hex_list.remove('1')\n            \n            hex_list.remove('2')\n\
    \            \n            hex_list.remove('", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    hex_list = list(hex_key)\n    hex_list.sort()\n\
    \    \n    hex_string = ''.join(hex_list)\n    \n    hex_string = hex_string.replace('A',\
    \ '0')\n    hex_string = hex_string.replace('B', '1')\n    hex_string = hex_string.replace('C',\
    \ '2')\n    hex_string = hex_string.replace('D', '3')\n    hex_string = hex_string.replace('E',\
    \ '4')\n    hex_string = hex_string.replace('F', '5')\n    \n    hex_string =\
    \ hex_string.replace('0', 'A')\n    hex_string = hex_string.replace('1', 'B')\n\
    \    hex_string = hex_string.replace('2', 'C')\n    hex_string = hex_string.replace('3',\
    \ 'D')\n    hex_string = hex_string.replace('4', 'E')\n    hex_string = hex_string.replace('5',\
    \ 'F')\n    \n    hex_string = hex_string.replace('A', 'B')\n    hex_string =\
    \ hex_string.replace('B', 'C')\n    hex_string = hex_string.replace('C', 'D')\n\
    \    hex_string = hex_string.replace('D', 'E')\n    hex_string = hex_string.replace('E',\
    \ 'F')\n    \n    hex_string = hex_string.replace('0', 'A')\n    hex_string =\
    \ hex_string.replace('1', 'B')\n    hex_string = hex_string.replace('2', 'C')\n\
    \    hex_string = hex_string.replace('3', 'D')\n    hex_string = hex_string.replace('4',\
    \ 'E')\n    hex_string = hex_string.replace('5', 'F')\n    \n    hex_string =\
    \ hex_string.replace('A', 'B')\n    hex_string = hex_string.replace('B', 'C')\n\
    \    hex_string = hex_string.replace('C', 'D')\n    hex_string = hex_string.replace('D',\
    \ 'E')\n    hex_string = hex_string.replace('E', 'F')\n    \n    hex_string =\
    \ hex_string.replace('0', 'A')\n    hex_string = hex_string.replace('1', 'B')\n\
    \    hex_string = hex_string.replace('2', 'C')\n    hex_string = hex_string.replace('3',\
    \ 'D')\n    hex_string = hex_string.replace('4', 'E')\n    hex_string = hex_string.replace('5',\
    \ 'F')\n    \n    hex_string = hex_string.replace('A', 'B')\n    hex_string =\
    \ hex_string.replace('B', 'C')\n    hex_string = hex_string.replace('C', 'D')\n\
    \    hex_string = hex_string.replace('D', 'E')\n    hex_string = hex_string.replace('E',\
    \ 'F')\n    \n    hex_string = hex_string.replace('0', 'A')\n    hex_string =\
    \ hex_string.replace('1', 'B')\n    hex_string = hex_string.replace('2', 'C')\n\
    \    hex_string = hex_string.replace('3', 'D", "    \n    digits = num.upper()\n\
    \    \n    primes = []\n    \n    for digit in digits:\n        \n        if digit\
    \ in 'ABCDEF':\n            primes.append(digit)\n            \n        elif digit\
    \ in '0123456789':\n            primes.append(digit)\n            \n        else:\n\
    \            primes.append(0)\n            \n    primes.sort()\n    \n    primes_len\
    \ = len(primes)\n    \n    if primes_len == 2 and primes[0] == 2 and primes[1]\
    \ == 2:\n        return 1\n    \n    elif primes_len == 2 and primes[0] == 2 and\
    \ primes[1] != 2:\n        return 2\n    \n    elif primes_len == 2 and primes[0]\
    \ != 2 and primes[1] == 2:\n        return 3\n    \n    elif primes_len == 2 and\
    \ primes[0] != 2 and primes[1] != 2:\n        return 4\n    \n    elif primes_len\
    \ == 2 and primes[0] != 2 and primes[1] != 2:\n        return 5\n    \n    elif\
    \ primes_len == 2 and primes[0] != 2 and primes[1] != 2:\n        return 6\n \
    \   \n    elif primes_len == 2 and primes[0] != 2 and primes[1] != 2:\n      \
    \  return 7\n    \n    elif primes_len == 2 and primes[0] != 2 and primes[1] !=\
    \ 2:\n        return 8\n    \n    elif primes_len == 2 and primes[0] != 2 and\
    \ primes[1] != 2:\n        return 9\n    \n    elif primes_len == 2 and primes[0]\
    \ != 2 and primes[1] != 2:\n        return 10\n    \n    elif primes_len == 2\
    \ and primes[0] != 2 and primes[1] != 2:\n        return 11\n    \n    elif primes_len\
    \ == 2 and primes[0] != 2 and primes[1] != 2:\n        return 12\n    \n    elif\
    \ primes_len == 2 and primes[0] != 2 and primes[1] != 2:\n        return 13\n\
    \    \n    elif primes_len == 2 and primes[0] != 2 and primes[1] != 2:\n     \
    \   return 14\n    \n    elif primes_len == 2 and primes[0] != 2 and primes[1]\
    \ != 2:\n        return 15\n    \n    elif primes_len == 2 and primes[0] != 2\
    \ and primes[1] != 2:\n        return 16\n    \n    elif primes_len == 2 and primes[0]\
    \ != 2 and primes[1] != 2:\n        return 17\n    \n    elif primes_len == 2\
    \ and primes[0] != 2 and primes[1] != 2:\n        return 18\n    \n    elif primes_len\
    \ == 2 and primes[0] != 2 and primes[1] != 2:\n        return 19\n    \n    elif\
    \ primes_len == 2 and primes[0] != 2 and primes[1] != 2:\n        return 20\n\
    \    \n    elif primes_len == 2 and primes[0] != 2 and primes[1] != 2:\n     \
    \   return 21\n    \n    elif primes_len == 2 and primes[0] != 2 and primes[1]\
    \ != 2:\n", "    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    ", "    \n    hex_key = ''\n    \n    hex_key = list(num)\n    \n  \
    \  hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n\
    \    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(int,\
    \ hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key =\
    \ list(map(int, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n\
    \    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n\
    \    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(int,\
    \ hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key =\
    \ list(map(int, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n\
    \    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n\
    \    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(int,\
    \ hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key =\
    \ list(map(int, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n\
    \    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n\
    \    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(int,\
    \ hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key =\
    \ list(map(int, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n\
    \    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n\
    \    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(int,\
    \ hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key =\
    \ list(map(int, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n\
    \    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(int, hex_key))\n\
    \    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key = list(map(int,\
    \ hex_key))\n    \n    hex_key = list(map(int, hex_key))\n    \n    hex_key =\
    \ list(map(int, hex_key))\n    \n    hex_key", "    hex_list = list(hex_key)\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse()\n\
    \    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse()\n    hex_list.pop()\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse()\n\
    \    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse()\n    hex_list.pop()\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse()\n\
    \    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse()\n    hex_list.pop()\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse()\n\
    \    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse()\n    hex_list.pop()\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse()\n\
    \    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse()\n    hex_list.pop()\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse()\n\
    \    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse()\n    hex_list.pop()\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse()\n\
    \    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse()\n    hex_list.pop()\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse()\n\
    \    hex_list.pop()\n    hex_list.sort()\n    hex_list.reverse", "    \n    hex_list\
    \ = list(num)\n    \n    hex_list.sort()\n    \n    hex_list.reverse()\n    \n\
    \    hex_list2 = []\n    \n    for i in hex_list:\n        hex_list2.append(int(i))\n\
    \    \n    hex_list2.sort()\n    \n    hex_list2.reverse()\n    \n    hex_list3\
    \ = []\n    \n    for i in hex_list2:\n        hex_list3.append(int(i))\n    \n\
    \    hex_list3.sort()\n    \n    hex_list3.reverse()\n    \n    hex_list4 = []\n\
    \    \n    for i in hex_list3:\n        hex_list4.append(int(i))\n    \n    hex_list4.sort()\n\
    \    \n    hex_list4.reverse()\n    \n    hex_list5 = []\n    \n    for i in hex_list4:\n\
    \        hex_list5.append(int(i))\n    \n    hex_list5.sort()\n    \n    hex_list5.reverse()\n\
    \    \n    hex_list6 = []\n    \n    for i in hex_list5:\n        hex_list6.append(int(i))\n\
    \    \n    hex_list6.sort()\n    \n    hex_list6.reverse()\n    \n    hex_list7\
    \ = []\n    \n    for i in hex_list6:\n        hex_list7.append(int(i))\n    \n\
    \    hex_list7.sort()\n    \n    hex_list7.reverse()\n    \n    hex_list8 = []\n\
    \    \n    for i in hex_list7:\n        hex_list8.append(int(i))\n    \n    hex_list8.sort()\n\
    \    \n    hex_list8.reverse()\n    \n    hex_list9 = []\n    \n    for i in hex_list8:\n\
    \        hex_list9.append(int(i))\n    \n    hex_list9.sort()\n    \n    hex_list9.reverse()\n\
    \    \n    hex_list10 = []\n    \n    for i in hex_list9:\n        hex_list10.append(int(i))\n\
    \    \n    hex_list10.sort()\n    \n    hex_list10.reverse()\n    \n    hex_list11\
    \ = []\n    \n    for i in hex_list10:\n        hex_list11.append(int(i))\n  \
    \  \n    hex_list11.sort()\n    \n    hex_list11.reverse()\n    \n    hex_list12\
    \ = []\n    \n    for i in hex_list11:\n        hex_list12.append(int(i))\n  \
    \  \n    hex_list12.sort()\n    \n    hex_list12.reverse()\n    \n    hex_list13\
    \ = []\n    \n    for i in hex_list12:\n        hex_list13.append(int(i))\n  \
    \  \n    hex_list13.sort()\n    \n    hex_list13.reverse()\n    \n    hex_list14\
    \ = []\n    \n", "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n\
    \    prime_numbers = []\n    \n    for digit in hex_list:\n        if digit in\
    \ prime_numbers:\n            continue\n        \n        prime_numbers.append(digit)\n\
    \        \n        if digit == 11:\n            prime_numbers.append(13)\n   \
    \         \n        if digit == 13:\n            prime_numbers.append(11)\n  \
    \          \n    prime_numbers.sort()\n    \n    prime_numbers_len = len(prime_numbers)\n\
    \    \n    if prime_numbers_len == 0:\n        return 0\n    \n    if prime_numbers_len\
    \ == 1:\n        return prime_numbers[0]\n    \n    prime_numbers_len = prime_numbers_len\
    \ - 1\n    \n    prime_numbers_sum = 0\n    \n    for prime_number in prime_numbers:\n\
    \        prime_numbers_sum += prime_number\n        \n    if prime_numbers_sum\
    \ % prime_numbers_len == 0:\n        return prime_numbers_sum\n    else:\n   \
    \     return 0\n    ", "    \n    hex_list = list(num)\n    hex_list.sort()\n\
    \    \n    hex_list2 = []\n    \n    for hex in hex_list:\n        hex_list2.append(hex(hex))\n\
    \    \n    hex_list2.sort()\n    \n    hex_list3 = []\n    \n    for hex in hex_list2:\n\
    \        hex_list3.append(hex[2:])\n    \n    hex_list3.sort()\n    \n    hex_list4\
    \ = []\n    \n    for hex in hex_list3:\n        hex_list4.append(hex)\n    \n\
    \    hex_list4.sort()\n    \n    hex_list5 = []\n    \n    for hex in hex_list4:\n\
    \        hex_list5.append(hex)\n    \n    hex_list5.sort()\n    \n    hex_list6\
    \ = []\n    \n    for hex in hex_list5:\n        hex_list6.append(hex)\n    \n\
    \    hex_list6.sort()\n    \n    hex_list7 = []\n    \n    for hex in hex_list6:\n\
    \        hex_list7.append(hex)\n    \n    hex_list7.sort()\n    \n    hex_list8\
    \ = []\n    \n    for hex in hex_list7:\n        hex_list8.append(hex)\n    \n\
    \    hex_list8.sort()\n    \n    hex_list9 = []\n    \n    for hex in hex_list8:\n\
    \        hex_list9.append(hex)\n    \n    hex_list9.sort()\n    \n    hex_list10\
    \ = []\n    \n    for hex in hex_list9:\n        hex_list10.append(hex)\n    \n\
    \    hex_list10.sort()\n    \n    hex_list11 = []\n    \n    for hex in hex_list10:\n\
    \        hex_list11.append(hex)\n    \n    hex_list11.sort()\n    \n    hex_list12\
    \ = []\n    \n    for hex in hex_list11:\n        hex_list12.append(hex)\n   \
    \ \n    hex_list12.sort()\n    \n    hex_list13 = []\n    \n    for hex in hex_list12:\n\
    \        hex_list13.append(hex)\n    \n    hex_list13.sort()\n    \n    hex_list14\
    \ = []\n    \n    for hex in hex_list13:\n        hex_list14.append(hex)\n   \
    \ \n    hex_list14.sort()\n    \n    hex_list15 = []\n    \n    for hex in hex_list14:\n\
    \        hex_list15.append(hex)\n    \n    hex_list15.sort()\n    \n    hex_list16\
    \ = []\n    \n    for hex in hex_list15:\n        hex_list16.append(hex)\n   \
    \ \n    hex_list16.sort()\n    \n    ", "    \n    hex_list = list(num)\n    hex_list.sort()\n\
    \    \n    prime_list = []\n    \n    for hex in hex_list:\n        \n       \
    \ if hex in prime_list:\n            continue\n        \n        prime_list.append(hex)\n\
    \        \n        if hex % 2 == 0:\n            continue\n        \n        hex\
    \ = hex // 2\n        \n        if hex in prime_list:\n            continue\n\
    \        \n        prime_list.append(hex)\n        \n        if hex % 3 == 0:\n\
    \            continue\n        \n        hex = hex // 3\n        \n        if\
    \ hex in prime_list:\n            continue\n        \n        prime_list.append(hex)\n\
    \        \n        if hex % 5 == 0:\n            continue\n        \n        hex\
    \ = hex // 5\n        \n        if hex in prime_list:\n            continue\n\
    \        \n        prime_list.append(hex)\n        \n        if hex % 7 == 0:\n\
    \            continue\n        \n        hex = hex // 7\n        \n        if\
    \ hex in prime_list:\n            continue\n        \n        prime_list.append(hex)\n\
    \        \n        if hex % 11 == 0:\n            continue\n        \n       \
    \ hex = hex // 11\n        \n        if hex in prime_list:\n            continue\n\
    \        \n        prime_list.append(hex)\n        \n        if hex % 13 == 0:\n\
    \            continue\n        \n        hex = hex // 13\n        \n        if\
    \ hex in prime_list:\n            continue\n        \n        prime_list.append(hex)\n\
    \        \n        if hex % 17 == 0:\n            continue\n        \n       \
    \ hex = hex // 17\n        \n        if hex in prime_list:\n            continue\n\
    \        \n        prime_list.append(hex)\n        \n        if hex % 19 == 0:\n\
    \            continue\n        \n        hex = hex // 19\n        \n        if\
    \ hex in prime_list:\n            continue\n        \n        prime_list.append(hex)\n\
    \        \n        if hex % 23 == 0:\n            continue\n        \n       \
    \ hex = hex // 23\n        \n        if hex in prime_list:\n            continue\n\
    \        \n        prime_list.append(hex)\n        \n        if hex % 29 == 0:\n\
    \            continue\n        \n        hex = hex // 29\n        \n        if\
    \ hex in prime_list:\n            continue\n        \n        prime_list.append(hex)\n\
    \        \n        if hex % 31 == 0:\n            continue\n        \n       \
    \ hex = hex // 31\n        \n        if hex in prime_list:\n            continue\n\
    \        \n        prime_list.append(hex)\n        \n        if hex % 37 == 0:\n\
    \            continue\n        \n        hex = hex // 37\n        \n        if\
    \ hex in prime_list:\n            continue\n        \n        prime_list.append(hex)\n\
    \        \n        if hex % 41 == 0:\n            continue\n        \n       \
    \ hex = hex // 41\n        \n        if hex", "    \n    digits = num.upper()\n\
    \    \n    count = 0\n    \n    for digit in digits:\n        if digit in 'ABCDEF':\n\
    \            count += 1\n            \n    return count\n\n", "    \n    hex_key\
    \ = 0\n    \n    hex_key = int(num, 16)\n    \n    hex_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    hex_digits_len = len(hex_digits)\n    \n    hex_digit_count = 0\n \
    \   \n    hex_digit_count_prime = 0\n    \n    hex_digit_count_not_prime = 0\n\
    \    \n    hex_digit_count_not_prime_prime = 0\n    \n    hex_digit_count_not_prime_not_prime\
    \ = 0\n    \n    hex_digit_count_not_prime_prime_prime = 0\n    \n    hex_digit_count_not_prime_prime_not_prime\
    \ = 0\n    \n    hex_digit_count_not_prime_prime_prime_prime = 0\n    \n    hex_digit_count_not_prime_prime_prime_not_prime\
    \ = 0\n    \n    hex_digit_count_not_prime_prime_prime_prime_prime = 0\n    \n\
    \    hex_digit_count_not_prime_prime_prime_prime_not_prime = 0\n    \n    hex_digit_count_not_prime_prime_prime_prime_prime_prime\
    \ = 0\n    \n    hex_digit_count_not_prime_prime_prime_prime_prime_not_prime =\
    \ 0\n    \n    hex_digit_count_not_prime_prime_prime_prime_prime_prime_prime =\
    \ 0\n    \n    hex_digit_count_not_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0\n    \n    hex_digit_count_not_prime_prime_prime_prime_prime_prime_prime\
    \ = 0\n    \n    hex_digit_count_not_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0\n    \n    hex_digit_count_not_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0\n    \n    hex_digit_count_not_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0\n    \n    hex_digit_count_not_prime_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0\n    \n    hex_digit_count_not_prime_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0\n    \n    hex_digit_count_not_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_not_prime\
    \ = 0\n    \n    hex_digit_count_not_prime_prime_prime_prime_prime_prime", " \
    \   \n    digits = [int(i) for i in num.upper() if i.isdigit()]\n    \n    primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    primes_count = 0\n    \n    for digit in digits:\n\
    \        if digit in primes:\n            primes_count += 1\n            \n  \
    \  return primes_count\n\n", "    \n    count = 0\n    \n    # Your code here\n\
    \    \n    return count\n", "    \n    hex_list = ['0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F']\n\
    \    \n    hex_key = int(num.upper())\n    \n    count = 0\n    \n    for digit\
    \ in hex_key:\n        if digit in hex_list:\n            count += 1\n    \n \
    \   return count\n", "    \n    hex_key = 0\n    \n    hex_digits = num.upper()\n\
    \    \n    for digit in hex_digits:\n        if digit in 'ABCDEF':\n         \
    \   hex_key += 1\n        elif digit in '123456789':\n            hex_key += 2\n\
    \        elif digit in 'BCDF':\n            hex_key += 4\n        elif digit in\
    \ '01234567':\n            hex_key += 8\n        elif digit in '89ABCDEF':\n \
    \           hex_key += 16\n        else:\n            hex_key += 32\n    \n  \
    \  return hex_key\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n\
    </cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n\
    </cell>\n<cell>\nhex_key('2020')\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that receives a positive integer and returns the number of \ntimes it appears\
    \ in the following list: \n[2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,",
  "    \n    hex_key = int(num, 16)\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    count = 0\n    \n    for digit in hex_key:\n        if digit in prime_digits:\n\
    \            count += 1\n            \n    return count\n", "    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n \
    \   \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n  \
    \  hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    \n    hex_key\
    \ = 0\n    \n    hex_key = 0\n    \n    hex_key = 0\n    ", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    count = 0\n    \n    # Your\
    \ code here\n    \n    return count\n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    hex_key = ''\n    hex_digits = ''\n    hex_digits_len\
    \ = len(hex_key)\n    hex_digits_len_2 = hex_digits_len // 2\n    hex_digits_len_3\
    \ = hex_digits_len // 3\n    hex_digits_len_4 = hex_digits_len // 4\n    hex_digits_len_5\
    \ = hex_digits_len // 5\n    hex_digits_len_6 = hex_digits_len // 6\n    hex_digits_len_7\
    \ = hex_digits_len // 7\n    hex_digits_len_8 = hex_digits_len // 8\n    hex_digits_len_9\
    \ = hex_digits_len // 9\n    hex_digits_len_10 = hex_digits_len // 10\n    hex_digits_len_11\
    \ = hex_digits_len // 11\n    hex_digits_len_12 = hex_digits_len // 12\n    hex_digits_len_13\
    \ = hex_digits_len // 13\n    hex_digits_len_14 = hex_digits_len // 14\n    hex_digits_len_15\
    \ = hex_digits_len // 15\n    hex_digits_len_16 = hex_digits_len // 16\n    hex_digits_len_17\
    \ = hex_digits_len // 17\n    hex_digits_len_18 = hex_digits_len // 18\n    hex_digits_len_19\
    \ = hex_digits_len // 19\n    hex_digits_len_20 = hex_digits_len // 20\n    hex_digits_len_21\
    \ = hex_digits_len // 21\n    hex_digits_len_22 = hex_digits_len // 22\n    hex_digits_len_23\
    \ = hex_digits_len // 23\n    hex_digits_len_24 = hex_digits_len // 24\n    hex_digits_len_25\
    \ = hex_digits_len // 25\n    hex_digits_len_26 = hex_digits_len // 26\n    hex_digits_len_27\
    \ = hex_digits_len // 27\n    hex_digits_len_28 = hex_digits_len // 28\n    hex_digits_len_29\
    \ = hex_digits_len // 29\n    hex_digits_len_30 = hex_digits_len // 30\n    hex_digits_len_31\
    \ = hex_digits_len // 31\n    hex_digits_len_32 = hex_digits_len // 32\n    hex_digits_len_33\
    \ = hex_digits_len // 33\n    hex_digits_len_34 = hex_digits_len // 34\n    hex_digits_len_35\
    \ = hex_digits_len // 35\n    hex_digits_len_36 = hex_digits_len // 36\n    hex_digits_len_37\
    \ = hex_digits_len // 37\n", "    \n    hex_key = ''\n    \n    hex_key = list(num)\n\
    \    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    ", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    count = 0\n\
    \    \n    hex_string = num.upper()\n    \n    for digit in hex_string:\n    \
    \    if digit in 'ABCDEF':\n            count += 1\n            \n    return count\n\
    </cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\n\
    hex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\n\
    hex_key('2020')\n</cell>\n<text>\nExercise 2\nWrite a function that receives a\
    \ string and returns the number of \ncharacters that are not letters (uppercase\
    \ or lowercase).\nExamples:\n>>> count_letters('Hello World!')\n5\n>>> count_letters('Hello\
    \ World')\n7\n>>> count_letters('Hello World!')\n5\n>>> count_letters('Hello World')\n\
    7\n>>> count_letters('Hello World!')\n5\n>>> count_letters('Hello World')\n7\n\
    >>> count_letters('Hello World!')\n5\n>>> count_letters('Hello World')\n7\n>>>\
    \ count_letters('Hello World!')\n5\n>>> count_letters('Hello World')\n7\n>>> count_letters('Hello\
    \ World!')\n5\n>>> count_letters('Hello World')\n7\n>>> count_letters('Hello World!')\n\
    5\n>>> count_letters('Hello World')\n7\n>>> count_letters('Hello World!')\n5\n\
    >>> count_letters('Hello World')\n7\n>>> count_letters('Hello World!')\n5\n>>>\
    \ count_letters('Hello World')\n7\n>>> count_letters('Hello World!')\n5\n>>> count_letters('Hello\
    \ World')\n7\n>>> count_letters('Hello World!')\n5\n>>> count_letters('Hello World')\n\
    7\n>>> count_letters('Hello World!')\n5\n>>> count_letters('Hello World')\n7\n\
    >>> count_letters('Hello World!')\n5\n>>> count_letters('Hello World')\n7\n>>>\
    \ count_letters('Hello World!')\n5\n>>> count_letters('Hello World')\n7\n>>> count_letters('Hello\
    \ World!')\n5\n>>> count_letters('Hello World')\n7\n>>> count_letters('Hello World!')\n\
    5\n>>> count_letters('Hello World')\n7\n>>> count_letters('Hello World!')\n5\n\
    >>> count_letters('Hello World')\n7\n>>> count_letters('Hello World!')\n5\n>>>\
    \ count_letters('Hello World')\n7\n>>> count_", "    \n    count = 0\n    \n \
    \   # your code here\n    \n    return count\n\n", "    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    count = 0\n    \n    hex_list = list(hex_key)\n\
    \    \n    for hex in hex_list:\n        \n        if hex in 'ABCDEF':\n     \
    \       \n            count += 1\n            \n    return count\n</cell>\n<cell>\n\
    hex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n\
    </cell>\n<cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that receives a string and returns\
    \ the number of uppercase letters in the string.\nExamples:\n>>> count_uppercase_letters('Hello\
    \ World')\n6\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World!')\n5\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World!')\n5\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World!')\n5\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World!')\n5\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World!')\n5\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World!')\n5\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World!')\n5\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World!')\n5\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World!')\n5\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World!')\n5\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World!')\n5\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World!')\n5\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World!')\n5\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World!')\n5\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('",
  "    \n    count = 0\n    \n    # Your code here\n    \n    return count\n</cell>\n\
    <cell>", "    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '", "    \n    hex_key = ''\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n", "    \n    hex_key = int(num,\
    \ 16)\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    prime_digits_set\
    \ = set(prime_digits)\n    \n    prime_digits_set = prime_digits_set.intersection(set(hex_key))\n\
    \    \n    return len(prime_digits_set)\n", "    \n    count = 0\n    \n    for\
    \ char in num:\n        if char.isupper():\n            count += 1\n        else:\n\
    \            count += 2\n    \n    return count\n\n", "    \n    hex_key = ''\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n   \
    \ hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n", "    \n    digits = [int(i) for i in num.upper() if i.isdigit()]\n\
    \    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137,\
    \ 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227,\
    \ 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313,\
    \ 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\
    \ 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509,\
    \ 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617,\
    \ 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727,\
    \ 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829,\
    \ 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947,\
    \ 953, 967, 971, 977, 983, 991, 997]\n    \n    count = 0\n    \n    for digit\
    \ in digits:\n        if digit in primes:\n            count += 1\n          \
    \  \n    return count\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n\
    </cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n\
    </cell>\n<cell>\nhex_key('2020')\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that receives a positive integer and returns the number of digits in it.\n\n\
    \n</text>\n<cell>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    count = 0\n    \n\
    \    for x in hex_list:\n        if x == 'A' or x == 'B' or x == 'C' or x == 'D'\
    \ or x == 'E' or x == 'F':\n            count += 1\n        else:\n          \
    \  count += 2\n    \n    return count\n\n", "    \n    digits = num.upper()\n\
    \    \n    count = 0\n    \n    for digit in digits:\n        if digit in 'ABCDEF':\n\
    \            count += 1\n    \n    return count\n</cell>\n<cell>\nhex_key('AB')\n\
    </cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n\
    <cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n</cell>\n\
    <text>\nExercise 3\nWrite a function that receives a string and returns the number\
    \ of characters that are not letters.\nExamples:\n>>> not_letters('AB')\n1\n>>>\
    \ not_letters('1077E')\n2\n>>> not_letters('ABED1A33')\n3\n>>> not_letters('123456789ABCDEF0')\n\
    6\n>>> not_letters('2020')\n2\n>>> not_letters('')\n0\n>>> not_letters('A')\n\
    0\n>>> not_letters('A1')\n0\n>>> not_letters('A11')\n0\n>>> not_letters('A111')\n\
    0\n>>> not_letters('A1111')\n0\n>>> not_letters('A11111')\n0\n>>> not_letters('A111111')\n\
    0\n>>> not_letters('A1111111')\n0\n>>> not_letters('A1111111')\n0\n>>> not_letters('A11111112')\n\
    0\n>>> not_letters('A111111122')\n0\n>>> not_letters('A1111111222')\n0\n>>> not_letters('A11111112222')\n\
    0\n>>> not_letters('A111111122222')\n0\n>>> not_letters('A1111111222222')\n0\n\
    >>> not_letters('A11111112222222')\n0\n>>> not_letters('A111111122222222')\n0\n\
    >>> not_letters('A1111111222222222')\n0\n>>> not_letters('A11111112222222222')\n\
    0\n>>> not_letters('A111111122222222222')\n0\n>>> not_letters('A1111111222222222222')\n\
    0\n>>> not_letters('A11111112222222222223')\n0\n>>> not_letters('A111111122222222222231')\n\
    0\n>>> not_letters('A1111111222222222222312')\n0\n>>> not_letters('A11111112",
  "    \n    count = 0\n    \n    hex_list = list(hex_key)\n    \n    for char in\
    \ hex_list:\n        if char.isalpha():\n            count += 1\n        else:\n\
    \            hex_list.remove(char)\n    \n    hex_list.sort()\n    \n    for char\
    \ in hex_list:\n        if char.isalpha():\n            count += 1\n        else:\n\
    \            hex_list.remove(char)\n    \n    return count\n</cell>\n<cell>\n\
    hex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n\
    </cell>\n<cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that receives a positive integer\
    \ and returns the number of \ndigits in the number that are divisible by 3. The\
    \ function should \nwork for negative numbers as well.\nExamples:\n>>> count_digits(-10)\n\
    0\n>>> count_digits(-100)\n3\n>>> count_digits(-1000)\n1\n>>> count_digits(-10000)\n\
    2\n>>> count_digits(-100000)\n3\n>>> count_digits(-1000000)\n2\n>>> count_digits(-10000000)\n\
    3\n>>> count_digits(-100000010)\n2\n>>> count_digits(-100000010)\n3\n>>> count_digits(-1000000100)\n\
    2\n>>> count_digits(-1000000100)\n3\n>>> count_digits(-10000001000)\n2\n>>> count_digits(-10000001000)\n\
    3\n>>> count_digits(-100000010000)\n2\n>>> count_digits(-100000010000)\n3\n>>>\
    \ count_digits(-1000000100000)\n2\n>>> count_digits(-1000000100000)\n3\n>>> count_digits(-10000001000000)\n\
    2\n>>> count_digits(-10000001000000)\n3\n>>> count_digits(-100000010000000)\n\
    2\n>>> count_digits(-100000010000000)\n3\n>>> count_digits(-1000000100000000)\n\
    2\n>>> count_digits(-1000000100000000)\n3\n>>> count_digits(-10000001000000000)\n\
    2\n>>> count_digits(-10000001000000000)\n3\n>>> count_digits(-100000010000000000)\n\
    2\n>>> count_digits(-100000010000000000)\n3\n>>> count_digits(-1000000100000000000)\n\
    2\n>>> count_digits(-1000000100000000000)\n3\n>>> count_digits(-10000001000000000000)",
  "    \n    hex_key = ''\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key = list(hex_key)\n    \n\
    \    hex_key = list(hex_key)\n", "    \n    hex_list = list(num)\n    hex_list.sort()\n\
    \    \n    prime_numbers = []\n    \n    for num in hex_list:\n        if num\
    \ % 2 == 0:\n            prime_numbers.append(num)\n    \n    prime_numbers.sort()\n\
    \    \n    prime_numbers_length = len(prime_numbers)\n    \n    if prime_numbers_length\
    \ == 1:\n        return prime_numbers[0]\n    \n    if prime_numbers_length ==\
    \ 2:\n        if prime_numbers[0] == prime_numbers[1]:\n            return prime_numbers[0]\n\
    \        else:\n            return prime_numbers[1]\n    \n    if prime_numbers_length\
    \ == 3:\n        if prime_numbers[0] == prime_numbers[1] and prime_numbers[1]\
    \ == prime_numbers[2]:\n            return prime_numbers[0]\n        else:\n \
    \           return prime_numbers[1]\n    \n    if prime_numbers_length == 4:\n\
    \        if prime_numbers[0] == prime_numbers[1] and prime_numbers[1] == prime_numbers[2]\
    \ and prime_numbers[2] == prime_numbers[3]:\n            return prime_numbers[0]\n\
    \        else:\n            return prime_numbers[1]\n    \n    if prime_numbers_length\
    \ == 5:\n        if prime_numbers[0] == prime_numbers[1] and prime_numbers[1]\
    \ == prime_numbers[2] and prime_numbers[2] == prime_numbers[3] and prime_numbers[3]\
    \ == prime_numbers[4]:\n            return prime_numbers[0]\n        else:\n \
    \           return prime_numbers[1]\n    \n    if prime_numbers_length == 6:\n\
    \        if prime_numbers[0] == prime_numbers[1] and prime_numbers[1] == prime_numbers[2]\
    \ and prime_numbers[2] == prime_numbers[3] and prime_numbers[3] == prime_numbers[4]\
    \ and prime_numbers[4] == prime_numbers[5]:\n            return prime_numbers[0]\n\
    \        else:\n            return prime_numbers[1]\n    \n    if prime_numbers_length\
    \ == 7:\n        if prime_numbers[0] == prime_numbers[1] and prime_numbers[1]\
    \ == prime_numbers[2] and prime_numbers[2] == prime_numbers[3] and prime_numbers[3]\
    \ == prime_numbers[4] and prime_numbers[4] == prime_numbers[5] and prime_numbers[5]\
    \ == prime_numbers[6]:\n            return prime_numbers[0]\n        else:\n \
    \           return prime_numbers[1]\n    \n    if prime_numbers_length == 8:\n\
    \        if prime_numbers[0] == prime_numbers[1] and prime_numbers[1] == prime_numbers[2]\
    \ and prime_numbers[2] == prime_numbers[3] and prime_numbers[3] == prime", " \
    \   \n    count = 0\n    \n    # Your code here\n    \n    return count\n\n",
  "    \n    hex_key = 0\n    \n    hex_digits = num.upper()\n    \n    for digit\
    \ in hex_digits:\n        hex_key += int(digit)\n    \n    return hex_key\n\n",
  "    \n    hex_key = 0\n    \n    hex_digits = num.upper()\n    \n    for digit\
    \ in hex_digits:\n        if digit == 'A' or digit == 'B' or digit == 'C' or digit\
    \ == 'D' or digit == 'E' or digit == 'F':\n            hex_key += 10\n       \
    \ else:\n            hex_key += int(digit)\n    \n    hex_key += 2\n    \n   \
    \ return hex_key\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n\
    </cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n\
    </cell>\n<cell>\nhex_key('2020')\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that receives a string and counts the number of characters that are \nuppercase\
    \ letters.\nExamples:\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World')\n6\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World')\n6\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World')\n6\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World')\n6\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World')\n6\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World')\n6\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World')\n6\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World')\n6\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World')\n6\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World')\n6\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World')\n6\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World')\n6\n>>> count_uppercase_letters('Hello World!')\n5\n>>> count_uppercase_letters('Hello\
    \ World')\n6\n>>> count_uppercase_letters('Hello World!')\n5", "    \n    hex_key\
    \ = int(num, 16)\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    prime_digits_set\
    \ = set(prime_digits)\n    \n    prime_digits_set = prime_digits_set.union(set(range(10,\
    \ hex_key)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10,\
    \ hex_key//100)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//100,\
    \ hex_key//1000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//1000,\
    \ hex_key//10000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10000,\
    \ hex_key//100000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//100000,\
    \ hex_key//1000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//1000000,\
    \ hex_key//10000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10000000,\
    \ hex_key//100000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//100000000,\
    \ hex_key//1000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//1000000000,\
    \ hex_key//10000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10000000000,\
    \ hex_key//100000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//100000000000,\
    \ hex_key//1000000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//1000000000000,\
    \ hex_key//10000000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10000000000000,\
    \ hex_key//100000000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//100000000000000,\
    \ hex_key//1000000000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//1000000000000000,\
    \ hex_key//10000000000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10000000000000000",
  "    \n    hex_list = list(num)\n    hex_list.sort()\n    \n    hex_dict = {\n \
    \       'A':1, 'B':2, 'C':3, 'D':4, 'E':5, 'F':6\n    }\n    \n    prime_list\
    \ = []\n    \n    for char in hex_list:\n        if char in hex_dict:\n      \
    \      prime_list.append(hex_dict[char])\n    \n    prime_list.sort()\n    \n\
    \    prime_sum = 0\n    \n    for prime in prime_list:\n        if prime > 2:\n\
    \            prime_sum += prime\n    \n    return prime_sum\n\n", "    \n    count\
    \ = 0\n    \n    # Your code here\n    \n    return count\n\n", "    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key\
    \ = '", "    hex_list = list(num)\n    hex_list.sort()\n    hex_list.reverse()\n\
    \    hex_list = ['A','B','C','D','E','F']\n    hex_list.sort()\n    hex_list.reverse()\n\
    \    hex_list = ['0','1','2','3','4','5','6','7','8','9']\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = ['A','B','C','D','E','F']\n    hex_list.sort()\n\
    \    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['A','B','C','D','E','F']\n\
    \    hex_list.sort()\n    hex_list.reverse()\n    hex_list = ['0','1','2','3','4','5','6','7','8','9']\n\
    \    hex", "    \n    count = 0\n    \n    hex_list = list(hex_key)\n    \n  \
    \  for char in hex_list:\n        \n        if char == 'A' or char == 'B' or char\
    \ == 'C' or char == 'D' or char == 'E' or char == 'F':\n            \n       \
    \     count += 1\n            \n        elif char == '2' or char == '3' or char\
    \ == '5' or char == '7' or char == '11' or char == '13' or char == '17' or char\
    \ == '19' or char == '23' or char == '29' or char == '31' or char == '37' or char\
    \ == '41' or char == '43' or char == '47' or char == '53' or char == '59' or char\
    \ == '61' or char == '67' or char == '71' or char == '73' or char == '79' or char\
    \ == '83' or char == '89' or char == '97':\n            \n            count +=\
    \ 1\n            \n        elif char == '2' or char == '3' or char == '5' or char\
    \ == '7' or char == '9':\n            \n            count += 1\n            \n\
    \        elif char == '2' or char == '3' or char == '5' or char == '7' or char\
    \ == 'B':\n            \n            count += 1\n            \n        elif char\
    \ == '2' or char == '3' or char == '5' or char == '7' or char == 'D':\n      \
    \      \n            count += 1\n            \n        elif char == '2' or char\
    \ == '3' or char == '5' or char == '7' or char == 'E':\n            \n       \
    \     count += 1\n            \n        elif char == '2' or char == '3' or char\
    \ == '5' or char == '7' or char == 'F':\n            \n            count += 1\n\
    \            \n        elif char == '2' or char == '3' or char == '5' or char\
    \ == '7' or char == 'A':\n            \n            count += 1\n            \n\
    \        elif char == '2' or char == '3' or char == '5' or char == '7' or char\
    \ == 'C':\n            \n            count += 1\n            \n        elif char\
    \ == '2' or char == '3' or char == '5' or char == '7' or char == '9':\n      \
    \      \n            count += 1\n            \n        elif char == '2' or char\
    \ == '3' or char == '5' or char == '7' or char == 'F':\n            \n       \
    \     count += 1\n            \n        elif char == '2' or char == '3' or char\
    \ == '5' or char == '7' or char == 'E':\n            \n            count += 1\n\
    \            \n        elif char == '2' or char == '3' or char == '5' or char\
    \ == '7' or char == 'D':\n            \n            count += 1\n            \n\
    \        elif char == '2' or char == '3' or char == '5' or char == '7' or char\
    \ == 'C':\n            \n            count += 1\n            ", "    \n    hex_list\
    \ = list(num)\n    hex_list.sort()\n    \n    prime_list = []\n    \n    for digit\
    \ in hex_list:\n        if digit in prime_list:\n            pass\n        else:\n\
    \            prime_list.append(digit)\n    \n    prime_list.sort()\n    \n   \
    \ prime_digit = 0\n    \n    for digit in prime_list:\n        if digit in hex_list:\n\
    \            prime_digit += 1\n    \n    return prime_digit\n\n", "    \n    count\
    \ = 0\n    \n    hex_list = list(num)\n    \n    for char in hex_list:\n     \
    \   if char == 'A' or char == 'B' or char == 'C' or char == 'D' or char == 'E'\
    \ or char == 'F':\n            count += 1\n            \n    return count\n\n",
  "    \n    digits = num.upper()\n    \n    primes = []\n    \n    for digit in digits:\n\
    \        if digit in 'ABCDEF':\n            primes.append(int(digit))\n    \n\
    \    primes.sort()\n    \n    return len(primes)\n\n", "    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '0123456789ABCDEF'\n\
    \    \n    hex_key = '0123456789ABCDEF'\n    \n    hex_key = '", "    hex_key\
    \ = ''\n    hex_digits = ''\n    hex_digits_count = 0\n    hex_digit_count = 0\n\
    \    hex_digit_count_2 = 0\n    hex_digit_count_3 = 0\n    hex_digit_count_5 =\
    \ 0\n    hex_digit_count_7 = 0\n    hex_digit_count_11 = 0\n    hex_digit_count_13\
    \ = 0\n    hex_digit_count_17 = 0\n    hex_digit_count_19 = 0\n    hex_digit_count_23\
    \ = 0\n    hex_digit_count_29 = 0\n    hex_digit_count_31 = 0\n    hex_digit_count_37\
    \ = 0\n    hex_digit_count_43 = 0\n    hex_digit_count_47 = 0\n    hex_digit_count_53\
    \ = 0\n    hex_digit_count_59 = 0\n    hex_digit_count_61 = 0\n    hex_digit_count_67\
    \ = 0\n    hex_digit_count_71 = 0\n    hex_digit_count_73 = 0\n    hex_digit_count_79\
    \ = 0\n    hex_digit_count_83 = 0\n    hex_digit_count_89 = 0\n    hex_digit_count_97\
    \ = 0\n    hex_digit_count_101 = 0\n    hex_digit_count_107 = 0\n    hex_digit_count_113\
    \ = 0\n    hex_digit_count_119 = 0\n    hex_digit_count_127 = 0\n    hex_digit_count_131\
    \ = 0\n    hex_digit_count_137 = 0\n    hex_digit_count_141 = 0\n    hex_digit_count_147\
    \ = 0\n    hex_digit_count_151 = 0\n    hex_digit_count_157 = 0\n    hex_digit_count_163\
    \ = 0\n    hex_digit_count_167 = 0\n    hex_digit_count_173 = 0\n    hex_digit_count_179\
    \ = 0\n    hex_digit_count_183 = 0\n    hex_digit_count_191 = 0\n    hex_digit_count_197\
    \ = 0\n    hex_digit_count_203 = 0\n    hex_digit_count_209 = 0\n    hex_digit_count_215\
    \ = 0\n    hex_digit_count_221 = 0\n    hex_digit_count_227 = 0\n    hex_digit_count_233\
    \ = 0\n    hex_digit_count_239 = 0\n    hex_digit_count_243 = 0\n    hex_digit_count_251\
    \ = 0\n    hex_digit_count_257 = 0\n    hex_digit_count_263 = 0\n    hex_digit_count_269\
    \ = 0\n    hex_digit_count_273 = 0\n    hex_digit_count_279 = 0\n    hex_digit_count_283\
    \ = 0\n    hex_digit_count_289 = 0\n    hex_digit_count_297 = 0\n    hex_digit_count_303\
    \ = 0\n    hex_digit_count_309 = 0\n    hex_digit_count_315 = 0\n    hex_digit_count_321\
    \ = 0\n    hex_digit_count_327 = 0\n    hex_digit_count_333 = 0\n    hex_digit_count_339\
    \ = 0\n    hex_digit_count_343 = 0\n    hex_digit_", "    \n    hex_key = ''\n\
    \    \n    hex_key = int(num, 16)\n    \n    hex_digits = [int(hex_key[hex_key.index(i)],\
    \ 16) for i in range(0, 16)]\n    \n    hex_digits_prime = [i for i in range(0,\
    \ 16) if hex_digits[i] == i]\n    \n    hex_digits_prime_len = len(hex_digits_prime)\n\
    \    \n    hex_digits_prime_2 = []\n    \n    for i in range(0, hex_digits_prime_len):\n\
    \        hex_digits_prime_2.append(hex_digits_prime[i])\n        \n    hex_digits_prime_2.sort()\n\
    \    \n    hex_digits_prime_3 = []\n    \n    for i in range(0, hex_digits_prime_len):\n\
    \        hex_digits_prime_3.append(hex_digits_prime_2[i])\n        \n    hex_digits_prime_3.sort()\n\
    \    \n    hex_digits_prime_4 = hex_digits_prime_3 + hex_digits_prime\n    \n\
    \    hex_digits_prime_5 = hex_digits_prime_4 + hex_digits_prime\n    \n    hex_digits_prime_6\
    \ = hex_digits_prime_5 + hex_digits_prime\n    \n    hex_digits_prime_7 = hex_digits_prime_6\
    \ + hex_digits_prime\n    \n    hex_digits_prime_8 = hex_digits_prime_7 + hex_digits_prime\n\
    \    \n    hex_digits_prime_9 = hex_digits_prime_8 + hex_digits_prime\n    \n\
    \    hex_digits_prime_10 = hex_digits_prime_9 + hex_digits_prime\n    \n    hex_digits_prime_11\
    \ = hex_digits_prime_10 + hex_digits_prime\n    \n    hex_digits_prime_12 = hex_digits_prime_11\
    \ + hex_digits_prime\n    \n    hex_digits_prime_13 = hex_digits_prime_12 + hex_digits_prime\n\
    \    \n    hex_digits_prime_14 = hex_digits_prime_13 + hex_digits_prime\n    \n\
    \    hex_digits_prime_15 = hex_digits_prime_14 + hex_digits_prime\n    \n    hex_digits_prime_16\
    \ = hex_digits_prime_15 + hex_digits_prime\n    \n    hex_digits_prime_17 = hex_digits_prime_16\
    \ + hex_digits_prime\n    \n    hex_digits_prime_18 = hex_digits_prime_17 + hex_digits_prime\n\
    \    \n    hex_digits_prime_19 = hex_digits_prime_18 + hex_digits_prime\n    \n\
    \    hex_digits_", "    hex_key = ''\n    hex_key = ''.join([hex_key.upper() if\
    \ hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key\n             \
    \         in num])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key\n                      in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key\n                      in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key\n          \
    \            in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key\n                      in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key\n                      in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key\n          \
    \            in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key\n                      in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key\n                      in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key\n          \
    \            in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key\n                      in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key\n                      in hex_key])\n    hex_key = ''.join([hex_key.upper()\
    \ if hex_key.upper() in 'ABCDEF' else hex_key.lower() for hex_key\n          \
    \            in hex_key])\n    hex_key = ''.join([hex_key.upper() if hex_key.upper()\
    \ in 'ABCDEF' else hex_key.lower() for hex_key\n                      in hex_key])\n\
    \    hex_key = ''.join([hex_key.upper() if hex_key.upper() in 'ABCDEF' else hex_key.lower()\
    \ for hex_key\n                      in hex_key", "    \n    hex_key = ''\n  \
    \  \n    # Your code here\n    \n    return hex_key\n", "    \n    count = 0\n\
    \    \n    hex_list = list(num)\n    \n    hex_list.sort()\n    \n    for hex\
    \ in hex_list:\n        \n        if hex in '0123456789ABCDEF':\n            \n\
    \            count += 1\n            \n    return count\n</cell>\n<cell>\nhex_key('AB')\n\
    </cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n\
    <cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that receives a positive integer and returns\
    \ the number of \ntimes it appears in the number 1 through n.\nExamples:\n>>>\
    \ count_digits(1)\n0\n>>> count_digits(2)\n1\n>>> count_digits(3)\n2\n>>> count_digits(10)\n\
    1\n>>> count_digits(15)\n2\n>>> count_digits(20)\n1\n>>> count_digits(25)\n2\n\
    >>> count_digits(30)\n3\n>>> count_digits(100)\n1\n>>> count_digits(1000)\n2\n\
    >>> count_digits(10000)\n3\n>>> count_digits(100000)\n4\n>>> count_digits(1000000)\n\
    5\n>>> count_digits(10000000)\n6\n>>> count_digits(100000000)\n7\n>>> count_digits(1000000000)\n\
    8\n>>> count_digits(10000000000)\n9\n>>> count_digits(100000000000)\n10\n>>> count_digits(1000000000000)\n\
    11\n>>> count_digits(10000000000000)\n12\n>>> count_digits(100000000000000)\n\
    13\n>>> count_digits(1000000000000000)\n14\n>>> count_digits(10000000000000000)\n\
    15\n>>> count_digits(100000000000000000)\n16\n>>> count_digits(100000000000000001)\n\
    17\n>>> count_digits(100000000000000002)\n18\n>>> count_digits(100000000000000003)\n\
    19\n>>> count_digits(100000000000000004)\n20\n>>> count_digits(100000000000000005)\n\
    21\n>>> count_digits(100000000000000006)\n22\n>>> count_digits(100000000000000007)\n\
    23\n>>> count_digits(100000000000000008)\n24\n>>> count_digits(100000000000000009)\n\
    25\n>>> count_digits(100000000000000010)\n26\n>>> count_digits(100000000000000011)\n\
    27\n>>> count_digits(100000000000000012)\n28\n>>> count_", "    \n    hex_key\
    \ = 0\n    \n    hex_key = int(num, 16)\n    \n    hex_digits = [int(hex_key[hex_key.index(i)],\
    \ 16) for i in range(0, 16)]\n    \n    prime_digits = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  \
    \  \n    hex_digits_prime = [hex_digits[i] for i in prime_digits]\n    \n    hex_digits_prime\
    \ = [hex(i) for i in hex_digits_prime]\n    \n    hex_digits_prime = [i for i\
    \ in hex_digits_prime if i < 16]\n    \n    hex_digits_prime = [hex(i) for i in\
    \ hex_digits_prime]\n    \n    hex_digits_prime = [i for i in hex_digits_prime\
    \ if i < 16]\n    \n    hex_digits_prime = [hex(i) for i in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [i for i in hex_digits_prime if i < 16]\n    \n\
    \    hex_digits_prime = [hex(i) for i in hex_digits_prime]\n    \n    hex_digits_prime\
    \ = [i for i in hex_digits_prime if i < 16]\n    \n    hex_digits_prime = [hex(i)\
    \ for i in hex_digits_prime]\n    \n    hex_digits_prime = [i for i in hex_digits_prime\
    \ if i < 16]\n    \n    hex_digits_prime = [hex(i) for i in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [i for i in hex_digits_prime if i < 16]\n    \n\
    \    hex_digits_prime = [hex(i) for i in hex_digits_prime]\n    \n    hex_digits_prime\
    \ = [i for i in hex_digits_prime if i < 16]\n    \n    hex_digits_prime = [hex(i)\
    \ for i in hex_digits_prime]\n    \n    hex_digits_prime = [i for i in hex_digits_prime\
    \ if i < 16]\n    \n    hex_digits_prime = [hex(i) for i in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [i for i in hex_digits_prime if i < 16]\n    \n\
    \    hex_digits_prime = [hex(i) for i in hex_digits_prime]\n    \n    hex_digits_prime\
    \ = [i for i in hex_digits_prime if i < 16]\n    \n    hex_digits_prime = [hex(i)\
    \ for i in hex_digits_prime]\n    \n    hex_digits_prime = [i for i in hex_digits_prime\
    \ if i < 16]\n    \n    hex_digits_prime = [hex(i) for i in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [i for i in hex_digits_prime if i < ", "    \n \
    \   hex_key = '0123456789ABCDEF'\n    \n    hex_key = list(hex_key)\n    \n  \
    \  hex_key.sort()\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for\
    \ i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n   \
    \ hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key\
    \ = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2]\
    \ for i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for\
    \ i in range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in\
    \ range(0, len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0,\
    \ len(hex_key), 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key),\
    \ 2)]\n    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n\
    \    \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n   \
    \ \n    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), 2)]\n    \n\
    \    hex_key = [hex_key[i:i+2] for i in range(0, len(hex_key), ", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    count = 0\n    \n   \
    \ # Your code here\n    \n    return count\n", "    hex_key = ''\n    hex_key\
    \ = ''.join([hex_key.upper(), num])\n    hex_key = int(hex_key, 16)\n    hex_digits\
    \ = [hex_key%10, hex_key//10]\n    hex_digits_prime = [2, 3]\n    hex_digits_prime\
    \ = [hex_key%10 for hex_key%10 in hex_digits_prime]\n    hex_digits_prime = [hex_key//10\
    \ for hex_key//10 in hex_digits_prime]\n    hex_digits_prime = [hex_key%10 for\
    \ hex_key%10 in hex_digits_prime]\n    hex_digits_prime = [hex_key//10 for hex_key//10\
    \ in hex_digits_prime]\n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n  \
    \  hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n    hex_digits_prime\
    \ = [hex_key//10 for hex_key//10 in hex_digits_prime]\n    hex_digits_prime =\
    \ [hex_key%10 for hex_key%10 in hex_digits_prime]\n    hex_digits_prime = [hex_key//10\
    \ for hex_key//10 in hex_digits_prime]\n    hex_digits_prime = [hex_key%10 for\
    \ hex_key%10 in hex_digits_prime]\n    hex_digits_prime = [hex_key//10 for hex_key//10\
    \ in hex_digits_prime]\n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n  \
    \  hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n    hex_digits_prime\
    \ = [hex_key//10 for hex_key//10 in hex_digits_prime]\n    hex_digits_prime =\
    \ [hex_key%10 for hex_key%10 in hex_digits_prime]\n    hex_digits_prime = [hex_key//10\
    \ for hex_key//10 in hex_digits_prime]\n    hex_digits_prime = [hex_key%10 for\
    \ hex_key%10 in hex_digits_prime]\n    hex_digits_prime = [hex_key//10 for hex_key//10\
    \ in hex_digits_prime]\n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    hex_", "    \n    hex_key = int(num, 16)\n    \n    count = 0\n    \n   \
    \ for digit in range(10):\n        \n        if hex_key%10 == digit:\n       \
    \     count += 1\n            \n    return count\n</cell>\n<cell>\nhex_key('AB')\n\
    </cell>\n<cell>\nhex_key('1077E')\n</cell>\n<cell>\nhex_key('ABED1A33')\n</cell>\n\
    <cell>\nhex_key('123456789ABCDEF0')\n</cell>\n<cell>\nhex_key('2020')\n</cell>\n\
    <text>\nExercise 2\nWrite a function that receives a positive integer and returns\
    \ the number of \ndigits in the number that are divisible by 3. \nExamples:\n\
    >>> count_digits(123)\n3\n>>> count_digits(123)\n0\n>>> count_digits(123)\n1\n\
    >>> count_digits(123)\n2\n>>> count_digits(123)\n3\n>>> count_digits(123)\n0\n\
    >>> count_digits(123)\n1\n>>> count_digits(123)\n2\n>>> count_digits(123)\n3\n\
    >>> count_digits(123)\n0\n>>> count_digits(123)\n1\n>>> count_digits(123)\n2\n\
    >>> count_digits(123)\n3\n>>> count_digits(123)\n0\n>>> count_digits(123)\n1\n\
    >>> count_digits(123)\n2\n>>> count_digits(123)\n3\n>>> count_digits(123)\n0\n\
    >>> count_digits(123)\n1\n>>> count_digits(123)\n2\n>>> count_digits(123)\n3\n\
    >>> count_digits(123)\n0\n>>> count_digits(123)\n1\n>>> count_digits(123)\n2\n\
    >>> count_digits(123)\n3\n>>> count_digits(123)\n0\n>>> count_digits(123)\n1\n\
    >>> count_digits(123)\n2\n>>> count_digits(123)\n3\n>>> count_digits(123)\n0\n\
    >>> count_digits(123)\n1\n>>> count_digits(123)\n2\n>>> count_digits(123)\n3\n\
    >>> count_digits(123)\n0\n>>> count_digits(123)\n1\n>>> count_digits(123)\n2\n\
    >>> count_digits(123)\n3\n>>> count_digits(123)\n0\n>>> count_digits(123)\n1\n\
    >>> count_digits(123)\n2\n>>> count_digit", "    \n    hex_key = 0\n    \n   \
    \ hex_key = int(num, 16)\n    \n    hex_key = int(hex_key/16)\n    \n    hex_key\
    \ = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n    hex_key =\
    \ int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n\
    \    \n    hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n  \
    \  \n    hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n\
    \    hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n  \
    \  hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n    hex_key\
    \ = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n    hex_key =\
    \ int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n\
    \    \n    hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n  \
    \  \n    hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n\
    \    hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n  \
    \  hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n    hex_key\
    \ = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n    hex_key =\
    \ int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n\
    \    \n    hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n  \
    \  \n    hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n\
    \    hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n  \
    \  hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n    hex_key\
    \ = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n    hex_key =\
    \ int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n    \n    hex_key = int(hex_key/16)\n\
    \    "]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
