name: HumanEval_78_hex_key
language: py
prompt: "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a\
  \ function that receives \n    a hexadecimal number as a string and counts the number\
  \ of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural\
  \ number \n    greater than 1 that is not a product of two smaller natural numbers).\n\
  \    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n  \
  \  Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a\
  \ number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal\
  \ 13).\n    Note: you may assume the input is always correct or empty string, \n\
  \    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    >>> hex_key('AB')\n\
  \    1\n    >>> hex_key('1077E')\n    2\n    >>> hex_key('ABED1A33')\n    4\n  \
  \  >>> hex_key('123456789ABCDEF0')\n    6\n    >>> hex_key('2020')\n    2\n    \"\
  \"\"\n"
tests: "def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
  \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n\
  \    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
  \ == 12\n\ndef test_check():\n    check(hex_key)\n\ntest_check()\n"
completions: ["    \n    digits = num.upper()\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    count = 0\n    \n    for digit in digits:\n        if digit in prime_digits:\n\
    \            count += 1\n    \n    return count\n\n", "    \n    digits = [int(i)\
    \ for i in num.upper() if i.isdigit()]\n    \n    primes = []\n    \n    for digit\
    \ in digits:\n        if digit in primes:\n            continue\n        \n  \
    \      primes.append(digit)\n        \n        if digit % 2 == 0:\n          \
    \  primes.append(digit + 1)\n            \n        if digit % 3 == 0:\n      \
    \      primes.append(digit + 2)\n            \n        if digit % 5 == 0:\n  \
    \          primes.append(digit + 3)\n            \n        if digit % 7 == 0:\n\
    \            primes.append(digit + 5)\n            \n        if digit % 11 ==\
    \ 0:\n            primes.append(digit + 7)\n            \n        if digit % 13\
    \ == 0:\n            primes.append(digit + 11)\n            \n    return len(primes)\n\
    \n", "    \n    count = 0\n    \n    # convert string to int and check whether\
    \ it is a hexadecimal number\n    try:\n        int(num, 16)\n    except ValueError:\n\
    \        return 0\n    \n    # check whether it is a hexadecimal number\n    if\
    \ num.isdigit():\n        \n        # convert string to int and check whether\
    \ it is a hexadecimal number\n        try:\n            int(num, 16)\n       \
    \ except ValueError:\n            return 0\n        \n        # check whether\
    \ it is a hexadecimal number\n        if num.isdigit():\n            \n      \
    \      # convert string to int and check whether it is a hexadecimal number\n\
    \            try:\n                int(num, 16)\n            except ValueError:\n\
    \                return 0\n            \n            # check whether it is a hexadecimal\
    \ number\n            if num.isdigit():\n                \n                # convert\
    \ string to int and check whether it is a hexadecimal number\n               \
    \ try:\n                    int(num, 16)\n                except ValueError:\n\
    \                    return 0\n                \n                # check whether\
    \ it is a hexadecimal number\n                if num.isdigit():\n            \
    \        \n                    # convert string to int and check whether it is\
    \ a hexadecimal number\n                    try:\n                        int(num,\
    \ 16)\n                    except ValueError:\n                        return\
    \ 0\n                    \n                    # check whether it is a hexadecimal\
    \ number\n                    if num.isdigit():\n                        \n  \
    \                      # convert string to int and check whether it is a hexadecimal\
    \ number\n                        try:\n                            int(num, 16)\n\
    \                        except ValueError:\n                            return\
    \ 0\n                        \n                        # check whether it is a\
    \ hexadecimal number\n                        if num.isdigit():\n            \
    \                \n                            # convert string to int and check\
    \ whether it is a hexadecimal number\n                            try:\n     \
    \                           int(num, 16)\n                            except ValueError:\n\
    \                                return 0\n                            \n    \
    \                        # check whether it is a hexadecimal number\n        \
    \                    if num.isdigit():\n                                \n   \
    \                             # convert string to int and check whether it is\
    \ a hexadecimal number\n                                try:\n               \
    \                     int(num, 16)\n                                except ValueError:\n\
    \                                    return 0\n                              \
    \  \n                                # check whether it is a hexadecimal number\n\
    \                                if num.isdigit():\n                         \
    \           \n                                    # convert string to int and\
    \ check whether it is a hexadecimal number\n                                 \
    \   try:\n                                        int(num, 16)\n             \
    \                       except ValueError:\n                                 \
    \       return 0\n                                    \n                     \
    \               # check whether it is a hexadecimal number\n                 \
    \                   if num.isdigit():\n                                      \
    \  \n                                        # convert string to int and check\
    \ whether it is a hexadecimal number\n                                       \
    \ try:\n                                            int(num, 16)\n           \
    \                             except ValueError:\n                           \
    \                 return 0\n                                        \n       \
    \                                 # check whether it is a hexadecimal number\n\
    \                                        if num.isdigit():\n                 \
    \                           \n                                            # convert\
    \ string to int and check whether it is a hexadecimal number\n               \
    \                             try:\n                                         \
    \       int(num, 16)\n                                            except ValueError:\n\
    \                                                return 0\n                  \
    \                          \n                                            # check\
    \ whether it is a hexadecimal ", "    \n    hex_key = 0\n    \n    hex_key = int(num,\
    \ 16)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n\
    \    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n  \
    \  \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n\
    \    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n  \
    \  hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key\
    \ = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key =\
    \ int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n\
    \    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n  \
    \  \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n\
    \    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n  \
    \  hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key\
    \ = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key =\
    \ int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n\
    \    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n  \
    \  \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n\
    \    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n  \
    \  hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key\
    \ = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key =\
    \ int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n\
    \    \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n  \
    \  \n    hex_key = int(hex_key/10)\n    \n    hex_key = int(hex_key/10)\n    ",
  "    \n    digits = num.upper()\n    \n    count = 0\n    \n    for digit in digits:\n\
    \        if digit == 'A':\n            count += 2\n        elif digit == 'B':\n\
    \            count += 1\n        elif digit == 'C':\n            count += 3\n\
    \        elif digit == 'D':\n            count += 5\n        elif digit == 'E':\n\
    \            count += 7\n        elif digit == 'F':\n            count += 11\n\
    \        else:\n            count += 1\n            \n    return count\n\n", " \
    \   \n    hex_key = ''\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key\
    \ = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n\
    \    \n    hex_key = int(hex_key)\n    \n    hex_key = int(hex_key)\n    \n  \
    \  hex_key = int(hex_key)\n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    hex_key = 0\n    \n    hex_digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\
    \ 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,\
    \ 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,\
    \ 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,\
    \ 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]\n    \n    hex_digits_upper\
    \ = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,\
    \ 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77,\
    \ 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96,\
    \ 97, 98, 99]\n    \n    hex_digits_lower = [10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,\
    \ 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56,\
    \ 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,\
    \ 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94,\
    \ 95, 96, 97, 98, 99]\n    \n    hex_digits_upper = [0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28,\
    \ 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\
    \ 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66,\
    \ 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, ", "    \n    hex_key\
    \ = int(num, 16)\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n    prime_digits_hex\
    \ = [hex(digit) for digit in prime_digits]\n    \n    prime_digits_hex = [int(digit,\
    \ 16) for digit in prime_digits_hex]\n    \n    prime_digits_hex = [digit for\
    \ digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex = [digit\
    \ for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex =\
    \ [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit in prime_digits_hex if digit != '0']\n    \n    prime_digits_hex\
    \ = [digit for digit ", "    \n    digits = num.upper()\n    \n    count = 0\n\
    \    \n    for digit in digits:\n        if digit in 'ABCDEF':\n            count\
    \ += 1\n            \n    return count\n\n", "    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    hex_list = list(hex_key)\n    hex_list.sort()\n\
    \    \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    hex_key = list(hex_key)\n    hex_key.sort()\n    \n    hex_key = list(hex_key)\n\
    \    hex_key.sort()\n    \n    hex_key = list(hex_key)\n    hex_key.sort()\n \
    \   \n    ", "    \n    hex_key = int(num, 16)\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = set(prime_digits)\n    \n    prime_digits_set =\
    \ prime_digits_set.union(set(range(10, hex_key)))\n    \n    prime_digits_set\
    \ = prime_digits_set.union(set(range(hex_key//10, hex_key//100)))\n    \n    prime_digits_set\
    \ = prime_digits_set.union(set(range(hex_key//100, hex_key//1000)))\n    \n  \
    \  prime_digits_set = prime_digits_set.union(set(range(hex_key//1000, hex_key//10000)))\n\
    \    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10000,\
    \ hex_key//100000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//100000,\
    \ hex_key//1000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//1000000,\
    \ hex_key//10000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10000000,\
    \ hex_key//100000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//100000000,\
    \ hex_key//1000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//1000000000,\
    \ hex_key//10000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10000000000,\
    \ hex_key//100000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//100000000000,\
    \ hex_key//1000000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//1000000000000,\
    \ hex_key//10000000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10000000000000,\
    \ hex_key//100000000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//100000000000000,\
    \ hex_key//1000000000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//1000000000000000,\
    \ hex_key//10000000000000000)))\n    \n    prime_digits_set = prime_digits_set.union(set(range(hex_key//10000000000000000",
  "    \n    count = 0\n    \n    # Your code here\n    \n    return count\n\n", " \
    \   \n    hex_list = list(hex_key)\n    hex_list.sort()\n    \n    hex_key = ''.join(hex_list)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n   \
    \ \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n    \n    hex_key\
    \ = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key = ''.join(hex_key)\n\
    \    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n    \n    hex_key\
    \ = ''.join(hex_key)\n    \n    hex_key = list(hex_key)\n    \n    hex_key.sort()\n\
    \    \n    hex_key = ''.join(hex_key)\n    \n", "    \n    hex_key = ''\n    \n\
    \    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num])\n    \n    hex_key = ''.join([hex_key,num])\n\
    \    \n    hex_key = ''.join([hex_key,num", "    \n    hex_key = 0\n    \n   \
    \ hex_key = int(num, 16)\n    \n    hex_digits = [hex_key%10, hex_key//10]\n \
    \   \n    hex_digits_prime = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key%10 for hex_key%10 in hex_digits_prime]\n\
    \    \n    hex_digits_prime = [hex_key//10 for hex_key//10 in hex_digits_prime]\n\
    \    \n", "    \n    hex_key = 0\n    \n    # Your code here\n    \n    return\
    \ hex_key\n", "    \n    count = 0\n    \n    # your code here\n    \n    return\
    \ count\n</cell>\n<cell>\nhex_key('AB')\n</cell>\n<cell>\nhex_key('1077E')\n</cell>\n\
    <cell>\nhex_key('ABED1A33')\n</cell>\n<cell>\nhex_key('123456789ABCDEF0')\n</cell>\n\
    <cell>\nhex_key('2020')\n</cell>\n<text>\nExercise 2\nWrite a function that receives\
    \ a positive integer and returns the sum of the squares of the digits of that\
    \ integer.\nExamples:\n>>> square_digits(123)\n25\n>>> square_digits(123)\n25\n\
    >>> square_digits(0)\n0\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n-10\n>>> square_digits(-10)\n\
    -10\n>>> square_digits(-10)\n-10\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
