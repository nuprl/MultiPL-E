{
  "language": "d",
  "name": "HumanEval_147_get_max_triples",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n - 2; i++)\n    {\n        for (long j = i + 1; j < n - 1; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphiud2cap.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmphiud2cap.__unittest_L41_C1() [0x427e48]\n??:? void tmphiud2cap.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long res = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    res++;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpselo3ikj.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpselo3ikj.__unittest_L36_C1() [0x427b05]\n??:? void tmpselo3ikj.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long res = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    res++;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpselo3ikj.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpselo3ikj.__unittest_L36_C1() [0x427b05]\n??:? void tmpselo3ikj.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpaj36qklk.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmpaj36qklk.__unittest_L41_C1() [0x427e8c]\n??:? void tmpaj36qklk.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp67xpd370.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmp67xpd370.__unittest_L41_C1() [0x427e8c]\n??:? void tmp67xpd370.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[(int)n];\n    for (long i = 0; i < n; i++)\n    {\n        a[(int)i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n - 2; i++)\n    {\n        for (long j = i + 1; j < n - 1; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[(int)i] + a[(int)j] + a[(int)k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjkouuwi7.d(21): Error: C style cast illegal, use `cast(int)n`\n/tmp/tmpjkouuwi7.d(24): Error: C style cast illegal, use `cast(int)i`\n/tmp/tmpjkouuwi7.d(32): Error: C style cast illegal, use `cast(int)i`\n/tmp/tmpjkouuwi7.d(32): Error: C style cast illegal, use `cast(int)j`\n/tmp/tmpjkouuwi7.d(32): Error: C style cast illegal, use `cast(int)k`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjkouuwi7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp67xpd370.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmp67xpd370.__unittest_L41_C1() [0x427e8c]\n??:? void tmp67xpd370.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long result = 0;\n    foreach(i; 0..n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgzo2ijtw.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpgzo2ijtw.__unittest_L41_C1() [0x427e80]\n??:? void tmpgzo2ijtw.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp43brez4c.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp43brez4c.__unittest_L41_C1() [0x427e40]\n??:? void tmp43brez4c.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp67xpd370.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmp67xpd370.__unittest_L41_C1() [0x427e8c]\n??:? void tmp67xpd370.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp43brez4c.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp43brez4c.__unittest_L41_C1() [0x427e40]\n??:? void tmp43brez4c.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpaj36qklk.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmpaj36qklk.__unittest_L41_C1() [0x427e8c]\n??:? void tmpaj36qklk.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = (i * i) - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0z71mx3z.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmp0z71mx3z.__unittest_L41_C1() [0x427e44]\n??:? void tmp0z71mx3z.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long res = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    res++;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpselo3ikj.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpselo3ikj.__unittest_L36_C1() [0x427b05]\n??:? void tmpselo3ikj.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long count = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpire93iwj.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpire93iwj.__unittest_L41_C1() [0x427e44]\n??:? void tmpire93iwj.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmgpl0baf.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmpmgpl0baf.__unittest_L41_C1() [0x427e40]\n??:? void tmpmgpl0baf.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    foreach(i; 0..n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphweks87q.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmphweks87q.__unittest_L41_C1() [0x427e80]\n??:? void tmphweks87q.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    foreach(i; 0..n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphweks87q.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmphweks87q.__unittest_L41_C1() [0x427e80]\n??:? void tmphweks87q.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n - 2)\n    {\n        foreach(j; i + 1 .. n - 1)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpifzdhg4v.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmpifzdhg4v.__unittest_L41_C1() [0x427e94]\n??:? void tmpifzdhg4v.__modtest() [0x427f0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c18b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b01e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430758]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430235]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aff5]\n??:? runModuleUnitTests [0x42bf61]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428650]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp43brez4c.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp43brez4c.__unittest_L41_C1() [0x427e40]\n??:? void tmp43brez4c.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    foreach(i; 0..n)\n        a[i] = i * i - i + 1;\n    long count = 0;\n    foreach(i; 0..n)\n        foreach(j; i+1..n)\n            foreach(k; j+1..n)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp07p7enxn.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmp07p7enxn.__unittest_L31_C1() [0x427e7c]\n??:? void tmp07p7enxn.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpaj36qklk.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmpaj36qklk.__unittest_L41_C1() [0x427e8c]\n??:? void tmpaj36qklk.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpaj36qklk.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmpaj36qklk.__unittest_L41_C1() [0x427e8c]\n??:? void tmpaj36qklk.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpaj36qklk.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmpaj36qklk.__unittest_L41_C1() [0x427e8c]\n??:? void tmpaj36qklk.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpaj36qklk.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmpaj36qklk.__unittest_L41_C1() [0x427e8c]\n??:? void tmpaj36qklk.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++) \n    {\n        for (long j = i + 1; j < n; j++) \n        {\n            for (long k = j + 1; k < n; k++) \n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) \n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpijbk1y6r.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpijbk1y6r.__unittest_L36_C1() [0x427b05]\n??:? void tmpijbk1y6r.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n - 2; i++)\n    {\n        for (long j = i + 1; j < n - 1; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphiud2cap.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmphiud2cap.__unittest_L41_C1() [0x427e48]\n??:? void tmphiud2cap.__modtest() [0x427ec0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long ret = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    ret++;\n                }\n            }\n        }\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgf72phpv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmpgf72phpv.__unittest_L41_C1() [0x427e8c]\n??:? void tmpgf72phpv.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp43brez4c.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp43brez4c.__unittest_L41_C1() [0x427e40]\n??:? void tmp43brez4c.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++) \n    {\n        for (long j = i + 1; j < n; j++) \n        {\n            for (long k = j + 1; k < n; k++) \n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) \n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpijbk1y6r.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpijbk1y6r.__unittest_L36_C1() [0x427b05]\n??:? void tmpijbk1y6r.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp67xpd370.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmp67xpd370.__unittest_L41_C1() [0x427e8c]\n??:? void tmp67xpd370.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp67xpd370.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmp67xpd370.__unittest_L41_C1() [0x427e8c]\n??:? void tmp67xpd370.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    foreach(i; 0..n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphweks87q.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmphweks87q.__unittest_L41_C1() [0x427e80]\n??:? void tmphweks87q.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpaj36qklk.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmpaj36qklk.__unittest_L41_C1() [0x427e8c]\n??:? void tmpaj36qklk.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv65pjk5f.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpv65pjk5f.__unittest_L41_C1() [0x427e80]\n??:? void tmpv65pjk5f.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long res = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    res++;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpselo3ikj.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpselo3ikj.__unittest_L36_C1() [0x427b05]\n??:? void tmpselo3ikj.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n        a[i] = i * i - i + 1;\n    long count = 0;\n    foreach(i; 0 .. n)\n        foreach(j; i + 1 .. n)\n            foreach(k; j + 1 .. n)\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                    count++;\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt63a9ddp.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpt63a9ddp.__unittest_L31_C1() [0x427e7c]\n??:? void tmpt63a9ddp.__modtest() [0x427ef4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    foreach(i; 0..n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphweks87q.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmphweks87q.__unittest_L41_C1() [0x427e80]\n??:? void tmphweks87q.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp43brez4c.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp43brez4c.__unittest_L41_C1() [0x427e40]\n??:? void tmp43brez4c.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long res = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    res++;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwdc1obue.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmpwdc1obue.__unittest_L41_C1() [0x427e40]\n??:? void tmpwdc1obue.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long count = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpire93iwj.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpire93iwj.__unittest_L41_C1() [0x427e44]\n??:? void tmpire93iwj.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp43brez4c.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp43brez4c.__unittest_L41_C1() [0x427e40]\n??:? void tmp43brez4c.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpaj36qklk.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmpaj36qklk.__unittest_L41_C1() [0x427e8c]\n??:? void tmpaj36qklk.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n - 2)\n    {\n        foreach(j; i + 1 .. n - 1)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpifzdhg4v.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42818d]\n??:? void tmpifzdhg4v.__unittest_L41_C1() [0x427e94]\n??:? void tmpifzdhg4v.__modtest() [0x427f0c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c18b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b01e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430758]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430235]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aff5]\n??:? runModuleUnitTests [0x42bf61]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428650]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long result = 0;\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result += 1;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnp0x63yt.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpnp0x63yt.__unittest_L41_C1() [0x427e80]\n??:? void tmpnp0x63yt.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    foreach(i; 0..n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphweks87q.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmphweks87q.__unittest_L41_C1() [0x427e80]\n??:? void tmphweks87q.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long result = 0;\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcwaptquo.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpcwaptquo.__unittest_L41_C1() [0x427e80]\n??:? void tmpcwaptquo.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmgpl0baf.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmpmgpl0baf.__unittest_L41_C1() [0x427e40]\n??:? void tmpmgpl0baf.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp43brez4c.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp43brez4c.__unittest_L41_C1() [0x427e40]\n??:? void tmp43brez4c.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long res = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    res++;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpselo3ikj.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpselo3ikj.__unittest_L36_C1() [0x427b05]\n??:? void tmpselo3ikj.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpaj36qklk.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmpaj36qklk.__unittest_L41_C1() [0x427e8c]\n??:? void tmpaj36qklk.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i+1 .. n)\n        {\n            foreach(k; j+1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3e6y7cz3.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmp3e6y7cz3.__unittest_L41_C1() [0x427e8c]\n??:? void tmp3e6y7cz3.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp67xpd370.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmp67xpd370.__unittest_L41_C1() [0x427e8c]\n??:? void tmp67xpd370.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if (((i * i - i + 1) + (j * j - j + 1) + (k * k - k + 1)) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpi3t614y3.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpi3t614y3.__unittest_L36_C1() [0x427b01]\n??:? void tmpi3t614y3.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxnz_bbst.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpxnz_bbst.__unittest_L36_C1() [0x427adc]\n??:? void tmpxnz_bbst.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if (a[i] + a[j] + a[k] % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1gvuwkjs.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp1gvuwkjs.__unittest_L41_C1() [0x427e3c]\n??:? void tmp1gvuwkjs.__modtest() [0x427eb4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long res = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    res++;\n                }\n            }\n        }\n    }\n    return res;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpselo3ikj.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpselo3ikj.__unittest_L36_C1() [0x427b05]\n??:? void tmpselo3ikj.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach (i; 0 .. n)\n    {\n        foreach (j; i + 1 .. n)\n        {\n            foreach (k; j + 1 .. n)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvmbhg75v.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428165]\n??:? void tmpvmbhg75v.__unittest_L41_C1() [0x427e6c]\n??:? void tmpvmbhg75v.__modtest() [0x427ee4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c163]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aff6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430281]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430730]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43020d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afcd]\n??:? runModuleUnitTests [0x42bf39]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428628]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j; i+1..n)\n        {\n            foreach(k; j+1..n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp67xpd370.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmp67xpd370.__unittest_L41_C1() [0x427e8c]\n??:? void tmp67xpd370.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0..n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0..n)\n    {\n        foreach(j; i..n)\n        {\n            foreach(k; j..n)\n            {\n                if(a[i] + a[j] + a[k] % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpur81_od3.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428175]\n??:? void tmpur81_od3.__unittest_L41_C1() [0x427e80]\n??:? void tmpur81_od3.__modtest() [0x427ef8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c173]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b006]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430291]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430740]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43021d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afdd]\n??:? runModuleUnitTests [0x42bf49]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428638]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxnz_bbst.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpxnz_bbst.__unittest_L36_C1() [0x427adc]\n??:? void tmpxnz_bbst.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxnz_bbst.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmpxnz_bbst.__unittest_L36_C1() [0x427adc]\n??:? void tmpxnz_bbst.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp43brez4c.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp43brez4c.__unittest_L41_C1() [0x427e40]\n??:? void tmp43brez4c.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7z334_d8.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp7z334_d8.__unittest_L36_C1() [0x427adc]\n??:? void tmp7z334_d8.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp43brez4c.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp43brez4c.__unittest_L41_C1() [0x427e40]\n??:? void tmp43brez4c.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpaj36qklk.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmpaj36qklk.__unittest_L41_C1() [0x427e8c]\n??:? void tmpaj36qklk.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long result = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp43brez4c.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp43brez4c.__unittest_L41_C1() [0x427e40]\n??:? void tmp43brez4c.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6c1t5inv.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428135]\n??:? void tmp6c1t5inv.__unittest_L41_C1() [0x427e40]\n??:? void tmp6c1t5inv.__modtest() [0x427eb8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c133]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430251]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430700]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301dd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af9d]\n??:? runModuleUnitTests [0x42bf09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f8]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    foreach(i; 0 .. n)\n    {\n        a[i] = i * i - i + 1;\n    }\n    foreach(i; 0 .. n)\n    {\n        foreach(j; i + 1 .. n)\n        {\n            foreach(k; j + 1 .. n)\n            {\n                if((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpaj36qklk.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x428185]\n??:? void tmpaj36qklk.__unittest_L41_C1() [0x427e8c]\n??:? void tmpaj36qklk.__modtest() [0x427f04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430750]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43022d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afed]\n??:? runModuleUnitTests [0x42bf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428648]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7z334_d8.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp7z334_d8.__unittest_L36_C1() [0x427adc]\n??:? void tmp7z334_d8.__modtest() [0x427b54]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long sum = 0;\n    long count = 0;\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n        sum += a[i];\n    }\n    if (sum % 3 != 0)\n        return 0;\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                    count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpduyttrh_.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x42817d]\n??:? void tmpduyttrh_.__unittest_L43_C1() [0x427e88]\n??:? void tmpduyttrh_.__modtest() [0x427f00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c17b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b00e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430299]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430748]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430225]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afe5]\n??:? runModuleUnitTests [0x42bf51]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428640]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long[] a = new long[n];\n    long result = 0;\n    for (int i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = i + 1; j < n; j++)\n        {\n            for (int k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj_9mynwn.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42812d]\n??:? void tmpj_9mynwn.__unittest_L41_C1() [0x427e34]\n??:? void tmpj_9mynwn.__modtest() [0x427eac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c12b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afbe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430249]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4306f8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301d5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42af95]\n??:? runModuleUnitTests [0x42bf01]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285f0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp_2nn5s5.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x427ddd]\n??:? void tmpp_2nn5s5.__unittest_L36_C1() [0x427b05]\n??:? void tmpp_2nn5s5.__modtest() [0x427b5c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb03]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a996]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb29]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fab5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a96d]\n??:? runModuleUnitTests [0x42b8d9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42822c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    for (long i = 1; i < n - 1; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k <= n; k++)\n            {\n                if ((i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n    >>> get_max_triples(5L)\n    1L\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \n*/\nlong get_max_triples(long n) \n{\n    long result = 0;\n    long[] a = new long[n];\n    for (long i = 0; i < n; i++)\n    {\n        a[i] = i * i - i + 1;\n    }\n    for (long i = 0; i < n; i++)\n    {\n        for (long j = i + 1; j < n; j++)\n        {\n            for (long k = j + 1; k < n; k++)\n            {\n                if ((a[i] + a[j] + a[k]) % 3 == 0)\n                {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = get_max_triples;\n\n    assert(candidate(5L) == 1L);\n    assert(candidate(6L) == 4L);\n    assert(candidate(10L) == 36L);\n    assert(candidate(100L) == 53361L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvzi33727.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x42813d]\n??:? void tmpvzi33727.__unittest_L41_C1() [0x427e44]\n??:? void tmpvzi33727.__modtest() [0x427ebc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c13b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42afce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430259]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430708]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4301e5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42afa5]\n??:? runModuleUnitTests [0x42bf11]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428600]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163091
    }
  ]
}