{
  "language": "d",
  "name": "HumanEval_14_all_prefixes",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd529kplr.d(83): Error: expression expected, not `unittest`\n/tmp/tmpd529kplr.d(84): Error: found `{` when expecting `,`\n/tmp/tmpd529kplr.d(85): Error: expression expected, not `alias`\n/tmp/tmpd529kplr.d(85): Error: found `candidate` when expecting `,`\n/tmp/tmpd529kplr.d(85): Error: expression expected, not `=`\n/tmp/tmpd529kplr.d(85): Error: found `all_prefixes` when expecting `,`\n/tmp/tmpd529kplr.d(85): Error: expression expected, not `;`\n/tmp/tmpd529kplr.d(87): Error: found `assert` when expecting `,`\n/tmp/tmpd529kplr.d(87): Error: found `;` when expecting `,`\n/tmp/tmpd529kplr.d(88): Error: found `;` when expecting `,`\n/tmp/tmpd529kplr.d(89): Error: found `;` when expecting `,`\n/tmp/tmpd529kplr.d(90): Error: expression expected, not `}`\n/tmp/tmpd529kplr.d(91): Error: found `void` when expecting `,`\n/tmp/tmpd529kplr.d(91): Error: found `{` when expecting `,`\n/tmp/tmpd529kplr.d(91): Error: expression expected, not `}`\n/tmp/tmpd529kplr.d(91): Error: found `End of File` when expecting `,`\n/tmp/tmpd529kplr",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbjzra2f5.d(83): Error: found `unittest` instead of statement\n/tmp/tmpbjzra2f5.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpbjzra2f5.d(91): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjzra2f5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result ~= string[i ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpov6v_sx3.d(79): Error: expression expected, not `unittest`\n/tmp/tmpov6v_sx3.d(80): Error: found `{` when expecting `,`\n/tmp/tmpov6v_sx3.d(81): Error: expression expected, not `alias`\n/tmp/tmpov6v_sx3.d(81): Error: found `candidate` when expecting `,`\n/tmp/tmpov6v_sx3.d(81): Error: expression expected, not `=`\n/tmp/tmpov6v_sx3.d(81): Error: found `all_prefixes` when expecting `,`\n/tmp/tmpov6v_sx3.d(81): Error: expression expected, not `;`\n/tmp/tmpov6v_sx3.d(83): Error: found `assert` when expecting `,`\n/tmp/tmpov6v_sx3.d(83): Error: found `;` when expecting `,`\n/tmp/tmpov6v_sx3.d(84): Error: found `;` when expecting `,`\n/tmp/tmpov6v_sx3.d(85): Error: found `;` when expecting `,`\n/tmp/tmpov6v_sx3.d(86): Error: expression expected, not `}`\n/tmp/tmpov6v_sx3.d(87): Error: found `void` when expecting `,`\n/tmp/tmpov6v_sx3.d(87): Error: found `{` when expecting `,`\n/tmp/tmpov6v_sx3.d(87): Error: expression expected, not `}`\n/tmp/tmpov6v_sx3.d(87): Error: found `End of File` when expecting `,`\n/tmp/tmpov6v_sx3",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    auto result = new string[];\n    foreach (i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7scfkkbf.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7scfkkbf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd529kplr.d(83): Error: expression expected, not `unittest`\n/tmp/tmpd529kplr.d(84): Error: found `{` when expecting `,`\n/tmp/tmpd529kplr.d(85): Error: expression expected, not `alias`\n/tmp/tmpd529kplr.d(85): Error: found `candidate` when expecting `,`\n/tmp/tmpd529kplr.d(85): Error: expression expected, not `=`\n/tmp/tmpd529kplr.d(85): Error: found `all_prefixes` when expecting `,`\n/tmp/tmpd529kplr.d(85): Error: expression expected, not `;`\n/tmp/tmpd529kplr.d(87): Error: found `assert` when expecting `,`\n/tmp/tmpd529kplr.d(87): Error: found `;` when expecting `,`\n/tmp/tmpd529kplr.d(88): Error: found `;` when expecting `,`\n/tmp/tmpd529kplr.d(89): Error: found `;` when expecting `,`\n/tmp/tmpd529kplr.d(90): Error: expression expected, not `}`\n/tmp/tmpd529kplr.d(91): Error: found `void` when expecting `,`\n/tmp/tmpd529kplr.d(91): Error: found `{` when expecting `,`\n/tmp/tmpd529kplr.d(91): Error: expression expected, not `}`\n/tmp/tmpd529kplr.d(91): Error: found `End of File` when expecting `,`\n/tmp/tmpd529kplr",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm3fifgwd.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3fifgwd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] ret;\n    foreach(i; 0 .. string.length)\n        ret ~= string[0 .. i];\n    return ret;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplj5g5k7f.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplj5g5k7f.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    return iota(string.length).map!(i => string[0..i]);\n}\n/*\n Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    return iota(string.length).map!(i => string[i..$]);\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    return iota(string.length).map!(i => all_suffixes(string[i..$])).join;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings2(string string) \n{\n    return iota(string.length).map!(i => all_prefixes(string[0..i])).join;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings3(string string) \n{\n    return iota(string.length).map!(i => all_prefixes(string[0..i])).join;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings4(string string) \n{\n    return iota(string.length).map!(i => all_prefixes(string[0..i])).join;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo434m02u.d(63): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo434m02u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\n/*\n Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[i .. $];\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        foreach(j; i .. string.length)\n            result ~= string[i .. j];\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        foreach(j; i .. string.length)\n            result ~= string[i .. j];\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        foreach(j; i .. string.length)\n            result ~= string[i .. j];\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbz6n8evu.d(71): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbz6n8evu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd529kplr.d(83): Error: expression expected, not `unittest`\n/tmp/tmpd529kplr.d(84): Error: found `{` when expecting `,`\n/tmp/tmpd529kplr.d(85): Error: expression expected, not `alias`\n/tmp/tmpd529kplr.d(85): Error: found `candidate` when expecting `,`\n/tmp/tmpd529kplr.d(85): Error: expression expected, not `=`\n/tmp/tmpd529kplr.d(85): Error: found `all_prefixes` when expecting `,`\n/tmp/tmpd529kplr.d(85): Error: expression expected, not `;`\n/tmp/tmpd529kplr.d(87): Error: found `assert` when expecting `,`\n/tmp/tmpd529kplr.d(87): Error: found `;` when expecting `,`\n/tmp/tmpd529kplr.d(88): Error: found `;` when expecting `,`\n/tmp/tmpd529kplr.d(89): Error: found `;` when expecting `,`\n/tmp/tmpd529kplr.d(90): Error: expression expected, not `}`\n/tmp/tmpd529kplr.d(91): Error: found `void` when expecting `,`\n/tmp/tmpd529kplr.d(91): Error: found `{` when expecting `,`\n/tmp/tmpd529kplr.d(91): Error: expression expected, not `}`\n/tmp/tmpd529kplr.d(91): Error: found `End of File` when expecting `,`\n/tmp/tmpd529kplr",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyec_zp1e.d(83): Error: expression expected, not `unittest`\n/tmp/tmpyec_zp1e.d(84): Error: found `{` when expecting `,`\n/tmp/tmpyec_zp1e.d(85): Error: expression expected, not `alias`\n/tmp/tmpyec_zp1e.d(85): Error: found `candidate` when expecting `,`\n/tmp/tmpyec_zp1e.d(85): Error: expression expected, not `=`\n/tmp/tmpyec_zp1e.d(85): Error: found `all_prefixes` when expecting `,`\n/tmp/tmpyec_zp1e.d(85): Error: expression expected, not `;`\n/tmp/tmpyec_zp1e.d(87): Error: found `assert` when expecting `,`\n/tmp/tmpyec_zp1e.d(87): Error: found `;` when expecting `,`\n/tmp/tmpyec_zp1e.d(88): Error: found `;` when expecting `,`\n/tmp/tmpyec_zp1e.d(89): Error: found `;` when expecting `,`\n/tmp/tmpyec_zp1e.d(90): Error: expression expected, not `}`\n/tmp/tmpyec_zp1e.d(91): Error: found `void` when expecting `,`\n/tmp/tmpyec_zp1e.d(91): Error: found `{` when expecting `,`\n/tmp/tmpyec_zp1e.d(91): Error: expression expected, not `}`\n/tmp/tmpyec_zp1e.d(91): Error: found `End of File` when expecting `,`\n/tmp/tmpyec_zp1e",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd529kplr.d(83): Error: expression expected, not `unittest`\n/tmp/tmpd529kplr.d(84): Error: found `{` when expecting `,`\n/tmp/tmpd529kplr.d(85): Error: expression expected, not `alias`\n/tmp/tmpd529kplr.d(85): Error: found `candidate` when expecting `,`\n/tmp/tmpd529kplr.d(85): Error: expression expected, not `=`\n/tmp/tmpd529kplr.d(85): Error: found `all_prefixes` when expecting `,`\n/tmp/tmpd529kplr.d(85): Error: expression expected, not `;`\n/tmp/tmpd529kplr.d(87): Error: found `assert` when expecting `,`\n/tmp/tmpd529kplr.d(87): Error: found `;` when expecting `,`\n/tmp/tmpd529kplr.d(88): Error: found `;` when expecting `,`\n/tmp/tmpd529kplr.d(89): Error: found `;` when expecting `,`\n/tmp/tmpd529kplr.d(90): Error: expression expected, not `}`\n/tmp/tmpd529kplr.d(91): Error: found `void` when expecting `,`\n/tmp/tmpd529kplr.d(91): Error: found `{` when expecting `,`\n/tmp/tmpd529kplr.d(91): Error: expression expected, not `}`\n/tmp/tmpd529kplr.d(91): Error: found `End of File` when expecting `,`\n/tmp/tmpd529kplr",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm3fifgwd.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3fifgwd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] ret;\n    foreach(i; 0 .. string.length)\n    {\n        ret ~= string[0 .. i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7oum_fjh.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7oum_fjh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] ret;\n    foreach(i; 0 .. string.length)\n    {\n        ret ~= string[0 .. i];\n    }\n    return ret;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7oum_fjh.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7oum_fjh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqaf10mz0.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqaf10mz0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm3fifgwd.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3fifgwd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] prefixes;\n    foreach(i; 0 .. string.length)\n    {\n        prefixes ~= string[0 .. i];\n    }\n    return prefixes;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnmp27xr1.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnmp27xr1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    for (size_t i = 0; i < string.length; i++)\n    {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7v3k5swy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7v3k5swy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import std.array;\n    import std.range;\n    import std.string;\n    import\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprlvk8gf9.d(82): Error: identifier expected following `import`\n/tmp/tmprlvk8gf9.d(82): Error: `;` expected\n/tmp/tmprlvk8gf9.d(90): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprlvk8gf9.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result ~= string[i ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpov6v_sx3.d(79): Error: expression expected, not `unittest`\n/tmp/tmpov6v_sx3.d(80): Error: found `{` when expecting `,`\n/tmp/tmpov6v_sx3.d(81): Error: expression expected, not `alias`\n/tmp/tmpov6v_sx3.d(81): Error: found `candidate` when expecting `,`\n/tmp/tmpov6v_sx3.d(81): Error: expression expected, not `=`\n/tmp/tmpov6v_sx3.d(81): Error: found `all_prefixes` when expecting `,`\n/tmp/tmpov6v_sx3.d(81): Error: expression expected, not `;`\n/tmp/tmpov6v_sx3.d(83): Error: found `assert` when expecting `,`\n/tmp/tmpov6v_sx3.d(83): Error: found `;` when expecting `,`\n/tmp/tmpov6v_sx3.d(84): Error: found `;` when expecting `,`\n/tmp/tmpov6v_sx3.d(85): Error: found `;` when expecting `,`\n/tmp/tmpov6v_sx3.d(86): Error: expression expected, not `}`\n/tmp/tmpov6v_sx3.d(87): Error: found `void` when expecting `,`\n/tmp/tmpov6v_sx3.d(87): Error: found `{` when expecting `,`\n/tmp/tmpov6v_sx3.d(87): Error: expression expected, not `}`\n/tmp/tmpov6v_sx3.d(87): Error: found `End of File` when expecting `,`\n/tmp/tmpov6v_sx3",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbjzra2f5.d(83): Error: found `unittest` instead of statement\n/tmp/tmpbjzra2f5.d(91): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmpbjzra2f5.d(91): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbjzra2f5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings2(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings3(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq_l14tuv.d(83): Error: expression expected, not `unittest`\n/tmp/tmpq_l14tuv.d(84): Error: found `{` when expecting `,`\n/tmp/tmpq_l14tuv.d(85): Error: expression expected, not `alias`\n/tmp/tmpq_l14tuv.d(85): Error: found `candidate` when expecting `,`\n/tmp/tmpq_l14tuv.d(85): Error: expression expected, not `=`\n/tmp/tmpq_l14tuv.d(85): Error: found `all_prefixes` when expecting `,`\n/tmp/tmpq_l14tuv.d(85): Error: expression expected, not `;`\n/tmp/tmpq_l14tuv.d(87): Error: found `assert` when expecting `,`\n/tmp/tmpq_l14tuv.d(87): Error: found `;` when expecting `,`\n/tmp/tmpq_l14tuv.d(88): Error: found `;` when expecting `,`\n/tmp/tmpq_l14tuv.d(89): Error: found `;` when expecting `,`\n/tmp/tmpq_l14tuv.d(90): Error: expression expected, not `}`\n/tmp/tmpq_l14tuv.d(91): Error: found `void` when expecting `,`\n/tmp/tmpq_l14tuv.d(91): Error: found `{` when expecting `,`\n/tmp/tmpq_l14tuv.d(91): Error: expression expected, not `}`\n/tmp/tmpq_l14tuv.d(91): Error: found `End of File` when expecting `,`\n/tmp/tmpq_l14tuv",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result ~= string[i ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpov6v_sx3.d(79): Error: expression expected, not `unittest`\n/tmp/tmpov6v_sx3.d(80): Error: found `{` when expecting `,`\n/tmp/tmpov6v_sx3.d(81): Error: expression expected, not `alias`\n/tmp/tmpov6v_sx3.d(81): Error: found `candidate` when expecting `,`\n/tmp/tmpov6v_sx3.d(81): Error: expression expected, not `=`\n/tmp/tmpov6v_sx3.d(81): Error: found `all_prefixes` when expecting `,`\n/tmp/tmpov6v_sx3.d(81): Error: expression expected, not `;`\n/tmp/tmpov6v_sx3.d(83): Error: found `assert` when expecting `,`\n/tmp/tmpov6v_sx3.d(83): Error: found `;` when expecting `,`\n/tmp/tmpov6v_sx3.d(84): Error: found `;` when expecting `,`\n/tmp/tmpov6v_sx3.d(85): Error: found `;` when expecting `,`\n/tmp/tmpov6v_sx3.d(86): Error: expression expected, not `}`\n/tmp/tmpov6v_sx3.d(87): Error: found `void` when expecting `,`\n/tmp/tmpov6v_sx3.d(87): Error: found `{` when expecting `,`\n/tmp/tmpov6v_sx3.d(87): Error: expression expected, not `}`\n/tmp/tmpov6v_sx3.d(87): Error: found `End of File` when expecting `,`\n/tmp/tmpov6v_sx3",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n    Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n    Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n    Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings2(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n    Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n*/\nstring[] all_substrings3(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        foreach(j; i .. string.length) \n        {\n            result\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5h3mdr5q.d(79): Error: found `unittest` when expecting `;` following statement\n/tmp/tmp5h3mdr5q.d(87): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp5h3mdr5q.d(87): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp5h3mdr5q.d(87): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5h3mdr5q.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(int i; 0..string.length)\n    {\n        result ~= string[0..i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpotua7r68.d(11): Error: `string` is used as a type\n/tmp/tmpotua7r68.d(12): Error: cannot implicitly convert expression `string.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpotua7r68.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    import std.algorithm.iteration : map;\n    import std.range : iota;\n    import std.array : array;\n    import std.conv : to;\n    import std.string : take;\n    import std.math : min;\n    return iota(min(string.length, 1), string.length + 1)\n        .map!(i => string.take(i).to!string)\n        .array;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa9709j_3.d(15): Error: module `std.string` import `take` not found\n/tmp/tmpa9709j_3.d(16): Error: module `std.math` import `min` not found, did you mean function `std.math.sin`?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa9709j_3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164540
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm3fifgwd.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm3fifgwd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i .. j];\n        }\n    }\n    return result;\n}\n/*\n Return list of all substrings from shortest to longest of the input string\n    >>> all_substrings(\"abc\")\n    [\"a\", \"ab\", \"abc\", \"b\", \"bc\", \"c\"]\n    \n*/\nstring[] all_substrings(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        foreach(j; i .. string.length)\n        {\n            result ~= string[i ..\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd529kplr.d(83): Error: expression expected, not `unittest`\n/tmp/tmpd529kplr.d(84): Error: found `{` when expecting `,`\n/tmp/tmpd529kplr.d(85): Error: expression expected, not `alias`\n/tmp/tmpd529kplr.d(85): Error: found `candidate` when expecting `,`\n/tmp/tmpd529kplr.d(85): Error: expression expected, not `=`\n/tmp/tmpd529kplr.d(85): Error: found `all_prefixes` when expecting `,`\n/tmp/tmpd529kplr.d(85): Error: expression expected, not `;`\n/tmp/tmpd529kplr.d(87): Error: found `assert` when expecting `,`\n/tmp/tmpd529kplr.d(87): Error: found `;` when expecting `,`\n/tmp/tmpd529kplr.d(88): Error: found `;` when expecting `,`\n/tmp/tmpd529kplr.d(89): Error: found `;` when expecting `,`\n/tmp/tmpd529kplr.d(90): Error: expression expected, not `}`\n/tmp/tmpd529kplr.d(91): Error: found `void` when expecting `,`\n/tmp/tmpd529kplr.d(91): Error: found `{` when expecting `,`\n/tmp/tmpd529kplr.d(91): Error: expression expected, not `}`\n/tmp/tmpd529kplr.d(91): Error: found `End of File` when expecting `,`\n/tmp/tmpd529kplr",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpau1a8gms.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpau1a8gms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n        result ~= string[0 .. i];\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1d21auat.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1d21auat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\n/*\n Return list of all suffixes from shortest to longest of the input string\n    >>> all_suffixes(\"abc\")\n    [\"c\", \"bc\", \"abc\"]\n    \n*/\nstring[] all_suffixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length) \n    {\n        result ~= string[i .. $];\n    }\n    return result;\n}\n/*\n Return the longest common prefix of two strings\n    >>> longest_common_prefix(\"abc\", \"abd\")\n    \"ab\"\n    \n*/\nstring longest_common_prefix(string a, string b) \n{\n    string result;\n    foreach(i; 0 .. min(a.length, b.length)) \n    {\n        if(a[i] == b[i]) \n        {\n            result ~= a[i];\n        }\n        else \n        {\n            break;\n        }\n    }\n    return result;\n}\n/*\n Return the longest common suffix of two strings\n    >>> longest_common_suffix(\"abc\", \"abd\")\n    \"b\"\n    \n*/\nstring longest_common_suffix(string a, string b) \n{\n    string result;\n    foreach(i; 0 .. min(a.length, b.length)) \n    {\n        if(a[$ - i] == b[$ - i]) \n        {\n            result = a[$ - i] ~ result;\n        }\n        else \n        {\n            break;\n        }\n    }\n    return result;\n}\n/*\n Return the longest common substring of two strings\n    >>> longest_common_substring(\"abc\", \"abd\")\n    \"ab\"\n    \n*/\nstring longest_common_substring(string a, string b) \n{\n    string result;\n    foreach(prefix; all_prefixes(a)) \n    {\n        foreach(suffix; all_\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_qeimjyu.d(89): Error: found `unittest` when expecting `)`\n/tmp/tmp_qeimjyu.d(97): Error: found `End of File` when expecting `}` following compound statement\n/tmp/tmp_qeimjyu.d(97): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_qeimjyu.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(immutable i; 0 .. string.length) \n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqaf10mz0.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqaf10mz0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes(\"abc\")\n    [\"a\", \"ab\", \"abc\"]\n    \n*/\nstring[] all_prefixes(string string) \n{\n    string[] result;\n    foreach(i; 0 .. string.length)\n    {\n        result ~= string[0 .. i];\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = all_prefixes;\n\n    assert(candidate(\"\") == []);\n    assert(candidate(\"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"]);\n    assert(candidate(\"WWW\") == [\"W\", \"WW\", \"WWW\"]);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnku61fwy.d(11): Error: `string` is used as a type\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnku61fwy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164539
    }
  ]
}