{
  "language": "d",
  "name": "HumanEval_80_is_happy",
  "results": [
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    int len = s.length;\n    if (len < 3)\n        return false;\n    for (int i = 0; i < len - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptsne9d6x.d(24): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptsne9d6x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n        for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    bool result = true;\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            result = false;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    bool result = true;\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            result = false;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) \n        return false;\n    for (int i = 0; i < s.length - 2; i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length - 2)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    // your code goes here\n    if(s.length < 3)\n        return false;\n    for(int i = 0; i < s.length - 2; i++)\n    {\n        if(s[i] == s[i+1] || s[i] == s[i+2] || s[i+1] == s[i+2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n        foreach(i; 0 .. s.length - 2)\n        {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    auto a = s[0];\n    auto b = s[1];\n    auto c = s[2];\n    for (size_t i = 3; i < s.length; i++)\n    {\n        if (a == b || b == c || a == c)\n            return false;\n        a = b;\n        b = c;\n        c = s[i];\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmuooa4mp.d(33): Error: cannot modify `immutable` expression `a`\n/tmp/tmpmuooa4mp.d(34): Error: cannot modify `immutable` expression `b`\n/tmp/tmpmuooa4mp.d(35): Error: cannot modify `immutable` expression `c`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmuooa4mp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n        for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length - 2)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    auto a = s[0..3];\n    auto b = s[1..4];\n    auto c = s[2..5];\n    if (a[0] == a[1] || a[0] == a[2] || a[1] == a[2]) return false;\n    if (b[0] == b[1] || b[0] == b[2] || b[1] == b[2]) return false;\n    if (c[0] == c[1] || c[0] == c[2] || c[1] == c[2]) return false;\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.RangeError@/tmp/tmpa0woozz1.d(27): Range violation\n----------------\n??:? _d_arrayboundsp [0x42819e]\n??:? bool tmpa0woozz1.is_happy(immutable(char)[]) [0x427a86]\n??:? void tmpa0woozz1.__unittest_L33_C1() [0x427d75]\n??:? void tmpa0woozz1.__modtest() [0x427e6c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42be87]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ad1a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fead]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43035c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fe39]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42acf1]\n??:? runModuleUnitTests [0x42bc5d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4285b0]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).tryExec(scope void delegate()) [0x428537]\n??:? _d_run_main [0x4284a2]\n??:? main [0x427e7f]\n??:? __libc_start_main [0xdf34b554]\n1/1 unittests FAILED\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 2)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) \n        return false;\n    for (int i = 0; i < s.length - 2; i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) \n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    auto it = s.walkLength(3);\n    while (it.empty is false)\n    {\n        if (it[0] == it[1] || it[0] == it[2] || it[1] == it[2]) return false;\n        it.popFrontN(1);\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpir8i7twr.d(25): Error: no property `walkLength` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpir8i7twr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    return s.length == 3 && s[0] != s[1] && s[1] != s[2] && s[0] != s[2];\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbgr549tg.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427ed5]\n??:? void tmpbgr549tg.__unittest_L27_C1() [0x427b78]\n??:? void tmpbgr549tg.__modtest() [0x427c58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc6f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42ab02]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc95]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430144]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc21]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aad9]\n??:? runModuleUnitTests [0x42ba45]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428398]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n        for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 2)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    auto n = s.length;\n    for (int i = 0; i < n - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    auto it = s.front;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (it == it.next.next) return false;\n        it = it.next;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp47v9bbzx.d(25): Error: no property `front` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp47v9bbzx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length - 2)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    auto length = s.length;\n    auto i = 0;\n    while (i < length - 2)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n        i++;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    auto len = s.length;\n    if (len < 3) return false;\n    for (int i = 0; i < len - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    int len = s.length;\n    if (len < 3)\n        return false;\n    for (int i = 0; i < len - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptsne9d6x.d(24): Error: cannot implicitly convert expression `s.length` of type `ulong` to `int`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptsne9d6x.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    foreach (i; 0 .. s.length - 2)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    bool result = true;\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            result = false;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    return s.length >= 3 && s.length % 3 == 0 && s.length == s.unique.length;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx1vy03hd.d(24): Error: no property `unique` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx1vy03hd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    bool result = true;\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            result = false;\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    return s.length >= 3 && s.length % 3 == 0 && s.length.iota.map!(i => s[i..i+3]).all!(x => x[0] != x[1] && x[1] != x[2] && x[0] != x[2]);\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpkc12hx2y.d(24): Error: no property `iota` for type `ulong`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpkc12hx2y.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n        for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++) \n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    foreach (i; 0 .. s.length - 2)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    bool happy = true;\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            happy = false;\n    }\n    return happy;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n        for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (size_t i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n        for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n        for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    auto it = s.front;\n    while (it != s.back)\n    {\n        if (it.front == it.back) return false;\n        it.popFront();\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp85uncvm1.d(25): Error: no property `front` for type `string`\n/tmp/tmp85uncvm1.d(26): Error: no property `back` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp85uncvm1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164354
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n            return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n        for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    for (int i = 0; i < s.length - 2; i++)\n    {\n        if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2]) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3)\n        return false;\n    else\n    {\n        for (int i = 0; i < s.length - 2; i++)\n        {\n            if (s[i] == s[i + 1] || s[i] == s[i + 2] || s[i + 1] == s[i + 2])\n                return false;\n        }\n        return true;\n    }\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164353
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nYou are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    >>> is_happy(a)\n    false\n    >>> is_happy(aa)\n    false\n    >>> is_happy(abcd)\n    true\n    >>> is_happy(aabb)\n    false\n    >>> is_happy(adb)\n    true\n    >>> is_happy(xyy)\n    false\n    \n*/\nbool is_happy(string s) \n{\n    if (s.length < 3) return false;\n    auto r = s.length % 3;\n    if (r != 0) return false;\n    auto n = s.length / 3;\n    for (size_t i = 0; i < n; i++)\n    {\n        auto a = s[i * 3];\n        auto b = s[i * 3 + 1];\n        auto c = s[i * 3 + 2];\n        if (a == b || a == c || b == c) return false;\n    }\n    return true;\n}\nunittest\n{\n    alias candidate = is_happy;\n\n    assert(candidate(\"a\") == false);\n    assert(candidate(\"aa\") == false);\n    assert(candidate(\"abcd\") == true);\n    assert(candidate(\"aabb\") == false);\n    assert(candidate(\"adb\") == true);\n    assert(candidate(\"xyy\") == false);\n    assert(candidate(\"iopaxpoi\") == true);\n    assert(candidate(\"iopaxioi\") == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmph_y1qt7l.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x427ebd]\n??:? void tmph_y1qt7l.__unittest_L37_C1() [0x427b5c]\n??:? void tmph_y1qt7l.__modtest() [0x427c3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bc57]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aaea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fc7d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43012c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fc09]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aac1]\n??:? runModuleUnitTests [0x42ba2d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428380]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164354
    }
  ]
}