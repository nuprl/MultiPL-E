{
  "language": "d",
  "name": "HumanEval_77_iscube",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpan05agi3.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpan05agi3.__unittest_L27_C1() [0x427aed]\n??:? void tmpan05agi3.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(int)sqrt(a), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0cnhti3c.d(25): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0cnhti3c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == cast(long)pow(cast(double)cbrt(a), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzyx0c_mb.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428005]\n??:? void tmpzyx0c_mb.__unittest_L27_C1() [0x427b93]\n??:? void tmpzyx0c_mb.__modtest() [0x427d88]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd43]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abd6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd69]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430218]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fcf5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42abad]\n??:? runModuleUnitTests [0x42bb19]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428454]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n        return true;\n    if (a < 0)\n        a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw2ytgo8w.d(29): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2ytgo8w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]\n??:? void tmpdkypn9zx.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]\n??:? void tmpdkypn9zx.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(long)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpet4e42_t.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428a9d]\n??:? void tmpet4e42_t.__unittest_L27_C1() [0x427dbc]\n??:? void tmpet4e42_t.__modtest() [0x428820]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c86b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430891]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43081d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d5]\n??:? runModuleUnitTests [0x42c641]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428eec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n        return true;\n    if (a < 0)\n        a = -a;\n    long b = (long)cbrt(a);\n    return b * b * b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsu1wys5e.d(29): Error: C style cast illegal, use `cast(long)cbrt(a)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsu1wys5e.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpan05agi3.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpan05agi3.__unittest_L27_C1() [0x427aed]\n??:? void tmpan05agi3.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxqwzvpqg.d(27): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxqwzvpqg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0L || (a > 0L && a == cast(long)pow(cast(double)cbrt(a), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4el9iu9h.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x427ff5]\n??:? void tmp4el9iu9h.__unittest_L27_C1() [0x427b83]\n??:? void tmp4el9iu9h.__modtest() [0x427d78]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bd33]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42abc6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fd59]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430208]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fce5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42ab9d]\n??:? runModuleUnitTests [0x42bb09]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428444]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1yu81v93.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1yu81v93.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyxhdkftn.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpyxhdkftn.__unittest_L28_C1() [0x427d64]\n??:? void tmpyxhdkftn.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == 0L) || (a == 1L) || (a == -1L) || (a == 8L) || (a == 27L) || (a == 64L) || (a == 125L) || (a == 216L) || (a == 343L) || (a == 512L) || (a == 729L) || (a == 1000L) || (a == 1331L) || (a == 1728L) || (a == 2197L) || (a == 2744L) || (a == 3375L) || (a == 4096L) || (a == 4913L) || (a == 5832L) || (a == 6859L) || (a == 8000L) || (a == 9261L) || (a == 10648L) || (a == 12167L) || (a == 13824L) || (a == 15625L) || (a == 17576L) || (a == 19683L) || (a == 21952L) || (a == 24389L) || (a == 27000L) || (a == 29791L) || (a == 32768L) || (a == 35937L) || (a == 39304L) || (a == 42875L) || (a == 46656L) || (a == 50653L) || (a == 54872L) || (a == 59319L) || (a == 64000L) || (a == 68921L) || (a == 74088L) || (a == 79507L) || (a == 85184L) || (a == 91125L) || (a == 97336L) || (a == 103823L) || (a == 110592L) || (a == 117649L) || (a == 125000L) || (a == 132651L) || (a == 140608L) || (a == 148877L) || (a == 157464L) || (a == 166375L) || (a == 175616L) || (a == 185193L) || (a == 195112L) || (a == 205379L) || (a == 216000L) || (a == 226981L) || (a\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpd303g_qp.d(25): Error: found `unittest` when expecting `)`\n/tmp/tmpd303g_qp.d(27): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpd303g_qp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxqwzvpqg.d(27): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxqwzvpqg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpan05agi3.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpan05agi3.__unittest_L27_C1() [0x427aed]\n??:? void tmpan05agi3.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_8tr50n8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmp_8tr50n8.__unittest_L27_C1() [0x427df7]\n??:? void tmp_8tr50n8.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == 0) || (a == 1) || (a == -1) || (a == 64) || (a == -64);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptpheyp6e.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmptpheyp6e.__unittest_L27_C1() [0x427aed]\n??:? void tmptpheyp6e.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(double)a, 1.0/3.0) == cast(long)pow(cast(double)a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp92k5brcl.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42896d]\n??:? void tmp92k5brcl.__unittest_L27_C1() [0x427d34]\n??:? void tmp92k5brcl.__modtest() [0x4286f0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dbc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`\n/tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbjg3n44.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq_5eeaat.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_5eeaat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6_i43iua.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428aad]\n??:? void tmp6_i43iua.__unittest_L27_C1() [0x427dc8]\n??:? void tmp6_i43iua.__modtest() [0x42882c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c87b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b70e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43082d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6e5]\n??:? runModuleUnitTests [0x42c651]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428efc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_kp_edo0.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_kp_edo0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n        return true;\n    if (a < 0)\n        a = -a;\n    long b = cast(long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpekk_b89b.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x4289cd]\n??:? void tmpekk_b89b.__unittest_L32_C1() [0x427da3]\n??:? void tmpekk_b89b.__modtest() [0x428750]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c79b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307c1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c70]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43074d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b605]\n??:? runModuleUnitTests [0x42c571]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428e1c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a, 1.0 / 3.0);\n    return b * b * b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpc2wmsl4u.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpc2wmsl4u.__unittest_L28_C1() [0x427d64]\n??:? void tmpc2wmsl4u.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`\n/tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbjg3n44.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvr7_duc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || iscube(a, 2);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6_6_wmb6.d(25): Error: function `tmp6_6_wmb6.iscube(long a)` is not callable using argument types `(long, int)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6_6_wmb6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq_5eeaat.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_5eeaat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_8tr50n8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmp_8tr50n8.__unittest_L27_C1() [0x427df7]\n??:? void tmp_8tr50n8.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1yu81v93.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1yu81v93.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0jdy7m_m.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0jdy7m_m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(long)pow(a, 1.0 / 3.0), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfbzx65h9.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428a9d]\n??:? void tmpfbzx65h9.__unittest_L27_C1() [0x427dbc]\n??:? void tmpfbzx65h9.__modtest() [0x428820]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c86b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430891]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43081d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d5]\n??:? runModuleUnitTests [0x42c641]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428eec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)floor(pow(a, 1.0/3.0)), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1rosrhwe.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428bad]\n??:? void tmp1rosrhwe.__unittest_L27_C1() [0x427eeb]\n??:? void tmp1rosrhwe.__modtest() [0x428930]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ca93]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b926]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430ab9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f68]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b8fd]\n??:? runModuleUnitTests [0x42c869]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ffc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`\n/tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbjg3n44.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyxhdkftn.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpyxhdkftn.__unittest_L28_C1() [0x427d64]\n??:? void tmpyxhdkftn.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0L || (a > 0L && pow(cast(long)sqrt(a), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk_abawmr.d(25): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk_abawmr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n        return true;\n    if (a < 0)\n        a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw2ytgo8w.d(29): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2ytgo8w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(double)a, 1.0/3.0) == cast(long)pow(cast(double)a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp92k5brcl.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42896d]\n??:? void tmp92k5brcl.__unittest_L27_C1() [0x427d34]\n??:? void tmp92k5brcl.__modtest() [0x4286f0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dbc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == 0) || (a == 1) || (a == -1) || (a == 8) || (a == 27) || (a == 64) || (a == 125) || (a == 216) || (a == 343) || (a == 512) || (a == 729) || (a == 1000) || (a == 1331) || (a == 1728) || (a == 2197) || (a == 2744) || (a == 3375) || (a == 4096) || (a == 4913) || (a == 5832) || (a == 6859) || (a == 8000) || (a == 9261) || (a == 10648) || (a == 12167) || (a == 13824) || (a == 15625) || (a == 17576) || (a == 19683) || (a == 21952) || (a == 24389) || (a == 27000) || (a == 29791) || (a == 32768) || (a == 35937) || (a == 39304) || (a == 42875) || (a == 46656) || (a == 50653) || (a == 54872) || (a == 59319) || (a == 64000) || (a == 68921) || (a == 74088) || (a == 79507) || (a == 85184) || (a == 91125) || (a == 97336) || (a == 103823) || (a == 110592) || (a == 117649) || (a == 125000) || (a == 132651) || (a == 140608) || (a == 148877) || (a == 157464) || (a == 166375) || (a == 175616) || (a == 185193) || (a == 195112) || (a == 205379) || (a == 216000) || (a == 226981) || (a == 238328) || (a == 250047) || (a == 262144) || (a == 274625) || (a == 287496) || (a == 300763) || (a == 314432) || (a == 328509) || (a == 343000)\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw4uztrom.d(26): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpw4uztrom.d(39): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4uztrom.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long) pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpowyq4r58.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpowyq4r58.__unittest_L28_C1() [0x427d64]\n??:? void tmpowyq4r58.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1yu81v93.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1yu81v93.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(int)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpilr09m3z.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428a95]\n??:? void tmpilr09m3z.__unittest_L27_C1() [0x427de3]\n??:? void tmpilr09m3z.__modtest() [0x428818]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430889]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d38]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430815]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6cd]\n??:? runModuleUnitTests [0x42c639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ee4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n        return true;\n    if (a < 0)\n        a = -a;\n    long x = (long)pow(a, 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyk2024vr.d(29): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyk2024vr.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n        return true;\n    if (a < 0)\n        a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw2ytgo8w.d(29): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2ytgo8w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_8tr50n8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmp_8tr50n8.__unittest_L27_C1() [0x427df7]\n??:? void tmp_8tr50n8.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(long)sqrt(a), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpnd93ya0r.d(25): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpnd93ya0r.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyxhdkftn.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpyxhdkftn.__unittest_L28_C1() [0x427d64]\n??:? void tmpyxhdkftn.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == 0) || (a == 1) || (a == -1) || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1u5097kf.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1u5097kf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1yu81v93.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1yu81v93.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp325ak1q3.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmp325ak1q3.__unittest_L28_C1() [0x427d64]\n??:? void tmp325ak1q3.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyxhdkftn.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpyxhdkftn.__unittest_L28_C1() [0x427d64]\n??:? void tmpyxhdkftn.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxqwzvpqg.d(27): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxqwzvpqg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == -8 || a == 27 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a == -103823\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0owk451w.d(26): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmp0owk451w.d(39): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0owk451w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]\n??:? void tmpdkypn9zx.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`\n/tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbjg3n44.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a == -103823\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqr1d5qxh.d(26): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpqr1d5qxh.d(39): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqr1d5qxh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return is(typeof(a == pow(cast(long)sqrt(a), 3)));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxxbb26m6.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmpxxbb26m6.__unittest_L27_C1() [0x427a1c]\n??:? void tmpxxbb26m6.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_kp_edo0.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_kp_edo0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 && iscube(-a)) || (a > 0 && iscube(a, 2L, a));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpeldbcb1m.d(25): Error: function `tmpeldbcb1m.iscube(long a)` is not callable using argument types `(long, long, long)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpeldbcb1m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]\n??:? void tmpdkypn9zx.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(int)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpeks0qmr8.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428a7d]\n??:? void tmpeks0qmr8.__unittest_L27_C1() [0x427dac]\n??:? void tmpeks0qmr8.__modtest() [0x428800]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c84b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430871]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b5]\n??:? runModuleUnitTests [0x42c621]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ecc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`\n/tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbjg3n44.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1yu81v93.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1yu81v93.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyxhdkftn.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpyxhdkftn.__unittest_L28_C1() [0x427d64]\n??:? void tmpyxhdkftn.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0 / 3.0) == pow(a, 1.0 / 3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9bzb6xij.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9bzb6xij.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_8tr50n8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmp_8tr50n8.__unittest_L27_C1() [0x427df7]\n??:? void tmp_8tr50n8.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`\n/tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbjg3n44.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1yu81v93.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1yu81v93.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == 0L) || (a == 1L) || (a == -1L) || (a == 64L) || (a == -64L);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ch45oax.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmp6ch45oax.__unittest_L27_C1() [0x427aed]\n??:? void tmp6ch45oax.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == 0) || (a == 1) || (a == -1) || (a == 64) || (a == -64);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptpheyp6e.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmptpheyp6e.__unittest_L27_C1() [0x427aed]\n??:? void tmptpheyp6e.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a < 0 && a % 2 == 0) || (a > 0 && a % 2 == 1);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzpdr1081.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x427de5]\n??:? void tmpzpdr1081.__unittest_L27_C1() [0x427ab8]\n??:? void tmpzpdr1081.__modtest() [0x427b64]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bb0b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a99e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb31]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffe0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fabd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a975]\n??:? runModuleUnitTests [0x42b8e1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428234]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == 0) || (a == 1) || (a == -1) || (a == 8) || (a == 27) || (a == 64) || (a == -8) || (a == -27) || (a == -64);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6a68fb6m.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427dd5]\n??:? void tmp6a68fb6m.__unittest_L27_C1() [0x427b09]\n??:? void tmp6a68fb6m.__modtest() [0x427b58]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bafb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a98e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb21]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffd0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42faad]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a965]\n??:? runModuleUnitTests [0x42b8d1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428224]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]\n??:? void tmpdkypn9zx.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplnbejoah.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplnbejoah.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == 0) || (a == 1) || (a == -1) || (a == 64) || (a == -64);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptpheyp6e.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmptpheyp6e.__unittest_L27_C1() [0x427aed]\n??:? void tmptpheyp6e.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0L || a == 1L || (a < 0L ? iscube(-a) : iscube(cast(long)pow(a, 1.0/3.0)));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdhaa4eyl.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x4289d5]\n??:? void tmpdhaa4eyl.__unittest_L27_C1() [0x427d6b]\n??:? void tmpdhaa4eyl.__modtest() [0x428758]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c7a3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b636]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430755]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b60d]\n??:? runModuleUnitTests [0x42c579]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428e24]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyxhdkftn.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpyxhdkftn.__unittest_L28_C1() [0x427d64]\n??:? void tmpyxhdkftn.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvr7_duc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return isPow(a, 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7o1th0to.d(25): Error: undefined identifier `isPow`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7o1th0to.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvr7_duc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0)\n        return true;\n    if (a < 0)\n        a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw2ytgo8w.d(29): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw2ytgo8w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]\n??:? void tmpdkypn9zx.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(long)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpet4e42_t.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428a9d]\n??:? void tmpet4e42_t.__unittest_L27_C1() [0x427dbc]\n??:? void tmpet4e42_t.__modtest() [0x428820]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c86b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430891]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43081d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d5]\n??:? runModuleUnitTests [0x42c641]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428eec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && isPow(a, 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxmzc5ax2.d(25): Error: undefined identifier `isPow`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxmzc5ax2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]\n??:? void tmpdkypn9zx.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a == -103823\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqr1d5qxh.d(26): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpqr1d5qxh.d(39): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqr1d5qxh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvr7_duc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(int)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpeks0qmr8.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428a7d]\n??:? void tmpeks0qmr8.__unittest_L27_C1() [0x427dac]\n??:? void tmpeks0qmr8.__modtest() [0x428800]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c84b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430871]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4307fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6b5]\n??:? runModuleUnitTests [0x42c621]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ecc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]\n??:? void tmpdkypn9zx.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && pow(cast(int)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplid4ls3t.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428a8d]\n??:? void tmplid4ls3t.__unittest_L27_C1() [0x427dd7]\n??:? void tmplid4ls3t.__modtest() [0x42880c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c85b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6ee]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430881]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d30]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43080d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6c5]\n??:? runModuleUnitTests [0x42c631]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428edc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0L || a == 1L || a == -1L || (a > 0L && a == pow(cast(long)sqrt(a), 3L));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa859uqp6.d(25): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa859uqp6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    // your code here\n    return a == pow(cast(long)pow(a, 1.0/3.0), 3);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5zis8s9e.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428a85]\n??:? void tmp5zis8s9e.__unittest_L28_C1() [0x427da4]\n??:? void tmp5zis8s9e.__modtest() [0x428808]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c853]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6e6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430879]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d28]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430805]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6bd]\n??:? runModuleUnitTests [0x42c629]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ed4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0L || a == 1L || a == -1L || (a > 0L && a == pow(cast(long)cbrt(a), 3L));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvr7_duc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(long)pow(a, 1.0/3.0), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpet4e42_t.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428a9d]\n??:? void tmpet4e42_t.__unittest_L27_C1() [0x427dbc]\n??:? void tmpet4e42_t.__modtest() [0x428820]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c86b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6fe]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430891]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d40]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43081d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6d5]\n??:? runModuleUnitTests [0x42c641]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428eec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_kp_edo0.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_kp_edo0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvr7_duc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0L || a == 1L || a == -1L || (a > 0L && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdwfdmw86.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpdwfdmw86.__unittest_L27_C1() [0x427df7]\n??:? void tmpdwfdmw86.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0L || a == 1L || a == -1L || a == 8L || a == 27L || a == 64L || a == 125L || a == 216L || a == 343L || a == 512L || a == 729L || a == 1000L || a == 1331L || a == 1728L || a == 2197L || a == 2744L || a == 3375L || a == 4096L || a == 4913L || a == 5832L || a == 6859L || a == 8000L || a == 9261L || a == 10648L || a == 12167L || a == 13824L || a == 15625L || a == 17576L || a == 19683L || a == 21952L || a == 24389L || a == 27000L || a == 29791L || a == 32768L || a == 35937L || a == 39304L || a == 42875L || a == 46656L || a == 50653L || a == 54872L || a == 59319L || a == 64000L || a == 68921L || a == 74088L || a == 79507L || a == 85184L || a == 91125L || a == 97336L || a == 103823L || a == 110592L || a == 117649L || a == 125000L || a == 132651L || a == 140608L || a == 148877L || a == 157464L || a == 166375L || a == 175616L || a == 185193L || a == 195112L || a == 205379L || a == 216000L || a == 226981L || a == 238328L || a == 250047L || a == 262144L || a == 274625L || a == 287496L || a == 300763L || a == 314432L || a == 328509L || a == 343000L || a == 357911L || a == 373248L || a == 389017L || a == 405224L || a == 421875L || a == 438976L || a == 456533L || a == 474552L || a == 493039L || a == 512000L || a == 5314\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphsjux4xv.d(26): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmphsjux4xv.d(39): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphsjux4xv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq_5eeaat.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_5eeaat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(int)sqrt(a), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0cnhti3c.d(25): Error: `std.math.sqrt` called with argument types `(long)` matches both:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1848):     `std.math.sqrt(float x)`\nand:\n/home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/dmd-2.081.1-jzbhflp3vff4u2dqrltybjq3in2pa22f/linux/bin64/../../src/phobos/std/math.d(1854):     `std.math.sqrt(real x)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0cnhti3c.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    double x = pow(a, 1.0/3.0);\n    return x == cast(long)x;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp10csleyj.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmp10csleyj.__unittest_L28_C1() [0x427d60]\n??:? void tmp10csleyj.__modtest() [0x42872c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == 0) || (a == 1) || (a == -1) || (a == 8) || (a == 27) || (a == 64) || (a == 125) || (a == 216) || (a == 343) || (a == 512) || (a == 729) || (a == 1000) || (a == 1331) || (a == 1728) || (a == 2197) || (a == 2744) || (a == 3375) || (a == 4096) || (a == 4913) || (a == 5832) || (a == 6859) || (a == 8000) || (a == 9261) || (a == 10648) || (a == 12167) || (a == 13824) || (a == 15625) || (a == 17576) || (a == 19683) || (a == 21952) || (a == 24389) || (a == 27000) || (a == 29791) || (a == 32768) || (a == 35937) || (a == 39304) || (a == 42875) || (a == 46656) || (a == 50653) || (a == 54872) || (a == 59319) || (a == 64000) || (a == 68921) || (a == 74088) || (a == 79507) || (a == 85184) || (a == 91125) || (a == 97336) || (a == 103823) || (a == 110592) || (a == 117649) || (a == 125000) || (a == 132651) || (a == 140608) || (a == 148877) || (a == 157464) || (a == 166375) || (a == 175616) || (a == 185193) || (a == 195112) || (a == 205379) || (a == 216000) || (a == 226981) || (a == 238328) || (a == 250047) || (a == 262144) || (a == 274625) || (a == 287496) || (a == 300763) || (a == 314432) || (a == 328509) || (a == 343000)\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw4uztrom.d(26): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpw4uztrom.d(39): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4uztrom.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpq_5eeaat.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpq_5eeaat.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == 0) || (a == 1) || (a == -1) || (a == 8) || (a == 27) || (a == 64) || (a == 125) || (a == 216) || (a == 343) || (a == 512) || (a == 729) || (a == 1000) || (a == 1331) || (a == 1728) || (a == 2197) || (a == 2744) || (a == 3375) || (a == 4096) || (a == 4913) || (a == 5832) || (a == 6859) || (a == 8000) || (a == 9261) || (a == 10648) || (a == 12167) || (a == 13824) || (a == 15625) || (a == 17576) || (a == 19683) || (a == 21952) || (a == 24389) || (a == 27000) || (a == 29791) || (a == 32768) || (a == 35937) || (a == 39304) || (a == 42875) || (a == 46656) || (a == 50653) || (a == 54872) || (a == 59319) || (a == 64000) || (a == 68921) || (a == 74088) || (a == 79507) || (a == 85184) || (a == 91125) || (a == 97336) || (a == 103823) || (a == 110592) || (a == 117649) || (a == 125000) || (a == 132651) || (a == 140608) || (a == 148877) || (a == 157464) || (a == 166375) || (a == 175616) || (a == 185193) || (a == 195112) || (a == 205379) || (a == 216000) || (a == 226981) || (a == 238328) || (a == 250047) || (a == 262144) || (a == 274625) || (a == 287496) || (a == 300763) || (a == 314432) || (a == 328509) || (a == 343000)\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw4uztrom.d(26): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpw4uztrom.d(39): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4uztrom.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphflkdb7s.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428ab5]\n??:? void tmphflkdb7s.__unittest_L27_C1() [0x427dd0]\n??:? void tmphflkdb7s.__modtest() [0x428834]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c883]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b716]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d58]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430835]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6ed]\n??:? runModuleUnitTests [0x42c659]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f04]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_kp_edo0.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_kp_edo0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && (long)pow(a, 1.0 / 3.0) * (long)pow(a, 1.0 / 3.0) * (long)pow(a, 1.0 / 3.0) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpa628uwnl.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\n/tmp/tmpa628uwnl.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\n/tmp/tmpa628uwnl.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpa628uwnl.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_8tr50n8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmp_8tr50n8.__unittest_L27_C1() [0x427df7]\n??:? void tmp_8tr50n8.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0L || a == 1L || a == -1L || a == 8L || a == 27L || a == 64L || a == 125L || a == 216L || a == 343L || a == 512L || a == 729L || a == 1000L || a == 1331L || a == 1728L || a == 2197L || a == 2744L || a == 3375L || a == 4096L || a == 4913L || a == 5832L || a == 6859L || a == 8000L || a == 9261L || a == 10648L || a == 12167L || a == 13824L || a == 15625L || a == 17576L || a == 19683L || a == 21952L || a == 24389L || a == 27000L || a == 29791L || a == 32768L || a == 35937L || a == 39304L || a == 42875L || a == 46656L || a == 50653L || a == 54872L || a == 59319L || a == 64000L || a == 68921L || a == 74088L || a == 79507L || a == 85184L || a == 91125L || a == 97336L || a == 103823L || a == 110592L || a == 117649L || a == 125000L || a == 132651L || a == 140608L || a == 148877L || a == 157464L || a == 166375L || a == 175616L || a == 185193L || a == 195112L || a == 205379L || a == 216000L || a == 226981L || a == 238328L || a == 250047L || a == 262144L || a == 274625L || a == 287496L || a == 300763L || a == 314432L || a == 328509L || a == 343000L || a == 357911L || a == 373248L || a == 389017L || a == 405224L || a == 421875L || a == 438976L || a == 456533L || a == 474552L || a == 493039L || a == 512000L || a == 5314\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphsjux4xv.d(26): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmphsjux4xv.d(39): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphsjux4xv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`\n/tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbjg3n44.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp325ak1q3.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmp325ak1q3.__unittest_L28_C1() [0x427d64]\n??:? void tmp325ak1q3.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpan05agi3.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpan05agi3.__unittest_L27_C1() [0x427aed]\n??:? void tmpan05agi3.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && pow(cast(double)a, 1.0/3.0) == cast(long)pow(cast(double)a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp92k5brcl.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42896d]\n??:? void tmp92k5brcl.__unittest_L27_C1() [0x427d34]\n??:? void tmp92k5brcl.__modtest() [0x4286f0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c73b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ce]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430761]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c10]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306ed]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a5]\n??:? runModuleUnitTests [0x42c511]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dbc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a, 1.0/3.0);\n    return a == b*b*b;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp325ak1q3.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmp325ak1q3.__unittest_L28_C1() [0x427d64]\n??:? void tmp325ak1q3.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`\n/tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbjg3n44.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (cast(long)pow(cast(double)a, 1.0/3.0)) * (cast(long)pow(cast(double)a, 1.0/3.0)) * (cast(long)pow(cast(double)a, 1.0/3.0)) == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpuz2a_3km.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42897d]\n??:? void tmpuz2a_3km.__unittest_L27_C1() [0x427d40]\n??:? void tmpuz2a_3km.__modtest() [0x4286fc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c74b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5de]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430771]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c20]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306fd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b5]\n??:? runModuleUnitTests [0x42c521]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dcc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`\n/tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbjg3n44.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxqwzvpqg.d(27): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxqwzvpqg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvr7_duc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == -8 || a == -27;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdkypn9zx.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpdkypn9zx.__unittest_L27_C1() [0x427abb]\n??:? void tmpdkypn9zx.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplnbejoah.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplnbejoah.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return is(typeof(pow(a, 1.0/3.0)) == long);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprx77dj_d.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x427d85]\n??:? void tmprx77dj_d.__unittest_L27_C1() [0x427a1c]\n??:? void tmprx77dj_d.__modtest() [0x427b08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baab]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a93e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fad1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ff80]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a915]\n??:? runModuleUnitTests [0x42b881]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4281d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long b = (long)pow(a, 1.0 / 3.0);\n    return b * b * b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps0_26hre.d(27): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps0_26hre.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\n/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\n/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpagtmt66l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == 0) || (a == 1) || (a == -1) || (a == 64) || (a == -64);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptpheyp6e.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmptpheyp6e.__unittest_L27_C1() [0x427aed]\n??:? void tmptpheyp6e.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvr7_duc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0/3.0) == pow(a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_kp_edo0.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_kp_edo0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27 || a == 64 || a == 125 || a == 216 || a == 343 || a == 512 || a == 729 || a == 1000 || a == 1331 || a == 1728 || a == 2197 || a == 2744 || a == 3375 || a == 4096 || a == 4913 || a == 5832 || a == 6859 || a == 8000 || a == 9261 || a == 10648 || a == 12167 || a == 13824 || a == 15625 || a == 17576 || a == 19683 || a == 21952 || a == 24389 || a == 27000 || a == 29791 || a == 32768 || a == 35937 || a == 39304 || a == 42875 || a == 46656 || a == 50653 || a == 54872 || a == 59319 || a == 64000 || a == 68921 || a == 74088 || a == 79507 || a == 85184 || a == 91125 || a == 97336 || a == 103823 || a == 110592 || a == 117649 || a == 125000 || a == 132651 || a == 140608 || a == 148877 || a == 157464 || a == 166375 || a == 175616 || a == 185193 || a == 195112 || a == 205379 || a == 216000 || a == 226981 || a == 238328 || a == 250047 || a == 262144 || a == 274625 || a == 287496 || a == 300763 || a == 314432 || a == 328509 || a == 343000 || a == 357911 || a == 373248 || a == 389017 || a == 405224 || a == 421875 || a == 438976 || a == 456533 || a == 474552 || a == 493039 || a == 512000 || a == 531441 || a == 551368 || a == 571787 || a == 592704 || a == 614125 || a == 636056 || a == 658503 || a == 681472 || a == 704969 || a == 729000 || a == 753571 || a == 778688 || a == 804357 || a == 830584 || a ==\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgbjg3n44.d(26): Error: expression expected, not `unittest`\n/tmp/tmpgbjg3n44.d(27): Error: found `{` when expecting `;` following `return` statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgbjg3n44.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0L || a == 1L || a == -1L || a == 8L || a == 27L || a == 64L || a == 125L || a == 216L || a == 343L || a == 512L || a == 729L || a == 1000L || a == 1331L || a == 1728L || a == 2197L || a == 2744L || a == 3375L || a == 4096L || a == 4913L || a == 5832L || a == 6859L || a == 8000L || a == 9261L || a == 10648L || a == 12167L || a == 13824L || a == 15625L || a == 17576L || a == 19683L || a == 21952L || a == 24389L || a == 27000L || a == 29791L || a == 32768L || a == 35937L || a == 39304L || a == 42875L || a == 46656L || a == 50653L || a == 54872L || a == 59319L || a == 64000L || a == 68921L || a == 74088L || a == 79507L || a == 85184L || a == 91125L || a == 97336L || a == 103823L || a == 110592L || a == 117649L || a == 125000L || a == 132651L || a == 140608L || a == 148877L || a == 157464L || a == 166375L || a == 175616L || a == 185193L || a == 195112L || a == 205379L || a == 216000L || a == 226981L || a == 238328L || a == 250047L || a == 262144L || a == 274625L || a == 287496L || a == 300763L || a == 314432L || a == 328509L || a == 343000L || a == 357911L || a == 373248L || a == 389017L || a == 405224L || a == 421875L || a == 438976L || a == 456533L || a == 474552L || a == 493039L || a == 512000L || a == 5314\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmphsjux4xv.d(26): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmphsjux4xv.d(39): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmphsjux4xv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == 27;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpg_e7u7ld.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpg_e7u7ld.__unittest_L27_C1() [0x427aaf]\n??:? void tmpg_e7u7ld.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvr7_duc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == 0L) || (a == 1L) || (a == -1L) || (a == pow(cast(long)floor(pow(a, 1.0 / 3.0)), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1ivye167.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428ba5]\n??:? void tmp1ivye167.__unittest_L27_C1() [0x427edf]\n??:? void tmp1ivye167.__modtest() [0x428924]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ca8b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b91e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430ab1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b8f5]\n??:? runModuleUnitTests [0x42c861]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ff4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\n/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\n/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpagtmt66l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 64 || a == -64;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpan05agi3.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x427dbd]\n??:? void tmpan05agi3.__unittest_L27_C1() [0x427aed]\n??:? void tmpan05agi3.__modtest() [0x427b3c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bae3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a976]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb09]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffb8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa95]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a94d]\n??:? runModuleUnitTests [0x42b8b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42820c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    if (a == 0) return true;\n    if (a < 0) a = -a;\n    long x = (long)pow(a, 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpsqwcsutx.d(27): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpsqwcsutx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(int)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpilr09m3z.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428a95]\n??:? void tmpilr09m3z.__unittest_L27_C1() [0x427de3]\n??:? void tmpilr09m3z.__modtest() [0x428818]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430889]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d38]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430815]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6cd]\n??:? runModuleUnitTests [0x42c639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ee4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\n/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\n/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpagtmt66l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvr7_duc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0L || a == 1L || a == -1L || a == 8L || a == 27L || a == -8L || a == -27L;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpsfks90g6.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x427dc5]\n??:? void tmpsfks90g6.__unittest_L27_C1() [0x427abb]\n??:? void tmpsfks90g6.__modtest() [0x427b48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42baeb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42a97e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fb11]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x42ffc0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fa9d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42a955]\n??:? runModuleUnitTests [0x42b8c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428214]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long x = cast(long)pow(a, 1.0/3.0);\n    return x*x*x == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoyonbde8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpoyonbde8.__unittest_L28_C1() [0x427d64]\n??:? void tmpoyonbde8.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == 0) || (a == 1) || (a == -1) || (a == pow(cast(long)round(pow(cast(double)a, 1.0/3.0)), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_8tr50n8.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmp_8tr50n8.__unittest_L27_C1() [0x427df7]\n??:? void tmp_8tr50n8.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return (a == 0) || (a == 1) || (a == -1) || (a == 8) || (a == 27) || (a == 64) || (a == 125) || (a == 216) || (a == 343) || (a == 512) || (a == 729) || (a == 1000) || (a == 1331) || (a == 1728) || (a == 2197) || (a == 2744) || (a == 3375) || (a == 4096) || (a == 4913) || (a == 5832) || (a == 6859) || (a == 8000) || (a == 9261) || (a == 10648) || (a == 12167) || (a == 13824) || (a == 15625) || (a == 17576) || (a == 19683) || (a == 21952) || (a == 24389) || (a == 27000) || (a == 29791) || (a == 32768) || (a == 35937) || (a == 39304) || (a == 42875) || (a == 46656) || (a == 50653) || (a == 54872) || (a == 59319) || (a == 64000) || (a == 68921) || (a == 74088) || (a == 79507) || (a == 85184) || (a == 91125) || (a == 97336) || (a == 103823) || (a == 110592) || (a == 117649) || (a == 125000) || (a == 132651) || (a == 140608) || (a == 148877) || (a == 157464) || (a == 166375) || (a == 175616) || (a == 185193) || (a == 195112) || (a == 205379) || (a == 216000) || (a == 226981) || (a == 238328) || (a == 250047) || (a == 262144) || (a == 274625) || (a == 287496) || (a == 300763) || (a == 314432) || (a == 328509) || (a == 343000)\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw4uztrom.d(26): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmpw4uztrom.d(39): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4uztrom.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(int)pow(a, 1.0 / 3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyq37miec.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428a95]\n??:? void tmpyq37miec.__unittest_L27_C1() [0x427de3]\n??:? void tmpyq37miec.__modtest() [0x428818]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c863]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6f6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430889]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d38]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430815]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6cd]\n??:? runModuleUnitTests [0x42c639]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428ee4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvr7_duc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0L || (a > 0L && pow(cast(long) floor(pow(a, 1.0 / 3.0)), 3) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprpf89ife.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x428b8d]\n??:? void tmprpf89ife.__unittest_L27_C1() [0x427eac]\n??:? void tmprpf89ife.__modtest() [0x428910]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42ca73]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b906]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430a99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430f48]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430a25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b8dd]\n??:? runModuleUnitTests [0x42c849]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428fdc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && (long)pow(a, 1.0 / 3.0) == pow(a, 1.0 / 3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9bzb6xij.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9bzb6xij.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0L || (a > 0L && a == cast(long)pow(cast(double)a, 1.0/3.0));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj1tgxlkt.d(33): unittest failure\n----------------\n??:? _d_unittestp [0x42894d]\n??:? void tmpj1tgxlkt.__unittest_L27_C1() [0x427d14]\n??:? void tmpj1tgxlkt.__modtest() [0x4286d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ae]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430741]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430bf0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4306cd]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b585]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428d9c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || a == 8 || a == -8 || a == 27 || a == -27 || a == 64 || a == -64 || a == 125 || a == -125 || a == 216 || a == -216 || a == 343 || a == -343 || a == 512 || a == -512 || a == 729 || a == -729 || a == 1000 || a == -1000 || a == 1331 || a == -1331 || a == 1728 || a == -1728 || a == 2197 || a == -2197 || a == 2744 || a == -2744 || a == 3375 || a == -3375 || a == 4096 || a == -4096 || a == 4913 || a == -4913 || a == 5832 || a == -5832 || a == 6859 || a == -6859 || a == 8000 || a == -8000 || a == 9261 || a == -9261 || a == 10648 || a == -10648 || a == 12167 || a == -12167 || a == 13824 || a == -13824 || a == 15625 || a == -15625 || a == 17576 || a == -17576 || a == 19683 || a == -19683 || a == 21952 || a == -21952 || a == 24389 || a == -24389 || a == 27000 || a == -27000 || a == 29791 || a == -29791 || a == 32768 || a == -32768 || a == 35937 || a == -35937 || a == 39304 || a == -39304 || a == 42875 || a == -42875 || a == 46656 || a == -46656 || a == 50653 || a == -50653 || a == 54872 || a == -54872 || a == 59319 || a == -59319 || a == 64000 || a == -64000 || a == 68921 || a == -68921 || a == 74088 || a == -74088 || a == 79507 || a == -79507 || a == 85184 || a == -85184 || a == 91125 || a == -91125 || a == 97336 || a == -97336 || a == 103823 || a == -103823\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0owk451w.d(26): Error: found `unittest` when expecting `;` following `return` statement\n/tmp/tmp0owk451w.d(39): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0owk451w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = cast(long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyxhdkftn.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x4289ad]\n??:? void tmpyxhdkftn.__unittest_L28_C1() [0x427d64]\n??:? void tmpyxhdkftn.__modtest() [0x428730]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b60e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4307a1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430c50]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43072d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5e5]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428dfc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || (a > 0 && (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) * (long)pow(a, 1.0/3.0) == a);\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\n/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\n/tmp/tmpagtmt66l.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpagtmt66l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0L || a == 1L || a == -1L || (a > 0L && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdwfdmw86.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpdwfdmw86.__unittest_L27_C1() [0x427df7]\n??:? void tmpdwfdmw86.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163090
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    long b = (long)pow(a, 1.0/3.0);\n    return b*b*b == a;\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqvr7_duc.d(25): Error: C style cast illegal, use `cast(long)pow(a, 1.00000 / 3.00000)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqvr7_duc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    >>> iscube(1L)\n    true\n    >>> iscube(2L)\n    false\n    >>> iscube(-1L)\n    true\n    >>> iscube(64L)\n    true\n    >>> iscube(0L)\n    true\n    >>> iscube(180L)\n    false\n    \n*/\nbool iscube(long a) \n{\n    return a == 0 || a == 1 || a == -1 || (a > 0 && a == pow(cast(long)pow(a, 1.0/3.0), 3));\n}\nunittest\n{\n    alias candidate = iscube;\n\n    assert(candidate(1L) == true);\n    assert(candidate(2L) == false);\n    assert(candidate(-1L) == true);\n    assert(candidate(64L) == true);\n    assert(candidate(180L) == false);\n    assert(candidate(1000L) == true);\n    assert(candidate(0L) == true);\n    assert(candidate(1729L) == false);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwf6jf3ew.d(34): unittest failure\n----------------\n??:? _d_unittestp [0x428abd]\n??:? void tmpwf6jf3ew.__unittest_L27_C1() [0x427df7]\n??:? void tmpwf6jf3ew.__modtest() [0x42883c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c88b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b71e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4308b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430d60]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43083d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b6f5]\n??:? runModuleUnitTests [0x42c661]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428f0c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660163089
    }
  ]
}