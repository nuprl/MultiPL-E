{
  "language": "d",
  "name": "HumanEval_140_fix_spaces",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space_found = false;\n    foreach(c; text) \n    {\n        if(c == ' ') \n        {\n            if(space_found) \n            {\n                result ~= '-';\n            } \n            else \n            {\n                result ~= '_';\n                space_found = true;\n            }\n        } \n        else \n        {\n            result ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpir2ccd0n.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpir2ccd0n.__unittest_L45_C1() [0x427c64]\n??:? void tmpir2ccd0n.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8a5u2mey.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x42807d]\n??:? void tmp8a5u2mey.__unittest_L49_C1() [0x427d03]\n??:? void tmp8a5u2mey.__modtest() [0x427e00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c713]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b622]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fff9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f9]\n??:? runModuleUnitTests [0x42c4e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    auto result = text.split(\" \").filter!(a => a != \"\").join(\"_\");\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmple6586fv.d(36): unittest failure\n----------------\n??:? _d_unittestp [0x44d605]\n??:? void tmple6586fv.__unittest_L31_C1() [0x43cb69]\n??:? void tmple6586fv.__modtest() [0x44b444]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x45605f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x44cc32]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x452129]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4521b8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x4520b5]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x44cc09]\n??:? runModuleUnitTests [0x455e35]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x44e360]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space = false;\n    foreach(c; text) \n    {\n        if(c == ' ') \n        {\n            if(space) \n            {\n                result ~= '-';\n            }\n            else \n            {\n                result ~= '_';\n                space = true;\n            }\n        }\n        else \n        {\n            result ~= c;\n            space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbaxwtlyh.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpbaxwtlyh.__unittest_L45_C1() [0x427c64]\n??:? void tmpbaxwtlyh.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space = false;\n    bool double_space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n                if(double_space)\n                {\n                    result ~= '-';\n                }\n                else\n                {\n                    result ~= '_';\n                    double_space = true;\n                }\n            }\n            else\n            {\n                result ~= '_';\n                space = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space = false;\n            double_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpr6hq8skb.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpr6hq8skb.__unittest_L55_C1() [0x427d0b]\n??:? void tmpr6hq8skb.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    // your code here\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvo4rjy_7.d(29): unittest failure\n----------------\n??:? _d_unittestp [0x427f2d]\n??:? void tmpvo4rjy_7.__unittest_L24_C1() [0x427b1d]\n??:? void tmpvo4rjy_7.__modtest() [0x427cb0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbd7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aae6]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbfd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300ac]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb89]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aabd]\n??:? runModuleUnitTests [0x42b9ad]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42837c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.range : only;\n    import std.string : stripLeft, stripRight;\n    import std.typecons : tuple;\n    import std.math : max;\n    import std.conv : to;\n    import std.stdio : writeln;\n    import std.regex : regex, replace;\n    import std.range : take, takeExactly, takeExactlyOne, takeOne, takeUntil, takeWhile, takeWhile!(fun), takeWhile!(pred), takeWhile!(pred, fun), takeWhile!(pred, fun, R), takeWhile!(pred, R), takeWhile!(R), takeWhile!(R, fun), takeWhile!(R, fun, pred), takeWhile!(R, pred), takeWhile!(R, pred, fun), takeWhile!(R, R2), takeWhile!(R, R2, fun), takeWhile!(R, R2, fun, pred), takeWhile!(R, R2, pred), takeWhile!(R, R2, pred, fun), takeWhile!(R, R2, R3), takeWhile!(R, R2, R3, fun), takeWhile!(R, R2, R3, fun, pred), takeWhile!(R, R2, R3, pred), takeWhile!(R, R2, R3, pred, fun), takeWhile!(R, R2, R3, R4), takeWhile!(R, R2, R3, R4, fun), takeWhile!(R, R2, R3, R4, fun, pred), takeWhile!(R, R2, R3, R4, pred), takeWhile!(R, R2, R3, R4, pred, fun), takeWhile!(R, R2, R3, R4, R5), takeWhile!(R, R2, R3, R4, R5, fun), takeWhile!(R, R2, R3, R4, R5, fun, pred), takeWhile!(R, R2, R3, R4, R5, pred), takeWhile!(R, R2, R3, R4, R5\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw4zrmghd.d(30): Error: `;` expected\n/tmp/tmpw4zrmghd.d(31): Error: found `unittest` when expecting `)` following template argument list\n/tmp/tmpw4zrmghd.d(32): Error: found `{` when expecting `;` following statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw4zrmghd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.conv : to;\n    import std.range : chunks;\n    import std.string : split;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n   \nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0u498k9a.d(71): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0u498k9a.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.range : iota;\n    import std.conv : to;\n    import std.string : toStringz;\n    import std.string : strip;\n    import std.typecons : tuple;\n    import std.range : take;\n    import std.range : drop;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpb5nm6h6o.d(73): Error: `;` expected\n/tmp/tmpb5nm6h6o.d(83): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb5nm6h6o.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(spaces == 1)\n            {\n                result ~= '_';\n            }\n            spaces = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1mql2v_9.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmp1mql2v_9.__unittest_L45_C1() [0x427c25]\n??:? void tmp1mql2v_9.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string[] words = text.split(\" \");\n    string result = \"\";\n    foreach(string word; words)\n    {\n        if(word.length > 0)\n        {\n            result ~= word;\n            result ~= \"_\";\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppcu6mi5k.d(21): Error: no property `split` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppcu6mi5k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.range : chunks;\n    import std.conv : to;\n    import std.string : split;\n    import std.typecons : tuple;\n    import std.math : max;\n    import std.range : take;\n    import std.range : drop;\n    import std.range : zip;\n    import std.range : iota;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp563xhrle.d(78): Error: identifier expected following `import`\n/tmp/tmp563xhrle.d(78): Error: `;` expected\n/tmp/tmp563xhrle.d(88): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp563xhrle.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool prev_space = false;\n    bool prev_prev_space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(prev_space)\n            {\n                if(prev_prev_space)\n                {\n                    result ~= '-';\n                }\n                else\n                {\n                    result ~= '_';\n                }\n            }\n            else\n            {\n                result ~= '_';\n            }\n            prev_prev_space = prev_space;\n            prev_space = true;\n        }\n        else\n        {\n            result ~= c;\n            prev_prev_space = prev_space;\n            prev_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm8fsk43o.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpm8fsk43o.__unittest_L55_C1() [0x427d0b]\n??:? void tmpm8fsk43o.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool first_space = true;\n    bool consecutive_spaces = false;\n    foreach(ch; text)\n    {\n        if(ch == ' ')\n        {\n            if(first_space)\n            {\n                first_space = false;\n                continue;\n            }\n            if(consecutive_spaces)\n            {\n                continue;\n            }\n            consecutive_spaces = true;\n            result ~= '-';\n        }\n        else\n        {\n            consecutive_spaces = false;\n            result ~= ch;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppq2f09bd.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42800d]\n??:? void tmppq2f09bd.__unittest_L48_C1() [0x427bf9]\n??:? void tmppq2f09bd.__modtest() [0x427d8c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6a3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5b2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430438]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b589]\n??:? runModuleUnitTests [0x42c479]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42845c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces > 2)\n            {\n                result ~= \"-\";\n                spaces = 0;\n            }\n            else\n            {\n                result ~= \"_\";\n            }\n        }\n        else\n        {\n            result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmbjp8ioe.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42801d]\n??:? void tmpmbjp8ioe.__unittest_L46_C1() [0x427c9f]\n??:? void tmpmbjp8ioe.__modtest() [0x427d9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c763]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b672]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430448]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]\n??:? runModuleUnitTests [0x42c539]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42846c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space_found = false;\n    foreach(char c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_found)\n            {\n                result ~= \"-\";\n            }\n            else\n            {\n                result ~= \"_\";\n            }\n            space_found = true;\n        }\n        else\n        {\n            result ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpys4n2vxr.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42800d]\n??:? void tmpys4n2vxr.__unittest_L45_C1() [0x427c48]\n??:? void tmpys4n2vxr.__modtest() [0x427d90]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c753]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b662]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff89]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430438]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff15]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b639]\n??:? runModuleUnitTests [0x42c529]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42845c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space = false;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n                count++;\n            }\n            else\n            {\n                space = true;\n                count = 1;\n            }\n        }\n        else\n        {\n            if(space)\n            {\n                if(count > 2)\n                {\n                    result ~= '-';\n                }\n                else\n                {\n                    result ~= '_';\n                }\n                space = false;\n            }\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmplut7agk3.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x42804d]\n??:? void tmplut7agk3.__unittest_L57_C1() [0x427c3d]\n??:? void tmplut7agk3.__modtest() [0x427dd0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c9]\n??:? runModuleUnitTests [0x42c4b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42849c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(spaces == 1)\n            {\n                result ~= '_';\n            }\n            result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1cljn6g6.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmp1cljn6g6.__unittest_L45_C1() [0x427c25]\n??:? void tmp1cljn6g6.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbofzq4q7.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpbofzq4q7.__unittest_L45_C1() [0x427c6c]\n??:? void tmpbofzq4q7.__modtest() [0x427db4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"___\", \"-\");\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpewiohgv7.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewiohgv7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space = false;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n                count++;\n                if(count == 2)\n                {\n                    result ~= '-';\n                    count = 0;\n                }\n            }\n            else\n            {\n                space = true;\n                result ~= '_';\n            }\n        }\n        else\n        {\n            space = false;\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpf2mi33qf.d(58): unittest failure\n----------------\n??:? _d_unittestp [0x42804d]\n??:? void tmpf2mi33qf.__unittest_L52_C1() [0x427c84]\n??:? void tmpf2mi33qf.__modtest() [0x427dcc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c9]\n??:? runModuleUnitTests [0x42c4b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42849c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    // TODO\n    return \"\";\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpti0sk7h1.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427f25]\n??:? void tmpti0sk7h1.__unittest_L24_C1() [0x427ac6]\n??:? void tmpti0sk7h1.__modtest() [0x427ca4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbcf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aade]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbf5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb81]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab5]\n??:? runModuleUnitTests [0x42b9a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428374]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfrri2gjq.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpfrri2gjq.__unittest_L45_C1() [0x427c25]\n??:? void tmpfrri2gjq.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space = false;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n                count++;\n                if(count == 2)\n                {\n                    result ~= \"-\";\n                    count = 0;\n                }\n            }\n            else\n            {\n                space = true;\n                result ~= \"_\";\n            }\n        }\n        else\n        {\n            space = false;\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbtkmn66z.d(58): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpbtkmn66z.__unittest_L52_C1() [0x427c6c]\n??:? void tmpbtkmn66z.__modtest() [0x427db4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c77b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b68a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b661]\n??:? runModuleUnitTests [0x42c551]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int n = text.length;\n    string result = \"\";\n    while (i < n) \n    {\n        if (text[i] == ' ') \n        {\n            j = i;\n            while (j < n && text[j] == ' ') \n            {\n                j++;\n            }\n            if (j - i > 2) \n            {\n                result += \"-\";\n            } \n            else \n            {\n                result += \"_\";\n            }\n            i = j;\n        } \n        else \n        {\n            result += text[i];\n            i++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgptjsxa4.d(23): Error: cannot implicitly convert expression `text.length` of type `ulong` to `int`\n/tmp/tmpgptjsxa4.d(36): Error: slice `result` is not mutable\n/tmp/tmpgptjsxa4.d(40): Error: slice `result` is not mutable\n/tmp/tmpgptjsxa4.d(46): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgptjsxa4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwy0ke_wy.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpwy0ke_wy.__unittest_L45_C1() [0x427c25]\n??:? void tmpwy0ke_wy.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool prev_space = false;\n    bool prev_prev_space = false;\n    foreach(c; text) \n    {\n        if(c == ' ') \n        {\n            if(prev_space) \n            {\n                if(prev_prev_space) \n                {\n                    result ~= '-';\n                } \n                else \n                {\n                    result ~= '_';\n                }\n            } \n            else \n            {\n                result ~= '_';\n            }\n            prev_prev_space = prev_space;\n            prev_space = true;\n        } \n        else \n        {\n            result ~= c;\n            prev_prev_space = prev_space;\n            prev_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3_mms3nq.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmp3_mms3nq.__unittest_L55_C1() [0x427d0b]\n??:? void tmp3_mms3nq.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwy0ke_wy.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpwy0ke_wy.__unittest_L45_C1() [0x427c25]\n??:? void tmpwy0ke_wy.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool prev_space = false;\n    foreach(c; text) \n    {\n        if(c == ' ') \n        {\n            if(prev_space) \n            {\n                result ~= '-';\n            } \n            else \n            {\n                result ~= '_';\n            }\n            prev_space = true;\n        } \n        else \n        {\n            result ~= c;\n            prev_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpn8cyb25v.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpn8cyb25v.__unittest_L45_C1() [0x427c64]\n??:? void tmpn8cyb25v.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space_flag = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_flag)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n                space_flag = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_flag = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpyv8qthji.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpyv8qthji.__unittest_L45_C1() [0x427c64]\n??:? void tmpyv8qthji.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm.iteration : filter, map;\n    import std.algorithm.comparison : equal;\n    import std.range : take, drop;\n    import std.array : array;\n    import std.conv : to;\n    import std.string : replace;\n    import std.typecons : tuple;\n    import std.math : min;\n    import std.range : chain;\n    import std.algorithm.searching : count;\n    import std.range : take, drop;\n    import std.array : array;\n    import std.conv : to;\n    import std.string : replace;\n    import std.typecons : tuple;\n    import std.math : min;\n    import std.range : chain;\n    import std.algorithm.searching : count;\n    import std.range : take, drop;\n    import std.array : array;\n    import std.conv : to;\n    import std.string : replace;\n    import std.typecons : tuple;\n    import std.math : min;\n    import std.range : chain;\n    import std.algorithm.searching : count;\n    import std.range : take, drop;\n    import std.array : array;\n    import std.conv : to;\n    import std.string : replace;\n    import std.typecons : tuple;\n    import std.math : min;\n    import std.range : chain;\n    import std.algorithm.searching : count;\n    import std.range : take, drop;\n    import std.array : array;\n    import std.conv : to;\n    import std.string : replace;\n    import std.typecons : tuple;\n    import std.math : min;\n    import std.range : chain;\n    import std.algorithm.searching : count;\n    import std.range : take, drop;\n    import std.array : array;\n    import std.conv : to;\n    import std.string : replace;\n    import std.typecons : tuple;\n    import std.math : min;\n    import std.range : chain;\n    import std.algorithm.searching : count;\n    import std.range :\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6psuxpcb.d(72): Error: identifier expected following `:`\n/tmp/tmp6psuxpcb.d(72): Error: `;` expected\n/tmp/tmp6psuxpcb.d(82): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6psuxpcb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else if(count > 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp72n02b2a.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmp72n02b2a.__unittest_L49_C1() [0x427d07]\n??:? void tmp72n02b2a.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces == 1)\n            {\n                result ~= '_';\n            }\n            else if(spaces == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            spaces = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpoxthjw54.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpoxthjw54.__unittest_L45_C1() [0x427c6c]\n??:? void tmpoxthjw54.__modtest() [0x427db4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool prev_space = false;\n    bool prev_prev_space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(prev_space)\n            {\n                if(prev_prev_space)\n                {\n                    result ~= '-';\n                }\n                else\n                {\n                    result ~= '_';\n                }\n            }\n            else\n            {\n                result ~= '_';\n            }\n            prev_prev_space = prev_space;\n            prev_space = true;\n        }\n        else\n        {\n            result ~= c;\n            prev_prev_space = prev_space;\n            prev_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm8fsk43o.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpm8fsk43o.__unittest_L55_C1() [0x427d0b]\n??:? void tmpm8fsk43o.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool prev_space = false;\n    bool prev_prev_space = false;\n    foreach(c; text) \n    {\n        if(c == ' ') \n        {\n            if(prev_space) \n            {\n                if(prev_prev_space) \n                {\n                    result ~= '-';\n                } \n                else \n                {\n                    result ~= '_';\n                }\n            } \n            else \n            {\n                result ~= '_';\n            }\n            prev_prev_space = prev_space;\n            prev_space = true;\n        } \n        else \n        {\n            result ~= c;\n            prev_prev_space = prev_space;\n            prev_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqsol0c0d.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpqsol0c0d.__unittest_L55_C1() [0x427d0b]\n??:? void tmpqsol0c0d.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    auto consecutive_spaces = result.count(\"_ _\");\n    if (consecutive_spaces > 2)\n    {\n        result = result.replace(\"_ _\", \"-\");\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzs3rzf36.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzs3rzf36.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space_found = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(!space_found)\n            {\n                result ~= '_';\n                space_found = true;\n            }\n            else\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppkj48ft_.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmppkj48ft_.__unittest_L45_C1() [0x427c68]\n??:? void tmppkj48ft_.__modtest() [0x427db0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool prev_space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(prev_space)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n            }\n            prev_space = true;\n        }\n        else\n        {\n            result ~= c;\n            prev_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7xqveoh_.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmp7xqveoh_.__unittest_L45_C1() [0x427c64]\n??:? void tmp7xqveoh_.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    /*\n        >>> fix_spaces(\" Example\")\n        \"Example\"\n        >>> fix_spaces(\" Example 1\")\n        \"Example_1\"\n        >>> fix_spaces(\" Example 2\")\n        \"_Example_2\"\n        >>> fix_spaces(\" Example 3\")\n        \"_Example-3\"\n    */\n    return text.replace(\" \", \"_\").replace(\"__\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpg69zl_mz.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x448395]\n??:? void tmpg69zl_mz.__unittest_L40_C1() [0x439f88]\n??:? void tmpg69zl_mz.__modtest() [0x4461d0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x44fd1f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x4479c2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x44bde9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x44be78]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x44bd75]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x447999]\n??:? runModuleUnitTests [0x44faf5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4490f0]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space = false;\n    bool dash = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n                if(dash)\n                {\n                    result ~= '-';\n                }\n                else\n                {\n                    result ~= '_';\n                    dash = true;\n                }\n            }\n            else\n            {\n                result ~= '_';\n                space = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space = false;\n            dash = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpvyi4kgu2.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpvyi4kgu2.__unittest_L55_C1() [0x427d0b]\n??:? void tmpvyi4kgu2.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space_flag = false;\n    foreach(ch; text)\n    {\n        if(ch == ' ')\n        {\n            if(!space_flag)\n            {\n                result ~= '_';\n                space_flag = true;\n            }\n            else\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            result ~= ch;\n            space_flag = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzxdgibuy.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpzxdgibuy.__unittest_L45_C1() [0x427c68]\n??:? void tmpzxdgibuy.__modtest() [0x427db0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(char c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else if(count > 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnn0jw2gf.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpnn0jw2gf.__unittest_L49_C1() [0x427d07]\n??:? void tmpnn0jw2gf.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int space_count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            space_count++;\n            if(space_count == 1)\n            {\n                result ~= '_';\n            }\n            else if(space_count > 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0lbfqwq2.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmp0lbfqwq2.__unittest_L45_C1() [0x427c6c]\n??:? void tmp0lbfqwq2.__modtest() [0x427db4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.range : join;\n    import std.array : array;\n    import std.string : split;\n    import std.conv : to;\n    import std.typecons : tuple;\n    import std.math : min;\n    import std.algorithm : map;\n    import std.range : take;\n    import std.range : drop;\n    import std.range : zip;\n    import std.range : cycle;\n    import std.range : iota;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n   \nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdh7fhmi0.d(78): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdh7fhmi0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(spaces == 1)\n            {\n                result ~= '_';\n            }\n            result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1cljn6g6.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmp1cljn6g6.__unittest_L45_C1() [0x427c25]\n??:? void tmp1cljn6g6.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"__\", \"-\");\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmcjaeeue.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmcjaeeue.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.conv;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.conv;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.conv;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.conv;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.conv;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.conv;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.conv;\n    import std.stdio;\n    import std.traits\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpbuqf5b88.d(90): Error: `;` expected\n/tmp/tmpbuqf5b88.d(100): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpbuqf5b88.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"___\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzqk2jku2.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzqk2jku2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space_flag = false;\n    bool dash_flag = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_flag)\n            {\n                if(dash_flag)\n                {\n                    result ~= '-';\n                }\n                else\n                {\n                    result ~= '_';\n                    dash_flag = true;\n                }\n            }\n            else\n            {\n                result ~= '_';\n                space_flag = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_flag = false;\n            dash_flag = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7p8r_gs5.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmp7p8r_gs5.__unittest_L55_C1() [0x427d0b]\n??:? void tmp7p8r_gs5.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else if(count > 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6f8fg2c5.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmp6f8fg2c5.__unittest_L49_C1() [0x427d07]\n??:? void tmp6f8fg2c5.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool is_space = false;\n    bool is_double_space = false;\n    foreach(c; text) \n    {\n        if(c == ' ') \n        {\n            if(is_space) \n            {\n                is_double_space = true;\n            }\n            is_space = true;\n        }\n        else \n        {\n            if(is_space) \n            {\n                if(is_double_space) \n                {\n                    result ~= '-';\n                }\n                else \n                {\n                    result ~= '_';\n                }\n                is_space = false;\n                is_double_space = false;\n            }\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0oi6f23j.d(59): unittest failure\n----------------\n??:? _d_unittestp [0x428045]\n??:? void tmp0oi6f23j.__unittest_L54_C1() [0x427c35]\n??:? void tmp0oi6f23j.__modtest() [0x427dc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430470]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c1]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428494]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool was_space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(was_space)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n            }\n            was_space = true;\n        }\n        else\n        {\n            result ~= c;\n            was_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxtg41t2b.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpxtg41t2b.__unittest_L45_C1() [0x427c64]\n??:? void tmpxtg41t2b.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.range : iota;\n    import std.conv : to;\n    import std.string : split;\n    import std.typecons : tuple;\n    import std.math : max;\n    import std.range : take;\n    import std.range : drop;\n    import std.range : cycle;\n    import std.range : zip;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1tu9r4v0.d(78): Error: identifier expected following `import`\n/tmp/tmp1tu9r4v0.d(78): Error: `;` expected\n/tmp/tmp1tu9r4v0.d(88): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1tu9r4v0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space_flag = false;\n    bool underscore_flag = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(!space_flag)\n            {\n                result ~= '_';\n                space_flag = true;\n            }\n            else\n            {\n                if(!underscore_flag)\n                {\n                    result[$-1] = '-';\n                    underscore_flag = true;\n                }\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_flag = false;\n            underscore_flag = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpz_aq7ax5.d(37): Error: cannot modify `immutable` expression `result[__dollar - 1LU]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpz_aq7ax5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space = false;\n    bool consecutive_space = false;\n    foreach(c; text) \n    {\n        if(c == ' ') \n        {\n            if(space) \n            {\n                consecutive_space = true;\n            }\n            else \n            {\n                space = true;\n                result ~= '_';\n            }\n        }\n        else \n        {\n            if(consecutive_space) \n            {\n                result ~= '-';\n                consecutive_space = false;\n            }\n            space = false;\n            result ~= c;\n        }\n    }\n    return result;\n}\n/*\n    Given a string text, return a string where all occurrences of the letter 'a' have been replaced by two 'd's.\n    \n    >>> double_char(\"a\")\n    \"dd\"\n    >>> double_char(\"abc\")\n    \"ddbc\"\n    >>> double_char(\"Hello World\")\n    \"Hedllo Woddld\"\n*/\nstring double_char(string text) \n{\n    string result;\n    foreach(c; text) \n    {\n        if(c == 'a') \n        {\n            result ~= \"dd\";\n        }\n        else \n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\n/*\n    Given a string text, return a string where for every char in the original, there are two chars.\n    \n    >>> double_char(\"The\")\n    \"TThhee\"\n    >>> double_char(\"AAbb\")\n    \"AAAAbbbb\"\n    >>> double_char(\"Hi-There\")\n    \"HHii--TThheerree\"\n*/\nstring double_char2(string text) \n{\n    string result;\n    foreach(c; text) \n    {\n        result ~= c;\n        result ~= c;\n    }\n    return result;\n}\n/*\n    Given a string text, return a string made of the chars at indexes 0,1, 4,5, 8,9 ... so \"kittens\" yields \"kien\".\n    \n    >>>\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2but7b0p.d(97): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2but7b0p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmoayscv2.d(90): Error: `;` expected\n/tmp/tmpmoayscv2.d(100): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmoayscv2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space = false;\n    foreach(char c; text)\n    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n                space = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space = false;\n        }\n    }\n    return result;\n}\n/*\n    Given a string text, return a string with all spaces removed.\n    >>> remove_spaces(\" Example\")\n    \"Example\"\n    >>> remove_spaces(\" Example 1\")\n    \"Example1\"\n    >>> remove_spaces(\" Example 2\")\n    \"Example2\"\n    >>> remove_spaces(\" Example 3\")\n    \"Example3\"\n*/\nstring remove_spaces(string text) \n{\n    string result;\n    foreach(char c; text)\n    {\n        if(c != ' ')\n        {\n            result ~= c;\n        }\n    }\n    return result;\n}\n/*\n    Given a string text, return a string with all spaces removed.\n    >>> remove_spaces(\" Example\")\n    \"Example\"\n    >>> remove_spaces(\" Example 1\")\n    \"Example1\"\n    >>> remove_spaces(\" Example 2\")\n    \"Example2\"\n    >>> remove_spaces(\" Example 3\")\n    \"Example3\"\n*/\nstring remove_spaces2(string text) \n{\n    return text.replace(\" \", \"\");\n}\n/*\n    Given a string text, return a string with all spaces removed.\n    >>> remove_spaces(\" Example\")\n    \"Example\"\n    >>> remove_spaces(\" Example 1\")\n    \"Example1\"\n    >>> remove_spaces(\" Example 2\")\n    \"Example2\"\n    >>> remove_spaces(\" Example 3\")\n    \"Example3\"\n*/\nstring remove_spaces3(string text) \n{\n    return text.replace(\" \", \"\");\n}\n/*\n    Given a string text, return a string with all spaces removed.\n    >>> remove_spaces(\"\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmprod0ddda.d(98): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmprod0ddda.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    auto result2 = result.replace(\"__\", \"_\");\n    auto result3 = result2.replace(\"___\", \"-\");\n    return result3;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpezo0o_0n.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpezo0o_0n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    return text.replace(\" \", \"_\").replace(\"__\", \"_\").replace(\"___\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzqk2jku2.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzqk2jku2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else if(count > 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp72n02b2a.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmp72n02b2a.__unittest_L49_C1() [0x427d07]\n??:? void tmp72n02b2a.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(char c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else if(count > 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnn0jw2gf.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpnn0jw2gf.__unittest_L49_C1() [0x427d07]\n??:? void tmpnn0jw2gf.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfrri2gjq.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpfrri2gjq.__unittest_L45_C1() [0x427c25]\n??:? void tmpfrri2gjq.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.range : iota;\n    import std.conv : to;\n    import std.range : join;\n    import std.range : map;\n    import std.range : zip;\n    import std.range : take;\n    import std.range : drop;\n    import std.range : cycle;\n    import std.range : retro;\n    import std.range : retroMap;\n    import std.range : retroZip;\n    import std.range : retroCycle;\n    import std.range : retroTake;\n    import std.range : retroDrop;\n    import std.range : retroFilter;\n    import std.range : retroChunks;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact;\n    import std.range : retroChunksExact\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9ugl24ot.d(65): Error: `;` expected\n/tmp/tmp9ugl24ot.d(75): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9ugl24ot.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 2)\n            {\n                result ~= '-';\n                count = 0;\n            }\n        }\n        else\n        {\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpskl0ipbm.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42803d]\n??:? void tmpskl0ipbm.__unittest_L46_C1() [0x427c29]\n??:? void tmpskl0ipbm.__modtest() [0x427dbc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430468]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b9]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42848c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n                space = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpgbir2z45.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpgbir2z45.__unittest_L45_C1() [0x427c64]\n??:? void tmpgbir2z45.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(count == 0)\n            {\n                result ~= '_';\n            }\n            else if(count == 1)\n            {\n                result ~= '_';\n            }\n            else\n            {\n                result ~= '-';\n            }\n            count++;\n        }\n        else\n        {\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4ahabkxl.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x42807d]\n??:? void tmp4ahabkxl.__unittest_L49_C1() [0x427cff]\n??:? void tmp4ahabkxl.__modtest() [0x427dfc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c713]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b622]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fff9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f9]\n??:? runModuleUnitTests [0x42c4e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.range : iota;\n    import std.conv : to;\n    import std.typecons : tuple;\n    import std.math : isNaN;\n    import std.string : startsWith;\n    import std.stdio : writeln;\n    import std.traits : isIntegral;\n    import std.datetime : Clock;\n    import std.range : take;\n    import std.range : drop;\n    import std.range : cycle;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6p1nwqes.d(77): Error: identifier expected following `import`\n/tmp/tmp6p1nwqes.d(77): Error: `;` expected\n/tmp/tmp6p1nwqes.d(87): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6p1nwqes.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"__\", \"-\");\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmcjaeeue.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmcjaeeue.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool prev_space = false;\n    bool consecutive_spaces = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(prev_space)\n            {\n                consecutive_spaces = true;\n            }\n            else\n            {\n                result ~= '_';\n                prev_space = true;\n            }\n        }\n        else\n        {\n            if(consecutive_spaces)\n            {\n                result ~= '-';\n                consecutive_spaces = false;\n            }\n            result ~= c;\n            prev_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdo40d53v.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42803d]\n??:? void tmpdo40d53v.__unittest_L51_C1() [0x427c78]\n??:? void tmpdo40d53v.__modtest() [0x427dc0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430468]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b9]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42848c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space_found = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_found)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n                space_found = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmph7vqs5j6.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmph7vqs5j6.__unittest_L45_C1() [0x427c64]\n??:? void tmph7vqs5j6.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8a5u2mey.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x42807d]\n??:? void tmp8a5u2mey.__unittest_L49_C1() [0x427d03]\n??:? void tmp8a5u2mey.__modtest() [0x427e00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c713]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b622]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fff9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f9]\n??:? runModuleUnitTests [0x42c4e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(spaces == 1)\n            {\n                result ~= '_';\n            }\n            result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1cljn6g6.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmp1cljn6g6.__unittest_L45_C1() [0x427c25]\n??:? void tmp1cljn6g6.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space_found = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_found)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n                space_found = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpham8aas0.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpham8aas0.__unittest_L45_C1() [0x427c64]\n??:? void tmpham8aas0.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    // TODO: implement\n    return \"\";\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphnpvclx4.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427f25]\n??:? void tmphnpvclx4.__unittest_L24_C1() [0x427ac6]\n??:? void tmphnpvclx4.__modtest() [0x427ca4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbcf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aade]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbf5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb81]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab5]\n??:? runModuleUnitTests [0x42b9a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428374]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text) {\n        if(c == ' ') {\n            count++;\n            if(count == 1) {\n                result ~= '_';\n            } else if(count == 2) {\n                result ~= '_';\n            } else if(count > 2) {\n                result ~= '-';\n            }\n        } else {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxpbr4tna.d(47): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpxpbr4tna.__unittest_L40_C1() [0x427d07]\n??:? void tmpxpbr4tna.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool prev_space = false;\n    bool prev_prev_space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(prev_space)\n            {\n                if(prev_prev_space)\n                {\n                    result ~= '-';\n                }\n                else\n                {\n                    result ~= '_';\n                }\n            }\n            else\n            {\n                result ~= '_';\n            }\n            prev_prev_space = prev_space;\n            prev_space = true;\n        }\n        else\n        {\n            result ~= c;\n            prev_prev_space = prev_space;\n            prev_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmponzs3pp6.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmponzs3pp6.__unittest_L55_C1() [0x427d0b]\n??:? void tmponzs3pp6.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(spaces == 1)\n            {\n                result ~= '_';\n            }\n            spaces = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpb8u0ln9m.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpb8u0ln9m.__unittest_L45_C1() [0x427c25]\n??:? void tmpb8u0ln9m.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces > 2)\n            {\n                result ~= '-';\n                spaces = 0;\n            }\n        }\n        else\n        {\n            if(spaces == 1)\n            {\n                result ~= '_';\n            }\n            else if(spaces > 1)\n            {\n                result ~= '-';\n            }\n            result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n}\n/*\n    Given a string text, return a string that contains all the characters \n    of the text, but in reverse order.\n    \n    >>> reverse(\"Example\")\n    \"elpmaxE\"\n    >>> reverse(\"Example 1\")\n    \"1 elpmaxE\"\n    >>> reverse(\"Example 2\")\n    \"2 elpmaxE\"\n    >>> reverse(\"Example 3\")\n    \"3 elpmaxE\"\n*/\nstring reverse(string text) \n{\n    string result = \"\";\n    foreach(c; text)\n    {\n        result = c ~ result;\n    }\n    return result;\n}\n/*\n    Given a string text, return a string that contains all the characters \n    of the text, but in reverse order.\n    \n    >>> reverse(\"Example\")\n    \"elpmaxE\"\n    >>> reverse(\"Example 1\")\n    \"1 elpmaxE\"\n    >>> reverse(\"Example 2\")\n    \"2 elpmaxE\"\n    >>> reverse(\"Example 3\")\n    \"3 elpmaxE\"\n*/\nstring reverse(string text) \n{\n    string result = \"\";\n    foreach(c; text)\n    {\n        result = c ~ result;\n    }\n    return result;\n}\n/*\n    Given a string text, return a string that contains all the characters \n    of the text, but in reverse order.\n    \n    >>> reverse(\"Example\")\n    \"elpmaxE\"\n    >>> reverse(\"Example 1\")\n    \"1 elpmaxE\"\n   \nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpr26psknq.d(94): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpr26psknq.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.range : join;\n    import std.string : split;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std.typecons : tupleof;\n    import std.typecons : tuple;\n    import std.typecons : Tuple;\n    import std\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpde0nvzgf.d(70): Error: `;` expected\n/tmp/tmpde0nvzgf.d(80): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpde0nvzgf.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnnaip9zo.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpnnaip9zo.__unittest_L45_C1() [0x427c6c]\n??:? void tmpnnaip9zo.__modtest() [0x427db4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space = false;\n    bool space_count = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n                if(space_count)\n                {\n                    result ~= '-';\n                }\n                else\n                {\n                    result ~= '_';\n                    space_count = true;\n                }\n            }\n            else\n            {\n                result ~= '_';\n                space = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space = false;\n            space_count = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpiioo79kf.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpiioo79kf.__unittest_L55_C1() [0x427d0b]\n??:? void tmpiioo79kf.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces > 2)\n            {\n                result ~= \"-\";\n                spaces = 0;\n            }\n            else\n            {\n                result ~= \"_\";\n            }\n        }\n        else\n        {\n            result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmbjp8ioe.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x42801d]\n??:? void tmpmbjp8ioe.__unittest_L46_C1() [0x427c9f]\n??:? void tmpmbjp8ioe.__modtest() [0x427d9c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c763]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b672]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff99]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430448]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff25]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b649]\n??:? runModuleUnitTests [0x42c539]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42846c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.range : isInputRange, isForwardRange, isBidirectionalRange, isRandomAccessRange;\n    import std.typecons : tuple;\n    import std.conv : to;\n    import std.math : max;\n    import std.range : take, drop, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly, takeExactly, dropExactly\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgxv45oe_.d(28): Error: `;` expected\n/tmp/tmpgxv45oe_.d(38): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgxv45oe_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int space_count = 0;\n    foreach(char c; text)\n    {\n        if(c == ' ')\n        {\n            space_count++;\n            if(space_count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(space_count == 1)\n            {\n                result ~= '_';\n            }\n            space_count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwkix31c8.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpwkix31c8.__unittest_L45_C1() [0x427c25]\n??:? void tmpwkix31c8.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool prev_space = false;\n    bool prev_prev_space = false;\n    foreach(c; text) \n    {\n        if(c == ' ') \n        {\n            if(prev_space) \n            {\n                if(prev_prev_space) \n                {\n                    result ~= \"-\";\n                } \n                else \n                {\n                    result ~= \"_\";\n                }\n            } \n            else \n            {\n                result ~= \"_\";\n            }\n            prev_prev_space = prev_space;\n            prev_space = true;\n        } \n        else \n        {\n            result ~= c;\n            prev_prev_space = prev_space;\n            prev_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpp99iixt6.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x42804d]\n??:? void tmpp99iixt6.__unittest_L55_C1() [0x427ccf]\n??:? void tmpp99iixt6.__modtest() [0x427dcc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b679]\n??:? runModuleUnitTests [0x42c569]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42849c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces > 2)\n            {\n                result ~= '-';\n                spaces = 0;\n            }\n        }\n        else\n        {\n            if(spaces == 1)\n            {\n                result ~= '_';\n            }\n            result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphou0ivta.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42803d]\n??:? void tmphou0ivta.__unittest_L46_C1() [0x427c2d]\n??:? void tmphou0ivta.__modtest() [0x427dc0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430468]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b9]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42848c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnnaip9zo.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpnnaip9zo.__unittest_L45_C1() [0x427c6c]\n??:? void tmpnnaip9zo.__modtest() [0x427db4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm;\n    import std.range;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp94k895r_.d(86): Error: identifier expected following `import`\n/tmp/tmp94k895r_.d(86): Error: `;` expected\n/tmp/tmp94k895r_.d(96): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp94k895r_.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_c4styhv.d(90): Error: `;` expected\n/tmp/tmp_c4styhv.d(100): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_c4styhv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    // TODO: implement\n    return \"\";\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphnpvclx4.d(28): unittest failure\n----------------\n??:? _d_unittestp [0x427f25]\n??:? void tmphnpvclx4.__unittest_L24_C1() [0x427ac6]\n??:? void tmphnpvclx4.__modtest() [0x427ca4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42bbcf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42aade]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fbf5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4300a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42fb81]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42aab5]\n??:? runModuleUnitTests [0x42b9a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428374]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space = false;\n    bool double_space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n                if(double_space)\n                {\n                    result ~= '-';\n                }\n                else\n                {\n                    result ~= '_';\n                    double_space = true;\n                }\n            }\n            else\n            {\n                result ~= '_';\n                space = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space = false;\n            double_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpehpkorvi.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpehpkorvi.__unittest_L55_C1() [0x427d0b]\n??:? void tmpehpkorvi.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else if(count > 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp72n02b2a.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmp72n02b2a.__unittest_L49_C1() [0x427d07]\n??:? void tmp72n02b2a.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.range : retro;\n    import std.conv : to;\n    import std.string : split;\n    import std.typecons : tuple;\n    import std.math : max;\n    import std.range : retro;\n    import std.algorithm : map;\n    import std.range : iota;\n    import std.typecons : tuple;\n    import std.array : array;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm : replace;\n    import std.range : retro;\n    import std.algorithm :\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpjne7ev_n.d(75): Error: identifier expected following `:`\n/tmp/tmpjne7ev_n.d(75): Error: `;` expected\n/tmp/tmpjne7ev_n.d(85): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpjne7ev_n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else if(count > 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp72n02b2a.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmp72n02b2a.__unittest_L49_C1() [0x427d07]\n??:? void tmp72n02b2a.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool prev_space = false;\n    bool prev_prev_space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(prev_space)\n            {\n                if(prev_prev_space)\n                {\n                    result ~= '-';\n                }\n                else\n                {\n                    result ~= '_';\n                }\n            }\n            else\n            {\n                result ~= '_';\n            }\n            prev_prev_space = prev_space;\n            prev_space = true;\n        }\n        else\n        {\n            result ~= c;\n            prev_prev_space = prev_space;\n            prev_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpm8fsk43o.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpm8fsk43o.__unittest_L55_C1() [0x427d0b]\n??:? void tmpm8fsk43o.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm;\n    import std.range;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp4g7cro71.d(90): Error: identifier expected following `import`\n/tmp/tmp4g7cro71.d(90): Error: `;` expected\n/tmp/tmp4g7cro71.d(100): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp4g7cro71.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool is_space = false;\n    bool is_consecutive = false;\n    foreach(char c; text) \n    {\n        if(c == ' ') \n        {\n            if(is_space) \n            {\n                if(is_consecutive) \n                {\n                    result ~= '-';\n                }\n                else \n                {\n                    result ~= '_';\n                    is_consecutive = true;\n                }\n            }\n            else \n            {\n                result ~= '_';\n                is_space = true;\n            }\n        }\n        else \n        {\n            result ~= c;\n            is_space = false;\n            is_consecutive = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpcp47ouq1.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpcp47ouq1.__unittest_L55_C1() [0x427d0b]\n??:? void tmpcp47ouq1.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space_flag = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(!space_flag)\n            {\n                result ~= '_';\n                space_flag = true;\n            }\n            else\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_flag = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp67gykqs3.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmp67gykqs3.__unittest_L45_C1() [0x427c68]\n??:? void tmp67gykqs3.__modtest() [0x427db0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space = false;\n    foreach(c; text) \n    {\n        if(c == ' ') \n        {\n            if(space) \n            {\n                result ~= '-';\n            } \n            else \n            {\n                result ~= '_';\n                space = true;\n            }\n        } \n        else \n        {\n            result ~= c;\n            space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy3ifjq_p.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpy3ifjq_p.__unittest_L45_C1() [0x427c64]\n??:? void tmpy3ifjq_p.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space_found = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_found)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n                space_found = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpham8aas0.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpham8aas0.__unittest_L45_C1() [0x427c64]\n??:? void tmpham8aas0.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else if(count > 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6f8fg2c5.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmp6f8fg2c5.__unittest_L49_C1() [0x427d07]\n??:? void tmp6f8fg2c5.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else if(count > 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp72n02b2a.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmp72n02b2a.__unittest_L49_C1() [0x427d07]\n??:? void tmp72n02b2a.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwy0ke_wy.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpwy0ke_wy.__unittest_L45_C1() [0x427c25]\n??:? void tmpwy0ke_wy.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8fhcs_44.d(90): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8fhcs_44.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces > 2)\n            {\n                result ~= '-';\n                spaces = 0;\n            }\n        }\n        else\n        {\n            if(spaces == 1)\n            {\n                result ~= '_';\n            }\n            else if(spaces > 1)\n            {\n                result ~= '-';\n            }\n            result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpt8o0055i.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpt8o0055i.__unittest_L50_C1() [0x427c75]\n??:? void tmpt8o0055i.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm.comparison : equal;\n    import std.algorithm.searching : find;\n    import std.algorithm.iteration : map;\n    import std.array : array;\n    import std.range : take, drop;\n    import std.conv : to;\n    import std.string : split;\n    import std.typecons : tuple;\n    import std.range : iota;\n    import std.range : zip;\n    import std.range : cycle;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range :\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpuya3isko.d(76): Error: identifier expected following `:`\n/tmp/tmpuya3isko.d(76): Error: `;` expected\n/tmp/tmpuya3isko.d(86): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpuya3isko.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbofzq4q7.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpbofzq4q7.__unittest_L45_C1() [0x427c6c]\n??:? void tmpbofzq4q7.__modtest() [0x427db4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwy0ke_wy.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpwy0ke_wy.__unittest_L45_C1() [0x427c25]\n??:? void tmpwy0ke_wy.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwy0ke_wy.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpwy0ke_wy.__unittest_L45_C1() [0x427c25]\n??:? void tmpwy0ke_wy.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int space_count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            space_count++;\n            if(space_count == 1)\n            {\n                result ~= '_';\n            }\n            else if(space_count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            space_count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpd9zbm376.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpd9zbm376.__unittest_L45_C1() [0x427c6c]\n??:? void tmpd9zbm376.__modtest() [0x427db4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool is_space = false;\n    bool is_double_space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(is_space)\n            {\n                if(is_double_space)\n                {\n                    result ~= '-';\n                }\n                else\n                {\n                    result ~= '_';\n                    is_double_space = true;\n                }\n            }\n            else\n            {\n                result ~= '_';\n                is_space = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            is_space = false;\n            is_double_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpye4d6zi5.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpye4d6zi5.__unittest_L55_C1() [0x427d0b]\n??:? void tmpye4d6zi5.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"___\", \"-\");\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpewiohgv7.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewiohgv7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool prev_space = false;\n    bool prev_prev_space = false;\n    foreach(c; text) \n    {\n        if(c == ' ') \n        {\n            if(prev_space && prev_prev_space) \n            {\n                result ~= '-';\n            }\n            else \n            {\n                result ~= '_';\n            }\n            prev_prev_space = prev_space;\n            prev_space = true;\n        }\n        else \n        {\n            result ~= c;\n            prev_prev_space = false;\n            prev_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp7gvn_9xk.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x42803d]\n??:? void tmp7gvn_9xk.__unittest_L48_C1() [0x427cc3]\n??:? void tmp7gvn_9xk.__modtest() [0x427dc0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430468]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b9]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42848c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwy0ke_wy.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpwy0ke_wy.__unittest_L45_C1() [0x427c25]\n??:? void tmpwy0ke_wy.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(char c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 2)\n            {\n                result ~= '-';\n                count = 0;\n            }\n        }\n        else\n        {\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpk8bm_qmt.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42803d]\n??:? void tmpk8bm_qmt.__unittest_L46_C1() [0x427c2d]\n??:? void tmpk8bm_qmt.__modtest() [0x427dc0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430468]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b9]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42848c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgwuernog.d(90): Error: identifier expected following `import`\n/tmp/tmpgwuernog.d(90): Error: `;` expected\n/tmp/tmpgwuernog.d(100): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgwuernog.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    auto result2 = result.replace(\"__\", \"_\");\n    auto result3 = result2.replace(\"___\", \"-\");\n    return result3;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpezo0o_0n.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpezo0o_0n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_c4styhv.d(90): Error: `;` expected\n/tmp/tmp_c4styhv.d(100): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_c4styhv.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8a5u2mey.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x42807d]\n??:? void tmp8a5u2mey.__unittest_L49_C1() [0x427d03]\n??:? void tmp8a5u2mey.__modtest() [0x427e00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c713]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b622]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fff9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f9]\n??:? runModuleUnitTests [0x42c4e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool first_space = true;\n    bool second_space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(first_space)\n            {\n                first_space = false;\n                second_space = true;\n            }\n            else if(second_space)\n            {\n                second_space = false;\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n            }\n        }\n        else\n        {\n            first_space = true;\n            second_space = false;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8hf1pwev.d(57): unittest failure\n----------------\n??:? _d_unittestp [0x42804d]\n??:? void tmp8hf1pwev.__unittest_L52_C1() [0x427c39]\n??:? void tmp8hf1pwev.__modtest() [0x427dcc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6e3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c9]\n??:? runModuleUnitTests [0x42c4b9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42849c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space_found = false;\n    foreach(char c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_found)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n                space_found = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj9swkdhn.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpj9swkdhn.__unittest_L45_C1() [0x427c64]\n??:? void tmpj9swkdhn.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    int spaces = 0;\n    foreach(c; text) {\n        if(c == ' ') {\n            spaces++;\n        } else {\n            if(spaces == 1) {\n                result ~= '_';\n            } else if(spaces > 1) {\n                result ~= '-';\n            }\n            result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpktkkbduw.d(43): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpktkkbduw.__unittest_L38_C1() [0x427c25]\n??:? void tmpktkkbduw.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else if(count > 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp72n02b2a.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmp72n02b2a.__unittest_L49_C1() [0x427d07]\n??:? void tmp72n02b2a.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool is_space = false;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(is_space)\n            {\n                count++;\n            }\n            else\n            {\n                is_space = true;\n                count = 1;\n            }\n        }\n        else\n        {\n            if(is_space)\n            {\n                if(count == 1)\n                {\n                    result ~= '_';\n                }\n                else if(count > 1)\n                {\n                    result ~= '-';\n                }\n                is_space = false;\n            }\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmprlk3ilmf.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428055]\n??:? void tmprlk3ilmf.__unittest_L57_C1() [0x427c45]\n??:? void tmprlk3ilmf.__modtest() [0x427dd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d1]\n??:? runModuleUnitTests [0x42c4c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284a4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space_flag = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_flag)\n            {\n                result ~= \"-\";\n            }\n            else\n            {\n                result ~= \"_\";\n                space_flag = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_flag = false;\n        }\n    }\n    return result;\n}\n/*\n    Given a string text, return a string with all the words in it \n    in reverse order.\n    \n    >>> reverse_words(\"Example\")\n    \"Example\"\n    >>> reverse_words(\"Example 1\")\n    \"1 Example\"\n    >>> reverse_words(\"Example 2\")\n    \"2 Example\"\n    >>> reverse_words(\"Example 3\")\n    \"3 Example\"\n*/\nstring reverse_words(string text) \n{\n    string result = \"\";\n    string word = \"\";\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            result = \" \" ~ word ~ result;\n            word = \"\";\n        }\n        else\n        {\n            word ~= c;\n        }\n    }\n    result = word ~ result;\n    return result;\n}\n/*\n    Given a string text, return a string with all the words in it \n    in reverse order.\n    \n    >>> reverse_words(\"Example\")\n    \"Example\"\n    >>> reverse_words(\"Example 1\")\n    \"1 Example\"\n    >>> reverse_words(\"Example 2\")\n    \"2 Example\"\n    >>> reverse_words(\"Example 3\")\n    \"3 Example\"\n*/\nstring reverse_words_2(string text) \n{\n    string result = \"\";\n    string[] words = text.split(\" \");\n    foreach(word; words)\n    {\n        result = \" \" ~ word ~ result;\n    }\n    return result.trimLeft();\n}\n/*\n    Given a string text, return a string with all the words in it \n    in reverse order.\n    \n    >>> reverse_\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpw3bo_drs.d(100): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpw3bo_drs.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space_found = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_found)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n                space_found = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpham8aas0.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpham8aas0.__unittest_L45_C1() [0x427c64]\n??:? void tmpham8aas0.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    auto result2 = result.replace(\"__\", \"_\");\n    auto result3 = result2.replace(\"___\", \"-\");\n    return result3;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpezo0o_0n.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpezo0o_0n.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwy0ke_wy.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpwy0ke_wy.__unittest_L45_C1() [0x427c25]\n??:? void tmpwy0ke_wy.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else if(count > 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpld036ute.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpld036ute.__unittest_L49_C1() [0x427d07]\n??:? void tmpld036ute.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    text = text.replace(\" \", \"_\");\n    text = text.replace(\"__\", \"_\");\n    text = text.replace(\"__\", \"-\");\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp0vu9dngz.d(21): Error: no property `replace` for type `string`\n/tmp/tmp0vu9dngz.d(22): Error: no property `replace` for type `string`\n/tmp/tmp0vu9dngz.d(23): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp0vu9dngz.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else if(count > 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6f8fg2c5.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmp6f8fg2c5.__unittest_L49_C1() [0x427d07]\n??:? void tmp6f8fg2c5.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.range : takeWhile, dropWhile;\n    import std.conv : to;\n    import std.string : join;\n    import std.typecons : tuple;\n    import std.math : min;\n    import std.stdio : writeln;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : takeWhile, dropWhile;\n    import std.conv : to;\n    import std.string : join;\n    import std.typecons : tuple;\n    import std.math : min;\n    import std.stdio : writeln;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : takeWhile, dropWhile;\n    import std.conv : to;\n    import std.string : join;\n    import std.typecons : tuple;\n    import std.math : min;\n    import std.stdio : writeln;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : takeWhile, dropWhile;\n    import std.conv : to;\n    import std.string : join;\n    import std.typecons : tuple;\n    import std.math : min;\n    import std.stdio : writeln;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : takeWhile, dropWhile;\n    import std.conv : to;\n    import std.string : join;\n    import std.typecons : tuple;\n    import std.math : min;\n    import std.stdio : writeln;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.range : takeWhile, dropWhile;\n    import std.conv : to;\n    import std.string : join;\n    import std.typecons : tuple;\n    import std.math : min;\n    import std.stdio : writeln;\n    import std.typecons : tuple;\n    import std.algorithm : map;\n    import std.\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_200izm2.d(72): Error: identifier expected following `package`\n/tmp/tmp_200izm2.d(72): Error: `;` expected\n/tmp/tmp_200izm2.d(82): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_200izm2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool is_space = false;\n    bool is_double_space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(is_space)\n            {\n                is_double_space = true;\n            }\n            is_space = true;\n        }\n        else\n        {\n            if(is_space)\n            {\n                if(is_double_space)\n                {\n                    result ~= \"-\";\n                }\n                else\n                {\n                    result ~= \"_\";\n                }\n                is_space = false;\n                is_double_space = false;\n            }\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp984yco_y.d(59): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmp984yco_y.__unittest_L54_C1() [0x427c19]\n??:? void tmp984yco_y.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c773]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b682]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b659]\n??:? runModuleUnitTests [0x42c549]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy1aa7jr2.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpy1aa7jr2.__unittest_L45_C1() [0x427c6c]\n??:? void tmpy1aa7jr2.__modtest() [0x427db4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else if(count > 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp72n02b2a.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmp72n02b2a.__unittest_L49_C1() [0x427d07]\n??:? void tmp72n02b2a.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space = false;\n    bool space_count = false;\n    foreach(char c; text)\n    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n                if(space_count)\n                {\n                    result ~= '-';\n                }\n                else\n                {\n                    result ~= '_';\n                    space_count = true;\n                }\n            }\n            else\n            {\n                space = true;\n                result ~= '_';\n            }\n        }\n        else\n        {\n            space = false;\n            space_count = false;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpkx0ek677.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpkx0ek677.__unittest_L55_C1() [0x427d0b]\n??:? void tmpkx0ek677.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space_found = false;\n    foreach(char c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_found)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n                space_found = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpj9swkdhn.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpj9swkdhn.__unittest_L45_C1() [0x427c64]\n??:? void tmpj9swkdhn.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space_found = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_found)\n            {\n                result ~= \"-\";\n            }\n            else\n            {\n                result ~= \"_\";\n            }\n            space_found = true;\n        }\n        else\n        {\n            result ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n}\n/*\n    Given a string text, return a string that contains the same characters, \n    but in reverse order.\n    \n    >>> reverse(\"Example\")\n    \"elpmaxE\"\n    >>> reverse(\"Example 1\")\n    \"1 elpmaxE\"\n    >>> reverse(\"Example 2\")\n    \"2 elpmaxE\"\n    >>> reverse(\"Example 3\")\n    \"3 elpmaxE\"\n*/\nstring reverse(string text) \n{\n    string result = \"\";\n    foreach(c; text)\n    {\n        result = c ~ result;\n    }\n    return result;\n}\n/*\n    Given a string text, return a string that contains the same characters, \n    but in reverse order.\n    \n    >>> reverse(\"Example\")\n    \"elpmaxE\"\n    >>> reverse(\"Example 1\")\n    \"1 elpmaxE\"\n    >>> reverse(\"Example 2\")\n    \"2 elpmaxE\"\n    >>> reverse(\"Example 3\")\n    \"3 elpmaxE\"\n*/\nstring reverse(string text) \n{\n    string result = \"\";\n    foreach(c; text)\n    {\n        result = c ~ result;\n    }\n    return result;\n}\n/*\n    Given a string text, return a string that contains the same characters, \n    but in reverse order.\n    \n    >>> reverse(\"Example\")\n    \"elpmaxE\"\n    >>> reverse(\"Example 1\")\n    \"1 elpmaxE\"\n    >>> reverse(\"Example 2\")\n    \"2 elpmaxE\"\n    >>> reverse(\"Example 3\")\n    \"3 elpmaxE\"\n*/\nstring reverse(string text\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxt94b908.d(103): Error: found `unittest` when expecting `)`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxt94b908.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto res = text.replace(\" \", \"_\");\n    return res.replace(\"__\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppb044amh.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppb044amh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            spaces = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbj7c_kms.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427ffd]\n??:? void tmpbj7c_kms.__unittest_L41_C1() [0x427bed]\n??:? void tmpbj7c_kms.__modtest() [0x427d80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c693]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430428]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c469]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42844c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool prev_space = false;\n    bool prev_prev_space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(prev_space && prev_prev_space)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n            }\n            prev_prev_space = prev_space;\n            prev_space = true;\n        }\n        else\n        {\n            result ~= c;\n            prev_prev_space = false;\n            prev_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpv65ds3ch.d(55): unittest failure\n----------------\n??:? _d_unittestp [0x42803d]\n??:? void tmpv65ds3ch.__unittest_L48_C1() [0x427cc3]\n??:? void tmpv65ds3ch.__modtest() [0x427dc0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430468]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b9]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42848c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfrri2gjq.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpfrri2gjq.__unittest_L45_C1() [0x427c25]\n??:? void tmpfrri2gjq.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    int i = 0;\n    int j = 0;\n    int k = 0;\n    int n = text.length;\n    string result = \"\";\n    while (i < n) {\n        if (text[i] == ' ') {\n            j = i;\n            while (j < n && text[j] == ' ') {\n                j++;\n            }\n            if (j - i > 2) {\n                result += '-';\n            } else {\n                for (k = i; k < j; k++) {\n                    result += '_';\n                }\n            }\n            i = j;\n        } else {\n            result += text[i];\n            i++;\n        }\n    }\n    return result;\n}\n/*\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpf2yzkcie.d(47): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpf2yzkcie.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(spaces == 1)\n            {\n                result ~= '_';\n            }\n            result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1cljn6g6.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmp1cljn6g6.__unittest_L45_C1() [0x427c25]\n??:? void tmp1cljn6g6.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else if(count > 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp72n02b2a.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmp72n02b2a.__unittest_L49_C1() [0x427d07]\n??:? void tmp72n02b2a.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool prev_space = false;\n    bool prev_prev_space = false;\n    foreach(c; text) \n    {\n        if(c == ' ') \n        {\n            if(prev_space) \n            {\n                if(prev_prev_space) \n                {\n                    result ~= '-';\n                } \n                else \n                {\n                    result ~= '_';\n                }\n            } \n            else \n            {\n                result ~= '_';\n            }\n            prev_prev_space = prev_space;\n            prev_space = true;\n        } \n        else \n        {\n            result ~= c;\n            prev_prev_space = prev_space;\n            prev_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqsol0c0d.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpqsol0c0d.__unittest_L55_C1() [0x427d0b]\n??:? void tmpqsol0c0d.__modtest() [0x427e08]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    text = text.strip();\n    text = text.replace(\" \", \"_\");\n    text = text.replace(\"__\", \"-\");\n    return text;\n}\n/*\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp5w5gca5j.d(26): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp5w5gca5j.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(count == 0)\n            {\n                result ~= '_';\n            }\n            else if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count > 1)\n            {\n                result ~= '-';\n            }\n            count++;\n        }\n        else\n        {\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpljtw1s35.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x42807d]\n??:? void tmpljtw1s35.__unittest_L49_C1() [0x427d03]\n??:? void tmpljtw1s35.__modtest() [0x427e00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c713]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b622]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fff9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f9]\n??:? runModuleUnitTests [0x42c4e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else if(count == 3)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpshi0l2s7.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428085]\n??:? void tmpshi0l2s7.__unittest_L49_C1() [0x427d07]\n??:? void tmpshi0l2s7.__modtest() [0x427e04]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c71b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b62a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430001]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304b0]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff8d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b601]\n??:? runModuleUnitTests [0x42c4f1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.conv : to;\n    import std.range : iota;\n    import std.string : join;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import std.typecons : tuple;\n    import\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp75uxk1ic.d(73): Error: identifier expected following `import`\n/tmp/tmp75uxk1ic.d(73): Error: `;` expected\n/tmp/tmp75uxk1ic.d(83): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp75uxk1ic.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int consecutive_spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            consecutive_spaces++;\n            if(consecutive_spaces == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            consecutive_spaces = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gysn9rt.d(46): unittest failure\n----------------\n??:? _d_unittestp [0x427ffd]\n??:? void tmp3gysn9rt.__unittest_L41_C1() [0x427bed]\n??:? void tmp3gysn9rt.__modtest() [0x427d80]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c693]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ff79]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430428]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff05]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b579]\n??:? runModuleUnitTests [0x42c469]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42844c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.range : chunks;\n    import std.conv : to;\n    import std.string : join;\n    import std.typecons : tuple;\n    import std.math : max;\n    import std.algorithm : map;\n    import std.algorithm : filter;\n    import std.algorithm : count;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm : countUntil;\n    import std.algorithm :\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp65nvvedd.d(69): Error: identifier expected following `:`\n/tmp/tmp65nvvedd.d(69): Error: `;` expected\n/tmp/tmp65nvvedd.d(79): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp65nvvedd.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    auto consecutive_spaces = \"  \";\n    auto consecutive_underscores = \"__\";\n    while (result.canFind(consecutive_spaces))\n    {\n        result = result.replace(consecutive_spaces, consecutive_underscores);\n    }\n    consecutive_spaces = \"__\";\n    consecutive_underscores = \"--\";\n    while (result.canFind(consecutive_spaces))\n    {\n        result = result.replace(consecutive_spaces, consecutive_underscores);\n    }\n    consecutive_spaces = \"--\";\n    consecutive_underscores = \"-\";\n    while (result.canFind(consecutive_spaces))\n    {\n        result = result.replace(consecutive_spaces, consecutive_underscores);\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpyz0ihgff.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpyz0ihgff.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space_started = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(!space_started)\n            {\n                result ~= '_';\n                space_started = true;\n            }\n            else\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            space_started = false;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpzwowuz1u.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpzwowuz1u.__unittest_L45_C1() [0x427c68]\n??:? void tmpzwowuz1u.__modtest() [0x427db0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"__\", \"-\");\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmcjaeeue.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmcjaeeue.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space_flag = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_flag)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n                space_flag = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_flag = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpy9vgc00e.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpy9vgc00e.__unittest_L45_C1() [0x427c64]\n??:? void tmpy9vgc00e.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space_found = false;\n    foreach(char c; text) {\n        if(c == ' ') {\n            if(space_found) {\n                result ~= '-';\n            } else {\n                result ~= '_';\n                space_found = true;\n            }\n        } else {\n            result ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqx39bb3r.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpqx39bb3r.__unittest_L38_C1() [0x427c64]\n??:? void tmpqx39bb3r.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8a5u2mey.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x42807d]\n??:? void tmp8a5u2mey.__unittest_L49_C1() [0x427d03]\n??:? void tmp8a5u2mey.__modtest() [0x427e00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c713]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b622]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fff9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f9]\n??:? runModuleUnitTests [0x42c4e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnnaip9zo.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpnnaip9zo.__unittest_L45_C1() [0x427c6c]\n??:? void tmpnnaip9zo.__modtest() [0x427db4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"___\", \"-\");\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpewiohgv7.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewiohgv7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    return text.replace(\" \", \"_\").replace(\"__\", \"-\");\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpox1b3j39.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpox1b3j39.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfrri2gjq.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpfrri2gjq.__unittest_L45_C1() [0x427c25]\n??:? void tmpfrri2gjq.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    if (text.length == 0)\n        return text;\n    text = text.stripLeft();\n    text = text.stripRight();\n    text = text.replace(\" \", \"_\");\n    text = text.replace(\"__\", \"_\");\n    text = text.replace(\"__\", \"-\");\n    return text;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgxpcn73w.d(23): Error: no property `stripLeft` for type `string`\n/tmp/tmpgxpcn73w.d(24): Error: no property `stripRight` for type `string`\n/tmp/tmpgxpcn73w.d(25): Error: no property `replace` for type `string`\n/tmp/tmpgxpcn73w.d(26): Error: no property `replace` for type `string`\n/tmp/tmpgxpcn73w.d(27): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgxpcn73w.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"___\", \"-\");\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpewiohgv7.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpewiohgv7.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space_found = false;\n    bool double_space_found = false;\n    for (int i = 0; i < text.length; i++)\n    {\n        if (text[i] == ' ')\n        {\n            if (space_found)\n            {\n                if (double_space_found)\n                {\n                    result ~= '-';\n                }\n                else\n                {\n                    result ~= '_';\n                    double_space_found = true;\n                }\n            }\n            else\n            {\n                space_found = true;\n            }\n        }\n        else\n        {\n            space_found = false;\n            double_space_found = false;\n            result ~= text[i];\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpz3ecjdxd.d(59): unittest failure\n----------------\n??:? _d_unittestp [0x42805d]\n??:? void tmpz3ecjdxd.__unittest_L54_C1() [0x427c49]\n??:? void tmpz3ecjdxd.__modtest() [0x427ddc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c767]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b676]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43004d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304fc]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ffd9]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b64d]\n??:? runModuleUnitTests [0x42c53d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428520]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space_flag = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_flag)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n                space_flag = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_flag = false;\n        }\n    }\n    return result;\n}\n/*\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces2(string text) \n{\n    string result = \"\";\n    bool space_flag = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_flag)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n                space_flag = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_flag = false;\n        }\n    }\n    return result;\n}\n/*\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces3(string text) \n{\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpo0jl1yz2.d(103): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpo0jl1yz2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space_found = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_found)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n                space_found = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpham8aas0.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpham8aas0.__unittest_L45_C1() [0x427c64]\n??:? void tmpham8aas0.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm;\n    import std.range;\n    import std.conv;\n    import std.array;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std.array;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.range;\n    import std.algorithm;\n    import std\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpaqesv_8k.d(91): Error: `;` expected\n/tmp/tmpaqesv_8k.d(101): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpaqesv_8k.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int space_count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            space_count++;\n            if(space_count == 1)\n            {\n                result ~= '_';\n            }\n            else if(space_count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            space_count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpd9zbm376.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpd9zbm376.__unittest_L45_C1() [0x427c6c]\n??:? void tmpd9zbm376.__modtest() [0x427db4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= \"_\";\n            }\n            else if(count == 2)\n            {\n                result ~= \"_\";\n            }\n            else if(count > 2)\n            {\n                result ~= \"-\";\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp393mdif4.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428045]\n??:? void tmp393mdif4.__unittest_L49_C1() [0x427ccb]\n??:? void tmp393mdif4.__modtest() [0x427dc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430470]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c561]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428494]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space = false;\n    bool double_space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n                double_space = true;\n            }\n            space = true;\n        }\n        else\n        {\n            if(space)\n            {\n                if(double_space)\n                {\n                    result ~= '-';\n                }\n                else\n                {\n                    result ~= '_';\n                }\n                double_space = false;\n            }\n            space = false;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1hjdc9qj.d(59): unittest failure\n----------------\n??:? _d_unittestp [0x428045]\n??:? void tmp1hjdc9qj.__unittest_L54_C1() [0x427c35]\n??:? void tmp1hjdc9qj.__modtest() [0x427dc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6db]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430470]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5c1]\n??:? runModuleUnitTests [0x42c4b1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428494]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.range : chunks;\n    import std.conv : to;\n    import std.string : join;\n    import std.typecons : tuple;\n    import std.math : min;\n    import std.algorithm : map;\n    import std.range : take;\n    import std.range : repeat;\n    import std.range : cycle;\n    import std.range : zip;\n    import std.range : drop;\n    import std.range : iota;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpgi68h6yb.d(73): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpgi68h6yb.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.algorithm : map;\n    import std.algorithm : filter;\n    import std.algorithm : count;\n    import std.algorithm : find;\n    import std.algorithm : findSplit;\n    import std.algorithm : findSplitUntil;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\n    import std.algorithm : findSplitWhile;\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpfw6ic1ce.d(67): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpfw6ic1ce.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space_found = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(!space_found)\n            {\n                result ~= '_';\n                space_found = true;\n            }\n            else\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppkj48ft_.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmppkj48ft_.__unittest_L45_C1() [0x427c68]\n??:? void tmppkj48ft_.__modtest() [0x427db0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfrri2gjq.d(50): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpfrri2gjq.__unittest_L45_C1() [0x427c25]\n??:? void tmpfrri2gjq.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"__\", \"-\");\n    return result;\n}\n/*\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmplj718fy6.d(26): Error: unterminated /* */ comment\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmplj718fy6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces > 2)\n            {\n                result ~= '-';\n                spaces = 0;\n            }\n        }\n        else\n        {\n            if(spaces == 1)\n            {\n                result ~= '_';\n            }\n            result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphou0ivta.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42803d]\n??:? void tmphou0ivta.__unittest_L46_C1() [0x427c2d]\n??:? void tmphou0ivta.__modtest() [0x427dc0]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6d3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5e2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430468]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff45]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b9]\n??:? runModuleUnitTests [0x42c4a9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42848c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= \"_\";\n            }\n            else if(count == 2)\n            {\n                result ~= \"_\";\n            }\n            else if(count > 2)\n            {\n                result ~= \"-\";\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp393mdif4.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x428045]\n??:? void tmp393mdif4.__unittest_L49_C1() [0x427ccb]\n??:? void tmp393mdif4.__modtest() [0x427dc8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c78b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b69a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffc1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430470]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff4d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b671]\n??:? runModuleUnitTests [0x42c561]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428494]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    auto spaces = result.count(\"_\");\n    if (spaces > 2) {\n        result = result.replace(\"_\", \"-\");\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3ui20p43.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3ui20p43.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.string : toStringz;\n    import std.array : split;\n    import std.range : take;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n    import std.range : takeExactly;\n\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp23vyh9ls.d(73): Error: found `unittest` instead of statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp23vyh9ls.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.range : iota;\n    import std.conv : to;\n    import std.string : join;\n    import std.typecons : tuple;\n    import std.math : max;\n    import std.range : take;\n    import std.range : drop;\n    import std.range : takeExactly;\n    import std.range : dropExactly;\n    import std.range : zip;\n    import std.range : cycle;\n    import std.range : retro;\n    import std.range : retroCycle;\n    import std.range : retroZip;\n    import std.range : retroZipCycle;\n    import std.range : retroZipRetro;\n    import std.range : retroZipRetroCycle;\n    import std.range : retroZipRetro;\n    import std.range : retroZipRetroCycle;\n    import std.range : retroZipRetro;\n    import std.range : retroZipRetroCycle;\n    import std.range : retroZipRetro;\n    import std.range : retroZipRetroCycle;\n    import std.range : retroZipRetro;\n    import std.range : retroZipRetroCycle;\n    import std.range : retroZipRetro;\n    import std.range : retroZipRetroCycle;\n    import std.range : retroZipRetro;\n    import std.range : retroZipRetroCycle;\n    import std.range : retroZipRetro;\n    import std.range : retroZipRetroCycle;\n    import std.range : retroZipRetro;\n    import std.range : retroZipRetroCycle;\n    import std.range : retroZipRetro;\n    import std.range : retroZipRetroCycle;\n    import std.range : retroZipRetro;\n    import std.range : retroZipRetroCycle;\n    import std.range : retroZipRetro;\n    import std.range : retroZipRetroCycle;\n    import std.range : retroZipRetro;\n    import std.range : retroZipRetroCycle;\n    import std.range : retro\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpms7g_9z3.d(65): Error: `;` expected\n/tmp/tmpms7g_9z3.d(75): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpms7g_9z3.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space = false;\n    bool two_spaces = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n                if(two_spaces)\n                {\n                    result ~= \"-\";\n                }\n                else\n                {\n                    result ~= \"_\";\n                    two_spaces = true;\n                }\n            }\n            else\n            {\n                result ~= \"_\";\n                space = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space = false;\n            two_spaces = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp1cbf3gp7.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x42804d]\n??:? void tmp1cbf3gp7.__unittest_L55_C1() [0x427ccf]\n??:? void tmp1cbf3gp7.__modtest() [0x427dcc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c793]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b6a2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffc9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430478]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff55]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b679]\n??:? runModuleUnitTests [0x42c569]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42849c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(char c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count > 2)\n            {\n                result ~= '-';\n                count = 0;\n            }\n            else\n            {\n                result ~= '_';\n            }\n        }\n        else\n        {\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpil0hrjxi.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpil0hrjxi.__unittest_L46_C1() [0x427cbb]\n??:? void tmpil0hrjxi.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbofzq4q7.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpbofzq4q7.__unittest_L45_C1() [0x427c6c]\n??:? void tmpbofzq4q7.__modtest() [0x427db4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm : replace;\n    import std.array : array;\n    import std.range : iota;\n    import std.conv : to;\n    import std.string : join;\n    import std.typecons : tuple;\n    import std.math : min;\n    import std.range : take;\n    import std.range : drop;\n    import std.range : zip;\n    import std.range : cycle;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import std.range : retro;\n    import\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpoyjez_4v.d(78): Error: identifier expected following `import`\n/tmp/tmpoyjez_4v.d(78): Error: `;` expected\n/tmp/tmpoyjez_4v.d(88): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpoyjez_4v.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int spaces = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            spaces++;\n            if(spaces > 2)\n            {\n                result ~= '-';\n                spaces = 0;\n            }\n            else\n            {\n                result ~= '_';\n            }\n        }\n        else\n        {\n            result ~= c;\n            spaces = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpi_tdc6wp.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpi_tdc6wp.__unittest_L46_C1() [0x427cbb]\n??:? void tmpi_tdc6wp.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool has_space = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(has_space)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n            }\n            has_space = true;\n        }\n        else\n        {\n            result ~= c;\n            has_space = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmoi5s5ag.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpmoi5s5ag.__unittest_L45_C1() [0x427c64]\n??:? void tmpmoi5s5ag.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool space_found = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_found)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n                space_found = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmph7vqs5j6.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmph7vqs5j6.__unittest_L45_C1() [0x427c64]\n??:? void tmph7vqs5j6.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = text;\n    int count = 0;\n    foreach(i, c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result[i] = '_';\n            }\n            else if(count == 2)\n            {\n                result[i] = '_';\n            }\n            else\n            {\n                result[i] = '-';\n            }\n        }\n        else\n        {\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpi5a5xjra.d(30): Error: cannot modify `immutable` expression `result[i]`\n/tmp/tmpi5a5xjra.d(34): Error: cannot modify `immutable` expression `result[i]`\n/tmp/tmpi5a5xjra.d(38): Error: cannot modify `immutable` expression `result[i]`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpi5a5xjra.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    result = result.replace(\"__\", \"_\");\n    result = result.replace(\"__\", \"-\");\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpmcjaeeue.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpmcjaeeue.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count > 2)\n            {\n                result ~= '-';\n                count = 0;\n            }\n            else\n            {\n                result ~= '_';\n            }\n        }\n        else\n        {\n            result ~= c;\n            count = 0;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpwgkny_qg.d(53): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpwgkny_qg.__unittest_L46_C1() [0x427cbb]\n??:? void tmpwgkny_qg.__modtest() [0x427db8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text;\n    size_t pos = 0;\n    while ((pos = result.find(\"  \")) != string.npos)\n    {\n        result.replace(pos, 2, \"-\");\n    }\n    result.replace(\" \", \"_\");\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmptiqyzpw6.d(23): Error: no property `find` for type `string`\n/tmp/tmptiqyzpw6.d(23): Error: no property `npos` for type `string`\n/tmp/tmptiqyzpw6.d(25): Error: no property `replace` for type `string`\n/tmp/tmptiqyzpw6.d(27): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmptiqyzpw6.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    bool first_space = true;\n    bool consecutive_spaces = false;\n    foreach(char c; text)\n    {\n        if(c == ' ')\n        {\n            if(first_space)\n            {\n                result += '_';\n                first_space = false;\n            }\n            else\n            {\n                if(consecutive_spaces)\n                {\n                    result += '-';\n                }\n                else\n                {\n                    result += '_';\n                    consecutive_spaces = true;\n                }\n            }\n        }\n        else\n        {\n            result += c;\n            first_space = true;\n            consecutive_spaces = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp9vixsagk.d(30): Error: slice `result` is not mutable\n/tmp/tmp9vixsagk.d(37): Error: slice `result` is not mutable\n/tmp/tmp9vixsagk.d(41): Error: slice `result` is not mutable\n/tmp/tmp9vixsagk.d(48): Error: slice `result` is not mutable\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp9vixsagk.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    auto result = text.replace(\" \", \"_\");\n    auto result2 = result.replace(\"__\", \"-\");\n    return result2;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpu91usttp.d(21): Error: no property `replace` for type `string`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpu91usttp.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpnnaip9zo.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x428035]\n??:? void tmpnnaip9zo.__unittest_L45_C1() [0x427c6c]\n??:? void tmpnnaip9zo.__modtest() [0x427db4]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6cb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5da]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffb1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430460]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff3d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5b1]\n??:? runModuleUnitTests [0x42c4a1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428484]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space_found = false;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space_found)\n            {\n                result ~= '-';\n            }\n            else\n            {\n                result ~= '_';\n                space_found = true;\n            }\n        }\n        else\n        {\n            result ~= c;\n            space_found = false;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpham8aas0.d(51): unittest failure\n----------------\n??:? _d_unittestp [0x42802d]\n??:? void tmpham8aas0.__unittest_L45_C1() [0x427c64]\n??:? void tmpham8aas0.__modtest() [0x427dac]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6c3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5d2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffa9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430458]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff35]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5a9]\n??:? runModuleUnitTests [0x42c499]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42847c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result = \"\";\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            count++;\n            if(count == 1)\n            {\n                result ~= '_';\n            }\n            else if(count == 2)\n            {\n                result ~= '_';\n            }\n            else\n            {\n                result ~= '-';\n            }\n        }\n        else\n        {\n            count = 0;\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp8a5u2mey.d(56): unittest failure\n----------------\n??:? _d_unittestp [0x42807d]\n??:? void tmp8a5u2mey.__unittest_L49_C1() [0x427d03]\n??:? void tmp8a5u2mey.__modtest() [0x427e00]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c713]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b622]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42fff9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4304a8]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff85]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5f9]\n??:? runModuleUnitTests [0x42c4e9]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n    import std.range;\n    import std.conv;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.math;\n    import std.algorithm;\n    import std.array;\n    import\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmperc1436u.d(90): Error: identifier expected following `import`\n/tmp/tmperc1436u.d(90): Error: `;` expected\n/tmp/tmperc1436u.d(100): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmperc1436u.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    string result;\n    bool space = false;\n    int count = 0;\n    foreach(c; text)\n    {\n        if(c == ' ')\n        {\n            if(space)\n            {\n                count++;\n            }\n            else\n            {\n                space = true;\n                count = 1;\n            }\n        }\n        else\n        {\n            if(space)\n            {\n                if(count == 1)\n                {\n                    result ~= '_';\n                }\n                else if(count > 1)\n                {\n                    result ~= '-';\n                }\n                space = false;\n            }\n            result ~= c;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp99vs_1uw.d(62): unittest failure\n----------------\n??:? _d_unittestp [0x428055]\n??:? void tmp99vs_1uw.__unittest_L57_C1() [0x427c45]\n??:? void tmp99vs_1uw.__modtest() [0x427dd8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c6eb]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b5fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x42ffd1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430480]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x42ff5d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b5d1]\n??:? runModuleUnitTests [0x42c4c1]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4284a4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164292
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\n\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    >>> fix_spaces(\" Example\")\n    \"Example\"\n    >>> fix_spaces(\" Example 1\")\n    \"Example_1\"\n    >>> fix_spaces(\" Example 2\")\n    \"_Example_2\"\n    >>> fix_spaces(\" Example 3\")\n    \"_Example-3\"\n    \n*/\nstring fix_spaces(string text) \n{\n    import std.algorithm;\n    import std.array;\n    import std.conv;\n    import std.range;\n    import std.string;\n    import std.typecons;\n    import std.math;\n    import std.stdio;\n    import std.traits;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import std.typecons;\n    import\nunittest\n{\n    alias candidate = fix_spaces;\n\n    assert(candidate(\"Example\") == \"Example\");\n    assert(candidate(\"Mudasir Hanif \") == \"Mudasir_Hanif_\");\n    assert(candidate(\"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\");\n    assert(candidate(\"Exa   mple\") == \"Exa-mple\");\n    assert(candidate(\"   Exa 1 2 2 mple\") == \"-Exa_1_2_2_mple\");\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmppfrkiez1.d(86): Error: identifier expected following `import`\n/tmp/tmppfrkiez1.d(86): Error: `;` expected\n/tmp/tmppfrkiez1.d(96): Error: found `End of File` when expecting `}` following compound statement\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmppfrkiez1.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164291
    }
  ]
}