{
  "language": "d",
  "name": "HumanEval_146_specialFilter",
  "results": [
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / pow(10, floor(log10(num)));\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1j2ut7ms.d(21): Error: cannot implicitly convert expression `cast(real)num / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1j2ut7ms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`\n/tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9965jd5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`\n/tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9965jd5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\n/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk65b43d0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10, floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428fc5]\n??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]\n??:? void tmp6ouo_4x1.__modtest() [0x428d48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]\n??:? runModuleUnitTests [0x42cf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\n/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c6pcw7z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]\n??:? void tmpmwxe7x1c.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            long first = n / 10;\n            long last = n % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp_0ybnq2x.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp_0ybnq2x.__unittest_L31_C1() [0x427ed1]\n??:? void tmp_0ybnq2x.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10, floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428fc5]\n??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]\n??:? void tmp6ouo_4x1.__modtest() [0x428d48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]\n??:? runModuleUnitTests [0x42cf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10, floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428fc5]\n??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]\n??:? void tmp6ouo_4x1.__modtest() [0x428d48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]\n??:? runModuleUnitTests [0x42cf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpf5q5k8fm.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpf5q5k8fm.__unittest_L31_C1() [0x427ed1]\n??:? void tmpf5q5k8fm.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / (long)pow(10, (int)floor(log10(num)));\n            long lastDigit = num % 10;\n            if(firstDigit % 2 == 1 && lastDigit % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpp8x6ggvx.d(21): Error: C style cast illegal, use `cast(int)floor(log10(num))`\n/tmp/tmpp8x6ggvx.d(21): Error: C style cast illegal, use `cast(long)pow(10, cast(int)floor(log10(num)))`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpp8x6ggvx.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\n/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c6pcw7z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\n/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk65b43d0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / cast(long)pow(10, floor(log10(num)));\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10, floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428fc5]\n??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]\n??:? void tmp6ouo_4x1.__modtest() [0x428d48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]\n??:? runModuleUnitTests [0x42cf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 == 1 && num.to!string().back.to!long() % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdh4rg_nh.d(19): Error: no property `to` for type `long`\n/tmp/tmpdh4rg_nh.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdh4rg_nh.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 && num.to!string()[$-1] % 2)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps4h1spxg.d(19): Error: no property `to` for type `long`\n/tmp/tmps4h1spxg.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps4h1spxg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 == 1 && last % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp32akbp1i.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282ad]\n??:? void tmp32akbp1i.__unittest_L31_C1() [0x427ed9]\n??:? void tmp32akbp1i.__modtest() [0x428030]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c297]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b12a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302bd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43076c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430249]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b101]\n??:? runModuleUnitTests [0x42c06d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286fc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num % 2 != 0)\n            {\n                long firstDigit = num / 10;\n                long lastDigit = num % 10;\n                if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4wcy8yh0.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x4282bd]\n??:? void tmp4wcy8yh0.__unittest_L34_C1() [0x427ee9]\n??:? void tmp4wcy8yh0.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b13a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43077c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430259]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b111]\n??:? runModuleUnitTests [0x42c07d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42870c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 && num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`\n/tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmttpuhc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long counter = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                counter++;\n            }\n        }\n    }\n    return counter;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpdhu4agn7.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpdhu4agn7.__unittest_L31_C1() [0x427ed1]\n??:? void tmpdhu4agn7.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]\n??:? void tmpmwxe7x1c.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw_wt_270.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpw_wt_270.__unittest_L26_C1() [0x427eb1]\n??:? void tmpw_wt_270.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5ltrw1ya.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428275]\n??:? void tmp5ltrw1ya.__unittest_L26_C1() [0x427ea1]\n??:? void tmp5ltrw1ya.__modtest() [0x427ff8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430285]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430734]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430211]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]\n??:? runModuleUnitTests [0x42c035]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxcy5f40s.d(19): Error: no property `digits` for type `long`\n/tmp/tmpxcy5f40s.d(19): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxcy5f40s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / pow(10, floor(log10(num)));\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8j2rm9et.d(21): Error: cannot implicitly convert expression `cast(real)num / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8j2rm9et.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzpnwemnm.d(21): Error: no property `to` for type `long`\n/tmp/tmpzpnwemnm.d(21): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpnwemnm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\n/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c6pcw7z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            if(n % 2 == 1)\n            {\n                if(n % 10 == 1 || n % 10 == 3 || n % 10 == 5 || n % 10 == 7 || n % 10 == 9)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp4uirpa48.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42829d]\n??:? void tmp4uirpa48.__unittest_L32_C1() [0x427ec5]\n??:? void tmp4uirpa48.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if (num > 10)\n        {\n            long firstDigit = num / cast(long)pow(10, floor(log10(num)));\n            long lastDigit = num % 10;\n            if (firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5ltrw1ya.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428275]\n??:? void tmp5ltrw1ya.__unittest_L26_C1() [0x427ea1]\n??:? void tmp5ltrw1ya.__modtest() [0x427ff8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430285]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430734]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430211]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]\n??:? runModuleUnitTests [0x42c035]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqtyt_gny.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42827d]\n??:? void tmpqtyt_gny.__unittest_L26_C1() [0x427e36]\n??:? void tmpqtyt_gny.__modtest() [0x427ffc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c267]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43028d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430219]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d1]\n??:? runModuleUnitTests [0x42c03d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && (num % 10) % 2 == 1 && (num / pow(10, floor(log10(num)))) % 2 == 1)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpq4gtvh04.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428fcd]\n??:? void tmpq4gtvh04.__unittest_L26_C1() [0x428272]\n??:? void tmpq4gtvh04.__modtest() [0x428d50]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d18b]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c01e]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311b1]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431660]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x43113d]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bff5]\n??:? runModuleUnitTests [0x42cf61]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42941c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpw_wt_270.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpw_wt_270.__unittest_L26_C1() [0x427eb1]\n??:? void tmpw_wt_270.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqtyt_gny.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42827d]\n??:? void tmpqtyt_gny.__unittest_L26_C1() [0x427e36]\n??:? void tmpqtyt_gny.__modtest() [0x427ffc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c267]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43028d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430219]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d1]\n??:? runModuleUnitTests [0x42c03d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            if(n % 2 == 1)\n            {\n                long lastDigit = n % 10;\n                if(lastDigit % 2 == 1)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmph5akkqnv.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x428295]\n??:? void tmph5akkqnv.__unittest_L33_C1() [0x427ebd]\n??:? void tmph5akkqnv.__modtest() [0x428014]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c27f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b112]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302a5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430754]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430231]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e9]\n??:? runModuleUnitTests [0x42c055]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286e4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx57tdy5l.d(19): Error: no property `to` for type `long`\n/tmp/tmpx57tdy5l.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx57tdy5l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.abs().to!string().front.to!long() % 2 == 1 && num.abs().to!string().back.to!long() % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqfu1ktfy.d(21): Error: no property `to` for type `long`\n/tmp/tmpqfu1ktfy.d(21): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqfu1ktfy.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\n/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk65b43d0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]\n??:? void tmpmwxe7x1c.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]\n??:? void tmpmwxe7x1c.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\n/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c6pcw7z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / pow(10, floor(log10(num)));\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp15yfziof.d(21): Error: cannot implicitly convert expression `cast(real)num / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15yfziof.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqtyt_gny.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42827d]\n??:? void tmpqtyt_gny.__unittest_L26_C1() [0x427e36]\n??:? void tmpqtyt_gny.__modtest() [0x427ffc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c267]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43028d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430219]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d1]\n??:? runModuleUnitTests [0x42c03d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5ltrw1ya.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428275]\n??:? void tmp5ltrw1ya.__unittest_L26_C1() [0x427ea1]\n??:? void tmp5ltrw1ya.__modtest() [0x427ff8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430285]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430734]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430211]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]\n??:? runModuleUnitTests [0x42c035]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num % 2 != 0)\n            {\n                long firstDigit = num / 10;\n                if(firstDigit % 2 != 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpfc0op04o.d(39): unittest failure\n----------------\n??:? _d_unittestp [0x42828d]\n??:? void tmpfc0op04o.__unittest_L33_C1() [0x427eb5]\n??:? void tmpfc0op04o.__modtest() [0x42800c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c277]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b10a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43029d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43074c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430229]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e1]\n??:? runModuleUnitTests [0x42c04d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286dc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`\n/tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9965jd5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]\n??:? void tmpmwxe7x1c.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]\n??:? void tmpmwxe7x1c.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num % 2 == 1)\n            {\n                long firstDigit = num;\n                long lastDigit = num % 10;\n                while(firstDigit > 10)\n                {\n                    firstDigit /= 10;\n                }\n                if(firstDigit % 2 == 1 && lastDigit % 2 == 1)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp74nuote5.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4282dd]\n??:? void tmp74nuote5.__unittest_L38_C1() [0x427f09]\n??:? void tmp74nuote5.__modtest() [0x428060]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2c7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b15a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ed]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43079c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430279]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b131]\n??:? runModuleUnitTests [0x42c09d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42872c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpf5q5k8fm.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpf5q5k8fm.__unittest_L31_C1() [0x427ed1]\n??:? void tmpf5q5k8fm.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(i; nums)\n    {\n        if(i > 10)\n        {\n            if(i % 2 != 0)\n            {\n                if(i / 10 % 2 != 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(i; nums)\n    {\n        if(i > 10)\n        {\n            if(i % 2 != 0)\n            {\n                if(i / 10 % 2 != 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(i; nums)\n    {\n        if(i > 10)\n        {\n            if(i % 2 != 0)\n            {\n                if(i / 10 % 2 != 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqr_ju46h.d(94): Error: `tmpqr_ju46h.specialFilter` called with argument types `(long[])` matches both:\n/tmp/tmpqr_ju46h.d(14):     `tmpqr_ju46h.specialFilter(long[] nums)`\nand:\n/tmp/tmpqr_ju46h.d(72):     `tmpqr_ju46h.specialFilter(long[] nums)`\n/tmp/tmpqr_ju46h.d(95): Error: `tmpqr_ju46h.specialFilter` called with argument types `(long[])` matches both:\n/tmp/tmpqr_ju46h.d(14):     `tmpqr_ju46h.specialFilter(long[] nums)`\nand:\n/tmp/tmpqr_ju46h.d(72):     `tmpqr_ju46h.specialFilter(long[] nums)`\n/tmp/tmpqr_ju46h.d(96): Error: `tmpqr_ju46h.specialFilter` called with argument types `(long[])` matches both:\n/tmp/tmpqr_ju46h.d(14):     `tmpqr_ju46h.specialFilter(long[] nums)`\nand:\n/tmp/tmpqr_ju46h.d(72):     `tmpqr_ju46h.specialFilter(long[] nums)`\n/tmp/tmpqr_ju46h.d(97): Error: `tmpqr_ju46h.specialFilter` called with argument types `(long[])` matches both:\n/tmp/tmpqr_ju46h.d(14):     `tmpqr_ju46h.specialFilter(long[] nums)`\nand:\n/tmp/tmpqr_ju46h.d(72):     `tmpqr_ju46h.specialFilter(long[] nums)`\n/tmp/tmp",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx57tdy5l.d(19): Error: no property `to` for type `long`\n/tmp/tmpx57tdy5l.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx57tdy5l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\n/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c6pcw7z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            if(n % 2 != 0)\n            {\n                long temp = n;\n                long lastDigit = temp % 10;\n                temp /= 10;\n                long firstDigit = temp % 10;\n                if(lastDigit % 2 != 0 && firstDigit % 2 != 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpxiikvu1m.d(42): unittest failure\n----------------\n??:? _d_unittestp [0x4282d5]\n??:? void tmpxiikvu1m.__unittest_L36_C1() [0x427efd]\n??:? void tmpxiikvu1m.__modtest() [0x428054]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2bf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b152]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302e5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430794]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430271]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b129]\n??:? runModuleUnitTests [0x42c095]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428724]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]\n??:? void tmpmwxe7x1c.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && (num % 10) % 2 == 1 && num / 10 % 2 == 1)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpopd_ww0d.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x42828d]\n??:? void tmpopd_ww0d.__unittest_L26_C1() [0x427eb9]\n??:? void tmpopd_ww0d.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c277]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b10a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43029d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43074c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430229]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e1]\n??:? runModuleUnitTests [0x42c04d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286dc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10, floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428fc5]\n??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]\n??:? void tmp6ouo_4x1.__modtest() [0x428d48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]\n??:? runModuleUnitTests [0x42cf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / pow(10, floor(log10(num)));\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp15yfziof.d(21): Error: cannot implicitly convert expression `cast(real)num / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15yfziof.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = to!string(num);\n            if(digits[0] % 2 == 1 && digits[$-1] % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp7ow9_93m.d(21): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp7ow9_93m.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpf5q5k8fm.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpf5q5k8fm.__unittest_L31_C1() [0x427ed1]\n??:? void tmpf5q5k8fm.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = to!string(num);\n            if(digits[0] % 2 != 0 && digits[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2zvp9hez.d(21): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2zvp9hez.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            if(n % 2 != 0)\n            {\n                if(n % 10 != 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmppt47iw1w.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42827d]\n??:? void tmppt47iw1w.__unittest_L32_C1() [0x427ea9]\n??:? void tmppt47iw1w.__modtest() [0x428000]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c267]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43028d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430219]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d1]\n??:? runModuleUnitTests [0x42c03d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp8wwiol7d.d(19): Error: no property `digits` for type `long`\n/tmp/tmp8wwiol7d.d(19): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp8wwiol7d.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\n/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c6pcw7z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 && num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`\n/tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmttpuhc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num % 2 == 1)\n            {\n                if(num % 10 == 1 || num % 10 == 3 || num % 10 == 5 || num % 10 == 7 || num % 10 == 9)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9b05f5b6.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42829d]\n??:? void tmp9b05f5b6.__unittest_L32_C1() [0x427ec5]\n??:? void tmp9b05f5b6.__modtest() [0x42801c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c287]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b11a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302ad]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43075c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430239]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f1]\n??:? runModuleUnitTests [0x42c05d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286ec]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num % 2 != 0)\n            {\n                long first = num / 10;\n                long last = num % 10;\n                if(first % 2 != 0 && last % 2 != 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpjqrw_s6k.d(40): unittest failure\n----------------\n??:? _d_unittestp [0x4282bd]\n??:? void tmpjqrw_s6k.__unittest_L34_C1() [0x427ee9]\n??:? void tmpjqrw_s6k.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b13a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43077c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430259]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b111]\n??:? runModuleUnitTests [0x42c07d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42870c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            auto first = n / pow(10, floor(log10(n)));\n            auto last = n % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp9l42_td8.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x428fe5]\n??:? void tmp9l42_td8.__unittest_L31_C1() [0x4282f9]\n??:? void tmp9l42_td8.__modtest() [0x428d68]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d1a3]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c036]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311c9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431678]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431155]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42c00d]\n??:? runModuleUnitTests [0x42cf79]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429434]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]\n??:? void tmpmwxe7x1c.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\n/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk65b43d0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpb6h2u6ft.d(21): Error: no property `to` for type `long`\n/tmp/tmpb6h2u6ft.d(21): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpb6h2u6ft.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpx57tdy5l.d(19): Error: no property `to` for type `long`\n/tmp/tmpx57tdy5l.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpx57tdy5l.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / pow(10, floor(log10(num)));\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp15yfziof.d(21): Error: cannot implicitly convert expression `cast(real)num / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15yfziof.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]\n??:? void tmpmwxe7x1c.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10, floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428fc5]\n??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]\n??:? void tmp6ouo_4x1.__modtest() [0x428d48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]\n??:? runModuleUnitTests [0x42cf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5ltrw1ya.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428275]\n??:? void tmp5ltrw1ya.__unittest_L26_C1() [0x427ea1]\n??:? void tmp5ltrw1ya.__modtest() [0x427ff8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430285]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430734]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430211]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]\n??:? runModuleUnitTests [0x42c035]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`\n/tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9965jd5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]\n??:? void tmpmwxe7x1c.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            if(n % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpb0xrobj7.d(35): unittest failure\n----------------\n??:? _d_unittestp [0x42826d]\n??:? void tmpb0xrobj7.__unittest_L29_C1() [0x427e95]\n??:? void tmpb0xrobj7.__modtest() [0x427fec]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c257]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0ea]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43027d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43072c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430209]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c1]\n??:? runModuleUnitTests [0x42c02d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286bc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`\n/tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9965jd5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqtyt_gny.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42827d]\n??:? void tmpqtyt_gny.__unittest_L26_C1() [0x427e36]\n??:? void tmpqtyt_gny.__modtest() [0x427ffc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c267]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43028d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430219]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d1]\n??:? runModuleUnitTests [0x42c03d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            auto digits = to!string(n);\n            if(digits[0] % 2 == 1 && digits[$-1] % 2 == 1)\n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpt1e5krz4.d(21): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpt1e5krz4.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10, floor(log10(num))) % 2 == 1)\n        {\n            result++;\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpl6rqeeja.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428fc5]\n??:? void tmpl6rqeeja.__unittest_L26_C1() [0x42826a]\n??:? void tmpl6rqeeja.__modtest() [0x428d48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]\n??:? runModuleUnitTests [0x42cf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`\n/tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9965jd5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`\n/tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9965jd5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string().front.to!long() % 2 == 1 && num.to!string().back.to!long() % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj2qqp5zw.d(21): Error: no property `to` for type `long`\n/tmp/tmpj2qqp5zw.d(21): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj2qqp5zw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\n/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk65b43d0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string().front.to!long() % 2 == 1 && num.to!string().back.to!long() % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpj2qqp5zw.d(21): Error: no property `to` for type `long`\n/tmp/tmpj2qqp5zw.d(21): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpj2qqp5zw.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`\n/tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9965jd5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / pow(10, floor(log10(num)));\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1j2ut7ms.d(21): Error: cannot implicitly convert expression `cast(real)num / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1j2ut7ms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`\n/tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9965jd5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 && num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`\n/tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmttpuhc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num % 2 != 0)\n            {\n                long firstDigit = num / pow(10, floor(log10(num)));\n                if(firstDigit % 2 != 0)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpwr37frv2.d(23): Error: cannot implicitly convert expression `cast(real)num / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpwr37frv2.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]\n??:? void tmpmwxe7x1c.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`\n/tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9965jd5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\n/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk65b43d0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\n/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk65b43d0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5ltrw1ya.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428275]\n??:? void tmp5ltrw1ya.__unittest_L26_C1() [0x427ea1]\n??:? void tmp5ltrw1ya.__modtest() [0x427ff8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430285]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430734]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430211]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]\n??:? runModuleUnitTests [0x42c035]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpzpnwemnm.d(21): Error: no property `to` for type `long`\n/tmp/tmpzpnwemnm.d(21): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpzpnwemnm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num % 2 == 1)\n            {\n                if(num / 10 % 2 == 1)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmptspknnoq.d(38): unittest failure\n----------------\n??:? _d_unittestp [0x42828d]\n??:? void tmptspknnoq.__unittest_L32_C1() [0x427eb9]\n??:? void tmptspknnoq.__modtest() [0x428010]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c277]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b10a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43029d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43074c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430229]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0e1]\n??:? runModuleUnitTests [0x42c04d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286dc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / pow(10, floor(log10(num)));\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp15yfziof.d(21): Error: cannot implicitly convert expression `cast(real)num / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15yfziof.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long result = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num;\n            long last = num % 10;\n            while(first > 10)\n            {\n                first /= 10;\n            }\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                result++;\n            }\n        }\n    }\n    return result;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqco1i8_3.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x4282bd]\n??:? void tmpqco1i8_3.__unittest_L35_C1() [0x427ee9]\n??:? void tmpqco1i8_3.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b13a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43077c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430259]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b111]\n??:? runModuleUnitTests [0x42c07d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42870c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\n/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk65b43d0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            auto digits = num.to!string.split(\"\");\n            if(digits[0].to!long % 2 == 1 && digits[$-1].to!long % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpdl0n7cqa.d(21): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpdl0n7cqa.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.front.isOdd && num.back.isOdd)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps9965jd5.d(19): Error: no property `front` for type `long`\n/tmp/tmps9965jd5.d(19): Error: no property `back` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps9965jd5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\n/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk65b43d0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\n/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c6pcw7z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10, floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428fc5]\n??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]\n??:? void tmp6ouo_4x1.__modtest() [0x428d48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]\n??:? runModuleUnitTests [0x42cf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\n/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c6pcw7z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5ltrw1ya.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428275]\n??:? void tmp5ltrw1ya.__unittest_L26_C1() [0x427ea1]\n??:? void tmp5ltrw1ya.__modtest() [0x427ff8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430285]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430734]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430211]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]\n??:? runModuleUnitTests [0x42c035]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]\n??:? void tmpmwxe7x1c.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 && num.to!string[$-1] % 2)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`\n/tmp/tmpqmttpuhc.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpqmttpuhc.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num % 2 == 1)\n            {\n                long lastDigit = num % 10;\n                long firstDigit = num;\n                while(firstDigit > 10)\n                {\n                    firstDigit = firstDigit / 10;\n                }\n                if(firstDigit % 2 == 1)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpb1_k6m3q.d(44): unittest failure\n----------------\n??:? _d_unittestp [0x4282bd]\n??:? void tmpb1_k6m3q.__unittest_L38_C1() [0x427ee5]\n??:? void tmpb1_k6m3q.__modtest() [0x42803c]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b13a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43077c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430259]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b111]\n??:? runModuleUnitTests [0x42c07d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42870c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num % 2 == 1)\n            {\n                long first = num;\n                long last = num;\n                while(first > 10)\n                {\n                    first = first / 10;\n                }\n                last = last % 10;\n                if(first % 2 == 1 && last % 2 == 1)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp0sedc9mc.d(45): unittest failure\n----------------\n??:? _d_unittestp [0x4282e5]\n??:? void tmp0sedc9mc.__unittest_L39_C1() [0x427f0d]\n??:? void tmp0sedc9mc.__modtest() [0x428064]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2cf]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b162]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302f5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x4307a4]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430281]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b139]\n??:? runModuleUnitTests [0x42c0a5]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x428734]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num % 10 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpqtyt_gny.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x42827d]\n??:? void tmpqtyt_gny.__unittest_L26_C1() [0x427e36]\n??:? void tmpqtyt_gny.__modtest() [0x427ffc]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c267]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0fa]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x43028d]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43073c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430219]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d1]\n??:? runModuleUnitTests [0x42c03d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286cc]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\n/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk65b43d0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums) \n    {\n        if(num > 10) \n        {\n            if(num.toString().length > 1) \n            {\n                if(num.toString()[0] % 2 != 0 && num.toString()[$-1] % 2 != 0) \n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpld10axb5.d(21): Error: no property `toString` for type `long`\n/tmp/tmpld10axb5.d(23): Error: no property `toString` for type `long`\n/tmp/tmpld10axb5.d(23): Error: no property `toString` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpld10axb5.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / 10;\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpmwxe7x1c.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpmwxe7x1c.__unittest_L31_C1() [0x427ed1]\n??:? void tmpmwxe7x1c.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if((first % 2 != 0) && (last % 2 != 0))\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpo2yzvxx_.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmpo2yzvxx_.__unittest_L31_C1() [0x427ed1]\n??:? void tmpo2yzvxx_.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10, floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428fc5]\n??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]\n??:? void tmp6ouo_4x1.__modtest() [0x428d48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]\n??:? runModuleUnitTests [0x42cf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num % 10;\n            long lastDigit = num / 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmphl6uiil4.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmphl6uiil4.__unittest_L31_C1() [0x427ed1]\n??:? void tmphl6uiil4.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            auto digits = to!string(n);\n            if(digits[0] % 2 == 1 && digits[$-1] % 2 == 1)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpm_6a9npn.d(21): Error: template instance `to!string` template `to` is not defined, did you mean No?\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpm_6a9npn.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10, floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428fc5]\n??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]\n??:? void tmp6ouo_4x1.__modtest() [0x428d48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]\n??:? runModuleUnitTests [0x42cf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(n; nums)\n    {\n        if(n > 10)\n        {\n            long first = n / pow(10, floor(log10(n)));\n            long last = n % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp6vh4mpzm.d(21): Error: cannot implicitly convert expression `cast(real)n / pow(10, floor(log10(cast(real)n)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp6vh4mpzm.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num % 10 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp5ltrw1ya.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428275]\n??:? void tmp5ltrw1ya.__unittest_L26_C1() [0x427ea1]\n??:? void tmp5ltrw1ya.__modtest() [0x427ff8]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c25f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b0f2]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430285]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430734]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430211]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0c9]\n??:? runModuleUnitTests [0x42c035]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286c4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num;\n            long last = num % 10;\n            while(first > 10)\n            {\n                first /= 10;\n            }\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpbd2a64pu.d(41): unittest failure\n----------------\n??:? _d_unittestp [0x4282bd]\n??:? void tmpbd2a64pu.__unittest_L35_C1() [0x427ee9]\n??:? void tmpbd2a64pu.__modtest() [0x428040]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c2a7]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b13a]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302cd]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x43077c]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430259]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b111]\n??:? runModuleUnitTests [0x42c07d]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x42870c]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\n/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c6pcw7z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string().front.to!long() % 2 != 0 && num.to!string().back.to!long() % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\n/tmp/tmp3c6pcw7z.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp3c6pcw7z.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && isOdd(num) && isOdd(num % 10))\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp_6b826du.d(19): Error: undefined identifier `isOdd`\n/tmp/tmp_6b826du.d(19): Error: undefined identifier `isOdd`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp_6b826du.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num.to!string()[0] % 2 != 0 && num.to!string()[$-1] % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp2blzh42p.d(21): Error: no property `to` for type `long`\n/tmp/tmp2blzh42p.d(21): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp2blzh42p.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string()[0] % 2 && num.to!string()[$-1] % 2)\n            count++;\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmps4h1spxg.d(19): Error: no property `to` for type `long`\n/tmp/tmps4h1spxg.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmps4h1spxg.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / pow(10, floor(log10(num))) % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp6ouo_4x1.d(31): unittest failure\n----------------\n??:? _d_unittestp [0x428fc5]\n??:? void tmp6ouo_4x1.__unittest_L26_C1() [0x42826a]\n??:? void tmp6ouo_4x1.__modtest() [0x428d48]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42d183]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42c016]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4311a9]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x431658]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x431135]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42bfed]\n??:? runModuleUnitTests [0x42cf59]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x429414]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 0,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            if(num % 2 == 1)\n            {\n                long first = num;\n                long last = num;\n                while(first >= 10)\n                {\n                    first /= 10;\n                }\n                while(last % 10 != last)\n                {\n                    last %= 10;\n                }\n                if(first % 2 == 1 && last % 2 == 1)\n                {\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "OK",
      "stderr": "",
      "stdout": "",
      "timestamp": 1660164290
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long firstDigit = num / pow(10, floor(log10(num)));\n            long lastDigit = num % 10;\n            if(firstDigit % 2 != 0 && lastDigit % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp15yfziof.d(21): Error: cannot implicitly convert expression `cast(real)num / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp15yfziof.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / pow(10, floor(log10(num)));\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmp1j2ut7ms.d(21): Error: cannot implicitly convert expression `cast(real)num / pow(10, floor(log10(cast(real)num)))` of type `real` to `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmp1j2ut7ms.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10)\n        {\n            long first = num / 10;\n            long last = num % 10;\n            if(first % 2 != 0 && last % 2 != 0)\n            {\n                count++;\n            }\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmp3gm6ju46.d(37): unittest failure\n----------------\n??:? _d_unittestp [0x4282a5]\n??:? void tmp3gm6ju46.__unittest_L31_C1() [0x427ed1]\n??:? void tmp3gm6ju46.__modtest() [0x428028]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c28f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b122]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x4302b5]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430764]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430241]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0f9]\n??:? runModuleUnitTests [0x42c065]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286f4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 == 1 && num / 10 % 2 == 1)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpojs_1h8l.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpojs_1h8l.__unittest_L26_C1() [0x427eb1]\n??:? void tmpojs_1h8l.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.digits[0] % 2 != 0 && num.digits[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpxcy5f40s.d(19): Error: no property `digits` for type `long`\n/tmp/tmpxcy5f40s.d(19): Error: no property `digits` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpxcy5f40s.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num % 2 != 0 && num / 10 % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "Exception",
      "stderr": "core.exception.AssertError@/tmp/tmpltxdtwlr.d(32): unittest failure\n----------------\n??:? _d_unittestp [0x428285]\n??:? void tmpltxdtwlr.__unittest_L26_C1() [0x427eb1]\n??:? void tmpltxdtwlr.__modtest() [0x428008]\n??:? int core.runtime.runModuleUnitTests().__foreachbody2(object.ModuleInfo*) [0x42c26f]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)).__lambda2(immutable(object.ModuleInfo*)) [0x42b102]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))).__foreachbody2(ref rt.sections_elf_shared.DSO) [0x430295]\n??:? int rt.sections_elf_shared.DSO.opApply(scope int delegate(ref rt.sections_elf_shared.DSO)) [0x430744]\n??:? int rt.minfo.moduleinfos_apply(scope int delegate(immutable(object.ModuleInfo*))) [0x430221]\n??:? int object.ModuleInfo.opApply(scope int delegate(object.ModuleInfo*)) [0x42b0d9]\n??:? runModuleUnitTests [0x42c045]\n??:? void rt.dmain2._d_run_main(int, char**, extern (C) int function(char[][])*).runAll() [0x4286d4]\n??:? void rt.dmain2._d_r",
      "stdout": "",
      "timestamp": 1660164289
    },
    {
      "exit_code": 1,
      "program": "import std.typecons;\nimport std.math;\n/*\nWrite a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    >>> specialFilter([15L, -73L, 14L, -15L])\n    1L\n    >>> specialFilter([33L, -2L, -3L, 45L, 21L, 109L])\n    2L\n    \n*/\nlong specialFilter(long[] nums) \n{\n    long count = 0;\n    foreach(num; nums)\n    {\n        if(num > 10 && num.to!string[0] % 2 != 0 && num.to!string[$-1] % 2 != 0)\n        {\n            count++;\n        }\n    }\n    return count;\n}\nunittest\n{\n    alias candidate = specialFilter;\n\n    assert(candidate([5L, -2L, 1L, -5L]) == 0L);\n    assert(candidate([15L, -73L, 14L, -15L]) == 1L);\n    assert(candidate([33L, -2L, -3L, 45L, 21L, 109L]) == 2L);\n    assert(candidate([43L, -12L, 93L, 125L, 121L, 109L]) == 4L);\n    assert(candidate([71L, -2L, -33L, 75L, 21L, 19L]) == 3L);\n    assert(candidate([1L]) == 0L);\n    assert(candidate([]) == 0L);\n}\nvoid main(){}",
      "status": "SyntaxError",
      "stderr": "/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\n/tmp/tmpk65b43d0.d(19): Error: no property `to` for type `long`\nFailed: [\"dmd\", \"-unittest\", \"-v\", \"-o-\", \"/tmp/tmpk65b43d0.d\", \"-I/tmp\"]\n",
      "stdout": "",
      "timestamp": 1660164289
    }
  ]
}