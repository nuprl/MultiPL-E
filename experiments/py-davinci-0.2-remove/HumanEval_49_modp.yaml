name: HumanEval_49_modp
language: py
prompt: "def modp(n: int, p: int) -> int:\n    \"\"\"Return 2^n modulo p (be aware\
  \ of numerics).\n                        \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(3, 5) == 3\n    assert candidate(1101,\
  \ 101) == 2\n    assert candidate(0, 101) == 1\n    assert candidate(3, 11) == 8\n\
  \    assert candidate(100, 101) == 1\n    assert candidate(30, 5) == 4\n    assert\
  \ candidate(31, 5) == 3\n\ndef test_check():\n    check(modp)\n\ntest_check()\n"
completions: ["    if p == 2:\n        return 1\n    if n == 0:\n        return 1\n\
    \    if n == 1:\n        return 2\n    if n % 2 == 0:\n        return (modp(n\
    \ // 2, p) ** 2) % p\n    return (2 * modp(n - 1, p)) % p\n\n", "    return pow(2,\
    \ n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    if n == 0:\n\
    \        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n\
    \        return (modp(n // 2, p) ** 2) % p\n    else:\n        return (2 * modp(n\
    \ - 1, p)) % p\n\n", "    return pow(2, n, p)\n\n", "    if n == 0:\n        return\
    \ 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n\
    \        return 2 * modp(n - 1, p) % p\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n    elif n ==\
    \ 1:\n        return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) **\
    \ 2 % p\n    else:\n        return 2 * modp(n - 1, p) % p\n\n", "    return pow(2,\
    \ n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    if n == 0:\n        return 1\n    elif n == 1:\n        return\
    \ 2\n    elif n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    else:\n\
    \        return (2 * modp(n - 1, p)) % p\n\n", "    return pow(2, n, p)\n\n",
  "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    if n == 0:\n        return 1\n    elif n == 1:\n        return\
    \ 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n\
    \        return 2 * modp(n - 1, p) % p\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    if n == 0:\n\
    \        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n\
    \        return (modp(n // 2, p) ** 2) % p\n    else:\n        return (2 * modp(n\
    \ - 1, p)) % p\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\
    \n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return\
    \ pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\
    \n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return\
    \ pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\
    \n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return\
    \ pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\
    \n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return\
    \ (2 ** n) % p\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\
    \n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return\
    \ pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\
    \n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return\
    \ pow(2, n, p)\n", "    if p == 2:\n        return 1\n    return pow(2, n, p)\n\
    \n", "    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n \
    \   elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n   \
    \     return 2 * modp(n - 1, p) % p\n\n", "    return pow(2, n, p)\n\n", "   \
    \ return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    if n == 0:\n        return 1\n    elif n == 1:\n        return\
    \ 2\n    elif n % 2 == 0:\n        return (modp(n // 2, p) ** 2) % p\n    else:\n\
    \        return (2 * modp(n - 1, p)) % p\n\n", "    return pow(2, n, p)\n\n",
  "    return pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n    elif n ==\
    \ 1:\n        return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) **\
    \ 2 % p\n    else:\n        return 2 * modp(n - 1, p) % p\n\n", "    return pow(2,\
    \ n, p)\n\n", "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n      \
    \  return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n - 1,\
    \ p) % p\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", " \
    \   if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif\
    \ n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return\
    \ 2 * modp(n - 1, p) % p\n\n", "    return pow(2, n, p)\n\n", "    if n == 0:\n\
    \        return 1\n    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n\
    \        return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n\
    \ - 1, p) % p\n\n", "    return pow(2, n, p)\n\n", "    if n == 0:\n        return\
    \ 1\n    elif n == 1:\n        return 2\n    else:\n        return (2 * modp(n\
    \ - 1, p)) % p\n\n", "    if n == 0:\n        return 1\n    elif n == 1:\n   \
    \     return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n\
    \    else:\n        return 2 * modp(n - 1, p) % p\n\n", "    return pow(2, n,\
    \ p)\n\n", "    return pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n\
    \    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n  \
    \      return 2 * modp(n - 1, p) % p\n\n", "    return pow(2, n, p)\n\n", "  \
    \  return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    if n == 0:\n        return 1\n    elif n == 1:\n        return\
    \ 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n\
    \        return 2 * modp(n - 1, p) % p\n\n", "    if n == 0:\n        return 1\n\
    \    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return (modp(n\
    \ // 2, p) ** 2) % p\n    else:\n        return (2 * modp(n - 1, p)) % p\n\n",
  "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", " \
    \   if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif\
    \ n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n        return\
    \ 2 * modp(n - 1, p) % p\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    return pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n\
    \    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return modp(n\
    \ // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n - 1, p) % p\n\n", " \
    \   return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    if n == 0:\n\
    \        return 1\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 %\
    \ p\n    else:\n        return 2 * modp(n - 1, p) % p\n\n", "    return pow(2,\
    \ n, p)\n\n", "    return pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n\
    \    elif n == 1:\n        return 2\n    elif n % 2 == 0:\n        return modp(n\
    \ // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n - 1, p) % p\n\n", " \
    \   return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    if n == 0:\n        return 1\n    elif n % 2 == 0:\n      \
    \  return modp(n // 2, p) ** 2 % p\n    else:\n        return 2 * modp(n - 1,\
    \ p) % p\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    if n == 0:\n        return 1\n    elif n == 1:\n        return\
    \ 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) ** 2 % p\n    else:\n\
    \        return 2 * modp(n - 1, p) % p\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n    elif n ==\
    \ 1:\n        return 2\n    elif n % 2 == 0:\n        return (modp(n // 2, p)\
    \ ** 2) % p\n    else:\n        return (2 * modp(n - 1, p)) % p\n\n", "    return\
    \ pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\
    \n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return\
    \ pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\
    \n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return\
    \ pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\
    \n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return\
    \ pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\
    \n", "    return pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n    elif\
    \ n == 1:\n        return 2\n    elif n % 2 == 0:\n        return modp(n // 2,\
    \ p) ** 2 % p\n    else:\n        return 2 * modp(n - 1, p) % p\n\n", "    return\
    \ pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\
    \n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return\
    \ pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\
    \n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n", "    return pow(2,\
    \ n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    if n == 0:\n        return 1\n    elif n ==\
    \ 1:\n        return 2\n    elif n % 2 == 0:\n        return modp(n // 2, p) **\
    \ 2 % p\n    else:\n        return 2 * modp(n - 1, p) % p\n\n", "    return pow(2,\
    \ n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    if p == 2:\n\
    \        return 1\n    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n",
  "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2,\
    \ n, p)\n\n", "    return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n", " \
    \   return pow(2, n, p)\n\n", "    return pow(2, n, p)\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
