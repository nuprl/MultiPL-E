name: HumanEval_127_intersection
language: py
prompt: "from typing import Tuple\n\ndef intersection(interval1: Tuple[int, int],\
  \ interval2: Tuple[int, int]) -> str:\n    \"\"\"You are given two intervals,\n\
  \    where each interval is a pair of integers. For example, interval = (start,\
  \ end) = (1, 2).\n    The given intervals are closed which means that the interval\
  \ (start, end)\n    includes both start and end.\n    For each given interval, it\
  \ is assumed that its start is less or equal its end.\n    Your task is to determine\
  \ whether the length of intersection of these two \n    intervals is a prime number.\n\
  \    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which\
  \ its length is 1, which not a prime number.\n    If the length of the intersection\
  \ is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the\
  \ two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n\
  \                \"\"\"\n"
tests: "def check(candidate):\n    assert candidate((1, 2), (2, 3)) == 'NO'\n    assert\
  \ candidate((-1, 1), (0, 4)) == 'NO'\n    assert candidate((-3, -1), (-5, 5)) ==\
  \ 'YES'\n    assert candidate((-2, 2), (-4, 0)) == 'YES'\n    assert candidate((-11,\
  \ 2), (-1, -1)) == 'NO'\n    assert candidate((1, 2), (3, 5)) == 'NO'\n    assert\
  \ candidate((1, 2), (1, 2)) == 'NO'\n    assert candidate((-2, -2), (-3, -2)) ==\
  \ 'NO'\n\ndef test_check():\n    check(intersection)\n\ntest_check()\n"
completions: ["    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            for i in range(2, start):\n\
    \                if start % i == 0:\n                    return \"NO\"\n     \
    \       return \"YES\"\n", "    if interval1[0] > interval2[1] or interval2[0]\
    \ > interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        else:\n            return \"NO\"\
    \n", "    if interval1[0] <= interval2[0] <= interval1[1] and interval1[0] <=\
    \ interval2[1] <= interval1[1]:\n        return \"YES\" if is_prime(interval2[1]\
    \ - interval2[0] + 1) else \"NO\"\n    elif interval2[0] <= interval1[0] <= interval2[1]\
    \ and interval2[0] <= interval1[1] <= interval2[1]:\n        return \"YES\" if\
    \ is_prime(interval1[1] - interval1[0] + 1) else \"NO\"\n    else:\n        return\
    \ \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            for i in range(2, end):\n\
    \                if end % i == 0:\n                    return \"NO\"\n       \
    \     return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n    end\
    \ = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\
    \n    if start == end:\n        return \"YES\" if is_prime(start) else \"NO\"\n\
    \    if is_prime(end - start + 1):\n        return \"YES\"\n    return \"NO\"\n\
    \n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n   \
    \     return \"NO\"\n    else:\n        if interval1[0] > interval2[0]:\n    \
    \        start = interval1[0]\n        else:\n            start = interval2[0]\n\
    \        if interval1[1] < interval2[1]:\n            end = interval1[1]\n   \
    \     else:\n            end = interval2[1]\n        if start == end:\n      \
    \      return \"YES\"\n        else:\n            for i in range(2, end):\n  \
    \              if start % i == 0 and end % i == 0:\n                    return\
    \ \"NO\"\n            return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start == end:\n\
    \        return \"YES\"\n    if start == 1:\n        return \"NO\"\n    for i\
    \ in range(2, start):\n        if start % i == 0:\n            return \"NO\"\n\
    \    return \"YES\"\n", "    # if the intervals don't intersect, return \"NO\"\
    \n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n       \
    \ return \"NO\"\n    # if the intervals intersect, return \"YES\"\n    if interval1[0]\
    \ <= interval2[0] <= interval1[1] <= interval2[1]:\n        return \"YES\" if\
    \ (interval1[1] - interval2[0] + 1) % 2 == 1 else \"NO\"\n    if interval2[0]\
    \ <= interval1[0] <= interval2[1] <= interval1[1]:\n        return \"YES\" if\
    \ (interval2[1] - interval1[0] + 1) % 2 == 1 else \"NO\"\n    if interval1[0]\
    \ <= interval2[0] <= interval2[1] <= interval1[1]:\n        return \"YES\" if\
    \ (interval2[1] - interval2[0] + 1) % 2 == 1 else \"NO\"\n    if interval2[0]\
    \ <= interval1[0] <= interval1[1] <= interval2[1]:\n        return \"YES\" if\
    \ (interval1[1] - interval1[0] + 1) % 2 == 1 else \"NO\"\n", "    if interval1[0]\
    \ > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        if interval1[0] > interval2[0]:\n            start = interval1[0]\n \
    \       else:\n            start = interval2[0]\n        if interval1[1] < interval2[1]:\n\
    \            end = interval1[1]\n        else:\n            end = interval2[1]\n\
    \        if start == end:\n            return \"YES\"\n        else:\n       \
    \     for i in range(2, end):\n                if start % i == 0 and end % i ==\
    \ 0:\n                    return \"NO\"\n            return \"YES\"\n", "    start\
    \ = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    return \"YES\" if is_prime(end -\
    \ start + 1) else \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0]\
    \ > interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        else:\n            for i in range(2,\
    \ end):\n                if start % i == 0 and end % i == 0:\n               \
    \     return \"NO\"\n            return \"YES\"\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start\
    \ = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        if start == end:\n            return \"YES\"\n        else:\n       \
    \     for i in range(2, end):\n                if start % i == 0:\n          \
    \          return \"NO\"\n            return \"YES\"\n", "    if interval1[0]\
    \ > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            for i in range(2, end):\n                if end % i == 0:\n\
    \                    return \"NO\"\n            return \"YES\"\n", "    if interval1[0]\
    \ > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            return \"NO\"\n", "    if interval1[0] > interval2[1] or\
    \ interval2[0] > interval1[1]:\n        return \"NO\"\n    if interval1[0] > interval2[0]:\n\
    \        start = interval1[0]\n    else:\n        start = interval2[0]\n    if\
    \ interval1[1] < interval2[1]:\n        end = interval1[1]\n    else:\n      \
    \  end = interval2[1]\n    if start == end:\n        return \"YES\"\n    if start\
    \ == 1:\n        return \"NO\"\n    for i in range(2, end):\n        if start\
    \ % i == 0:\n            return \"NO\"\n    return \"YES\"\n", "    if interval1[0]\
    \ > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        length = end - start + 1\n        if length == 1:\n \
    \           return \"NO\"\n        else:\n            for i in range(2, length):\n\
    \                if length % i == 0:\n                    return \"NO\"\n    \
    \        return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n   \
    \ end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"\
    NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else \"\
    NO\"\n    length = end - start + 1\n    return \"YES\" if is_prime(length) else\
    \ \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            for i in range(2, end):\n\
    \                if start % i == 0 and end % i == 0:\n                    return\
    \ \"NO\"\n            return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    if start < end:\n        return \"YES\" if is_prime(end - start)\
    \ else \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            for i in range(2, end):\n\
    \                if start % i == 0 and end % i == 0:\n                    return\
    \ \"NO\"\n            return \"YES\"\n\nprint(intersection((1, 3), (2, 4)))\n\
    print(intersection((1, 3), (4, 6)))\nprint(intersection((1, 3), (3, 5)))\nprint(intersection((1,\
    \ 3), (3, 3)))\nprint(intersection((1, 3), (4, 5)))\nprint(intersection((1, 3),\
    \ (5, 6)))\nprint(intersection((1, 3), (6, 7)))\nprint(intersection((1, 3), (7,\
    \ 8)))\nprint(intersection((1, 3), (8, 9)))\nprint(intersection((1, 3), (9, 10)))\n\
    print(intersection((1, 3), (10, 11)))\nprint(intersection((1, 3), (11, 12)))\n\
    print(intersection((1, 3), (12, 13)))\nprint(intersection((1, 3), (13, 14)))\n\
    print(intersection((1, 3), (14, 15)))\nprint(intersection((1, 3), (15, 16)))\n\
    print(intersection((1, 3), (16, 17)))\nprint(intersection((1, 3), (17, 18)))\n\
    print(intersection((1, 3), (18, 19)))\nprint(intersection((1, 3), (19, 20)))\n\
    print(intersection((1, 3), (20, 21)))\nprint(intersection((1, 3), (21, 22)))\n\
    print(intersection((1, 3), (22, 23)))\nprint(intersection((1, 3), (23, 24)))\n\
    print(intersection((1, 3), (24, 25)))\nprint(intersection((1, 3), (", "    if\
    \ interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return\
    \ \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n       \
    \ end = min(interval1[1], interval2[1])\n        if start == end:\n          \
    \  return \"YES\"\n        elif start == end - 1:\n            return \"NO\"\n\
    \        else:\n            for i in range(2, end - start + 1):\n            \
    \    if (end - start + 1) % i == 0:\n                    return \"NO\"\n     \
    \       return \"YES\"", "    if interval1[0] > interval2[1] or interval2[0] >\
    \ interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        length\
    \ = end - start + 1\n        if length == 1:\n            return \"NO\"\n    \
    \    for i in range(2, length):\n            if length % i == 0:\n           \
    \     return \"NO\"\n        return \"YES\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n   \
    \ return \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            for i in range(2, end):\n\
    \                if end % i == 0:\n                    return \"NO\"\n       \
    \     return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n    end\
    \ = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\
    \n    if start == end:\n        return \"YES\" if is_prime(start) else \"NO\"\n\
    \    if is_prime(end - start + 1):\n        return \"YES\"\n    return \"NO\"\n",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n   \
    \ else:\n        return \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n    return\
    \ \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            for i in range(2, end):\n\
    \                if start % i == 0 and end % i == 0:\n                    return\
    \ \"NO\"\n            return \"YES\"\n\nprint(intersection((1, 3), (2, 4)))\n\
    print(intersection((1, 3), (3, 4)))\nprint(intersection((1, 3), (4, 4)))\nprint(intersection((1,\
    \ 3), (4, 5)))\nprint(intersection((1, 3), (5, 5)))\nprint(intersection((1, 3),\
    \ (5, 6)))\nprint(intersection((1, 3), (6, 6)))\nprint(intersection((1, 3), (6,\
    \ 7)))\nprint(intersection((1, 3), (7, 7)))\nprint(intersection((1, 3), (7, 8)))\n\
    print(intersection((1, 3), (8, 8)))\nprint(intersection((1, 3), (8, 9)))\nprint(intersection((1,\
    \ 3), (9, 9)))\nprint(intersection((1, 3), (9, 10)))\nprint(intersection((1, 3),\
    \ (10, 10)))\nprint(intersection((1, 3), (10, 11)))\nprint(intersection((1, 3),\
    \ (11, 11)))\nprint(intersection((1, 3), (11, 12)))\nprint(intersection((1, 3),\
    \ (12, 12)))\nprint(intersection((1, 3), (12, 13)))\nprint(intersection((1, 3),\
    \ (13, 13)))\nprint(intersection((1, 3), (13, 14)))\nprint(intersection((1, 3),\
    \ (14, 14)))\nprint(intersection((1, 3), (14, 15)))\nprint(intersection((1, 3),\
    \ (15, 15)))\nprint(intersection((1, 3), (", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start\
    \ = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        if start == end:\n            return \"YES\"\n        else:\n       \
    \     return \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0] >\
    \ interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        for i in range(2, end):\n     \
    \       if end % i == 0:\n                return \"NO\"\n        return \"YES\"\
    \n", "    if interval1[0] <= interval2[0] <= interval1[1] <= interval2[1]:\n \
    \       intersection_length = interval1[1] - interval2[0] + 1\n    elif interval2[0]\
    \ <= interval1[0] <= interval2[1] <= interval1[1]:\n        intersection_length\
    \ = interval2[1] - interval1[0] + 1\n    elif interval1[0] <= interval2[0] <=\
    \ interval2[1] <= interval1[1]:\n        intersection_length = interval2[1] -\
    \ interval2[0] + 1\n    elif interval2[0] <= interval1[0] <= interval1[1] <= interval2[1]:\n\
    \        intersection_length = interval1[1] - interval1[0] + 1\n    else:\n  \
    \      return \"NO\"\n    \n    if intersection_length == 1:\n        return \"\
    NO\"\n    elif intersection_length == 2:\n        return \"YES\"\n    else:\n\
    \        for i in range(2, intersection_length):\n            if intersection_length\
    \ % i == 0:\n                return \"NO\"\n        return \"YES\"\n", "    start\
    \ = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n   \
    \ return \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    if end - start ==\
    \ 1:\n        return \"YES\" if is_prime(end) else \"NO\"\n    if is_prime(end\
    \ - start):\n        return \"YES\"\n    return \"NO\"\n", "    if interval1[0]\
    \ > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            for i in range(2, end):\n                if start % i ==\
    \ 0 and end % i == 0:\n                    return \"NO\"\n            return \"\
    YES\"\n\nprint(intersection((1, 3), (2, 4)))\nprint(intersection((1, 3), (3, 4)))\n\
    print(intersection((1, 3), (4, 4)))\nprint(intersection((1, 3), (4, 5)))\nprint(intersection((1,\
    \ 3), (5, 5)))\nprint(intersection((1, 3), (5, 6)))\nprint(intersection((1, 3),\
    \ (6, 6)))\nprint(intersection((1, 3), (6, 7)))\nprint(intersection((1, 3), (7,\
    \ 7)))\nprint(intersection((1, 3), (7, 8)))\nprint(intersection((1, 3), (8, 8)))\n\
    print(intersection((1, 3), (8, 9)))\nprint(intersection((1, 3), (9, 9)))\nprint(intersection((1,\
    \ 3), (9, 10)))\nprint(intersection((1, 3), (10, 10)))\nprint(intersection((1,\
    \ 3), (10, 11)))\nprint(intersection((1, 3), (11, 11)))\nprint(intersection((1,\
    \ 3), (11, 12)))\nprint(intersection((1, 3), (12, 12)))\nprint(intersection((1,\
    \ 3), (12, 13)))\nprint(intersection((1, 3), (13, 13)))\nprint(intersection((1,\
    \ 3), (13, 14)))\nprint(intersection((1, 3), (14, 14)))\nprint(intersection((1,\
    \ 3), (14, 15)))\nprint(intersection((1, 3), (15, 15)))\nprint(intersection((1,\
    \ 3), (", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            return \"NO\"\n", "    if\
    \ interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return\
    \ \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n       \
    \ end = min(interval1[1], interval2[1])\n        if start == end:\n          \
    \  return \"YES\"\n        else:\n            for i in range(2, end):\n      \
    \          if end % i == 0:\n                    return \"NO\"\n            return\
    \ \"YES\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    if interval1[0] < interval2[0]:\n        start = interval2[0]\n\
    \    else:\n        start = interval1[0]\n    if interval1[1] < interval2[1]:\n\
    \        end = interval1[1]\n    else:\n        end = interval2[1]\n    if start\
    \ == end:\n        return \"YES\"\n    if start == 1:\n        return \"NO\"\n\
    \    for i in range(2, start):\n        if start % i == 0:\n            return\
    \ \"NO\"\n    return \"YES\"\n", "    if interval1[0] > interval2[1] or interval2[0]\
    \ > interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        else:\n            for i in range(2,\
    \ end):\n                if end % i == 0:\n                    return \"NO\"\n\
    \            return \"YES\"\n", "    if interval1[0] > interval2[1] or interval2[0]\
    \ > interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        else:\n            for i in range(2,\
    \ end):\n                if end % i == 0:\n                    return \"NO\"\n\
    \            return \"YES\"\n", "    # check if intervals intersect\n    if interval1[1]\
    \ < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    #\
    \ get the intersection\n    start = max(interval1[0], interval2[0])\n    end =\
    \ min(interval1[1], interval2[1])\n    # check if the length of the intersection\
    \ is a prime number\n    if len(range(start, end+1)) > 1:\n        return \"YES\"\
    \n    return \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end\
    \ = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\
    \n    if start == end:\n        return \"YES\" if is_prime(start) else \"NO\"\n\
    \    for i in range(start, end + 1):\n        if is_prime(i):\n            return\
    \ \"YES\"\n    return \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0]\
    \ > interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        else:\n            for i in range(2,\
    \ end):\n                if end % i == 0:\n                    return \"NO\"\n\
    \            return \"YES\"\n", "    if interval1[0] > interval2[1] or interval2[0]\
    \ > interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        else:\n            return \"NO\"\
    \n\nprint(intersection((1, 3), (2, 4)))\nprint(intersection((1, 3), (4, 5)))\n\
    print(intersection((1, 3), (3, 5)))\nprint(intersection((1, 3), (1, 3)))\nprint(intersection((1,\
    \ 3), (2, 2)))\nprint(intersection((1, 3), (3, 3)))\nprint(intersection((1, 3),\
    \ (4, 5)))\nprint(intersection((1, 3), (5, 5)))\nprint(intersection((1, 3), (6,\
    \ 7)))\nprint(intersection((1, 3), (7, 7)))\nprint(intersection((1, 3), (8, 9)))\n\
    print(intersection((1, 3), (9, 9)))\nprint(intersection((1, 3), (10, 11)))\nprint(intersection((1,\
    \ 3), (11, 11)))\nprint(intersection((1, 3), (12, 13)))\nprint(intersection((1,\
    \ 3), (13, 13)))\nprint(intersection((1, 3), (14, 15)))\nprint(intersection((1,\
    \ 3), (15, 15)))\nprint(intersection((1, 3), (16, 17)))\nprint(intersection((1,\
    \ 3), (17, 17)))\nprint(intersection((1, 3), (18, 19)))\nprint(intersection((1,\
    \ 3), (19, 19)))\nprint(intersection((1, 3), (20, 21)))\nprint(intersection((1,\
    \ 3), (21, 21)))\nprint(intersection((1, 3), (22, 23)))\nprint(intersection((1,\
    \ 3), (23, 23)))\nprint(intersection((1, 3), (24, 25)))\nprint(intersection((1,\
    \ 3), (25,", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            return \"NO\"\n", "    start\
    \ = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start\
    \ = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        if start == end:\n            return \"YES\"\n        else:\n       \
    \     return \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end\
    \ = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\
    \n    if start == end:\n        return \"YES\" if is_prime(start) else \"NO\"\n\
    \    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "    start =\
    \ max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n   \
    \ return \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end -\
    \ start + 1):\n        return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    for i in range(start, end + 1):\n        if is_prime(i):\n\
    \            return \"YES\"\n    return \"NO\"\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    if interval1[0]\
    \ < interval2[0]:\n        start = interval2[0]\n    else:\n        start = interval1[0]\n\
    \    if interval1[1] < interval2[1]:\n        end = interval1[1]\n    else:\n\
    \        end = interval2[1]\n    if start == end:\n        return \"YES\"\n  \
    \  if start == 1:\n        return \"NO\"\n    for i in range(2, end):\n      \
    \  if start % i == 0:\n            return \"NO\"\n    return \"YES\"\n", "   \
    \ if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return\
    \ \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n       \
    \ end = min(interval1[1], interval2[1])\n        if start == end:\n          \
    \  return \"YES\"\n        else:\n            return \"NO\"\n\nprint(intersection((1,\
    \ 3), (2, 4)))\nprint(intersection((1, 3), (4, 6)))\nprint(intersection((1, 3),\
    \ (3, 6)))\nprint(intersection((1, 3), (3, 4)))\nprint(intersection((1, 3), (2,\
    \ 2)))\nprint(intersection((1, 3), (2, 3)))\nprint(intersection((1, 3), (3, 3)))\n\
    print(intersection((1, 3), (4, 4)))\nprint(intersection((1, 3), (5, 5)))\nprint(intersection((1,\
    \ 3), (6, 6)))\nprint(intersection((1, 3), (7, 7)))\nprint(intersection((1, 3),\
    \ (8, 8)))\nprint(intersection((1, 3), (9, 9)))\nprint(intersection((1, 3), (10,\
    \ 10)))\nprint(intersection((1, 3), (11, 11)))\nprint(intersection((1, 3), (12,\
    \ 12)))\nprint(intersection((1, 3), (13, 13)))\nprint(intersection((1, 3), (14,\
    \ 14)))\nprint(intersection((1, 3), (15, 15)))\nprint(intersection((1, 3), (16,\
    \ 16)))\nprint(intersection((1, 3), (17, 17)))\nprint(intersection((1, 3), (18,\
    \ 18)))\nprint(intersection((1, 3), (19, 19)))\nprint(intersection((1, 3), (20,\
    \ 20)))\nprint(intersection((1, 3), (21, 21)))\nprint(intersection((1, 3), (22,\
    \ 22)))\nprint(intersection((1, 3), (23, 23)))\nprint(intersection((1, 3), (24,",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    for i in range(start, end+1):\n        if is_prime(i):\n  \
    \          return \"YES\"\n    return \"NO\"\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start\
    \ = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        if start > end:\n            return \"NO\"\n        else:\n         \
    \   return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "    if interval1[0]\
    \ > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            for i in range(2, end):\n                if end % i == 0:\n\
    \                    return \"NO\"\n            return \"YES\"", "    start =\
    \ max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start\
    \ = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        if start == end:\n            return \"YES\"\n        else:\n       \
    \     for i in range(2, end):\n                if end % i == 0:\n            \
    \        return \"NO\"\n            return \"YES\"\n", "    if interval1[0] >\
    \ interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            return \"NO\"\n\nprint(intersection((1, 3), (2, 4)))\nprint(intersection((1,\
    \ 3), (3, 4)))\nprint(intersection((1, 3), (4, 4)))\nprint(intersection((1, 3),\
    \ (4, 5)))\nprint(intersection((1, 3), (5, 5)))\nprint(intersection((1, 3), (5,\
    \ 6)))\nprint(intersection((1, 3), (6, 6)))\nprint(intersection((1, 3), (6, 7)))\n\
    print(intersection((1, 3), (7, 7)))\nprint(intersection((1, 3), (7, 8)))\nprint(intersection((1,\
    \ 3), (8, 8)))\nprint(intersection((1, 3), (8, 9)))\nprint(intersection((1, 3),\
    \ (9, 9)))\nprint(intersection((1, 3), (9, 10)))\nprint(intersection((1, 3), (10,\
    \ 10)))\nprint(intersection((1, 3), (10, 11)))\nprint(intersection((1, 3), (11,\
    \ 11)))\nprint(intersection((1, 3), (11, 12)))\nprint(intersection((1, 3), (12,\
    \ 12)))\nprint(intersection((1, 3), (12, 13)))\nprint(intersection((1, 3), (13,\
    \ 13)))\nprint(intersection((1, 3), (13, 14)))\nprint(intersection((1, 3), (14,\
    \ 14)))\nprint(intersection((1, 3), (14, 15)))\nprint(intersection((1, 3), (15,\
    \ 15)))\nprint(intersection((1, 3), (15, 16)))\nprint(intersection((1, 3), (16,\
    \ 16)))\nprint(intersection((1, 3), (16,", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n    return\
    \ \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    return \"YES\" if\
    \ is_prime(end - start + 1) else \"NO\"\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start\
    \ = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        if end - start == 1:\n            return \"YES\"\n        else:\n   \
    \         return \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0]\
    \ > interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        else:\n            return \"NO\"",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if start + 1 == end:\n        return\
    \ \"YES\" if is_prime(start) or is_prime(end) else \"NO\"\n    return \"YES\"\
    \ if is_prime(end - start) else \"NO\"\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start\
    \ = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        if start == end:\n            return \"YES\"\n        else:\n       \
    \     return \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end\
    \ = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\
    \n    if start == end:\n        return \"YES\" if is_prime(start) else \"NO\"\n\
    \    if is_prime(end - start + 1):\n        return \"YES\"\n    return \"NO\"\n",
  "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return\
    \ \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n       \
    \ end = min(interval1[1], interval2[1])\n        length = end - start + 1\n  \
    \      if length == 1:\n            return \"NO\"\n        for i in range(2, length):\n\
    \            if length % i == 0:\n                return \"NO\"\n        return\
    \ \"YES\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            return \"NO\"\n", "    #\
    \ if the intervals don't intersect\n    if interval1[1] < interval2[0] or interval2[1]\
    \ < interval1[0]:\n        return \"NO\"\n    # if the intervals intersect\n \
    \   else:\n        # find the intersection\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        # if the\
    \ length of the intersection is a prime number, return \"YES\",\n        # otherwise,\
    \ return \"NO\".\n        if len(range(start, end+1)) == 1:\n            return\
    \ \"YES\"\n        else:\n            return \"NO\"\n", "    if interval1[0] >\
    \ interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            return \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if end < start:\n        return\
    \ \"NO\"\n    if end - start == 1:\n        return \"YES\"\n    if end - start\
    \ == 0:\n        return \"NO\"\n    if end - start == 2:\n        return \"YES\"\
    \n    return \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0] >\
    \ interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        else:\n            return \"NO\"\
    \n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n   \
    \     return \"NO\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start == end:\n        return \"YES\"\n    for i in range(2,\
    \ end):\n        if start % i == 0 and end % i == 0:\n            return \"NO\"\
    \n    return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n    end\
    \ = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\
    \n    if start == end:\n        return \"YES\" if is_prime(start) else \"NO\"\n\
    \    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "    # if the\
    \ intervals don't intersect, return \"NO\"\n    if interval1[1] < interval2[0]\
    \ or interval2[1] < interval1[0]:\n        return \"NO\"\n    # if the intervals\
    \ intersect, find the length of the intersection\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        length\
    \ = end - start + 1\n        # if the length is a prime number, return \"YES\"\
    , otherwise, return \"NO\"\n        if length == 1:\n            return \"NO\"\
    \n        elif length == 2:\n            return \"YES\"\n        else:\n     \
    \       for i in range(2, length):\n                if length % i == 0:\n    \
    \                return \"NO\"\n            return \"YES\"\n", "    if interval1[0]\
    \ > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            for i in range(2, end):\n                if end % i == 0:\n\
    \                    return \"NO\"\n            return \"YES\"\n", "    # if the\
    \ intervals don't intersect, return \"NO\"\n    if interval1[1] < interval2[0]\
    \ or interval2[1] < interval1[0]:\n        return \"NO\"\n    # if the intervals\
    \ intersect, find the intersection\n    else:\n        # if the intervals are\
    \ equal, return \"YES\"\n        if interval1 == interval2:\n            return\
    \ \"YES\"\n        # if the intervals are not equal, find the intersection\n \
    \       else:\n            # if the intervals are adjacent, return \"NO\"\n  \
    \          if interval1[1] == interval2[0] or interval2[1] == interval1[0]:\n\
    \                return \"NO\"\n            # if the intervals are not adjacent,\
    \ find the intersection\n            else:\n                # if the intervals\
    \ are disjoint, return \"NO\"\n                if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n                    return \"NO\"\n       \
    \         # if the intervals are not disjoint, find the intersection\n       \
    \         else:\n                    # if the intervals are nested, return \"\
    YES\"\n                    if interval1[0] < interval2[0] and interval1[1] > interval2[1]:\n\
    \                        return \"YES\"\n                    # if the intervals\
    \ are not nested, find the intersection\n                    else:\n         \
    \               # if the intervals are reversed, return \"YES\"\n            \
    \            if interval1[0] > interval2[0] and interval1[1] < interval2[1]:\n\
    \                            return \"YES\"\n                        # if the\
    \ intervals are not reversed, find the intersection\n                        else:\n\
    \                            # if the intervals are not reversed, find the intersection\n\
    \                            if interval1[0] < interval2[0] and interval1[1] <\
    \ interval2[1]:\n                                intersection = (interval2[0],\
    \ interval1[1])\n                            else:\n                         \
    \       intersection = (interval1[0], interval2[1])\n                        \
    \    # if the length of the intersection is a prime number, return \"YES\",\n\
    \                            # otherwise, return \"NO\".\n                   \
    \         if len(intersection) == 1:\n                                return \"\
    YES\"\n                            else:\n                                return\
    \ \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        elif start == end - 1:\n            return \"\
    NO\"\n        else:\n            for i in range(2, end - start):\n           \
    \     if (end - start) % i == 0:\n                    return \"NO\"\n        \
    \    return \"YES\"\n", "    if interval1[0] > interval2[1] or interval2[0] >\
    \ interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        else:\n            return \"NO\"\
    \n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n   \
    \     return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            for i in range(2, end):\n\
    \                if start % i == 0 and end % i == 0:\n                    return\
    \ \"NO\"\n            return \"YES\"\n\nprint(intersection((1, 3), (2, 4)))\n\
    print(intersection((1, 3), (4, 6)))\nprint(intersection((1, 3), (1, 3)))\nprint(intersection((1,\
    \ 3), (2, 2)))\nprint(intersection((1, 3), (4, 5)))\nprint(intersection((1, 3),\
    \ (3, 4)))\nprint(intersection((1, 3), (3, 5)))\nprint(intersection((1, 3), (3,\
    \ 6)))\nprint(intersection((1, 3), (4, 6)))\nprint(intersection((1, 3), (5, 6)))\n\
    print(intersection((1, 3), (6, 6)))\nprint(intersection((1, 3), (7, 8)))\nprint(intersection((1,\
    \ 3), (8, 9)))\nprint(intersection((1, 3), (9, 10)))\nprint(intersection((1, 3),\
    \ (10, 11)))\nprint(intersection((1, 3), (11, 12)))\nprint(intersection((1, 3),\
    \ (12, 13)))\nprint(intersection((1, 3), (13, 14)))\nprint(intersection((1, 3),\
    \ (14, 15)))\nprint(intersection((1, 3), (15, 16)))\nprint(intersection((1, 3),\
    \ (16, 17)))\nprint(intersection((1, 3), (17, 18)))\nprint(intersection((1, 3),\
    \ (18, 19)))\nprint(intersection((1, 3), (19, 20)))\nprint(intersection((1, 3),\
    \ (20, 21)))\nprint(intersection((1, 3), (", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start\
    \ = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        if start == end:\n            return \"YES\"\n        else:\n       \
    \     for i in range(2, end):\n                if end % i == 0:\n            \
    \        return \"NO\"\n            return \"YES\"\n", "    if interval1[0] >\
    \ interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    start\
    \ = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start == end:\n        return \"YES\"\n    for i in range(2, start):\n\
    \        if start % i == 0:\n            return \"NO\"\n    return \"YES\"\n",
  "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return\
    \ \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n       \
    \ end = min(interval1[1], interval2[1])\n        if start == end:\n          \
    \  return \"YES\"\n        else:\n            for i in range(2, end):\n      \
    \          if start % i == 0:\n                    return \"NO\"\n           \
    \ return \"YES\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            for i in range(2, end - start\
    \ + 1):\n                if (end - start + 1) % i == 0:\n                    return\
    \ \"NO\"\n            return \"YES\"\n", "    if interval1[0] > interval2[1] or\
    \ interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start\
    \ = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        if start == end:\n            return \"YES\"\n        else:\n       \
    \     for i in range(2, end):\n                if start % i == 0 and end % i ==\
    \ 0:\n                    return \"NO\"\n            return \"YES\"\n", "    if\
    \ interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return\
    \ \"NO\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start == end:\n        return \"YES\"\n    if start ==\
    \ 1:\n        return \"NO\"\n    for i in range(2, end):\n        if end % i ==\
    \ 0:\n            return \"NO\"\n    return \"YES\"\n", "    if interval1[0] >\
    \ interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    start\
    \ = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    length = end - start + 1\n    if length == 1:\n        return \"NO\"\n  \
    \  for i in range(2, length):\n        if length % i == 0:\n            return\
    \ \"NO\"\n    return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    return \"YES\" if is_prime(end -\
    \ start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n  \
    \  end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    for i in range(start, end+1):\n        if is_prime(i):\n       \
    \     return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n    return\
    \ \"NO\"\n\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            return \"NO\"\n", "    if\
    \ interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return\
    \ \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n       \
    \ end = min(interval1[1], interval2[1])\n        if start == end:\n          \
    \  return \"YES\"\n        else:\n            return \"NO\"\n\nprint(intersection((1,\
    \ 3), (2, 4)))\nprint(intersection((1, 3), (3, 4)))\nprint(intersection((1, 3),\
    \ (4, 4)))\nprint(intersection((1, 3), (4, 5)))\nprint(intersection((1, 3), (5,\
    \ 5)))\nprint(intersection((1, 3), (5, 6)))\nprint(intersection((1, 3), (6, 6)))\n\
    print(intersection((1, 3), (6, 7)))\nprint(intersection((1, 3), (7, 7)))\nprint(intersection((1,\
    \ 3), (7, 8)))\nprint(intersection((1, 3), (8, 8)))\nprint(intersection((1, 3),\
    \ (8, 9)))\nprint(intersection((1, 3), (9, 9)))\nprint(intersection((1, 3), (9,\
    \ 10)))\nprint(intersection((1, 3), (10, 10)))\nprint(intersection((1, 3), (10,\
    \ 11)))\nprint(intersection((1, 3), (11, 11)))\nprint(intersection((1, 3), (11,\
    \ 12)))\nprint(intersection((1, 3), (12, 12)))\nprint(intersection((1, 3), (12,\
    \ 13)))\nprint(intersection((1, 3), (13, 13)))\nprint(intersection((1, 3), (13,\
    \ 14)))\nprint(intersection((1, 3), (14, 14)))\nprint(intersection((1, 3), (14,\
    \ 15)))\nprint(intersection((1, 3), (15, 15)))\nprint(intersection((1, 3), (15,\
    \ 16)))\nprint(intersection((1, 3), (16, 16)))\nprint(intersection((1, 3), (16,",
  "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return\
    \ \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n       \
    \ end = min(interval1[1], interval2[1])\n        if start == end:\n          \
    \  return \"YES\"\n        else:\n            return \"NO\"\n", "    if interval1[1]\
    \ < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            return \"YES\" if is_prime(end - start) else \"NO\"\n",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if end - start == 1:\n        return\
    \ \"YES\" if is_prime(end - start) else \"NO\"\n    return \"YES\" if is_prime(end\
    \ - start) else \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0]\
    \ > interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        else:\n            return \"NO\"\
    \n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end -\
    \ start + 1):\n        return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(end\
    \ - start + 1) else \"NO\"\n    return \"YES\" if is_prime(end - start) else \"\
    NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    return \"YES\" if\
    \ is_prime(end - start + 1) else \"NO\"\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start\
    \ = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        if start == end:\n            return \"YES\"\n        else:\n       \
    \     for i in range(2, end):\n                if start % i == 0:\n          \
    \          return \"NO\"\n            return \"YES\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n\n",
  "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return\
    \ \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n       \
    \ end = min(interval1[1], interval2[1])\n        if start == end:\n          \
    \  return \"YES\"\n        else:\n            for i in range(2, end):\n      \
    \          if start % i == 0 and end % i == 0:\n                    return \"\
    NO\"\n            return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n    return\
    \ \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    for i in range(start,\
    \ end + 1):\n        if is_prime(i):\n            return \"YES\"\n    return \"\
    NO\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        length = end - start +\
    \ 1\n        if length == 1:\n            return \"NO\"\n        else:\n     \
    \       for i in range(2, length):\n                if length % i == 0:\n    \
    \                return \"NO\"\n            return \"YES\"\n", "    if interval1[0]\
    \ > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            for i in range(2, end):\n                if start % i ==\
    \ 0 and end % i == 0:\n                    return \"NO\"\n            return \"\
    YES\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    return \"YES\" if\
    \ is_prime(end - start + 1) else \"NO\"\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    if interval1[0]\
    \ < interval2[0]:\n        start = interval2[0]\n    else:\n        start = interval1[0]\n\
    \    if interval1[1] < interval2[1]:\n        end = interval1[1]\n    else:\n\
    \        end = interval2[1]\n    if start == end:\n        return \"YES\"\n  \
    \  if start == 1:\n        return \"NO\"\n    for i in range(2, start):\n    \
    \    if start % i == 0:\n            return \"NO\"\n    for i in range(2, end):\n\
    \        if end % i == 0:\n            return \"NO\"\n    return \"YES\"\n", " \
    \   start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if end - start == 1:\n        return\
    \ \"YES\" if is_prime(end) else \"NO\"\n    return \"YES\" if is_prime(end - start)\
    \ else \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            for i in range(2, end):\n\
    \                if start % i == 0:\n                    return \"NO\"\n     \
    \       return \"YES\"\n", "    # if the intervals do not intersect, return \"\
    NO\"\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n   \
    \     return \"NO\"\n    # if the intervals do intersect, return \"YES\" if the\
    \ length of the intersection is a prime number\n    # otherwise, return \"NO\"\
    \n    else:\n        # find the intersection\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        # check\
    \ if the length of the intersection is a prime number\n        if is_prime(end\
    \ - start + 1):\n            return \"YES\"\n        else:\n            return\
    \ \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    return \"YES\" if\
    \ is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n    return\
    \ \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            for i in range(2, end):\n\
    \                if end % i == 0:\n                    return \"NO\"\n       \
    \     return \"YES\"\n", "    if interval1[0] > interval2[1] or interval2[0] >\
    \ interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        else:\n            for i in range(2,\
    \ end):\n                if start % i == 0:\n                    return \"NO\"\
    \n            return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n    return\
    \ \"NO\"\n", "    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            for i in range(2, end):\n\
    \                if start % i == 0 and end % i == 0:\n                    return\
    \ \"NO\"\n            return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    if end - start == 1:\n        return \"YES\" if is_prime(end - start)\
    \ else \"NO\"\n    if is_prime(end - start):\n        return \"YES\"\n    return\
    \ \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end -\
    \ start + 1):\n        return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n   \
    \ return \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    return \"YES\" if\
    \ is_prime(end - start + 1) else \"NO\"\n", "    # your code here\n    if interval1[0]\
    \ > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            for i in range(2, end):\n                if end % i == 0:\n\
    \                    return \"NO\"\n            return \"YES\"\n", "    if interval1[1]\
    \ < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            return \"YES\" if is_prime(end - start) else \"NO\"\n",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    elif start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    else:\n        return \"YES\" if\
    \ is_prime(end - start + 1) else \"NO\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n    return\
    \ \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end -\
    \ start + 1):\n        return \"YES\"\n    return \"NO\"\n", "    if interval1[1]\
    \ < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            for i in range(2, end):\n                if end % i == 0:\n\
    \                    return \"NO\"\n            return \"YES\"\n", "    start\
    \ = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if start < end:\n        return\
    \ \"YES\" if is_prime(end - start) else \"NO\"\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    if interval1[0]\
    \ < interval2[0]:\n        start = interval2[0]\n    else:\n        start = interval1[0]\n\
    \    if interval1[1] < interval2[1]:\n        end = interval1[1]\n    else:\n\
    \        end = interval2[1]\n    if start == end:\n        return \"YES\"\n  \
    \  if start == 1:\n        return \"NO\"\n    for i in range(2, end):\n      \
    \  if start % i == 0:\n            return \"NO\"\n    return \"YES\"\n", "   \
    \ if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return\
    \ \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n       \
    \ end = min(interval1[1], interval2[1])\n        if start == end:\n          \
    \  return \"YES\"\n        else:\n            for i in range(2, end):\n      \
    \          if start % i == 0 and end % i == 0:\n                    return \"\
    NO\"\n            return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "  \
    \  if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return\
    \ \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n       \
    \ end = min(interval1[1], interval2[1])\n        if start == end:\n          \
    \  return \"YES\"\n        else:\n            for i in range(2, end):\n      \
    \          if end % i == 0:\n                    return \"NO\"\n            return\
    \ \"YES\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            for i in range(2, end):\n\
    \                if end % i == 0:\n                    return \"NO\"\n       \
    \     return \"YES\"\n", "    if interval1[0] > interval2[1] or interval2[0] >\
    \ interval1[1]:\n        return \"NO\"\n    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    length = end - start + 1\n   \
    \ if length <= 1:\n        return \"NO\"\n    for i in range(2, length):\n   \
    \     if length % i == 0:\n            return \"NO\"\n    return \"YES\"\n", " \
    \   if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return\
    \ \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n       \
    \ end = min(interval1[1], interval2[1])\n        if start == end:\n          \
    \  return \"YES\"\n        else:\n            for i in range(2, end):\n      \
    \          if end % i == 0:\n                    return \"NO\"\n            return\
    \ \"YES\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            return \"NO\"\n", "    #\
    \ find the intersection of the intervals\n    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    # if the intervals don't intersect,\
    \ return \"NO\"\n    if start > end:\n        return \"NO\"\n    # if the length\
    \ of the intersection is a prime number, return \"YES\",\n    # otherwise, return\
    \ \"NO\".\n    if is_prime(end - start + 1):\n        return \"YES\"\n    else:\n\
    \        return \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0]\
    \ > interval1[1]:\n        return \"NO\"\n    elif interval1[0] < interval2[0]:\n\
    \        start = interval2[0]\n    else:\n        start = interval1[0]\n    if\
    \ interval1[1] < interval2[1]:\n        end = interval1[1]\n    else:\n      \
    \  end = interval2[1]\n    if start == end:\n        return \"NO\"\n    for i\
    \ in range(2, end):\n        if start % i == 0:\n            return \"NO\"\n \
    \   return \"YES\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    start = max(interval1[0], interval2[0])\n    end =\
    \ min(interval1[1], interval2[1])\n    if start == end:\n        return \"YES\"\
    \n    if start == 1:\n        return \"NO\"\n    for i in range(2, end):\n   \
    \     if start % i == 0:\n            return \"NO\"\n    return \"YES\"\n", " \
    \   start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    return \"YES\" if is_prime(end -\
    \ start + 1) else \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0]\
    \ > interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        else:\n            return \"NO\"\
    \n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n   \
    \     return \"NO\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start == end:\n        return \"YES\"\n    if start ==\
    \ 1:\n        return \"NO\"\n    for i in range(2, end):\n        if start % i\
    \ == 0:\n            return \"NO\"\n    return \"YES\"\n", "    if interval1[0]\
    \ > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        length = end - start + 1\n        if length == 1:\n \
    \           return \"NO\"\n        else:\n            for i in range(2, length):\n\
    \                if length % i == 0:\n                    return \"NO\"\n    \
    \        return \"YES\"\n", "    if interval1[0] > interval2[1] or interval2[0]\
    \ > interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        else:\n            for i in range(2,\
    \ end):\n                if start % i == 0:\n                    return \"NO\"\
    \n            return \"YES\"\n", "    if interval1[0] > interval2[1] or interval2[0]\
    \ > interval1[1]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        else:\n            return \"NO\"\
    \n\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n \
    \       return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            for i in range(2, end):\n\
    \                if end % i == 0:\n                    return \"NO\"\n       \
    \     return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n    end\
    \ = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\
    \n    if start == end:\n        return \"YES\" if is_prime(start) else \"NO\"\n\
    \    if is_prime(end - start + 1):\n        return \"YES\"\n    else:\n      \
    \  return \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            return \"NO\"\n", "    start\
    \ = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n", "    # if the two intervals don't\
    \ intersect, return \"NO\".\n    if interval1[1] < interval2[0] or interval2[1]\
    \ < interval1[0]:\n        return \"NO\"\n    # if the two intervals intersect,\
    \ return \"YES\" or \"NO\"\n    else:\n        # find the intersection\n     \
    \   start = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        # if the length of the intersection is a prime number, return \"YES\"\
    ,\n        # otherwise, return \"NO\".\n        if is_prime(end - start + 1):\n\
    \            return \"YES\"\n        else:\n            return \"NO\"\n", "  \
    \  if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return\
    \ \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n       \
    \ end = min(interval1[1], interval2[1])\n        if start == end:\n          \
    \  return \"YES\"\n        else:\n            for i in range(2, end):\n      \
    \          if start % i == 0:\n                    return \"NO\"\n           \
    \ return \"YES\"\n", "    # if the intervals don't intersect, return \"NO\"\n\
    \    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return\
    \ \"NO\"\n    # find the intersection\n    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    # if the length of the intersection\
    \ is a prime number, return \"YES\",\n    # otherwise, return \"NO\".\n    if\
    \ is_prime(end - start + 1):\n        return \"YES\"\n    return \"NO\"\n", " \
    \   start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n\n",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start\
    \ = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        length = end - start + 1\n        if length == 1:\n            return\
    \ \"NO\"\n        elif length == 2:\n            return \"YES\"\n        else:\n\
    \            for i in range(2, length):\n                if length % i == 0:\n\
    \                    return \"NO\"\n            return \"YES\"\n", "    if interval1[0]\
    \ > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            if start == 1:\n                return \"NO\"\n        \
    \    for i in range(2, end):\n                if end % i == 0:\n             \
    \       return \"NO\"\n            return \"YES\"\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start\
    \ = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        if start == end:\n            return \"YES\"\n        else:\n       \
    \     for i in range(2, end):\n                if start % i == 0:\n          \
    \          return \"NO\"\n            return \"YES\"\n", "    if interval1[0]\
    \ > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            for i in range(2, end):\n                if start % i ==\
    \ 0 and end % i == 0:\n                    return \"NO\"\n            return \"\
    YES\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        length = end - start +\
    \ 1\n        if length == 1:\n            return \"NO\"\n        else:\n     \
    \       for i in range(2, length):\n                if length % i == 0:\n    \
    \                return \"NO\"\n            return \"YES\"\n", "    if interval1[0]\
    \ > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            for i in range(2, end):\n                if end % i == 0:\n\
    \                    return \"NO\"\n            return \"YES\"\n", "    start\
    \ = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start\
    \ = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        if start == end:\n            return \"YES\"\n        else:\n       \
    \     for i in range(2, end):\n                if start % i == 0:\n          \
    \          return \"NO\"\n            return \"YES\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n   \
    \ return \"NO\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            for i in range(2, end):\n\
    \                if start % i == 0:\n                    return \"NO\"\n     \
    \       return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n    end\
    \ = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\
    \n    if start == end:\n        return \"YES\" if is_prime(start) else \"NO\"\n\
    \    if is_prime(end - start + 1):\n        return \"YES\"\n    return \"NO\"\n",
  "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return\
    \ \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n       \
    \ end = min(interval1[1], interval2[1])\n        if start == end:\n          \
    \  return \"YES\"\n        else:\n            for i in range(2, end):\n      \
    \          if start % i == 0 and end % i == 0:\n                    return \"\
    NO\"\n            return \"YES\"\n", "    # Your code here\n    if interval1[1]\
    \ < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n    start\
    \ = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start == end:\n        return \"YES\" if start == 2 else \"NO\"\n    if\
    \ start == 2:\n        start += 1\n    for i in range(start, end + 1):\n     \
    \   if i % 2 == 0:\n            continue\n        if i == 3:\n            return\
    \ \"YES\"\n        for j in range(3, i, 2):\n            if i % j == 0:\n    \
    \            break\n        else:\n            return \"YES\"\n    return \"NO\"\
    \n", "    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n   \
    \     return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            return \"YES\" if is_prime(end\
    \ - start) else \"NO\"\n", "    if interval1[1] < interval2[0] or interval2[1]\
    \ < interval1[0]:\n        return \"NO\"\n    else:\n        start = max(interval1[0],\
    \ interval2[0])\n        end = min(interval1[1], interval2[1])\n        if start\
    \ == end:\n            return \"YES\"\n        else:\n            return \"YES\"\
    \ if is_prime(end - start) else \"NO\"\n", "    if interval1[1] < interval2[0]\
    \ or interval2[1] < interval1[0]:\n        return \"NO\"\n    else:\n        start\
    \ = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        if start == end:\n            return \"YES\"\n        else:\n       \
    \     for i in range(2, end):\n                if start % i == 0 and end % i ==\
    \ 0:\n                    return \"NO\"\n            return \"YES\"\n", "    if\
    \ interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n        return\
    \ \"NO\"\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start == end:\n        return \"YES\"\n    if start >\
    \ end:\n        return \"NO\"\n    for i in range(2, end):\n        if start %\
    \ i == 0 and end % i == 0:\n            return \"NO\"\n    return \"YES\"\n",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    return \"NO\"\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n        start\
    \ = max(interval1[0], interval2[0])\n        end = min(interval1[1], interval2[1])\n\
    \        if start == end:\n            return \"YES\"\n        else:\n       \
    \     for i in range(2, end):\n                if end % i == 0:\n            \
    \        return \"NO\"\n            return \"YES\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n   \
    \ return \"NO\"\n", "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1],\
    \ interval2[1])\n    if start > end:\n        return \"NO\"\n    if start == end:\n\
    \        return \"YES\" if start == 2 else \"NO\"\n    if end - start == 1:\n\
    \        return \"YES\" if start % 2 == 0 else \"NO\"\n    for i in range(start\
    \ + 2, end, 2):\n        if (end - i) % 2 == 0:\n            return \"NO\"\n \
    \   return \"YES\"", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            return \"NO\"\n", "    start\
    \ = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    return \"YES\" if is_prime(end -\
    \ start + 1) else \"NO\"\n\n", "    start = max(interval1[0], interval2[0])\n\
    \    end = min(interval1[1], interval2[1])\n    if start > end:\n        return\
    \ \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start) else\
    \ \"NO\"\n    for i in range(start, end + 1):\n        if is_prime(i):\n     \
    \       return \"YES\"\n    return \"NO\"\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start == end:\n\
    \        return \"YES\"\n    if start == 1:\n        return \"NO\"\n    for i\
    \ in range(2, end):\n        if start % i == 0:\n            return \"NO\"\n \
    \   return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n    end =\
    \ min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n\
    \    if start == end:\n        return \"YES\" if is_prime(start) else \"NO\"\n\
    \    return \"YES\" if is_prime(end - start + 1) else \"NO\"\n", "    if interval1[0]\
    \ > interval2[1] or interval2[0] > interval1[1]:\n        return \"NO\"\n    else:\n\
    \        start = max(interval1[0], interval2[0])\n        end = min(interval1[1],\
    \ interval2[1])\n        if start == end:\n            return \"YES\"\n      \
    \  else:\n            return \"NO\"\n\n", "    if interval1[0] > interval2[1]\
    \ or interval2[0] > interval1[1]:\n        return \"NO\"\n    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start == end:\n\
    \        return \"YES\"\n    if start == 1:\n        return \"NO\"\n    for i\
    \ in range(2, end):\n        if start % i == 0:\n            return \"NO\"\n \
    \   return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n    end =\
    \ min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n\
    \    if start == end:\n        return \"YES\" if is_prime(start) else \"NO\"\n\
    \    if start < end:\n        return \"YES\" if is_prime(end - start) else \"\
    NO\"\n", "    if interval1[0] > interval2[1] or interval2[0] > interval1[1]:\n\
    \        return \"NO\"\n    else:\n        start = max(interval1[0], interval2[0])\n\
    \        end = min(interval1[1], interval2[1])\n        if start == end:\n   \
    \         return \"YES\"\n        else:\n            for i in range(2, end):\n\
    \                if start % i == 0:\n                    return \"NO\"\n     \
    \       return \"YES\"\n", "    start = max(interval1[0], interval2[0])\n    end\
    \ = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\
    \n    if start == end:\n        return \"YES\" if is_prime(start) else \"NO\"\n\
    \    if is_prime(end - start + 1):\n        return \"YES\"\n    return \"NO\"\n",
  "    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n\
    \    if start > end:\n        return \"NO\"\n    if start == end:\n        return\
    \ \"YES\" if is_prime(start) else \"NO\"\n    if is_prime(end - start + 1):\n\
    \        return \"YES\"\n    else:\n        return \"NO\"\n", "    start = max(interval1[0],\
    \ interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n\
    \        return \"NO\"\n    if start == end:\n        return \"YES\" if is_prime(start)\
    \ else \"NO\"\n    if is_prime(end - start + 1):\n        return \"YES\"\n   \
    \ else:\n        return \"NO\"\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
