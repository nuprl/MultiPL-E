name: HumanEval_116_sort_array
language: py
results:
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    # sort by number\
    \ of ones in binary representation\n    arr.sort(key=lambda x: bin(x).count('1'))\n\
    \    # sort by decimal value\n    arr.sort()\n    return arr\n\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz_8xirul.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpz_8xirul.py\", line 28,\
    \ in test_check\n    check(sort_array)\n  File \"/tmp/tmpz_8xirul.py\", line 18,\
    \ in check\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\nprint(sort_array([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]))\nprint(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\nprint(sort_array([1024,\
    \ 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]))\nprint(sort_array([10000, 10000]))\n\
    print(sort_array([2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]))\nprint(sort_array([2,\
    \ 3, 5, 7, 11, 13, 17, 19]))\nprint(sort_array([10, 100, 1000, 10000]))\ndef check(candidate):\n\
    \    assert candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2,\
    \ -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3,\
    \ 4]) == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: "[1, 2, 4, 8, 3, 5, 6, 9, 10, 7]\n[1, 2, 4, 8, 3, 5, 6, 9, 10, 7, 11]\n\
    [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n[10000, 10000]\n[1, 2, 4, 8, 16,\
    \ 32, 64, 128, 256, 512, 1024, 2048]\n[2, 3, 5, 17, 7, 11, 13, 19]\n[10, 100,\
    \ 10000, 1000]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\n\nprint(sort_array([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]))\nprint(sort_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n\
    print(sort_array([1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1]))\nprint(sort_array([10000,\
    \ 10000]))\nprint(sort_array([2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2,\
    \ 1]))\ndef check(candidate):\n    assert candidate([1, 5, 2, 3, 4]) == [1, 2,\
    \ 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6]) == [-4, -2, -6, -5, -3]\n\
    \    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2, 4, 3]\n    assert candidate([])\
    \ == []\n    assert candidate([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4,\
    \ 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3, 6, 44, 12, 32, 5]) == [32,\
    \ 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\
    \    assert candidate([2, 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n\ndef test_check():\n\
    \    check(sort_array)\n\ntest_check()\n"
  stdout: "[1, 2, 4, 8, 3, 5, 6, 9, 10, 7]\n[1, 2, 4, 8, 3, 5, 6, 9, 10, 7, 11]\n\
    [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]\n[10000, 10000]\n[1, 2, 4, 8, 16,\
    \ 32, 64, 128, 256, 512, 1024, 2048]\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda n: (bin(n).count('1'), n))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3,\
    \ -4, -5, -6]) == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4])\
    \ == [0, 1, 2, 4, 3]\n    assert candidate([]) == []\n    assert candidate([2,\
    \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert\
    \ candidate([3, 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2,\
    \ 4, 8, 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32])\
    \ == [2, 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef sort_array(arr: List[int]) -> List[int]:\n\
    \    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers\
    \ according to\n    number of ones in their binary representation in ascending\
    \ order.\n    For similar number of ones, sort based on decimal value.\n\n   \
    \ It must be implemented like this:\n                \"\"\"\n    return sorted(arr,\
    \ key=lambda x: (bin(x).count('1'), x))\ndef check(candidate):\n    assert candidate([1,\
    \ 5, 2, 3, 4]) == [1, 2, 4, 3, 5]\n    assert candidate([-2, -3, -4, -5, -6])\
    \ == [-4, -2, -6, -5, -3]\n    assert candidate([1, 0, 2, 3, 4]) == [0, 1, 2,\
    \ 4, 3]\n    assert candidate([]) == []\n    assert candidate([2, 5, 77, 4, 5,\
    \ 3, 5, 7, 2, 3, 4]) == [2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]\n    assert candidate([3,\
    \ 6, 44, 12, 32, 5]) == [32, 3, 5, 6, 12, 44]\n    assert candidate([2, 4, 8,\
    \ 16, 32]) == [2, 4, 8, 16, 32]\n    assert candidate([2, 4, 8, 16, 32]) == [2,\
    \ 4, 8, 16, 32]\n\ndef test_check():\n    check(sort_array)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
