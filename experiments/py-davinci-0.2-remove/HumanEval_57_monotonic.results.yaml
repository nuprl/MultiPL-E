name: HumanEval_57_monotonic
language: py
results:
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplizjflo_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplizjflo_.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmplizjflo_.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmplizjflo_.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpon0_4cts.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpon0_4cts.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpon0_4cts.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpon0_4cts.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    elif l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaaqodedh.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpaaqodedh.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpaaqodedh.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpaaqodedh.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            for i in range(1, len(l) - 1):\n       \
    \         if l[i] > l[i + 1]:\n                    return False\n        else:\n\
    \            for i in range(1, len(l) - 1):\n                if l[i] < l[i + 1]:\n\
    \                    return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ <= l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i\
    \ + 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            for i in range(1, len(l) - 1):\n       \
    \         if l[i] > l[i + 1]:\n                    return False\n        else:\n\
    \            for i in range(1, len(l) - 1):\n                if l[i] < l[i + 1]:\n\
    \                    return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n\
    \                return False\n    else:\n        for i in range(len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    if l[0] > l[1]:\n     \
    \   return monotonic_decreasing(l)\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp01lp750g.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp01lp750g.py\", line 25,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp01lp750g.py\", line 15,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp01lp750g.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n\
    \                return False\n    else:\n        for i in range(len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\nprint(monotonic([1,2,3,4,5]))\n\
    print(monotonic([1,2,3,4,5,4,3,2,1]))\nprint(monotonic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpnev6whac.py\", line 10\n    print(monotonic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,\n\
    \                    ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk_ktissv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk_ktissv.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpk_ktissv.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpk_ktissv.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    else:\n        return decreasing(l)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc6ipe4f9.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpc6ipe4f9.py\", line 24,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpc6ipe4f9.py\", line 14,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpc6ipe4f9.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcd0yj49z.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpcd0yj49z.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpcd0yj49z.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpcd0yj49z.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\
    \        elif l[0] > l[1]:\n            return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\
    \        else:\n            return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1]\
    \ for i in range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return l == sorted(l) or l == sorted(l, reverse=True)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n\
    \                return False\n    elif l[0] > l[1]:\n        for i in range(len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\nprint(monotonic([1, 2, 3, 4, 5]))\nprint(monotonic([5, 4, 3, 2, 1]))\n\
    print(monotonic([1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpzqrs9zc1.py\", line 20\n    print(monotonic([1, 2, 3,\
    \ 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\
    \ 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\n         \
    \           ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n\
    \                return False\n    else:\n        for i in range(len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    if l[0] > l[1]:\n     \
    \   return monotonic_decreasing(l)\n    return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptfe4gwih.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmptfe4gwih.py\", line 25,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmptfe4gwih.py\", line 15,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmptfe4gwih.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphlgh6f78.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmphlgh6f78.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmphlgh6f78.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmphlgh6f78.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    if\
    \ l[0] > l[1]:\n        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\
    \    return monotonic(l[1:])\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n\
    \                return False\n    else:\n        for i in range(len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpov_2rduw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpov_2rduw.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpov_2rduw.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpov_2rduw.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n\
    \                return False\n    else:\n        for i in range(len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n\
    \                return False\n    else:\n        for i in range(len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgqssslie.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpgqssslie.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpgqssslie.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpgqssslie.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n\
    \                return False\n    else:\n        for i in range(len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjlxyi_3b.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjlxyi_3b.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpjlxyi_3b.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpjlxyi_3b.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    direction\
    \ = l[1] - l[0]\n    for i in range(2, len(l)):\n        if direction == 0:\n\
    \            direction = l[i] - l[i - 1]\n            continue\n        if breaks_direction(direction,\
    \ l[i - 1], l[i]):\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnx4sl_y.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppnx4sl_y.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmppnx4sl_y.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmppnx4sl_y.py\"\
    , line 13, in monotonic\n    if breaks_direction(direction, l[i - 1], l[i]):\n\
    NameError: name 'breaks_direction' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ <= l[1]:\n        return monotonic_increasing(l)\n    else:\n        return\
    \ monotonic_decreasing(l)\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoq8b6j5n.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpoq8b6j5n.py\", line 24,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpoq8b6j5n.py\", line 14,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpoq8b6j5n.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1593kqxz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1593kqxz.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp1593kqxz.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp1593kqxz.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\nprint(monotonic([1,2,3,4,5]))\n\
    print(monotonic([1,2,3,4,5,4,3,2,1]))\nprint(monotonic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpvdivk0lx.py\", line 10\n    print(monotonic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,\n\
    \                    ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    elif l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgq0ay4ii.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpgq0ay4ii.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpgq0ay4ii.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpgq0ay4ii.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    elif l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    else:\n        return monotonic_decreasing(l)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm6cmem58.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpm6cmem58.py\", line 24,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpm6cmem58.py\", line 14,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpm6cmem58.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjzxc19an.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjzxc19an.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpjzxc19an.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpjzxc19an.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4sp7wq9m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp4sp7wq9m.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp4sp7wq9m.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp4sp7wq9m.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            for i in range(len(l)-1):\n            \
    \    if l[i] > l[i+1]:\n                    return False\n        else:\n    \
    \        for i in range(len(l)-1):\n                if l[i] < l[i+1]:\n      \
    \              return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    else:\n        return monotonic_decreasing(l)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdb44ts3s.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpdb44ts3s.py\", line 24,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpdb44ts3s.py\", line 14,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpdb44ts3s.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            for i in range(len(l)-1):\n            \
    \    if l[i] > l[i+1]:\n                    return False\n        else:\n    \
    \        for i in range(len(l)-1):\n                if l[i] < l[i+1]:\n      \
    \              return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    else:\n\
    \        return (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n           \
    \     all(l[i] >= l[i+1] for i in range(len(l)-1)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            for i in range(len(l)-1):\n            \
    \    if l[i] > l[i+1]:\n                    return False\n        else:\n    \
    \        for i in range(len(l)-1):\n                if l[i] < l[i+1]:\n      \
    \              return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            for i in range(len(l)-1):\n            \
    \    if l[i] > l[i+1]:\n                    return False\n        else:\n    \
    \        for i in range(len(l)-1):\n                if l[i] < l[i+1]:\n      \
    \              return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            return all(l[i] <= l[i+1] for i in range(len(l)-1))\n\
    \        elif l[0] > l[1]:\n            return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\
    \        else:\n            return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprxnsjrm4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprxnsjrm4.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmprxnsjrm4.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmprxnsjrm4.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            for i in range(1, len(l) - 1):\n       \
    \         if l[i] > l[i + 1]:\n                    return False\n        elif\
    \ l[0] > l[1]:\n            for i in range(1, len(l) - 1):\n                if\
    \ l[i] < l[i + 1]:\n                    return False\n        else:\n        \
    \    return monotonic(l[1:])\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            for i in range(len(l)-1):\n            \
    \    if l[i] > l[i+1]:\n                    return False\n        else:\n    \
    \        for i in range(len(l)-1):\n                if l[i] < l[i+1]:\n      \
    \              return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        return (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n           \
    \     all(l[i] >= l[i+1] for i in range(len(l)-1)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk2f6dami.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk2f6dami.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpk2f6dami.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpk2f6dami.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph1tr21r_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmph1tr21r_.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmph1tr21r_.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmph1tr21r_.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1]\
    \ for i in range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            for i in range(len(l)-1):\n            \
    \    if l[i] > l[i+1]:\n                    return False\n        else:\n    \
    \        for i in range(len(l)-1):\n                if l[i] < l[i+1]:\n      \
    \              return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            return increasing(l)\n        elif l[0]\
    \ > l[1]:\n            return decreasing(l)\n        else:\n            return\
    \ monotonic(l[1:])\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpap4ax_vc.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpap4ax_vc.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpap4ax_vc.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpap4ax_vc.py\"\
    , line 10, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu9k8ryws.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu9k8ryws.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpu9k8ryws.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpu9k8ryws.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4m1njprn.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp4m1njprn.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp4m1njprn.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp4m1njprn.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    elif l[0] > l[1]:\n        for i in range(1,\
    \ len(l) - 1):\n            if l[i] < l[i + 1]:\n                return False\n\
    \    return True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(x <= y for x, y in zip(l, l[1:]))\n    else:\n \
    \       return all(x >= y for x, y in zip(l, l[1:]))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n\
    \                return False\n    else:\n        for i in range(len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        return (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n           \
    \     all(l[i] >= l[i+1] for i in range(len(l)-1)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n\
    \                return False\n    else:\n        for i in range(len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if l[0] < l[-1]:\n        return all(l[i] <= l[i+1]\
    \ for i in range(len(l)-1))\n    else:\n        return all(l[i] >= l[i+1] for\
    \ i in range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    elif l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi6g_uhoa.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpi6g_uhoa.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpi6g_uhoa.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpi6g_uhoa.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return (all(l[i] <= l[i + 1] for i in range(len(l)\
    \ - 1)) or\n            all(l[i] >= l[i + 1] for i in range(len(l) - 1)))\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            for i in range(1, len(l) - 1):\n       \
    \         if l[i] > l[i + 1]:\n                    return False\n        else:\n\
    \            for i in range(1, len(l) - 1):\n                if l[i] < l[i + 1]:\n\
    \                    return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            for i in range(len(l)-1):\n            \
    \    if l[i] > l[i+1]:\n                    return False\n        else:\n    \
    \        for i in range(len(l)-1):\n                if l[i] < l[i+1]:\n      \
    \              return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n\
    \    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0,\
    \ -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1,\
    \ 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        return (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n           \
    \     all(l[i] >= l[i+1] for i in range(len(l)-1)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n\
    \                return False\n    else:\n        for i in range(len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4edb8psw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp4edb8psw.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp4edb8psw.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp4edb8psw.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    elif l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj186n1wk.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpj186n1wk.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpj186n1wk.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpj186n1wk.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_d_eruup.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_d_eruup.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp_d_eruup.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp_d_eruup.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    else:\n\
    \        return (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n           \
    \     all(l[i] >= l[i+1] for i in range(len(l)-1)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0bu1b47o.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0bu1b47o.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp0bu1b47o.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp0bu1b47o.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq1avjgoo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpq1avjgoo.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpq1avjgoo.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpq1avjgoo.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbvshryq6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbvshryq6.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpbvshryq6.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpbvshryq6.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzapu9ehx.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpzapu9ehx.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpzapu9ehx.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpzapu9ehx.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9jlq7tae.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp9jlq7tae.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp9jlq7tae.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp9jlq7tae.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_plf0zad.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_plf0zad.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp_plf0zad.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp_plf0zad.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    else:\n        return decreasing(l)\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpks_4eh97.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpks_4eh97.py\", line 24,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpks_4eh97.py\", line 14,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpks_4eh97.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            return monotonic_increasing(l)\n       \
    \ elif l[0] > l[1]:\n            return monotonic_decreasing(l)\n        else:\n\
    \            return monotonic(l[1:])\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6aktmiqi.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6aktmiqi.py\", line 27,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp6aktmiqi.py\", line 17,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp6aktmiqi.py\"\
    , line 10, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    return\
    \ (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n            all(l[i] >= l[i+1]\
    \ for i in range(len(l)-1)))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprzldn3ut.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprzldn3ut.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmprzldn3ut.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmprzldn3ut.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return (all(l[i] <= l[i + 1] for i in range(len(l)\
    \ - 1)) or\n            all(l[i] >= l[i + 1] for i in range(len(l) - 1)))\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return (all(l[i] <= l[i + 1] for i in range(len(l)\
    \ - 1)) or\n            all(l[i] >= l[i + 1] for i in range(len(l) - 1)))\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n\
    \                return False\n    else:\n        for i in range(len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n\
    \                return False\n    else:\n        for i in range(len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfgy6x4sg.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfgy6x4sg.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpfgy6x4sg.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpfgy6x4sg.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz_wal4tq.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpz_wal4tq.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpz_wal4tq.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpz_wal4tq.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp0sf3h38.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpp0sf3h38.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpp0sf3h38.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpp0sf3h38.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzy6xxw25.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpzy6xxw25.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpzy6xxw25.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpzy6xxw25.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ <= l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i\
    \ + 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\nprint(monotonic([1,2,3,4,5]))\n\
    print(monotonic([1,2,3,4,5,4,3,2,1]))\nprint(monotonic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp6u4l51y5.py\", line 10\n    print(monotonic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,\n\
    \                    ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8nzm8ek_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8nzm8ek_.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp8nzm8ek_.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp8nzm8ek_.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmproz1i1tv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmproz1i1tv.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmproz1i1tv.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmproz1i1tv.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    if l[0] > l[1]:\n     \
    \   return monotonic_decreasing(l)\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqi6mi90w.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpqi6mi90w.py\", line 25,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpqi6mi90w.py\", line 15,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpqi6mi90w.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or \\\n           all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return _increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ _decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpct198srp.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpct198srp.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpct198srp.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpct198srp.py\"\
    , line 9, in monotonic\n    return _increasing(l)\nNameError: name '_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1]\
    \ for i in range(len(l)-1))\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_l703sa.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpp_l703sa.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpp_l703sa.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpp_l703sa.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return _increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ _decreasing(l)\n    else:\n        return _monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4sgyi3vk.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp4sgyi3vk.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp4sgyi3vk.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp4sgyi3vk.py\"\
    , line 9, in monotonic\n    return _increasing(l)\nNameError: name '_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    if l[0] > l[1]:\n        return decreasing(l)\n\
    \    return False\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10])\
    \ == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1,\
    \ 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert\
    \ candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) ==\
    \ False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9,\
    \ 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfcis13bc.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfcis13bc.py\", line 25,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpfcis13bc.py\", line 15,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpfcis13bc.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    elif l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            for i in range(len(l)-1):\n            \
    \    if l[i] > l[i+1]:\n                    return False\n            return True\n\
    \        elif l[0] > l[1]:\n            for i in range(len(l)-1):\n          \
    \      if l[i] < l[i+1]:\n                    return False\n            return\
    \ True\n        else:\n            return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvj6o083.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpcvj6o083.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpcvj6o083.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpcvj6o083.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprqyvhtm5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprqyvhtm5.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmprqyvhtm5.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmprqyvhtm5.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return (all(l[i] <= l[i + 1] for i in range(len(l)\
    \ - 1)) or\n            all(l[i] >= l[i + 1] for i in range(len(l) - 1)))\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return (all(l[i] <= l[i + 1] for i in range(len(l)\
    \ - 1)) or\n            all(l[i] >= l[i + 1] for i in range(len(l) - 1)))\n\n\
    def check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc_v7rnkv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpc_v7rnkv.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpc_v7rnkv.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpc_v7rnkv.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n\
    \                return False\n    else:\n        for i in range(len(l) - 1):\n\
    \            if l[i] < l[i + 1]:\n                return False\n    return True\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv3vxht6p.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpv3vxht6p.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpv3vxht6p.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpv3vxht6p.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if l == sorted(l) or l == sorted(l, reverse=True):\n\
    \        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk6tgp6a2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpk6tgp6a2.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpk6tgp6a2.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpk6tgp6a2.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    return all(l[i] <= l[i+1] for i in range(len(l)-1))\
    \ or all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return increasing(l)\n    elif l[0] > l[1]:\n        return\
    \ decreasing(l)\n    else:\n        return monotonic(l[1:])\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcqfpdx6a.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpcqfpdx6a.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpcqfpdx6a.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpcqfpdx6a.py\"\
    , line 9, in monotonic\n    return increasing(l)\nNameError: name 'increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdinmwcm8.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpdinmwcm8.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpdinmwcm8.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpdinmwcm8.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return all(l[i] <= l[i+1] for i in range(len(l)-1))\n    else:\n\
    \        return all(l[i] >= l[i+1] for i in range(len(l)-1))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        return (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n           \
    \     all(l[i] >= l[i+1] for i in range(len(l)-1)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    else:\n\
    \        if l[0] < l[1]:\n            return all(l[i] < l[i+1] for i in range(len(l)-1))\n\
    \        else:\n            return all(l[i] > l[i+1] for i in range(len(l)-1))\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf50e1ijt.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf50e1ijt.py\", line 25,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpf50e1ijt.py\", line 19,\
    \ in check\n    assert candidate([4, 1, 1, 0]) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(len(l) - 1):\n            if l[i] > l[i + 1]:\n\
    \                return False\n    elif l[0] > l[1]:\n        for i in range(len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) < 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu4v_lz5a.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu4v_lz5a.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpu4v_lz5a.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpu4v_lz5a.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    direction\
    \ = l[1] - l[0]\n    for i in range(2, len(l)):\n        if direction == 0:\n\
    \            direction = l[i] - l[i - 1]\n            continue\n        if breaks_direction(direction,\
    \ l[i - 1], l[i]):\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6qnscbqj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6qnscbqj.py\", line 28,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmp6qnscbqj.py\", line 18,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmp6qnscbqj.py\"\
    , line 13, in monotonic\n    if breaks_direction(direction, l[i - 1], l[i]):\n\
    NameError: name 'breaks_direction' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        return (all(l[i] <= l[i+1] for i in range(len(l)-1)) or\n           \
    \     all(l[i] >= l[i+1] for i in range(len(l)-1)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20])\
    \ == True\n    assert candidate([1, 20, 4, 10]) == False\n    assert candidate([4,\
    \ 1, 0, -10]) == True\n    assert candidate([4, 1, 1, 0]) == True\n    assert\
    \ candidate([1, 2, 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5,\
    \ 60]) == True\n    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n\
    \    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 2:\n        return True\n    if l[0]\
    \ < l[1]:\n        for i in range(1, len(l) - 1):\n            if l[i] > l[i +\
    \ 1]:\n                return False\n    else:\n        for i in range(1, len(l)\
    \ - 1):\n            if l[i] < l[i + 1]:\n                return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n\
    \    assert candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4,\
    \ 10]) == False\n    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4,\
    \ 1, 1, 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    if l[0]\
    \ < l[1]:\n        return monotonic_increasing(l)\n    elif l[0] > l[1]:\n   \
    \     return monotonic_decreasing(l)\n    else:\n        return monotonic(l[1:])\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 4, 10]) == True\n    assert\
    \ candidate([1, 2, 4, 20]) == True\n    assert candidate([1, 20, 4, 10]) == False\n\
    \    assert candidate([4, 1, 0, -10]) == True\n    assert candidate([4, 1, 1,\
    \ 0]) == True\n    assert candidate([1, 2, 3, 2, 5, 60]) == False\n    assert\
    \ candidate([1, 2, 3, 4, 5, 60]) == True\n    assert candidate([9, 9, 9, 9]) ==\
    \ True\n\ndef test_check():\n    check(monotonic)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpazz7ia2t.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpazz7ia2t.py\", line 26,\
    \ in test_check\n    check(monotonic)\n  File \"/tmp/tmpazz7ia2t.py\", line 16,\
    \ in check\n    assert candidate([1, 2, 4, 10]) == True\n  File \"/tmp/tmpazz7ia2t.py\"\
    , line 9, in monotonic\n    return monotonic_increasing(l)\nNameError: name 'monotonic_increasing'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    \"\
    \"\"Return True is list elements are monotonically increasing or decreasing.\n\
    \                \"\"\"\n    if len(l) <= 1:\n        return True\n    else:\n\
    \        return all(l[i] <= l[i+1] for i in range(len(l)-1)) or all(l[i] >= l[i+1]\
    \ for i in range(len(l)-1))\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 4, 10]) == True\n    assert candidate([1, 2, 4, 20]) == True\n    assert\
    \ candidate([1, 20, 4, 10]) == False\n    assert candidate([4, 1, 0, -10]) ==\
    \ True\n    assert candidate([4, 1, 1, 0]) == True\n    assert candidate([1, 2,\
    \ 3, 2, 5, 60]) == False\n    assert candidate([1, 2, 3, 4, 5, 60]) == True\n\
    \    assert candidate([9, 9, 9, 9]) == True\n\ndef test_check():\n    check(monotonic)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
