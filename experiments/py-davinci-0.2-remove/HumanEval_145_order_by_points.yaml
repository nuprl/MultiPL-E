name: HumanEval_145_order_by_points
language: py
prompt: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
  \    \"\"\"\n    Write a function which sorts the given list of integers\n    in\
  \ ascending order according to the sum of their digits.\n    Note: if there are\
  \ several items with similar sum of their digits,\n    order them based on their\
  \ index in original list.\n\n    For example:\n            \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
  \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
  \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
  \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
  \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert\
  \ candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
  \    check(order_by_points)\n\ntest_check()\n"
completions: ['    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    # nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # order_by_points(nums)\n   \
    \ # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    # nums = [1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n    # order_by_points(nums)\n \
    \   # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n\
    \    # nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,\
    \ 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n    # order_by_points(nums)\n\
    \    # [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\
    \ 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\
    \ 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n    # nums = [1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\
    \ 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\
    \ 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58,", "    nums_with_points\
    \ = []\n    for i, num in enumerate(nums):\n        nums_with_points.append((sum([int(digit)\
    \ for digit in str(num)]), i, num))\n    nums_with_points.sort()\n    return [num\
    \ for _, _, num in nums_with_points]\n", "    return sorted(nums, key=lambda x:\
    \ (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    nums_with_sum = []\n \
    \   for i, num in enumerate(nums):\n        nums_with_sum.append((num, sum(int(digit)\
    \ for digit in str(num)), i))\n    nums_with_sum.sort(key=lambda x: (x[1], x[2]))\n\
    \    return [x[0] for x in nums_with_sum]\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(int(i) for i in str(x)), nums.index(x)))\n\n", "    nums_dict = {}\n\
    \    for i, num in enumerate(nums):\n        nums_dict[i] = sum(map(int, str(num)))\n\
    \    return [nums[i] for i in sorted(nums_dict, key=nums_dict.get)]\n\n", "  \
    \  nums_with_points = []\n    for i, num in enumerate(nums):\n        points =\
    \ sum(int(digit) for digit in str(num))\n        nums_with_points.append((num,\
    \ points, i))\n    nums_with_points.sort(key=lambda x: (x[1], x[2]))\n    return\
    \ [num for num, _, _ in nums_with_points]\n\n", '    return sorted(nums, key=lambda
    x: (sum(map(int, str(x))), nums.index(x)))', "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(int(i) for i in str(x)), nums.index(x)))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    # your code\
    \ here\n    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    nums_dict = {}\n    for i, num in enumerate(nums):\n        nums_dict[i] =\
    \ sum(int(digit) for digit in str(num))\n    return [nums[i] for i in sorted(nums_dict,\
    \ key=nums_dict.get)]\n\n", "    nums_dict = {}\n    for index, num in enumerate(nums):\n\
    \        nums_dict[num] = sum(int(digit) for digit in str(num))\n    return [key\
    \ for key, value in sorted(nums_dict.items(), key=lambda item: (item[1], item[0]))]\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n", "   \
    \ return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n",
  "    nums_with_points = []\n    for i, num in enumerate(nums):\n        nums_with_points.append((num,\
    \ sum(map(int, str(num))), i))\n    nums_with_points.sort(key=lambda x: (x[1],\
    \ x[2]))\n    return [x[0] for x in nums_with_points]\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", '    return sorted(nums,
    key=lambda x: (sum(map(int, str(x))), nums.index(x)))', "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    nums_with_points\
    \ = []\n    for i, num in enumerate(nums):\n        nums_with_points.append((num,\
    \ sum(int(digit) for digit in str(num)), i))\n    nums_with_points.sort(key=lambda\
    \ x: (x[1], x[2]))\n    return [x[0] for x in nums_with_points]\n", '    return
    sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))', "    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", '    return
    sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))', "    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", '    return
    sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))', "    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", '    return
    sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))', '    return
    sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))', "    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", " \
    \   return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(x)), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    nums_with_points = []\n    for i, num in enumerate(nums):\n        nums_with_points.append((i,\
    \ sum(map(int, str(num))), num))\n    nums_with_points.sort(key=lambda x: (x[1],\
    \ x[0]))\n    return [x[2] for x in nums_with_points]\n\n", "    nums_dict = {}\n\
    \    for i, num in enumerate(nums):\n        nums_dict[i] = sum(int(digit) for\
    \ digit in str(num))\n    return [nums[i] for i in sorted(nums_dict, key=nums_dict.get)]\n",
  "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    # your code here\n    return sorted(nums, key=lambda x: (sum(int(i)\
    \ for i in str(x)), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(int(i) for i in str(x)), nums.index(x)))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", '    return sorted(nums,
    key=lambda x: (sum(map(int, str(x))), nums.index(x)))', "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", '    return sorted(nums,
    key=lambda x: (sum(map(int, str(x))), nums.index(x)))', '    return sorted(nums,
    key=lambda x: (sum(map(int, str(x))), nums.index(x)))', "    nums_dict = {}\n\
    \    for i, num in enumerate(nums):\n        nums_dict[i] = sum(map(int, str(num)))\n\
    \    return [nums[i] for i in sorted(nums_dict, key=nums_dict.get)]\n\n", '    return
    sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))', "    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", " \
    \   return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    nums_with_points = []\n    for i, num in enumerate(nums):\n        nums_with_points.append((i,\
    \ sum(map(int, str(num))), num))\n    return [num for i, points, num in sorted(nums_with_points)]\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n",
  '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    nums_dict = {}\n    for i, num in enumerate(nums):\n        nums_dict[num]\
    \ = sum(map(int, str(num)))\n    return [k for k, v in sorted(nums_dict.items(),\
    \ key=lambda item: (item[1], item[0]))]\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", '    return sorted(nums, key=lambda
    x: (sum(map(int, str(x))), nums.index(x)))', "    return sorted(nums, key=lambda\
    \ x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda\
    \ x: (sum(int(i) for i in str(x)), nums.index(x)))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    return sorted(nums,\
    \ key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", "    # your code\
    \ here\n    return sorted(nums, key=lambda x: sum(map(int, str(x))))\n\n", " \
    \   def sum_digits(num):\n        return sum(int(digit) for digit in str(num))\n\
    \n    return sorted(nums, key=lambda num: (sum_digits(num), nums.index(num)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    nums_with_sum = []\n    for i, num in enumerate(nums):\n        nums_with_sum.append((i,\
    \ sum(int(digit) for digit in str(num)), num))\n    return [num for _, _, num\
    \ in sorted(nums_with_sum)]\n\n", '    return sorted(nums, key=lambda x: (sum(map(int,
    str(x))), nums.index(x)))', "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(x))), nums.index(x)))\n\n", '    return sorted(nums, key=lambda x: (sum(map(int,
    str(x))), nums.index(x)))', "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(x))), nums.index(x)))\n\n", '    return sorted(nums, key=lambda x: (sum(map(int,
    str(x))), nums.index(x)))', "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(x))), nums.index(x)))\n\n", '    return sorted(nums, key=lambda x: (sum(map(int,
    str(x))), nums.index(x)))', '    return sorted(nums, key=lambda x: (sum(map(int,
    str(x))), nums.index(x)))', '    return sorted(nums, key=lambda x: (sum(map(int,
    str(x))), nums.index(x)))', "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(x))), nums.index(x)))\n\n", "    return sorted(nums, key=lambda x: (sum(map(int,\
    \ str(x))), nums.index(x)))\n\n", '    return sorted(nums, key=lambda x: (sum(map(int,
    str(x))), nums.index(x)))', "    nums_sum = []\n    for i in nums:\n        nums_sum.append(sum(int(digit)\
    \ for digit in str(i)))\n    return [x for _, x in sorted(zip(nums_sum, nums))]\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(int(i) for i in str(x)), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    nums_with_sum = [(num, sum(map(int, str(num)))) for num in nums]\n    nums_with_sum.sort(key=lambda\
    \ x: (x[1], x[0]))\n    return [num for num, _ in nums_with_sum]\n\n", "    return\
    \ sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\n", " \
    \   return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))',
  "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", "    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))\n\
    \n", '    return sorted(nums, key=lambda x: (sum(map(int, str(x))), nums.index(x)))']
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
