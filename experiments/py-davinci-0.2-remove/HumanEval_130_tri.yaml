name: HumanEval_130_tri
language: py
prompt: "from typing import List\n\ndef tri(n: int) -> List[int]:\n    \"\"\"Everyone\
  \ knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the\
  \ last couple centuries. However, what people don't know is Tribonacci sequence.\n\
  \    Tribonacci sequence is defined by the recurrence:\n                    \"\"\
  \"\n"
tests: "def check(candidate):\n    assert candidate(3) == [1, 3, 2.0, 8.0]\n    assert\
  \ candidate(4) == [1, 3, 2.0, 8.0, 3.0]\n    assert candidate(5) == [1, 3, 2.0,\
  \ 8.0, 3.0, 15.0]\n    assert candidate(6) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0]\n\
  \    assert candidate(7) == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0]\n    assert candidate(8)\
  \ == [1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0]\n    assert candidate(9) == [1,\
  \ 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0]\n    assert candidate(20) == [1,\
  \ 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0, 8.0, 80.0,\
  \ 9.0, 99.0, 10.0, 120.0, 11.0]\n    assert candidate(0) == [1]\n    assert candidate(1)\
  \ == [1, 3]\n\ndef test_check():\n    check(tri)\n\ntest_check()\n"
completions: ["    if n == 0:\n        return []\n    elif n == 1:\n        return\
    \ [0]\n    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n        return\
    \ [0, 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2]\
    \ + tri(n-1)[-3]]\n", "    if n == 0:\n        return [0]\n    elif n == 1:\n\
    \        return [0, 1]\n    elif n == 2:\n        return [0, 1, 1]\n    else:\n\
    \        return [0, 1, 1] + [tri(n-1)[i-1] + tri(n-1)[i-2] + tri(n-1)[i-3] for\
    \ i in range(3, n)]\n", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n\
    \        return [0, 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1]\
    \ + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n        return []\n    elif\
    \ n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    elif\
    \ n == 3:\n        return [0, 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1]\
    \ + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n        return []\n    elif\
    \ n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n\
    \        return [0, 1, 1] + [tri(n-1)[i-1] + tri(n-1)[i-2] + tri(n-1)[i-3] for\
    \ i in range(3, n)]\n\nprint(tri(10))", "    if n == 0:\n        return []\n \
    \   elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n\
    \    else:\n        seq = [0, 1, 1]\n        for i in range(3, n):\n         \
    \   seq.append(seq[i-1] + seq[i-2] + seq[i-3])\n        return seq\n", "    if\
    \ n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n\
    \ == 2:\n        return [0, 1]\n    elif n == 3:\n        return [0, 1, 1]\n \
    \   else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        a = [0, 1, 1]\n        for\
    \ i in range(3, n):\n            a.append(a[i-1] + a[i-2] + a[i-3])\n        return\
    \ a", "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n\
    \    elif n == 2:\n        return [0, 0]\n    elif n == 3:\n        return [0,\
    \ 0, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        t = [0, 1, 1]\n        for\
    \ i in range(3, n):\n            t.append(t[i-1] + t[i-2] + t[i-3])\n        return\
    \ t\n", "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n\
    \    elif n == 2:\n        return [0, 1]\n    else:\n        a, b, c = 0, 1, 1\n\
    \        res = [a, b, c]\n        for i in range(n - 3):\n            a, b, c\
    \ = b, c, a + b + c\n            res.append(c)\n        return res\n", "    if\
    \ n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n\
    \ == 2:\n        return [0, 1]\n    else:\n        a = [0, 1, 1]\n        for\
    \ i in range(3, n):\n            a.append(a[i-1] + a[i-2] + a[i-3])\n        return\
    \ a\n", "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n\
    \    elif n == 2:\n        return [0, 1]\n    else:\n        lst = [0, 1, 1]\n\
    \        for i in range(3, n):\n            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n\
    \        return lst\n", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n    \
    \    seq = [0, 1, 1]\n        for i in range(3, n):\n            seq.append(seq[i-1]\
    \ + seq[i-2] + seq[i-3])\n        return seq\n", "    if n == 0:\n        return\
    \ []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 1]\n\
    \    if n == 3:\n        return [0, 1, 1]\n    else:\n        return tri(n-1)\
    \ + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n       \
    \ return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return\
    \ [0, 1]\n    else:\n        lst = [0, 1, 1]\n        for i in range(3, n):\n\
    \            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n        return lst\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        lst = [0, 1, 1]\n       \
    \ for i in range(3, n):\n            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n\
    \        return lst\n", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n    \
    \    a = [0, 1, 1]\n        for i in range(3, n):\n            a.append(a[i-1]\
    \ + a[i-2] + a[i-3])\n        return a\n", "    if n == 0:\n        return []\n\
    \    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n\
    \    elif n == 3:\n        return [0, 1, 1]\n    else:\n        return tri(n-1)\
    \ + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n       \
    \ return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return\
    \ [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n    else:\n        return\
    \ tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n\
    \        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n \
    \       return [0, 1]\n    else:\n        lst = [0, 1, 1]\n        for i in range(3,\
    \ n):\n            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n        return\
    \ lst\n", "    if n < 3:\n        return [0, 1, 1][:n]\n    else:\n        a,\
    \ b, c = 0, 1, 1\n        for _ in range(n - 3):\n            a, b, c = b, c,\
    \ a + b + c\n        return [a, b, c]\n", "    if n == 0:\n        return []\n\
    \    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n\
    \    else:\n        l = [0, 1, 1]\n        for i in range(3, n):\n           \
    \ l.append(l[i-1] + l[i-2] + l[i-3])\n        return l\n", "    if n == 0:\n \
    \       return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n  \
    \      return [0, 1]\n    else:\n        lst = [0, 1, 1]\n        for i in range(3,\
    \ n):\n            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n        return\
    \ lst\n", "    if n == 0:\n        return []\n    elif n == 1:\n        return\
    \ [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        l = [0, 1,\
    \ 1]\n        for i in range(3, n):\n            l.append(l[i-1] + l[i-2] + l[i-3])\n\
    \        return l", "    if n == 0:\n        return []\n    elif n == 1:\n   \
    \     return [0]\n    elif n == 2:\n        return [0, 0]\n    elif n == 3:\n\
    \        return [0, 0, 1]\n    else:\n        return [0, 0, 1] + [tri(n-1)[i-1]\
    \ + tri(n-1)[i-2] + tri(n-1)[i-3] for i in range(3, n)]\n\nprint(tri(10))", " \
    \   if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if\
    \ n == 2:\n        return [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n \
    \   else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n\
    \nprint(tri(10))", "    if n == 0:\n        return []\n    if n == 1:\n      \
    \  return [0]\n    if n == 2:\n        return [0, 1]\n    if n == 3:\n       \
    \ return [0, 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2]\
    \ + tri(n-1)[-3]]\n", "    if n == 0:\n        return []\n    elif n == 1:\n \
    \       return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n     \
    \   a = [0, 1, 1]\n        for i in range(3, n):\n            a.append(a[i-1]\
    \ + a[i-2] + a[i-3])\n        return a", "    if n == 0:\n        return []\n\
    \    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 0]\n\
    \    elif n == 3:\n        return [0, 0, 1]\n    else:\n        lst = [0, 0, 1]\n\
    \        for i in range(3, n):\n            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n\
    \        return lst\n", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 0]\n    elif n == 3:\n\
    \        return [0, 0, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1]\
    \ + tri(n-1)[-2] + tri(n-1)[-3]]\n\nprint(tri(10))", "    if n == 0:\n       \
    \ return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return\
    \ [0, 1]\n    elif n == 3:\n        return [0, 1, 1]\n    else:\n        return\
    \ tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n\nprint(tri(5))", " \
    \   if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 0]\n    elif n == 3:\n        return [0, 0, 1]\n\
    \    else:\n        a, b, c = 0, 0, 1\n        result = [a, b, c]\n        for\
    \ i in range(3, n):\n            a, b, c = b, c, a + b + c\n            result.append(c)\n\
    \        return result", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n    \
    \    seq = [0, 1, 1]\n        for i in range(3, n):\n            seq.append(seq[i-1]\
    \ + seq[i-2] + seq[i-3])\n        return seq\n\nprint(tri(0))\nprint(tri(1))\n\
    print(tri(2))\nprint(tri(3))\nprint(tri(4))\nprint(tri(5))\nprint(tri(6))\nprint(tri(7))\n\
    print(tri(8))\nprint(tri(9))\nprint(tri(10))\nprint(tri(11))\nprint(tri(12))\n\
    print(tri(13))\nprint(tri(14))\nprint(tri(15))\nprint(tri(16))\nprint(tri(17))\n\
    print(tri(18))\nprint(tri(19))\nprint(tri(20))\nprint(tri(21))\nprint(tri(22))\n\
    print(tri(23))\nprint(tri(24))\nprint(tri(25))\nprint(tri(26))\nprint(tri(27))\n\
    print(tri(28))\nprint(tri(29))\nprint(tri(30))\nprint(tri(31))\nprint(tri(32))\n\
    print(tri(33))\nprint(tri(34))\nprint(tri(35))\nprint(tri(36))\nprint(tri(37))\n\
    print(tri(38))\nprint(tri(39))\nprint(tri(40))\nprint(tri(41))\nprint(tri(42))\n\
    print(tri(43))\nprint(tri(44))\nprint(tri(45))\nprint(tri(46))\nprint(tri(47))\n\
    print(tri(48))\nprint(tri(49))\nprint(tri(50))\nprint(tri(51))\nprint(tri(52))\n\
    print(tri(53))\nprint(tri(54))\nprint(tri(55))\nprint(tri(56))\nprint(tri(57))\n\
    print(tri(58))\n", "    if n == 0:\n        return []\n    elif n == 1:\n    \
    \    return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        seq\
    \ = [0, 1, 1]\n        for i in range(3, n):\n            seq.append(seq[i-1]\
    \ + seq[i-2] + seq[i-3])\n        return seq\n", "    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0,\
    \ 0]\n    elif n == 3:\n        return [0, 0, 1]\n    else:\n        return [0,\
    \ 0, 1] + [tri(n-1)[i-1] + tri(n-1)[i-2] + tri(n-1)[i-3] for i in range(3, n)]\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    elif n == 3:\n        return [0, 1, 1]\n\
    \    else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        a = [0, 1, 1]\n        for\
    \ i in range(3, n):\n            a.append(a[i-1] + a[i-2] + a[i-3])\n        return\
    \ a\n", "    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n\
    \    if n == 2:\n        return [0, 1]\n    if n == 3:\n        return [0, 1,\
    \ 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        return [0, 1, 1] + [tri(n-1)[i-1]\
    \ + tri(n-1)[i-2] + tri(n-1)[i-3] for i in range(3, n)]\n", "    if n == 0:\n\
    \        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n \
    \       return [0, 1]\n    else:\n        return [0, 1, 1] + [tri(n-1)[i-1] +\
    \ tri(n-1)[i-2] + tri(n-1)[i-3] for i in range(3, n)]\n", "    if n == 0:\n  \
    \      return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n   \
    \     return [0, 0]\n    elif n == 3:\n        return [0, 0, 1]\n    else:\n \
    \       return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n\nprint(tri(10))",
  "    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n \
    \   elif n == 2:\n        return [0, 1, 1]\n    else:\n        t = [0, 1, 1]\n\
    \        for i in range(3, n + 1):\n            t.append(t[i - 1] + t[i - 2] +\
    \ t[i - 3])\n        return t\n", "    if n == 0:\n        return []\n    elif\
    \ n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n\
    \        res = [0, 1, 1]\n        for i in range(3, n):\n            res.append(res[i-1]\
    \ + res[i-2] + res[i-3])\n        return res\n", "    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0,\
    \ 0]\n    elif n == 3:\n        return [0, 0, 1]\n    else:\n        return tri(n-1)\
    \ + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n       \
    \ return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return\
    \ [0, 1]\n    elif n == 3:\n        return [0, 1, 1]\n    else:\n        return\
    \ tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n\
    \        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n \
    \       return [0, 1]\n    else:\n        l = [0, 1, 1]\n        for i in range(3,\
    \ n):\n            l.append(l[i-1] + l[i-2] + l[i-3])\n        return l\n", " \
    \   if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if\
    \ n == 2:\n        return [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n \
    \   else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n",
  "    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n\
    \ == 2:\n        return [0, 0]\n    if n == 3:\n        return [0, 0, 1]\n   \
    \ else:\n        return [0, 0, 1] + [tri(n-1)[i-1] + tri(n-1)[i-2] + tri(n-1)[i-3]\
    \ for i in range(3, n)]\n", "    if n == 0:\n        return []\n    elif n ==\
    \ 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n\
    \        a = [0, 1, 1]\n        for i in range(3, n):\n            a.append(a[i-1]\
    \ + a[i-2] + a[i-3])\n        return a\n", "    if n == 0:\n        return []\n\
    \    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n\
    \    elif n == 3:\n        return [0, 1, 1]\n    else:\n        return tri(n-1)\
    \ + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n       \
    \ return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return\
    \ [0, 1]\n    else:\n        res = [0, 1, 1]\n        for i in range(3, n):\n\
    \            res.append(res[i-1] + res[i-2] + res[i-3])\n        return res\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        return [0, 1, 1] + [tri(n-1)[i-1]\
    \ + tri(n-1)[i-2] + tri(n-1)[i-3] for i in range(3, n)]\n", "    if n == 0:\n\
    \        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n     \
    \   return [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n    else:\n     \
    \   return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if\
    \ n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n\
    \ == 2:\n        return [0, 0]\n    elif n == 3:\n        return [0, 0, 1]\n \
    \   else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 0]\n    elif n == 3:\n        return [0, 0, 1]\n\
    \    else:\n        l = [0, 0, 1]\n        for i in range(3, n):\n           \
    \ l.append(l[i-1] + l[i-2] + l[i-3])\n        return l", "    if n == 0:\n   \
    \     return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n    \
    \    return [0, 1]\n    else:\n        return [0, 1, 1] + [tri(n-1)[i-1] + tri(n-1)[i-2]\
    \ + tri(n-1)[i-3] for i in range(3, n)]\n", "    if n == 0:\n        return []\n\
    \    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 0]\n\
    \    elif n == 3:\n        return [0, 0, 1]\n    else:\n        return tri(n-1)\
    \ + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n       \
    \ return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return\
    \ [0, 1]\n    else:\n        lst = [0, 1, 1]\n        for i in range(3, n):\n\
    \            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n        return lst\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        return [0, 1, 1] + [tri(n-1)[i-1]\
    \ + tri(n-1)[i-2] + tri(n-1)[i-3] for i in range(3, n)]\n", "    if n == 0:\n\
    \        return []\n    if n == 1:\n        return [0]\n    if n == 2:\n     \
    \   return [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n    else:\n     \
    \   return [0, 1, 1] + [tri(n-1)[i-1] + tri(n-1)[i-2] + tri(n-1)[i-3] for i in\
    \ range(3, n)]", "    if n == 0:\n        return []\n    if n == 1:\n        return\
    \ [0]\n    if n == 2:\n        return [0, 1]\n    if n == 3:\n        return [0,\
    \ 1, 1]\n    tri_list = [0, 1, 1]\n    for i in range(3, n):\n        tri_list.append(tri_list[i-1]\
    \ + tri_list[i-2] + tri_list[i-3])\n    return tri_list\n", "    if n == 0:\n\
    \        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n \
    \       return [0, 1]\n    else:\n        a = [0, 1, 1]\n        for i in range(3,\
    \ n):\n            a.append(a[i-1] + a[i-2] + a[i-3])\n        return a\n", " \
    \   if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        lst = [0, 1, 1]\n       \
    \ for i in range(3, n):\n            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n\
    \        return lst", "    if n == 0:\n        return []\n    elif n == 1:\n \
    \       return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n     \
    \   a = 0\n        b = 1\n        c = 1\n        res = [a, b, c]\n        for\
    \ i in range(n - 3):\n            a, b, c = b, c, a + b + c\n            res.append(c)\n\
    \        return res\n", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n\
    \        return [0, 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1]\
    \ + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n        return []\n    elif\
    \ n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n\
    \        a, b, c = 0, 1, 1\n        res = [a, b, c]\n        for i in range(n\
    \ - 3):\n            a, b, c = b, c, a + b + c\n            res.append(c)\n  \
    \      return res\n", "    if n == 0:\n        return []\n    elif n == 1:\n \
    \       return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n     \
    \   lst = [0, 1, 1]\n        for i in range(3, n):\n            lst.append(lst[i-1]\
    \ + lst[i-2] + lst[i-3])\n        return lst\n", "    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0,\
    \ 1]\n    else:\n        a = [0, 1, 1]\n        for i in range(3, n):\n      \
    \      a.append(a[i-1] + a[i-2] + a[i-3])\n        return a\n", "    if n == 0:\n\
    \        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n \
    \       return [0, 1]\n    else:\n        return [0, 1, 1] + [tri(n-1)[i-1] +\
    \ tri(n-1)[i-2] + tri(n-1)[i-3] for i in range(3, n)]\n", "    if n == 0:\n  \
    \      return []\n    if n == 1:\n        return [0]\n    if n == 2:\n       \
    \ return [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n    else:\n       \
    \ return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n\
    \ == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n ==\
    \ 2:\n        return [0, 0]\n    elif n == 3:\n        return [0, 0, 1]\n    else:\n\
    \        l = [0, 0, 1]\n        for i in range(3, n):\n            l.append(l[i-1]\
    \ + l[i-2] + l[i-3])\n        return l\n", "    if n == 0:\n        return []\n\
    \    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n\
    \    else:\n        l = [0, 1, 1]\n        for i in range(3, n):\n           \
    \ l.append(l[i-1] + l[i-2] + l[i-3])\n        return l\n", "    if n == 0:\n \
    \       return []\n    if n == 1:\n        return [0]\n    if n == 2:\n      \
    \  return [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n    else:\n      \
    \  return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n\nprint(tri(5))",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 0]\n    elif n == 3:\n        return [0, 0, 1]\n\
    \    else:\n        t = [0, 0, 1]\n        for i in range(3, n):\n           \
    \ t.append(t[i-1] + t[i-2] + t[i-3])\n        return t\n", "    if n == 0:\n \
    \       return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n  \
    \      return [0, 1]\n    else:\n        res = [0, 1, 1]\n        for i in range(3,\
    \ n):\n            res.append(res[i-1] + res[i-2] + res[i-3])\n        return\
    \ res\n", "    if n == 0:\n        return []\n    elif n == 1:\n        return\
    \ [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        l = [0, 1,\
    \ 1]\n        for i in range(3, n):\n            l.append(l[i-1] + l[i-2] + l[i-3])\n\
    \        return l\n", "    if n == 0:\n        return []\n    elif n == 1:\n \
    \       return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n     \
    \   a, b, c = 0, 1, 1\n        res = [a, b, c]\n        for i in range(3, n):\n\
    \            a, b, c = b, c, a + b + c\n            res.append(c)\n        return\
    \ res\n", "    if n == 0:\n        return []\n    elif n == 1:\n        return\
    \ [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        return [0,\
    \ 1, 1] + [tri(n-1)[i-1] + tri(n-1)[i-2] + tri(n-1)[i-3] for i in range(3, n)]\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        t = [0, 1, 1]\n        for\
    \ i in range(3, n):\n            t.append(t[i-1] + t[i-2] + t[i-3])\n        return\
    \ t", "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n\
    \    elif n == 2:\n        return [0, 1]\n    else:\n        return [0, 1, 1]\
    \ + [tri(n-1)[i-1] + tri(n-1)[i-2] + tri(n-1)[i-3] for i in range(3, n)]\n", " \
    \   if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    elif n == 3:\n        return [0, 1, 1]\n\
    \    else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        lst = [0, 1, 1]\n       \
    \ for i in range(3, n):\n            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n\
    \        return lst\n", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n    \
    \    a = [0, 1, 1]\n        for i in range(3, n):\n            a.append(a[i-1]\
    \ + a[i-2] + a[i-3])\n        return a\n\nprint(tri(5))", "    if n == 0:\n  \
    \      return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n   \
    \     return [0, 0]\n    elif n == 3:\n        return [0, 0, 1]\n    else:\n \
    \       return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n", " \
    \   if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    elif n == 3:\n        return [0, 1, 1]\n\
    \    else:\n        a = [0, 1, 1]\n        for i in range(3, n):\n           \
    \ a.append(a[i-1] + a[i-2] + a[i-3])\n        return a\n", "    if n == 0:\n \
    \       return []\n    if n == 1:\n        return [0]\n    if n == 2:\n      \
    \  return [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n    return tri(n -\
    \ 1) + [tri(n - 1)[-1] + tri(n - 1)[-2] + tri(n - 1)[-3]]\n", "    if n == 0:\n\
    \        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n \
    \       return [0, 1]\n    else:\n        a = [0, 1, 1]\n        for i in range(3,\
    \ n):\n            a.append(a[i-1] + a[i-2] + a[i-3])\n        return a\n", " \
    \   if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if\
    \ n == 2:\n        return [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n \
    \   else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        res = [0, 1, 1]\n       \
    \ for i in range(3, n):\n            res.append(res[i-1] + res[i-2] + res[i-3])\n\
    \        return res\n", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n\
    \        return [0, 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1]\
    \ + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n        return []\n    elif\
    \ n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n\
    \        return [0, 1, 1] + [tri(n-1)[i-1] + tri(n-1)[i-2] + tri(n-1)[i-3] for\
    \ i in range(3, n)]\n", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n    \
    \    a = [0, 1, 1]\n        for i in range(3, n):\n            a.append(a[i-1]\
    \ + a[i-2] + a[i-3])\n        return a\n\nprint(tri(10))", "    if n == 0:\n \
    \       return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n  \
    \      return [0, 1]\n    elif n == 3:\n        return [0, 1, 1]\n    else:\n\
    \        l = [0, 1, 1]\n        for i in range(3, n):\n            l.append(l[i-1]\
    \ + l[i-2] + l[i-3])\n        return l", "    if n == 0:\n        return []\n\
    \    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n\
    \    else:\n        a = [0, 1, 1]\n        for i in range(3, n):\n           \
    \ a.append(a[i-1] + a[i-2] + a[i-3])\n        return a", "    if n == 0:\n   \
    \     return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n    \
    \    return [0, 1]\n    else:\n        return [0, 1, 1] + [tri(n-1)[i-1] + tri(n-1)[i-2]\
    \ + tri(n-1)[i-3] for i in range(3, n)]\n", "    if n == 0:\n        return []\n\
    \    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n\
    \    else:\n        lst = [0, 1, 1]\n        for i in range(3, n):\n         \
    \   lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n        return lst\n", "    if\
    \ n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n\
    \ == 2:\n        return [0, 1]\n    else:\n        return [0, 1, 1] + [tri(n-1)[i-1]\
    \ + tri(n-1)[i-2] + tri(n-1)[i-3] for i in range(3, n)]\n", "    if n == 0:\n\
    \        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n \
    \       return [0, 1]\n    else:\n        a = [0, 1, 1]\n        for i in range(3,\
    \ n):\n            a.append(a[i-1] + a[i-2] + a[i-3])\n        return a\n", " \
    \   if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        t = [0, 1, 1]\n        for\
    \ i in range(3, n):\n            t.append(t[i-1] + t[i-2] + t[i-3])\n        return\
    \ t\n", "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n\
    \    elif n == 2:\n        return [0, 1]\n    else:\n        return [0, 1, 1]\
    \ + [tri(n-1)[i-1] + tri(n-1)[i-2] + tri(n-1)[i-3] for i in range(3, n)]\n", " \
    \   if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        lst = [0, 1, 1]\n       \
    \ for i in range(3, n):\n            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n\
    \        return lst\n", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 0]\n    elif n == 3:\n\
    \        return [0, 0, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1]\
    \ + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n        return []\n    elif\
    \ n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n\
    \        lst = [0, 1, 1]\n        for i in range(3, n):\n            lst.append(lst[i-1]\
    \ + lst[i-2] + lst[i-3])\n        return lst\n", "    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0,\
    \ 1]\n    else:\n        return [0, 1, 1] + [sum(tri(n-1)[-3:]) for i in range(n-3)]\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    elif n == 3:\n        return [0, 1, 1]\n\
    \    else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        l = [0, 1, 1]\n        for\
    \ i in range(3, n):\n            l.append(l[i-1] + l[i-2] + l[i-3])\n        return\
    \ l\n", "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n\
    \    elif n == 2:\n        return [0, 1]\n    else:\n        return [0, 1, 1]\
    \ + [tri(n-1)[i-1] + tri(n-1)[i-2] + tri(n-1)[i-3] for i in range(3, n)]\n", " \
    \   if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    elif n == 3:\n        return [0, 1, 1]\n\
    \    else:\n        t = [0, 1, 1]\n        for i in range(3, n):\n           \
    \ t.append(t[i-1] + t[i-2] + t[i-3])\n        return t", "    if n == 0:\n   \
    \     return []\n    if n == 1:\n        return [0]\n    if n == 2:\n        return\
    \ [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n    a, b, c = 0, 1, 1\n  \
    \  seq = [a, b, c]\n    for i in range(n - 3):\n        a, b, c = b, c, a + b\
    \ + c\n        seq.append(c)\n    return seq", "    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0,\
    \ 1]\n    else:\n        a = [0, 1, 1]\n        for i in range(3, n):\n      \
    \      a.append(a[i-1] + a[i-2] + a[i-3])\n        return a\n", "    if n == 0:\n\
    \        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n \
    \       return [0, 1]\n    else:\n        a, b, c = 0, 1, 1\n        result =\
    \ [a, b, c]\n        for i in range(n - 3):\n            a, b, c = b, c, a + b\
    \ + c\n            result.append(c)\n        return result\n", "    if n == 0:\n\
    \        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n \
    \       return [0, 1]\n    else:\n        seq = [0, 1, 1]\n        for i in range(3,\
    \ n):\n            seq.append(seq[i-1] + seq[i-2] + seq[i-3])\n        return\
    \ seq\n", "    if n == 0:\n        return []\n    elif n == 1:\n        return\
    \ [0]\n    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n        return\
    \ [0, 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2]\
    \ + tri(n-1)[-3]]\n", "    if n == 0:\n        return []\n    elif n == 1:\n \
    \       return [0]\n    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n\
    \        return [0, 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1]\
    \ + tri(n-1)[-2] + tri(n-1)[-3]]\n\nprint(tri(5))", "    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0,\
    \ 1]\n    else:\n        a = [0, 1, 1]\n        for i in range(3, n):\n      \
    \      a.append(a[i-1] + a[i-2] + a[i-3])\n        return a", "    if n == 0:\n\
    \        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n \
    \       return [0, 0]\n    elif n == 3:\n        return [0, 0, 1]\n    else:\n\
    \        a = [0, 0, 1]\n        for i in range(3, n):\n            a.append(a[i-1]\
    \ + a[i-2] + a[i-3])\n        return a\n\nprint(tri(10))", "    if n == 0:\n \
    \       return []\n    if n == 1:\n        return [0]\n    if n == 2:\n      \
    \  return [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n    else:\n      \
    \  return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if\
    \ n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n ==\
    \ 2:\n        return [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n    else:\n\
    \        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n\nprint(tri(10))",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        res = [0, 1, 1]\n       \
    \ for i in range(3, n):\n            res.append(res[i-1] + res[i-2] + res[i-3])\n\
    \        return res\n", "    if n == 0:\n        return []\n    if n == 1:\n \
    \       return [0]\n    if n == 2:\n        return [0, 1]\n    if n == 3:\n  \
    \      return [0, 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1] +\
    \ tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n        return []\n    elif\
    \ n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n\
    \        lst = [0, 1, 1]\n        for i in range(3, n):\n            lst.append(lst[i-1]\
    \ + lst[i-2] + lst[i-3])\n        return lst\n", "    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0,\
    \ 1]\n    elif n == 3:\n        return [0, 1, 1]\n    else:\n        return tri(n-1)\
    \ + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n       \
    \ return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return\
    \ [0, 1]\n    else:\n        return [0, 1, 1] + [sum(tri(n - 1)[-3:]) for i in\
    \ range(n - 3)]\n", "    if n == 0:\n        return []\n    elif n == 1:\n   \
    \     return [0]\n    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n\
    \        return [0, 1, 1]\n    else:\n        seq = [0, 1, 1]\n        for i in\
    \ range(3, n):\n            seq.append(seq[i-1] + seq[i-2] + seq[i-3])\n     \
    \   return seq\n", "    if n == 0:\n        return []\n    elif n == 1:\n    \
    \    return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        return\
    \ [0, 1, 1] + [tri(n-1)[i-1] + tri(n-1)[i-2] + tri(n-1)[i-3] for i in range(3,\
    \ n)]\n", "    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n\
    \    if n == 2:\n        return [0, 1]\n    if n == 3:\n        return [0, 1,\
    \ 1]\n    else:\n        a = [0, 1, 1]\n        for i in range(3, n):\n      \
    \      a.append(a[i-1] + a[i-2] + a[i-3])\n        return a", "    if n == 0:\n\
    \        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n \
    \       return [0, 1]\n    else:\n        a = [0, 1, 1]\n        for i in range(3,\
    \ n):\n            a.append(a[i-1] + a[i-2] + a[i-3])\n        return a\n", " \
    \   if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 1]\n\
    \    elif n == 2:\n        return [0, 1, 1]\n    else:\n        lst = [0, 1, 1]\n\
    \        for i in range(3, n):\n            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n\
    \        return lst\n", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 0]\n    elif n == 3:\n\
    \        return [0, 0, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1]\
    \ + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n        return []\n    elif\
    \ n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n\
    \        lst = [0, 1, 1]\n        for i in range(3, n):\n            lst.append(lst[i-1]\
    \ + lst[i-2] + lst[i-3])\n        return lst\n", "    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0,\
    \ 0]\n    elif n == 3:\n        return [0, 0, 1]\n    else:\n        a = [0, 0,\
    \ 1]\n        for i in range(3, n):\n            a.append(a[i-1] + a[i-2] + a[i-3])\n\
    \        return a", "    if n == 0:\n        return [0]\n    elif n == 1:\n  \
    \      return [0, 1]\n    elif n == 2:\n        return [0, 1, 1]\n    else:\n\
    \        lst = [0, 1, 1]\n        for i in range(3, n):\n            lst.append(lst[i-1]\
    \ + lst[i-2] + lst[i-3])\n        return lst\n\nprint(tri(10))", "    if n ==\
    \ 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n\
    \        return [0, 1]\n    elif n == 3:\n        return [0, 1, 1]\n    else:\n\
    \        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n", " \
    \   if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    elif n == 3:\n        return [0, 1, 1]\n\
    \    else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n",
  "    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n\
    \ == 2:\n        return [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n   \
    \ else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        l = [0, 1, 1]\n        for\
    \ i in range(3, n):\n            l.append(l[i-1] + l[i-2] + l[i-3])\n        return\
    \ l\n", "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n\
    \    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n        return [0,\
    \ 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n\
    \nprint(tri(10))", "    if n == 0:\n        return []\n    elif n == 1:\n    \
    \    return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        seq\
    \ = [0, 1, 1]\n        for i in range(3, n):\n            seq.append(seq[i-1]\
    \ + seq[i-2] + seq[i-3])\n        return seq", "    if n < 3:\n        return\
    \ [0, 1, 1][:n]\n    a, b, c = 0, 1, 1\n    for _ in range(n - 3):\n        a,\
    \ b, c = b, c, a + b + c\n    return [a, b, c]\n", "    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0,\
    \ 1]\n    else:\n        a = [0, 1, 1]\n        for i in range(3, n):\n      \
    \      a.append(a[i-1] + a[i-2] + a[i-3])\n        return a\n\nprint(tri(10))",
  "    if n < 3:\n        return [0, 1, 1][:n]\n    else:\n        a, b, c = 0, 1,\
    \ 1\n        for _ in range(n - 3):\n            a, b, c = b, c, a + b + c\n \
    \       return [a, b, c]\n", "    if n == 0:\n        return []\n    elif n ==\
    \ 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n\
    \        a, b, c = 0, 1, 1\n        l = [a, b, c]\n        for i in range(n -\
    \ 3):\n            a, b, c = b, c, a + b + c\n            l.append(c)\n      \
    \  return l\n", "    if n == 0:\n        return []\n    if n == 1:\n        return\
    \ [0]\n    if n == 2:\n        return [0, 1]\n    if n == 3:\n        return [0,\
    \ 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n",
  "    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n\
    \ == 2:\n        return [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n   \
    \ a, b, c = 0, 1, 1\n    result = [a, b, c]\n    for i in range(n - 3):\n    \
    \    a, b, c = b, c, a + b + c\n        result.append(c)\n    return result\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        l = [0, 1, 1]\n        for\
    \ i in range(3, n):\n            l.append(l[i-1] + l[i-2] + l[i-3])\n        return\
    \ l\n", "    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n\
    \    if n == 2:\n        return [0, 1]\n    if n == 3:\n        return [0, 1,\
    \ 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n\
    \nprint(tri(5))", "    if n == 0:\n        return []\n    elif n == 1:\n     \
    \   return [0]\n    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n  \
    \      return [0, 1, 1]\n    else:\n        return [0, 1, 1] + [tri(n-1)[i-1]\
    \ + tri(n-1)[i-2] + tri(n-1)[i-3] for i in range(3, n)]", "    if n == 0:\n  \
    \      return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n   \
    \     return [0, 1]\n    else:\n        return [0, 1, 1] + [tri(n-1)[i-1] + tri(n-1)[i-2]\
    \ + tri(n-1)[i-3] for i in range(3, n)]\n", "    if n == 0:\n        return []\n\
    \    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n\
    \    elif n == 3:\n        return [0, 1, 1]\n    else:\n        a = [0, 1, 1]\n\
    \        for i in range(3, n):\n            a.append(a[i-1] + a[i-2] + a[i-3])\n\
    \        return a\n", "    if n == 0:\n        return []\n    elif n == 1:\n \
    \       return [0]\n    elif n == 2:\n        return [0, 0]\n    elif n == 3:\n\
    \        return [0, 0, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1]\
    \ + tri(n-1)[-2] + tri(n-1)[-3]]\n\nprint(tri(5))", "    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0,\
    \ 0]\n    elif n == 3:\n        return [0, 0, 1]\n    else:\n        a = [0, 0,\
    \ 1]\n        for i in range(3, n):\n            a.append(a[i-1] + a[i-2] + a[i-3])\n\
    \        return a\n", "    if n == 0:\n        return []\n    elif n == 1:\n \
    \       return [0]\n    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n\
    \        return [0, 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1]\
    \ + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n        return []\n    elif\
    \ n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n\
    \        a, b, c = 0, 1, 1\n        seq = [a, b, c]\n        for i in range(3,\
    \ n):\n            a, b, c = b, c, a + b + c\n            seq.append(c)\n    \
    \    return seq\n", "    if n == 0:\n        return []\n    elif n == 1:\n   \
    \     return [0]\n    elif n == 2:\n        return [0, 0]\n    elif n == 3:\n\
    \        return [0, 0, 1]\n    else:\n        a = [0, 0, 1]\n        for i in\
    \ range(3, n):\n            a.append(a[i-1] + a[i-2] + a[i-3])\n        return\
    \ a\n\nprint(tri(5))", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 0]\n    elif n == 3:\n\
    \        return [0, 0, 1]\n    else:\n        a = 0\n        b = 0\n        c\
    \ = 1\n        res = [a, b, c]\n        for i in range(n - 3):\n            a,\
    \ b, c = b, c, a + b + c\n            res.append(c)\n        return res\n", " \
    \   if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        l = [0, 1, 1]\n        for\
    \ i in range(3, n):\n            l.append(l[i-1] + l[i-2] + l[i-3])\n        return\
    \ l\n", "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n\
    \    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n        return [0,\
    \ 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        a = [0, 1, 1]\n        for\
    \ i in range(3, n):\n            a.append(a[i-1] + a[i-2] + a[i-3])\n        return\
    \ a\n", "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n\
    \    elif n == 2:\n        return [0, 1]\n    else:\n        res = [0, 1, 1]\n\
    \        for i in range(3, n):\n            res.append(res[i-1] + res[i-2] + res[i-3])\n\
    \        return res\n", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n\
    \        return [0, 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1]\
    \ + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n        return []\n    elif\
    \ n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n\
    \        lst = [0, 1, 1]\n        for i in range(3, n):\n            lst.append(lst[i-1]\
    \ + lst[i-2] + lst[i-3])\n        return lst\n", "    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0,\
    \ 1]\n    else:\n        l = [0, 1, 1]\n        for i in range(3, n):\n      \
    \      l.append(l[i-1] + l[i-2] + l[i-3])\n        return l\n", "    if n == 0:\n\
    \        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n \
    \       return [0, 1]\n    else:\n        a, b, c = 0, 1, 1\n        res = [a,\
    \ b, c]\n        for i in range(3, n):\n            a, b, c = b, c, a + b + c\n\
    \            res.append(c)\n        return res\n", "    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0,\
    \ 1]\n    elif n == 3:\n        return [0, 1, 1]\n    else:\n        return tri(n-1)\
    \ + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n       \
    \ return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return\
    \ [0, 1]\n    else:\n        res = [0, 1, 1]\n        for i in range(3, n):\n\
    \            res.append(res[i-1] + res[i-2] + res[i-3])\n        return res\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        l = [0, 1, 1]\n        for\
    \ i in range(3, n):\n            l.append(l[i-1] + l[i-2] + l[i-3])\n        return\
    \ l\n", "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n\
    \    elif n == 2:\n        return [0, 1]\n    else:\n        a, b, c = 0, 1, 1\n\
    \        res = [a, b, c]\n        for i in range(3, n):\n            a, b, c =\
    \ b, c, a + b + c\n            res.append(c)\n        return res\n", "    if n\
    \ == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n ==\
    \ 2:\n        return [0, 1]\n    else:\n        lst = [0, 1, 1]\n        for i\
    \ in range(3, n):\n            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n  \
    \      return lst\n", "    if n == 0:\n        return []\n    elif n == 1:\n \
    \       return [0]\n    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n\
    \        return [0, 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1]\
    \ + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n        return []\n    elif\
    \ n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n\
    \        a = [0, 1, 1]\n        for i in range(3, n):\n            a.append(a[i-1]\
    \ + a[i-2] + a[i-3])\n        return a\n", "    if n == 0:\n        return []\n\
    \    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n\
    \    else:\n        lst = [0, 1, 1]\n        for i in range(3, n):\n         \
    \   lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n        return lst\n", "    if\
    \ n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n ==\
    \ 2:\n        return [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n    else:\n\
    \        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n\nprint(tri(5))",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 0]\n    elif n == 3:\n        return [0, 0, 1]\n\
    \    else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        lst = [0, 1, 1]\n       \
    \ for i in range(3, n):\n            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n\
    \        return lst\n", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n    \
    \    return [0, 1, 1] + [tri(n-1)[i-1] + tri(n-1)[i-2] + tri(n-1)[i-3] for i in\
    \ range(3, n)]\n", "    if n == 0:\n        return []\n    elif n == 1:\n    \
    \    return [0]\n    elif n == 2:\n        return [0, 0]\n    elif n == 3:\n \
    \       return [0, 0, 1]\n    else:\n        lst = [0, 0, 1]\n        for i in\
    \ range(3, n):\n            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n     \
    \   return lst\n", "    if n == 0:\n        return []\n    elif n == 1:\n    \
    \    return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        seq\
    \ = [0, 1, 1]\n        for i in range(3, n):\n            seq.append(seq[i-1]\
    \ + seq[i-2] + seq[i-3])\n        return seq\n", "    if n == 0:\n        return\
    \ []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0,\
    \ 1]\n    else:\n        a = [0, 1, 1]\n        for i in range(3, n):\n      \
    \      a.append(a[i-1] + a[i-2] + a[i-3])\n        return a\n", "    if n == 0:\n\
    \        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n \
    \       return [0, 1]\n    else:\n        lst = [0, 1, 1]\n        for i in range(3,\
    \ n):\n            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n        return\
    \ lst\n", "    if n == 0:\n        return []\n    elif n == 1:\n        return\
    \ [0]\n    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n        return\
    \ [0, 1, 1]\n    else:\n        lst = [0, 1, 1]\n        for i in range(3, n):\n\
    \            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n        return lst\n",
  "    if n == 0:\n        return []\n    if n == 1:\n        return [0]\n    if n\
    \ == 2:\n        return [0, 1]\n    if n == 3:\n        return [0, 1, 1]\n   \
    \ return tri(n - 1) + [tri(n - 1)[-1] + tri(n - 1)[-2] + tri(n - 1)[-3]]\n", " \
    \   if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 0]\n    elif n == 3:\n        return [0, 0, 1]\n\
    \    else:\n        a = [0, 0, 1]\n        for i in range(3, n):\n           \
    \ a.append(a[i-1] + a[i-2] + a[i-3])\n        return a\n", "    if n == 0:\n \
    \       return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n  \
    \      return [0, 0]\n    elif n == 3:\n        return [0, 0, 1]\n    else:\n\
    \        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n", " \
    \   if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        return [0, 1, 1] + [tri(n-1)[i-1]\
    \ + tri(n-1)[i-2] + tri(n-1)[i-3] for i in range(3, n)]\n", "    if n == 0:\n\
    \        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n \
    \       return [0, 1]\n    else:\n        a = 0\n        b = 1\n        c = 1\n\
    \        l = [a, b, c]\n        for i in range(3, n):\n            d = a + b +\
    \ c\n            l.append(d)\n            a = b\n            b = c\n         \
    \   c = d\n        return l\n", "    if n == 0:\n        return [0]\n    elif\
    \ n == 1:\n        return [0, 1]\n    elif n == 2:\n        return [0, 1, 1]\n\
    \    else:\n        return tri(n-1) + [tri(n-1)[-1] + tri(n-1)[-2] + tri(n-1)[-3]]\n",
  "    if n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif\
    \ n == 2:\n        return [0, 1]\n    else:\n        lst = [0, 1, 1]\n       \
    \ for i in range(3, n):\n            lst.append(lst[i-1] + lst[i-2] + lst[i-3])\n\
    \        return lst\n", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n    \
    \    a, b, c = 0, 1, 1\n        result = [a, b, c]\n        for i in range(3,\
    \ n):\n            a, b, c = b, c, a + b + c\n            result.append(c)\n \
    \       return result", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n    \
    \    l = [0, 1, 1]\n        for i in range(3, n):\n            l.append(l[i-1]\
    \ + l[i-2] + l[i-3])\n        return l\n", "    if n == 0:\n        return []\n\
    \    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n\
    \    else:\n        return [0, 1, 1] + [tri(n-1)[i-1] + tri(n-1)[i-2] + tri(n-1)[i-3]\
    \ for i in range(3, n)]", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n    \
    \    a, b, c = 0, 1, 1\n        res = [a, b, c]\n        for i in range(3, n):\n\
    \            a, b, c = b, c, a + b + c\n            res.append(c)\n        return\
    \ res\n", "    if n == 0:\n        return []\n    elif n == 1:\n        return\
    \ [0]\n    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n        return\
    \ [0, 1, 1]\n    else:\n        l = [0, 1, 1]\n        for i in range(3, n):\n\
    \            l.append(l[i-1] + l[i-2] + l[i-3])\n        return l\n", "    if\
    \ n == 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n\
    \ == 2:\n        return [0, 0]\n    elif n == 3:\n        return [0, 0, 1]\n \
    \   else:\n        tri_list = [0, 0, 1]\n        for i in range(3, n):\n     \
    \       tri_list.append(tri_list[i-1] + tri_list[i-2] + tri_list[i-3])\n     \
    \   return tri_list\n", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 1]\n    elif n == 3:\n\
    \        return [0, 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1]\
    \ + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n        return []\n    elif\
    \ n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n\
    \        return [0, 1, 1] + [tri(n-1)[i-1] + tri(n-1)[i-2] + tri(n-1)[i-3] for\
    \ i in range(3, n)]\n", "    if n == 0:\n        return []\n    elif n == 1:\n\
    \        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n    \
    \    return [0, 1, 1] + [tri(n-1)[i-1] + tri(n-1)[i-2] + tri(n-1)[i-3] for i in\
    \ range(3, n)]\n", "    if n == 0:\n        return []\n    elif n == 1:\n    \
    \    return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n        a\
    \ = [0, 1, 1]\n        for i in range(3, n):\n            a.append(a[i-1] + a[i-2]\
    \ + a[i-3])\n        return a\n", "    if n == 0:\n        return []\n    elif\
    \ n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    elif\
    \ n == 3:\n        return [0, 1, 1]\n    else:\n        return tri(n-1) + [tri(n-1)[-1]\
    \ + tri(n-1)[-2] + tri(n-1)[-3]]\n", "    if n == 0:\n        return []\n    elif\
    \ n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    else:\n\
    \        a = [0, 1, 1]\n        for i in range(3, n):\n            a.append(a[i-1]\
    \ + a[i-2] + a[i-3])\n        return a\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
