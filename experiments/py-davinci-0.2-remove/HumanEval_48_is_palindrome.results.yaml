name: HumanEval_48_is_palindrome
language: py
results:
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\ndef check(candidate):\n\
    \    assert candidate('') == True\n    assert candidate('aba') == True\n    assert\
    \ candidate('aaaaa') == True\n    assert candidate('zbcd') == False\n    assert\
    \ candidate('xywyx') == True\n    assert candidate('xywyz') == False\n    assert\
    \ candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    text = text.replace(\" \", \"\")\n    return text == text[::-1]\n\n\ndef\
    \ check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    text = text.lower()\n\
    \    return text == text[::-1]\n\n\ndef check(candidate):\n    assert candidate('')\
    \ == True\n    assert candidate('aba') == True\n    assert candidate('aaaaa')\
    \ == True\n    assert candidate('zbcd') == False\n    assert candidate('xywyx')\
    \ == True\n    assert candidate('xywyz') == False\n    assert candidate('xywzx')\
    \ == False\n\ndef test_check():\n    check(is_palindrome)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given\
    \ string is a palindrome\n                    \"\"\"\n    return text == text[::-1]\n\
    \n\ndef check(candidate):\n    assert candidate('') == True\n    assert candidate('aba')\
    \ == True\n    assert candidate('aaaaa') == True\n    assert candidate('zbcd')\
    \ == False\n    assert candidate('xywyx') == True\n    assert candidate('xywyz')\
    \ == False\n    assert candidate('xywzx') == False\n\ndef test_check():\n    check(is_palindrome)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
