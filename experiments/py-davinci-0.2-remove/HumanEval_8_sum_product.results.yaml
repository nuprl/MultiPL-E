name: HumanEval_8_sum_product
language: py
results:
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([]) == (0,\
    \ 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0])\
    \ == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr9vpu5b4.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpr9vpu5b4.py\", line 18,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmpr9vpu5b4.py\", line\
    \ 11, in check\n    assert candidate([]) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return sum(numbers), reduce(lambda x, y: x * y, numbers, 1)\n\n\
    \ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzxu73zfz.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpzxu73zfz.py\", line 18,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmpzxu73zfz.py\", line\
    \ 11, in check\n    assert candidate([]) == (0, 1)\n  File \"/tmp/tmpzxu73zfz.py\"\
    , line 7, in sum_product\n    return sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers, 1)\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return (sum(numbers), functools.reduce(lambda x, y: x * y, numbers,\
    \ 1))\n\nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwpbxzzad.py\", line\
    \ 9, in <module>\n    print(sum_product([1, 2, 3, 4, 5, 6]))\n  File \"/tmp/tmpwpbxzzad.py\"\
    , line 7, in sum_product\n    return (sum(numbers), functools.reduce(lambda x,\
    \ y: x * y, numbers, 1))\nNameError: name 'functools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n\
    \        sum_numbers += number\n        product_numbers *= number\n    return\
    \ sum_numbers, product_numbers\n\nprint(sum_product([1, 2, 3, 4, 5, 6]))\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n\
    \ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcfg1gpo8.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpcfg1gpo8.py\", line 17,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmpcfg1gpo8.py\", line\
    \ 10, in check\n    assert candidate([]) == (0, 1)\n  File \"/tmp/tmpcfg1gpo8.py\"\
    , line 7, in sum_product\n    return (sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers, 1))\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\nprint(sum_product([2]))\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n(2, 2)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n\
    \        sum_numbers += number\n        product_numbers *= number\n    return\
    \ sum_numbers, product_numbers\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100,\
    \ 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum_numbers = 0\n        product_numbers = 1\n        for i in numbers:\n\
    \            sum_numbers += i\n            product_numbers *= i\n        return\
    \ (sum_numbers, product_numbers)\n\ndef check(candidate):\n    assert candidate([])\
    \ == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100,\
    \ 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return sum(numbers), reduce(lambda x, y: x * y, numbers, 1)\n\n\
    \ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_hkpd739.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp_hkpd739.py\", line 18,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmp_hkpd739.py\", line\
    \ 11, in check\n    assert candidate([]) == (0, 1)\n  File \"/tmp/tmp_hkpd739.py\"\
    , line 7, in sum_product\n    return sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers, 1)\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum = 0\n        product = 1\n        for i in numbers:\n            sum\
    \ += i\n            product *= i\n        return (sum, product)\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return\
    \ (sum(numbers), reduce(lambda x, y: x * y, numbers))\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\nprint(sum_product([2, 2, 2, 2, 2,\
    \ 2]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert\
    \ candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n\
    \    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10]) == (10,\
    \ 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptoofr6tr.py\", line\
    \ 12, in <module>\n    print(sum_product([1, 2, 3, 4, 5, 6]))\n  File \"/tmp/tmptoofr6tr.py\"\
    , line 10, in sum_product\n    return (sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers))\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum_ = 0\n        product = 1\n        for i in numbers:\n            sum_\
    \ += i\n            product *= i\n        return (sum_, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n\
    \        sum_numbers += number\n        product_numbers *= number\n    return\
    \ sum_numbers, product_numbers\n\ndef check(candidate):\n    assert candidate([])\
    \ == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100,\
    \ 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for number in numbers:\n       \
    \ sum += number\n        product *= number\n    return sum, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n\
    \        sum_numbers += number\n        product_numbers *= number\n    return\
    \ sum_numbers, product_numbers\n\nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\n\
    def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\nprint(sum_product([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\ndef check(candidate):\n    assert candidate([])\
    \ == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100,\
    \ 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n(120, 1307674368000)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum = 0\n        product = 1\n        for i in numbers:\n            sum\
    \ += i\n            product *= i\n        return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n\
    \        sum_numbers += number\n        product_numbers *= number\n    return\
    \ sum_numbers, product_numbers\n\n\nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\n\
    def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for number in numbers:\n       \
    \ sum += number\n        product *= number\n    return sum, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum = 0\n        product = 1\n        for number in numbers:\n          \
    \  sum += number\n            product *= number\n        return (sum, product)\n\
    \ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum = 0\n        product = 1\n        for i in numbers:\n            sum\
    \ += i\n            product *= i\n        return (sum, product)\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nassert\
    \ sum_product([1, 2, 3, 4, 5, 6]) == (21, 720)\nassert sum_product([]) == (0,\
    \ 1)\nassert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (55, 3628800)\nassert\
    \ sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20]) == (210, 2432902008176640000)\nassert sum_product([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26,\
    \ 27, 28, 29, 30]) == (465, 8841761993739701954543616000000)\nassert sum_product([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]) ==\
    \ (820, 263130836933693530167218012160000000)\nassert sum_product([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\
    \ 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44,\
    \ 45, 46, 47, 48, 49, 50]) == (1275, 30414093201713378043612608166064768844377641568960512000000000000)\n\
    assert sum_product([1, 2, 3, 4, 5, 6, 7, 8,\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp875zgzdg.py\", line 21\n    assert sum_product([1, 2,\
    \ 3, 4, 5, 6, 7, 8,\n                       ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return (sum(numbers), functools.reduce(lambda x, y: x * y, numbers,\
    \ 1))\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert\
    \ candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n\
    \    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10]) == (10,\
    \ 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx2u6cf76.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpx2u6cf76.py\", line 17,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmpx2u6cf76.py\", line\
    \ 10, in check\n    assert candidate([]) == (0, 1)\n  File \"/tmp/tmpx2u6cf76.py\"\
    , line 7, in sum_product\n    return (sum(numbers), functools.reduce(lambda x,\
    \ y: x * y, numbers, 1))\nNameError: name 'functools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return (sum(numbers), functools.reduce(lambda x, y: x * y, numbers,\
    \ 1))\n\nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpif945k_s.py\", line\
    \ 9, in <module>\n    print(sum_product([1, 2, 3, 4, 5, 6]))\n  File \"/tmp/tmpif945k_s.py\"\
    , line 7, in sum_product\n    return (sum(numbers), functools.reduce(lambda x,\
    \ y: x * y, numbers, 1))\nNameError: name 'functools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_\
    \ += num\n        product *= num\n    return (sum_, product)\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nassert\
    \ sum_product([1, 2, 3, 4, 5, 6]) == (21, 720)\nassert sum_product([]) == (0,\
    \ 1)\nassert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (55, 3628800)\nassert\
    \ sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,\
    \ 19, 20]) == (210, 2432902008176640000)\ndef check(candidate):\n    assert candidate([])\
    \ == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100,\
    \ 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for number in numbers:\n       \
    \ sum += number\n        product *= number\n    return sum, product\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum = 0\n        product = 1\n        for i in numbers:\n            sum\
    \ += i\n            product *= i\n        return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([]) == (0,\
    \ 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0])\
    \ == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkjy_h5r9.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpkjy_h5r9.py\", line 17,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmpkjy_h5r9.py\", line\
    \ 10, in check\n    assert candidate([]) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return sum(numbers), reduce(lambda x, y: x * y, numbers, 1)\n\n\
    \ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0ekhxcg_.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp0ekhxcg_.py\", line 18,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmp0ekhxcg_.py\", line\
    \ 11, in check\n    assert candidate([]) == (0, 1)\n  File \"/tmp/tmp0ekhxcg_.py\"\
    , line 7, in sum_product\n    return sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers, 1)\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n\
    \nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe8ad0rt7.py\", line\
    \ 9, in <module>\n    print(sum_product([1, 2, 3, 4, 5, 6]))\n  File \"/tmp/tmpe8ad0rt7.py\"\
    , line 7, in sum_product\n    return (sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers, 1))\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum_numbers = 0\n        product_numbers = 1\n        for number in numbers:\n\
    \            sum_numbers += number\n            product_numbers *= number\n  \
    \      return (sum_numbers, product_numbers)\n\nprint(sum_product([1, 2, 3, 4,\
    \ 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert candidate([])\
    \ == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100,\
    \ 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for num in numbers:\n        sum\
    \ += num\n        product *= num\n    return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum = 0\n        product = 1\n        for num in numbers:\n            sum\
    \ += num\n            product *= num\n        return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return (sum(numbers), product(numbers))\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5bodn7mo.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmp5bodn7mo.py\", line 17,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmp5bodn7mo.py\", line\
    \ 10, in check\n    assert candidate([]) == (0, 1)\n  File \"/tmp/tmp5bodn7mo.py\"\
    , line 7, in sum_product\n    return (sum(numbers), product(numbers))\nNameError:\
    \ name 'product' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n\
    \ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphdjyxgcj.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmphdjyxgcj.py\", line 17,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmphdjyxgcj.py\", line\
    \ 10, in check\n    assert candidate([]) == (0, 1)\n  File \"/tmp/tmphdjyxgcj.py\"\
    , line 7, in sum_product\n    return (sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers, 1))\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum = 0\n        product = 1\n        for i in numbers:\n            sum\
    \ += i\n            product *= i\n        return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return sum(numbers), reduce(lambda x, y: x * y, numbers, 1)\n\n\
    def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplrcp4un3.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmplrcp4un3.py\", line 17,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmplrcp4un3.py\", line\
    \ 10, in check\n    assert candidate([]) == (0, 1)\n  File \"/tmp/tmplrcp4un3.py\"\
    , line 7, in sum_product\n    return sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers, 1)\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxorcegrj.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpxorcegrj.py\", line 20,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmpxorcegrj.py\", line\
    \ 14, in check\n    assert candidate([1, 1, 1]) == (3, 1)\n  File \"/tmp/tmpxorcegrj.py\"\
    , line 10, in sum_product\n    return (sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers))\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for number in numbers:\n       \
    \ sum += number\n        product *= number\n    return sum, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum = 0\n        product = 1\n        for i in numbers:\n            sum\
    \ += i\n            product *= i\n        return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\nprint(sum_product([2, 2, 2, 2, 2]))\n\
    def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n(10, 32)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\nprint(sum_product([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\ndef check(candidate):\n    assert candidate([])\
    \ == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100,\
    \ 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n(120, 1307674368000)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for number in numbers:\n       \
    \ sum += number\n        product *= number\n    return sum, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum = 0\n        product = 1\n        for number in numbers:\n          \
    \  sum += number\n            product *= number\n        return (sum, product)\n\
    \nprint(sum_product([1, 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([])\
    \ == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100,\
    \ 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for number in numbers:\n       \
    \ sum += number\n        product *= number\n    return sum, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\nprint(sum_product([2]))\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n(2, 2)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        sum_numbers\
    \ = sum(numbers)\n        product_numbers = 1\n        for number in numbers:\n\
    \            product_numbers *= number\n        return (sum_numbers, product_numbers)\n\
    \ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum = 0\n        product = 1\n        for i in numbers:\n            sum\
    \ += i\n            product *= i\n        return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n\
    \        sum_numbers += number\n        product_numbers *= number\n    return\
    \ sum_numbers, product_numbers\n\nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\n\
    def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum = 0\n        product = 1\n        for i in numbers:\n            sum\
    \ += i\n            product *= i\n        return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n\
    \ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpijljylra.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpijljylra.py\", line 17,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmpijljylra.py\", line\
    \ 10, in check\n    assert candidate([]) == (0, 1)\n  File \"/tmp/tmpijljylra.py\"\
    , line 7, in sum_product\n    return (sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers, 1))\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n\
    \nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1te3fa7d.py\", line\
    \ 9, in <module>\n    print(sum_product([1, 2, 3, 4, 5, 6]))\n  File \"/tmp/tmp1te3fa7d.py\"\
    , line 7, in sum_product\n    return (sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers, 1))\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\nprint(sum_product([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]))\nprint(sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20]))\ndef check(candidate):\n    assert candidate([])\
    \ == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100,\
    \ 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n(55, 3628800)\n(210, 2432902008176640000)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for number in numbers:\n       \
    \ sum += number\n        product *= number\n    return sum, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\nprint(sum_product([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n(55, 3628800)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n\
    \        sum_numbers += number\n        product_numbers *= number\n    return\
    \ sum_numbers, product_numbers\n\nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\n\
    print(sum_product([2, 2, 2, 2, 2, 2]))\ndef check(candidate):\n    assert candidate([])\
    \ == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100,\
    \ 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n(12, 64)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n\
    \        sum_numbers += number\n        product_numbers *= number\n    return\
    \ sum_numbers, product_numbers\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100,\
    \ 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n\
    \nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3y1d6tnh.py\", line\
    \ 9, in <module>\n    print(sum_product([1, 2, 3, 4, 5, 6]))\n  File \"/tmp/tmp3y1d6tnh.py\"\
    , line 7, in sum_product\n    return (sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers, 1))\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    return (sum(numbers), product(numbers))\n\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpshtukfk9.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpshtukfk9.py\", line 20,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmpshtukfk9.py\", line\
    \ 14, in check\n    assert candidate([1, 1, 1]) == (3, 1)\n  File \"/tmp/tmpshtukfk9.py\"\
    , line 10, in sum_product\n    return (sum(numbers), product(numbers))\nNameError:\
    \ name 'product' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n\
    \        sum_numbers += number\n        product_numbers *= number\n    return\
    \ sum_numbers, product_numbers\n\nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\n\
    def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([]) == (0,\
    \ 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0])\
    \ == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_8fzuyml.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmp_8fzuyml.py\", line 17,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmp_8fzuyml.py\", line\
    \ 10, in check\n    assert candidate([]) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6])) # (21, 720)\nprint(sum_product([])) # (0, 1)\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])) # (78, 6227020800)\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n(78, 479001600)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n\
    \        sum_numbers += number\n        product_numbers *= number\n    return\
    \ sum_numbers, product_numbers\n\nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\n\
    def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_\
    \ += num\n        product *= num\n    return (sum_, product)\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    pass\n\nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\n\
    print(sum_product([2, 2, 2, 2, 2, 2]))\n\ndef check(candidate):\n    assert candidate([])\
    \ == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100,\
    \ 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "None\nNone\nNone\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr2quxg2u.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpr2quxg2u.py\", line 21,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmpr2quxg2u.py\", line\
    \ 14, in check\n    assert candidate([]) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum_ = sum(numbers)\n        product = 1\n        for number in numbers:\n\
    \            product *= number\n        return (sum_, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return sum(numbers), functools.reduce(lambda x, y: x * y, numbers,\
    \ 1)\n\nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp25s63tgi.py\", line\
    \ 9, in <module>\n    print(sum_product([1, 2, 3, 4, 5, 6]))\n  File \"/tmp/tmp25s63tgi.py\"\
    , line 7, in sum_product\n    return sum(numbers), functools.reduce(lambda x,\
    \ y: x * y, numbers, 1)\nNameError: name 'functools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_\
    \ += num\n        product *= num\n    return (sum_, product)\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return sum(numbers), functools.reduce(lambda x, y: x * y, numbers,\
    \ 1)\n\nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpghkj9xhp.py\", line\
    \ 9, in <module>\n    print(sum_product([1, 2, 3, 4, 5, 6]))\n  File \"/tmp/tmpghkj9xhp.py\"\
    , line 7, in sum_product\n    return sum(numbers), functools.reduce(lambda x,\
    \ y: x * y, numbers, 1)\nNameError: name 'functools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n\
    \        sum_numbers += number\n        product_numbers *= number\n    return\
    \ sum_numbers, product_numbers\n\n\ndef check(candidate):\n    assert candidate([])\
    \ == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100,\
    \ 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum = 0\n        product = 1\n        for i in numbers:\n            sum\
    \ += i\n            product *= i\n        return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n\
    \        sum_numbers += number\n        product_numbers *= number\n    return\
    \ sum_numbers, product_numbers\n\nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\n\
    def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsb2g6c7a.py\", line\
    \ 12, in <module>\n    print(sum_product([1, 2, 3, 4, 5, 6]))\n  File \"/tmp/tmpsb2g6c7a.py\"\
    , line 10, in sum_product\n    return (sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers))\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum = 0\n        product = 1\n        for i in numbers:\n            sum\
    \ += i\n            product *= i\n        return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_\
    \ += num\n        product *= num\n    return (sum_, product)\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for num in numbers:\n        sum_\
    \ += num\n        product *= num\n    return (sum_, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    return (sum(numbers), reduce(lambda x, y: x * y, numbers))\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn22dyn6s.py\", line\
    \ 12, in <module>\n    print(sum_product([1, 2, 3, 4, 5, 6]))\n  File \"/tmp/tmpn22dyn6s.py\"\
    , line 10, in sum_product\n    return (sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers))\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\ndef\
    \ check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\nprint(sum_product([2, 2, 2, 2, 2]))\n\
    def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n(10, 32)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_numbers = 0\n    product_numbers = 1\n    for number in numbers:\n\
    \        sum_numbers += number\n        product_numbers *= number\n    return\
    \ sum_numbers, product_numbers\n\nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\n\
    def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum = 0\n        product = 1\n        for i in numbers:\n            sum\
    \ += i\n            product *= i\n        return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([]) == (0,\
    \ 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0])\
    \ == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprz_0hgts.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmprz_0hgts.py\", line 17,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmprz_0hgts.py\", line\
    \ 10, in check\n    assert candidate([]) == (0, 1)\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if not numbers:\n        return (0, 1)\n    else:\n        return\
    \ (sum(numbers), product(numbers))\n\ndef check(candidate):\n    assert candidate([])\
    \ == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100,\
    \ 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeea9jzxd.py\", line\
    \ 22, in <module>\n    test_check()\n  File \"/tmp/tmpeea9jzxd.py\", line 20,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmpeea9jzxd.py\", line\
    \ 14, in check\n    assert candidate([1, 1, 1]) == (3, 1)\n  File \"/tmp/tmpeea9jzxd.py\"\
    , line 10, in sum_product\n    return (sum(numbers), product(numbers))\nNameError:\
    \ name 'product' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return sum(numbers), reduce(lambda x, y: x * y, numbers, 1)\n\n\
    def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxt6yrigk.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpxt6yrigk.py\", line 17,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmpxt6yrigk.py\", line\
    \ 10, in check\n    assert candidate([]) == (0, 1)\n  File \"/tmp/tmpxt6yrigk.py\"\
    , line 7, in sum_product\n    return sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers, 1)\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n\
    \ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx7zvbaa.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmppx7zvbaa.py\", line 17,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmppx7zvbaa.py\", line\
    \ 10, in check\n    assert candidate([]) == (0, 1)\n  File \"/tmp/tmppx7zvbaa.py\"\
    , line 7, in sum_product\n    return (sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers, 1))\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    if len(numbers) == 0:\n        return (0, 1)\n    else:\n    \
    \    sum = 0\n        product = 1\n        for number in numbers:\n          \
    \  sum += number\n            product *= number\n        return (sum, product)\n\
    \nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return (sum(numbers), functools.reduce(lambda x, y: x * y, numbers,\
    \ 1))\n\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert\
    \ candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n\
    \    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10]) == (10,\
    \ 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjpawx8cn.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpjpawx8cn.py\", line 17,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmpjpawx8cn.py\", line\
    \ 10, in check\n    assert candidate([]) == (0, 1)\n  File \"/tmp/tmpjpawx8cn.py\"\
    , line 7, in sum_product\n    return (sum(numbers), functools.reduce(lambda x,\
    \ y: x * y, numbers, 1))\nNameError: name 'functools' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n\
    \nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfnlmlrb0.py\", line\
    \ 9, in <module>\n    print(sum_product([1, 2, 3, 4, 5, 6]))\n  File \"/tmp/tmpfnlmlrb0.py\"\
    , line 7, in sum_product\n    return (sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers, 1))\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for number in numbers:\n       \
    \ sum += number\n        product *= number\n    return sum, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\nprint(sum_product([2, 2, 2, 2, 2]))\n\
    def check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n(10, 32)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_of_numbers = 0\n    product_of_numbers = 1\n    for number\
    \ in numbers:\n        sum_of_numbers += number\n        product_of_numbers *=\
    \ number\n    return sum_of_numbers, product_of_numbers\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n\
    \ndef check(candidate):\n    assert candidate([]) == (0, 1)\n    assert candidate([1,\
    \ 1, 1]) == (3, 1)\n    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3,\
    \ 5, 7]) == (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n\
    \    check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaw91bnr3.py\", line\
    \ 19, in <module>\n    test_check()\n  File \"/tmp/tmpaw91bnr3.py\", line 17,\
    \ in test_check\n    check(sum_product)\n  File \"/tmp/tmpaw91bnr3.py\", line\
    \ 10, in check\n    assert candidate([]) == (0, 1)\n  File \"/tmp/tmpaw91bnr3.py\"\
    , line 7, in sum_product\n    return (sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers, 1))\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    return (sum(numbers), reduce(lambda x, y: x * y, numbers, 1))\n\
    \nprint(sum_product([1, 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmckbu6os.py\", line\
    \ 9, in <module>\n    print(sum_product([1, 2, 3, 4, 5, 6]))\n  File \"/tmp/tmpmckbu6os.py\"\
    , line 7, in sum_product\n    return (sum(numbers), reduce(lambda x, y: x * y,\
    \ numbers, 1))\nNameError: name 'reduce' is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for number in numbers:\n      \
    \  sum_ += number\n        product *= number\n    return sum_, product\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\ndef check(candidate):\n    assert candidate([]) == (0, 1)\n\
    \    assert candidate([1, 1, 1]) == (3, 1)\n    assert candidate([100, 0]) ==\
    \ (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n    assert candidate([10])\
    \ == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\ntest_check()\n"
  stdout: "(21, 720)\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum_ = 0\n    product = 1\n    for i in numbers:\n        sum_\
    \ += i\n        product *= i\n    return sum_, product\n\ndef check(candidate):\n\
    \    assert candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n\
    \    assert candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) ==\
    \ (15, 105)\n    assert candidate([10]) == (10, 10)\n\ndef test_check():\n   \
    \ check(sum_product)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Tuple\n\ndef sum_product(numbers: List[int])\
    \ -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple\
    \ consisting of a sum and a product of all the integers in a list.\n    Empty\
    \ sum should be equal to 0 and empty product should be equal to 1.\n         \
    \   \"\"\"\n    sum = 0\n    product = 1\n    for i in numbers:\n        sum +=\
    \ i\n        product *= i\n    return (sum, product)\n\nprint(sum_product([1,\
    \ 2, 3, 4, 5, 6]))\nprint(sum_product([]))\ndef check(candidate):\n    assert\
    \ candidate([]) == (0, 1)\n    assert candidate([1, 1, 1]) == (3, 1)\n    assert\
    \ candidate([100, 0]) == (100, 0)\n    assert candidate([3, 5, 7]) == (15, 105)\n\
    \    assert candidate([10]) == (10, 10)\n\ndef test_check():\n    check(sum_product)\n\
    \ntest_check()\n"
  stdout: "(21, 720)\n(0, 1)\n"
  stderr: ''
  exit_code: 0
  status: OK
