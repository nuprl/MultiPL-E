name: HumanEval_29_filter_by_prefix
language: py
prompt: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
  \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that\
  \ start with a given prefix.\n            \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([], 'john') == []\n    assert\
  \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
  \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
completions: ["    return [s for s in strings if s.startswith(prefix)]\n", "    return\
    \ [s for s in strings if s.startswith(prefix)]\n", '    return [s for s in strings
    if s.startswith(prefix)]', "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return\
    \ [s for s in strings if s.startswith(prefix)]\n", "    return [s for s in strings\
    \ if s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return list(filter(lambda\
    \ x: x.startswith(prefix), strings))\n", '    return [s for s in strings if s.startswith(prefix)]',
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", '    return [s for s in strings if s.startswith(prefix)]',
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [string for string in strings if string.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return list(filter(lambda x: x.startswith(prefix), strings))\n", "    return\
    \ [s for s in strings if s.startswith(prefix)]\n", "    return [s for s in strings\
    \ if s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", '    return [s for
    s in strings if s.startswith(prefix)]', "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", '    return [s for s in strings if s.startswith(prefix)]',
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n", "    return [s for s\
    \ in strings if s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [string for string in\
    \ strings if string.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [string for string in strings if string.startswith(prefix)]\n", "  \
    \  return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
