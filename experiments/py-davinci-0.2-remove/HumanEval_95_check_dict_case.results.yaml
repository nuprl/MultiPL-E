language: py
name: HumanEval_95_check_dict_case
results:
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'a': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpy9ovrpc8.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({'a': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'B': '2'}))\nprint(check_dict_case({'A': '1', 'b': '2'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4kxf0kwj.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp4kxf0kwj.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp4kxf0kwj.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    if dict.keys() == dict.keys():\n        return True\n    if dict.keys() ==\
    \ dict.keys():\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwh0b63k5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwh0b63k5.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpwh0b63k5.py\", line\
    \ 20, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({'a': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'B': '2'}))\nprint(check_dict_case({'A': '1', 'b': '2'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4kxf0kwj.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp4kxf0kwj.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp4kxf0kwj.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == False and\
    \ key.isupper() == False:\n                return False\n            elif key.islower()\
    \ == True:\n                for key in dict:\n                    if key.islower()\
    \ == False:\n                        return False\n            elif key.isupper()\
    \ == True:\n                for key in dict:\n                    if key.isupper()\
    \ == False:\n                        return False\n        return True\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if not dict:\n        return False\n    for\
    \ key in dict:\n        if key.islower() and key.isupper():\n            return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwxo076ev.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpwxo076ev.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpwxo076ev.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'a': 'b',\
    \ 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd', 'e': 'f'}))\nprint(check_dict_case({}))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9w7dvxkd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9w7dvxkd.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp9w7dvxkd.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    elif dict.keys() == dict.keys():\n        return True\n    else:\n      \
    \  return False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprmgmuceg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmprmgmuceg.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmprmgmuceg.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'a': 'b',\
    \ 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd', 'E': 'f'}))\nprint(check_dict_case({}))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp69gn59ip.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp69gn59ip.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp69gn59ip.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == False and\
    \ key.isupper() == False:\n                return False\n            else:\n \
    \               return True\n\nprint(check_dict_case({'a': 'b', 'c': 'd'}))\n\
    print(check_dict_case({'a': 'b', 'C': 'd'}))\nprint(check_dict_case({'A': 'b',\
    \ 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd', 'Ef': 'gh'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8j7hwluv.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8j7hwluv.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp8j7hwluv.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'b': 'b'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoc2rshv7.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpoc2rshv7.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpoc2rshv7.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    elif all(key.islower() for key in dict):\n        return True\n    elif all(key.isupper()\
    \ for key in dict):\n        return True\n    else:\n        return False\n\n\
    print(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'A': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'a': 'a', 'B': 'b'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: 'True

    True

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'a': 'b',\
    \ 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd', 'E': 'f'}))\nprint(check_dict_case({}))\nprint(check_dict_case({'a':\
    \ 'b', 'c': 'd', 'E': 'f'}))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1tv6e4qu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp1tv6e4qu.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp1tv6e4qu.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    True

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu40970e0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu40970e0.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpu40970e0.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 1, 'b': 2}))\nprint(check_dict_case({'A': 1, 'B':\
    \ 2}))\nprint(check_dict_case({'a': 1, 'B': 2}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp511rqr3s.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp511rqr3s.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp511rqr3s.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    elif len(dict) == 1:\n        return True\n    else:\n        for key in\
    \ dict:\n            if key.islower():\n                return True\n        \
    \    elif key.isupper():\n                return True\n            else:\n   \
    \             return False\n\nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a':\
    \ 'a', 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b', 'c': 'c'}))\nprint(check_dict_case({'A':\
    \ 'a', 'B': 'b', 'C': 'c'}))\nprint(check_dict_case({'A': 'a', 'B': 'b', 'c':\
    \ 'c'}))\nprint(check_dict_case({'a': 'a', 'B': 'b', 'c': 'c'}))\nprint(check_dict_case({'a':\
    \ 'a', 'b': 'b', 'c': 'c'}))\nprint(check_dict_case({}))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq8peoqou.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpq8peoqou.py\", line 43,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpq8peoqou.py\", line\
    \ 35, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    True

    True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 1, 'b': 2}))\nprint(check_dict_case({'A': 1, 'B':\
    \ 2}))\nprint(check_dict_case({'a': 1, 'B': 2}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq0u1frt.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpjq0u1frt.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpjq0u1frt.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0wsudtkg.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp0wsudtkg.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp0wsudtkg.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'a':\
    \ '1', 'B': '2'}))\nprint(check_dict_case({}))\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmlyrk2t8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpmlyrk2t8.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpmlyrk2t8.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == False and\
    \ key.isupper() == False:\n                return False\n        return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6y8p6vli.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6y8p6vli.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp6y8p6vli.py\", line\
    \ 20, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ 'A', 'b': 'B'}))\nprint(check_dict_case({'a': 'A', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'B'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'1':\
    \ 'One', '2': 'Two'}))\nprint(check_dict_case({}))\ndef check(candidate):\n  \
    \  assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqg0bn35f.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpqg0bn35f.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpqg0bn35f.py\", line\
    \ 29, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'A': 'b',\
    \ 'c': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd'}))\nprint(check_dict_case({'a':\
    \ 'b', 'C': 'd'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9h8t6hn6.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9h8t6hn6.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp9h8t6hn6.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    False

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    elif dict == {}:\n        return False\n    else:\n        for key in dict:\n\
    \            if key.islower():\n                return True\n            elif\
    \ key.isupper():\n                return True\n            else:\n           \
    \     return False\n\nprint(check_dict_case({'a': 1, 'b': 2}))\nprint(check_dict_case({'A':\
    \ 1, 'B': 2}))\nprint(check_dict_case({'a': 1, 'B': 2}))\nprint(check_dict_case({}))\n\
    print(check_dict_case({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7,\
    \ 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16,\
    \ 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y':\
    \ 25, 'z': 26}))\nprint(check_dict_case({'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E':\
    \ 5, 'F': 6, 'G': 7, 'H': 8, 'I': 9, 'J': 10, 'K': 11, 'L': 12, 'M': 13, 'N':\
    \ 14, 'O': 15, 'P': 16, 'Q': 17, 'R': 18, 'S': 19, 'T': 20, 'U': 21, 'V': 22,\
    \ 'W': 23, 'X': 24, 'Y': 25, 'Z': 26}))\nprint(check_dict_case({'a': 1, 'B': 2,\
    \ 'c': 3, 'D': 4, 'e': 5, 'F': 6, 'g': 7, 'H': 8, 'i': 9, 'J': 10, 'k': 11, 'L':\
    \ 12, 'm': 13, 'N': 14, 'o': 15, 'P': 16, '\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpfbg5z9bt.py\", line 29\n    print(check_dict_case({'a':\
    \ 1, 'B': 2, 'c': 3, 'D': 4, 'e': 5, 'F': 6, 'g': 7, 'H': 8, 'i': 9, 'J': 10,\
    \ 'k': 11, 'L': 12, 'm': 13, 'N': 14, 'o': 15, 'P': 16, '\n                  \
    \                                                                            \
    \                                                                    ^\nSyntaxError:\
    \ unterminated string literal (detected at line 29)\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit186w8a.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpit186w8a.py\", line 31,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpit186w8a.py\", line\
    \ 23, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'b': 'b'}))\nprint(check_dict_case({}))\n\
    print(check_dict_case({'a': 'a', 'b': 'b', 'c': 'c'}))\nprint(check_dict_case({'a':\
    \ 'a', 'B': 'b', 'c': 'c'}))\nprint(check_dict_case({'A': 'a', 'B': 'b', 'c':\
    \ 'c'}))\nprint(check_dict_case({'A': 'a', 'b': 'b', 'c': 'c'}))\nprint(check_dict_case({'A':\
    \ 'a', 'B': 'b', 'C': 'c'}))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3kjx6_uc.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmp3kjx6_uc.py\", line 41,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp3kjx6_uc.py\", line\
    \ 33, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    True

    True

    True

    True

    True

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == False and\
    \ key.isupper() == False:\n                return False\n        return True\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6nv3iuxr.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6nv3iuxr.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp6nv3iuxr.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    if dict.keys() == dict.keys():\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp96fyw8x6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp96fyw8x6.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp96fyw8x6.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    for key in dict:\n        if key.islower() == False and key.isupper() ==\
    \ False:\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaojiq8oh.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpaojiq8oh.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpaojiq8oh.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key == key.lower():\n   \
    \             return True\n            else:\n                return False\n\n\
    print(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'A': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'b': '2'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxe9s4xcv.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxe9s4xcv.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxe9s4xcv.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    elif len(dict) == 1:\n        return True\n    else:\n        for key in\
    \ dict:\n            if key.islower():\n                return True\n        \
    \    elif key.isupper():\n                return True\n            else:\n   \
    \             return False\n\nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'B': 'b'}))\nprint(check_dict_case({'a': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({'A': 'a'}))\nprint(check_dict_case({'a':\
    \ 'a'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzelbw3pp.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpzelbw3pp.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpzelbw3pp.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'a': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({}))\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptjdi75ev.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmptjdi75ev.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmptjdi75ev.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if not dict:\n        return False\n    else:\n\
    \        return all(key.islower() for key in dict) or all(key.isupper() for key\
    \ in dict)\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 1, 'b': 2, 'c': 3}))\nprint(check_dict_case({'A':\
    \ 1, 'B': 2, 'C': 3}))\nprint(check_dict_case({'a': 1, 'B': 2, 'c': 3}))\nprint(check_dict_case({}))\n\
    print(check_dict_case({'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}))\nprint(check_dict_case({'a':\
    \ 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}))\nprint(check_dict_case({'A': 1, 'b': 2,\
    \ 'C': 3, 'd': 4, 'E': 5}))\nprint(check_dict_case({'a': 1, 'B': 2, 'C': 3, 'd':\
    \ 4, 'E': 5}))\nprint(check_dict_case({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5,\
    \ 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}))\nprint(check_dict_case({'A': 1, 'B':\
    \ 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6, 'G': 7, 'H': 8, 'I': 9, 'J': 10}))\nprint(check_dict_case({'a':\
    \ 1, 'B': 2, 'C': 3, 'd': 4, 'E': 5, 'f': 6, 'G': 7, 'h': 8, 'I': 9, 'j': 10}))\n\
    print(check_dict_case({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7,\
    \ 'h': 8, 'i': 9, 'j':\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpyedm09by.py\", line 30\n    print(check_dict_case({'a':\
    \ 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j':\n  \
    \                        ^\nSyntaxError: '{' was never closed\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    return False\n\ndef check(candidate):\n \
    \   assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplmkhhmdu.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmplmkhhmdu.py\", line 22,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmplmkhhmdu.py\", line\
    \ 13, in check\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n\
    AssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({}))\nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'B': '2'}))\nprint(check_dict_case({'a': '1', 'B': '2'}))\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr7hrm4ni.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpr7hrm4ni.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpr7hrm4ni.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'False

    True

    False

    True

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if not dict:\n        return False\n    else:\n\
    \        for key in dict:\n            if key.islower() or key.isupper():\n  \
    \              return True\n            else:\n                return False\n\n\
    print(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'b': 'b'}))\nprint(check_dict_case({'A': 'a', 'b': 'b'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe8hjxxl0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpe8hjxxl0.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpe8hjxxl0.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    # Check if the dictionary is empty\n    if\
    \ len(dict) == 0:\n        return False\n    # Check if all keys are in lower\
    \ case\n    elif all(key.islower() for key in dict):\n        return True\n  \
    \  # Check if all keys are in upper case\n    elif all(key.isupper() for key in\
    \ dict):\n        return True\n    else:\n        return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ 'b'}))\nprint(check_dict_case({'A': 'b'}))\nprint(check_dict_case({'A': 'B'}))\n\
    print(check_dict_case({'a': 'B'}))\nprint(check_dict_case({'1': 'b'}))\nprint(check_dict_case({}))\n\
    print(check_dict_case({'a': 'b', 'A': 'B'}))\nprint(check_dict_case({'a': 'b',\
    \ 'A': 'B', '1': 'b'}))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpb_tmv07o.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpb_tmv07o.py\", line 39,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpb_tmv07o.py\", line\
    \ 31, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    False

    True

    True

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu40970e0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu40970e0.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpu40970e0.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'a':\
    \ '1', 'B': '2'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpehdffo5x.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpehdffo5x.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpehdffo5x.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    return all(key.islower() for key in dict.keys())\
    \ or all(key.isupper() for key in dict.keys())\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpto01zd1p.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmpto01zd1p.py\", line 22,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpto01zd1p.py\", line\
    \ 19, in check\n    assert candidate({  }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'a': 'b',\
    \ 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'c': 'd'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphd4yz36v.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphd4yz36v.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmphd4yz36v.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        return all(key.islower() for key in dict) or all(key.isupper()\
    \ for key in dict)\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if not dict:\n        return False\n    else:\n\
    \        for key in dict:\n            if key.islower() == key.isupper():\n  \
    \              return False\n            else:\n                return True\n\n\
    print(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprrzglqh4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmprrzglqh4.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmprrzglqh4.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'a': 'b',\
    \ 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd', 'e': 'f'}))\nprint(check_dict_case({}))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9w7dvxkd.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp9w7dvxkd.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp9w7dvxkd.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    if dict.keys() == dict.keys():\n        return True\n    if dict.keys() ==\
    \ dict.keys():\n        return True\n    else:\n        return False\n\nprint(check_dict_case({'a':\
    \ 'b', 'c': 'd'}))\nprint(check_dict_case({'A': 'b', 'c': 'd'}))\nprint(check_dict_case({'a':\
    \ 'b', 'c': 'd', 'E': 'f'}))\nprint(check_dict_case({}))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqfn7djmj.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqfn7djmj.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpqfn7djmj.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'b': 'b'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoc2rshv7.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpoc2rshv7.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpoc2rshv7.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6kjumev.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpq6kjumev.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpq6kjumev.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'A':\
    \ '1', 'B': '2', 'C': '3'}))\nprint(check_dict_case({'a': '1', 'b': '2', 'c':\
    \ '3'}))\nprint(check_dict_case({'A': '1', 'B': '2', 'C': '3', 'a': '4'}))\nprint(check_dict_case({}))\n\
    print(check_dict_case({'A': '1', 'b': '2', 'c': '3'}))\nprint(check_dict_case({'A':\
    \ '1', 'B': '2', 'c': '3'}))\nprint(check_dict_case({'a': '1', 'B': '2', 'C':\
    \ '3'}))\nprint(check_dict_case({'A': '1', 'b': '2', 'C': '3'}))\nprint(check_dict_case({'A':\
    \ '1', 'B': '2', 'C': '3', 'd': '4'}))\nprint(check_dict_case({'a': '1', 'b':\
    \ '2', 'c': '3', 'D': '4'}))\nprint(check_dict_case({'A': '1', 'b': '2', 'c':\
    \ '3', 'D': '4'}))\nprint(check_dict_case({'a': '1', 'B': '2', 'c': '3', 'D':\
    \ '4'}))\nprint(check_dict_case({'a': '1', 'b': '2', 'C': '3', 'D': '4'}))\nprint(check_dict_case({'A':\
    \ '1', 'B': '2', 'C': '3', 'd': '4', 'e': '5'}))\nprint(check_dict_case({'a\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp9wc252gb.py\", line 35\n    print(check_dict_case({'a\n\
    \                           ^\nSyntaxError: unterminated string literal (detected\
    \ at line 35)\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    for key in dict:\n        if key.islower() == False and key.isupper() ==\
    \ False:\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaojiq8oh.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpaojiq8oh.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpaojiq8oh.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'a':\
    \ 'a', 'B': 'b'}))\nprint(check_dict_case({}))\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp33cl9zy6.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp33cl9zy6.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp33cl9zy6.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6kjumev.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpq6kjumev.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpq6kjumev.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'a': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'1':\
    \ 'a', '2': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplm8kvvuc.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmplm8kvvuc.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmplm8kvvuc.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'a': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({}))\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpci34b7s9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpci34b7s9.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpci34b7s9.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'a': 'b',\
    \ 'C': 'd'}))\nprint(check_dict_case({'a': 'b', 'c': 'd', 'E': 'f'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd', 'E': 'f'}))\nprint(check_dict_case({'A': 'b', 'C': 'd', 'e':\
    \ 'f'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3uf1zrxc.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp3uf1zrxc.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp3uf1zrxc.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    if all(key.islower() for key in dict):\n        return True\n    elif all(key.isupper()\
    \ for key in dict):\n        return True\n    else:\n        return False\n\n\
    print(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'A': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'a': '1', 'B': '2'}))\nprint(check_dict_case({}))\n\
    print(check_dict_case({'a': '1', 'B': '2', 'c': '3'}))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 1, 'b': 2}))\nprint(check_dict_case({'a': 1, 'B':\
    \ 2}))\nprint(check_dict_case({'A': 1, 'B': 2}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo_88wxz2.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpo_88wxz2.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpo_88wxz2.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'B': 'b'}))\nprint(check_dict_case({'1': 'a', '2': 'b'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsj35sbtj.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpsj35sbtj.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpsj35sbtj.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    if dict.keys() == dict.keys():\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp96fyw8x6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp96fyw8x6.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp96fyw8x6.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    if dict.keys() == dict.keys():\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp96fyw8x6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp96fyw8x6.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp96fyw8x6.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == False and\
    \ key.isupper() == False:\n                return False\n        return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6y8p6vli.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6y8p6vli.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp6y8p6vli.py\", line\
    \ 20, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'A': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'a': '1', 'B': '2'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbcbo0m1o.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbcbo0m1o.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbcbo0m1o.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({}))\nprint(check_dict_case({'a': 'b'}))\nprint(check_dict_case({'A':\
    \ 'b'}))\nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'c': 'd'}))\nprint(check_dict_case({'a': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd'}))\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqj7p23wf.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpqj7p23wf.py\", line 37,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpqj7p23wf.py\", line\
    \ 29, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'False

    True

    False

    True

    False

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 1, 'b': 2, 'c': 3}))\nprint(check_dict_case({'A':\
    \ 1, 'B': 2, 'C': 3}))\nprint(check_dict_case({'A': 1, 'b': 2, 'C': 3}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuvv4o7nx.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpuvv4o7nx.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpuvv4o7nx.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    if dict.keys() == dict.keys():\n        return True\n    else:\n        return\
    \ False\n\nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'a':\
    \ 'b', 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd', 'E': 'f'}))\nprint(check_dict_case({}))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp26qmu96z.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp26qmu96z.py\", line 32,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp26qmu96z.py\", line\
    \ 24, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu40970e0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu40970e0.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpu40970e0.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'a': 'b',\
    \ 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd', 'E': 'f'}))\nprint(check_dict_case({}))\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_uurym2d.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp_uurym2d.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp_uurym2d.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'a': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpy9ovrpc8.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'a': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpy9ovrpc8.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        return all(key.islower() for key in dict) or all(key.isupper()\
    \ for key in dict)\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'a':\
    \ 'a', 'B': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp24bh5p9c.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp24bh5p9c.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp24bh5p9c.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit186w8a.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpit186w8a.py\", line 31,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpit186w8a.py\", line\
    \ 23, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'a': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpy9ovrpc8.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if not dict:\n        return False\n    for\
    \ key in dict:\n        if key.islower() or key.isupper():\n            return\
    \ True\n        else:\n            return False\n\nprint(check_dict_case({'a':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({'a': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'B': '2'}))\nprint(check_dict_case({'1': 'a', '2': 'b'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyfm6nnfz.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpyfm6nnfz.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpyfm6nnfz.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({}))\nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a':\
    \ 'a', 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi4a28c3i.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpi4a28c3i.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpi4a28c3i.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'False

    True

    True

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'b': 'b'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoc2rshv7.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpoc2rshv7.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpoc2rshv7.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if not dict:\n        return False\n    if\
    \ all(key.islower() for key in dict.keys()):\n        return True\n    if all(key.isupper()\
    \ for key in dict.keys()):\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'A': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'a': '1', 'B': '2'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbcbo0m1o.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbcbo0m1o.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbcbo0m1o.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    if dict.keys() == dict.keys():\n        return True\n    if dict.keys() ==\
    \ dict.keys():\n        return True\n    else:\n        return False\n\nprint(check_dict_case({'a':\
    \ 'b', 'c': 'd'}))\nprint(check_dict_case({'a': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd', 'E': 'f'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparpo5yf7.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmparpo5yf7.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmparpo5yf7.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    if dict.keys() == dict.keys():\n        return True\n    else:\n        return\
    \ False\n\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp96fyw8x6.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp96fyw8x6.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp96fyw8x6.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'a': 'b',\
    \ 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd', 'E': 'f'}))\nprint(check_dict_case({}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd', 'E': 'f', 'g': 'h'}))\nprint(check_dict_case({'a': 'b', 'C':\
    \ 'd', 'E': 'f', 'g': 'h'}))\nprint(check_dict_case({'a': 'b', 'c': 'd', 'E':\
    \ 'f', 'g': 'h'}))\nprint(check_dict_case({'a': 'b', 'c': 'd', 'e': 'f', 'g':\
    \ 'h'}))\nprint(check_dict_case({'a': 'b', 'c': 'd', 'e': 'f', 'G': 'h'}))\nprint(check_dict_case({'a':\
    \ 'b', 'c': 'd', 'e': 'f', 'G': 'h', 'i': 'j'}))\nprint(check_dict_case({'a':\
    \ 'b', 'c': 'd', 'e': 'f', 'G': 'h', 'I': 'j'}))\nprint(check_dict_case({'a':\
    \ 'b', 'c': 'd', 'e': 'f', 'G': 'h', 'I': 'j', 'k': 'l'}))\nprint(check_dict_case({'a':\
    \ 'b', 'c': 'd', 'e': 'f', 'G': 'h', 'I': 'j', 'K': 'l'}))\nprint(\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmponupxfgn.py\", line 33\n    print(\n         ^\nSyntaxError:\
    \ '(' was never closed\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == False and\
    \ key.isupper() == False:\n                return False\n        return True\n\
    \nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'a': 'b',\
    \ 'C': 'd'}))\nprint(check_dict_case({'a': 'b', 'c': 'd', 'E': 'f'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd', 'E': 'f'}))\nprint(check_dict_case({'A': 'b', 'C': 'd', 'e':\
    \ 'f'}))\nprint(check_dict_case({}))\nprint(check_dict_case({'a': 'b', 'c': 'd',\
    \ 'E': 'f', 'g': 'h', 'I': 'j'}))\nprint(check_dict_case({'a': 'b', 'c': 'd',\
    \ 'E': 'f', 'G': 'h', 'i': 'j'}))\nprint(check_dict_case({'a': 'b', 'c': 'd',\
    \ 'E': 'f', 'G': 'h', 'I': 'j'}))\nprint(check_dict_case({'a': 'b', 'c': 'd',\
    \ 'E': 'f', 'G': 'h', 'i': 'j', 'k': 'l'}))\nprint(check_dict_case({'a': 'b',\
    \ 'c': 'd', 'E': 'f', 'G': 'h', 'I': 'j', 'k': 'l'}))\nprint(check_dict_case({'a':\
    \ 'b', 'c': 'd', 'E': 'f', 'G': 'h', 'i': 'j', 'K': 'l'}))\nprint(check_dict_case({'a':\
    \ 'b', 'c': 'd', 'E': 'f', 'G': 'h', 'I': 'j', 'K': 'l'}))\nprint(check\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp119gq11o.py\", line 31\n    print(check\n         ^\n\
    SyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu40970e0.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpu40970e0.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpu40970e0.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if not dict:\n        return False\n    else:\n\
    \        for key in dict:\n            if key.islower() or key.isupper():\n  \
    \              return True\n            else:\n                return False\n\n\
    print(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'1':\
    \ 'a', '2': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphavnij_t.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmphavnij_t.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmphavnij_t.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == False and\
    \ key.isupper() == False:\n                return False\n        return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6y8p6vli.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6y8p6vli.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp6y8p6vli.py\", line\
    \ 20, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if not dict:\n        return False\n    if\
    \ all(key.islower() for key in dict):\n        return True\n    if all(key.isupper()\
    \ for key in dict):\n        return True\n    return False\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'a':\
    \ '1', 'B': '2'}))\nprint(check_dict_case({}))\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmlyrk2t8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpmlyrk2t8.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpmlyrk2t8.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'a': 'b',\
    \ 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd', 'E': 'f'}))\nprint(check_dict_case({}))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp69gn59ip.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp69gn59ip.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp69gn59ip.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 1, 'b': 2, 'c': 3}))\nprint(check_dict_case({'A':\
    \ 1, 'B': 2, 'C': 3}))\nprint(check_dict_case({'a': 1, 'B': 2, 'c': 3}))\nprint(check_dict_case({}))\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv1uh3orc.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpv1uh3orc.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpv1uh3orc.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    elif dict.keys() == dict.keys():\n        return True\n    else:\n      \
    \  return False\n\nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'a':\
    \ 'b', 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd', 'E': 'f'}))\nprint(check_dict_case({}))\nprint(check_dict_case({'a':\
    \ 'b', 'C': 'd', 'E': 'f', 'G': 'h'}))\nprint(check_dict_case({'A': 'b', 'C':\
    \ 'd', 'E': 'f', 'G': 'h'}))\ndef check(candidate):\n    assert candidate({ 'p':\
    \ 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsb8xm7yn.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpsb8xm7yn.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpsb8xm7yn.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    True

    True

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if not dict:\n        return False\n    else:\n\
    \        for key in dict:\n            if key.islower() or key.isupper():\n  \
    \              return True\n            else:\n                return False\n\n\
    print(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'a': 'b',\
    \ 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd', 'Ef': 'gh'}))\nprint(check_dict_case({}))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz25_o4dr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpz25_o4dr.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpz25_o4dr.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'b': 'b'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoc2rshv7.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpoc2rshv7.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpoc2rshv7.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6kjumev.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpq6kjumev.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpq6kjumev.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 1, 'b': 2, 'c': 3}))\nprint(check_dict_case({'A':\
    \ 1, 'B': 2, 'C': 3}))\nprint(check_dict_case({'a': 1, 'B': 2, 'c': 3}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7pqqz8x.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpk7pqqz8x.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpk7pqqz8x.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjb5gdr5m.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpjb5gdr5m.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpjb5gdr5m.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: 1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({}))\nprint(check_dict_case({'a': 'b'}))\nprint(check_dict_case({'A':\
    \ 'b'}))\nprint(check_dict_case({'A': 'B'}))\nprint(check_dict_case({'a': 'B'}))\n\
    print(check_dict_case({'a': 'b', 'A': 'B'}))\nprint(check_dict_case({'a': 'b',\
    \ 'A': 'B', 'c': 'd'}))\nprint(check_dict_case({'a': 'b', 'A': 'B', 'c': 'D'}))\n\
    print(check_dict_case({'a': 'b', 'A': 'B', 'c': 'd', 'E': 'f'}))\nprint(check_dict_case({'a':\
    \ 'b', 'A': 'B', 'c': 'd', 'E': 'F'}))\nprint(check_dict_case({'a': 'b', 'A':\
    \ 'B', 'c': 'd', 'E': 'F', 'g': 'h'}))\nprint(check_dict_case({'a': 'b', 'A':\
    \ 'B', 'c': 'd', 'E': 'F', 'g': 'H'}))\nprint(check_dict_case({'a': 'b', 'A':\
    \ 'B', 'c': 'd', 'E': 'F', 'g': 'h', 'I': 'j'}))\nprint(check_dict_case({'a':\
    \ 'b', 'A': 'B', 'c': 'd', 'E': 'F', 'g': 'h', 'I': 'J'}))\nprint(check_dict_case({'a':\
    \ 'b', 'A': 'B', 'c': 'd', 'E': 'F', 'g': 'h', 'I': 'J', 'k': 'l'}))\nprint(check\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpx_879870.py\", line 34\n    print(check\n         ^\n\
    SyntaxError: '(' was never closed\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    elif len(dict) == 1:\n        return True\n    else:\n        for key in\
    \ dict:\n            if key == key.lower():\n                return True\n   \
    \         elif key == key.upper():\n                return True\n            else:\n\
    \                return False\n\nprint(check_dict_case({'a': 'a', 'b': 'b'}))\n\
    print(check_dict_case({'a': 'a', 'B': 'b'}))\nprint(check_dict_case({'A': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'b': 'b'}))\nprint(check_dict_case({'a':\
    \ 'a'}))\nprint(check_dict_case({'A': 'a'}))\nprint(check_dict_case({}))\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_cpfti88.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp_cpfti88.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp_cpfti88.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'a': 'b',\
    \ 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd', 'E': 'f'}))\nprint(check_dict_case({}))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp69gn59ip.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp69gn59ip.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp69gn59ip.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'a': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'1':\
    \ 'a', '2': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcxyr_nfb.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcxyr_nfb.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpcxyr_nfb.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == False and\
    \ key.isupper() == False:\n                return False\n        return True\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6y8p6vli.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp6y8p6vli.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp6y8p6vli.py\", line\
    \ 20, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9dazismi.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp9dazismi.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp9dazismi.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit186w8a.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpit186w8a.py\", line 31,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpit186w8a.py\", line\
    \ 23, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if not dict:\n        return False\n    if\
    \ all(key.islower() for key in dict.keys()):\n        return True\n    if all(key.isupper()\
    \ for key in dict.keys()):\n        return True\n    return False\n\nprint(check_dict_case({'a':\
    \ 'b', 'c': 'd'}))\nprint(check_dict_case({'a': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd', 'E': 'f'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: 'True

    False

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'A': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'b': '2'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1mxw8nxg.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1mxw8nxg.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp1mxw8nxg.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'A': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'a': '1', 'B': '2'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbcbo0m1o.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbcbo0m1o.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbcbo0m1o.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'A', 'b': 'B'}))\nprint(check_dict_case({'a': 'A',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'b': 'B'}))\nprint(check_dict_case({'A':\
    \ 'a', 'B': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0yxjgxym.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0yxjgxym.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp0yxjgxym.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({'a': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'B': '2'}))\nprint(check_dict_case({'A': '1', 'b': '2'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4kxf0kwj.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp4kxf0kwj.py\", line 36,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp4kxf0kwj.py\", line\
    \ 28, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    return all(key.islower() for key in dict.keys())\
    \ or all(key.isupper() for key in dict.keys())\n\nprint(check_dict_case({'a':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'B': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqmoohpas.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqmoohpas.py\", line 26,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpqmoohpas.py\", line\
    \ 23, in check\n    assert candidate({  }) == False\nAssertionError\n"
  stdout: 'True

    False

    True

    True

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    elif len(dict) == 1:\n        return True\n    else:\n        for key in\
    \ dict:\n            if key.islower():\n                return True\n        \
    \    elif key.isupper():\n                return True\n            else:\n   \
    \             return False\n\nprint(check_dict_case({}))\nprint(check_dict_case({'a':\
    \ 1}))\nprint(check_dict_case({'a': 1, 'b': 2}))\nprint(check_dict_case({'A':\
    \ 1, 'B': 2}))\nprint(check_dict_case({'A': 1, 'b': 2}))\nprint(check_dict_case({'a':\
    \ 1, 'B': 2}))\nprint(check_dict_case({'A': 1, 'B': 2, 'C': 3}))\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6fyddhiu.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp6fyddhiu.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp6fyddhiu.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'False

    True

    True

    True

    True

    True

    True

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq6kjumev.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpq6kjumev.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpq6kjumev.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'A': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'a': '1', 'B': '2'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbcbo0m1o.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbcbo0m1o.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbcbo0m1o.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    for key in dict:\n        if key.islower() == False and key.isupper() ==\
    \ False:\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaojiq8oh.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpaojiq8oh.py\", line 27,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpaojiq8oh.py\", line\
    \ 19, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 1, 'b': 2, 'c': 3}))\nprint(check_dict_case({'A':\
    \ 1, 'B': 2, 'C': 3}))\nprint(check_dict_case({'a': 1, 'B': 2, 'c': 3}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7pqqz8x.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpk7pqqz8x.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpk7pqqz8x.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxsvpvihx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpxsvpvihx.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpxsvpvihx.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'A': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'a': '1', 'B': '2'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwai6lew6.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpwai6lew6.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpwai6lew6.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if not dict:\n        return False\n    for\
    \ key in dict:\n        if key.islower() or key.isupper():\n            return\
    \ True\n        else:\n            return False\n\ndef check(candidate):\n   \
    \ assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr67ab6qa.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpr67ab6qa.py\", line 28,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpr67ab6qa.py\", line\
    \ 20, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == False and\
    \ key.isupper() == False:\n                return False\n            elif key.islower()\
    \ == True:\n                for key in dict:\n                    if key.islower()\
    \ == False:\n                        return False\n            elif key.isupper()\
    \ == True:\n                for key in dict:\n                    if key.isupper()\
    \ == False:\n                        return False\n        return True\n\nprint(check_dict_case({'a':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'a':\
    \ '1', 'B': '2'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: 'True

    True

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'a': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpy9ovrpc8.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'a': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({}))\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpci34b7s9.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpci34b7s9.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpci34b7s9.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'A': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'a': '1', 'B': '2'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbcbo0m1o.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbcbo0m1o.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbcbo0m1o.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'a': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpy9ovrpc8.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'a': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpy9ovrpc8.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'a': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'B': '2'}))\nprint(check_dict_case({'A':\
    \ '1', 'b': '2'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpy9ovrpc8.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpy9ovrpc8.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        lower_keys = [key.islower() for key in dict.keys()]\n    \
    \    upper_keys = [key.isupper() for key in dict.keys()]\n        if all(lower_keys)\
    \ or all(upper_keys):\n            return True\n        else:\n            return\
    \ False\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b':\
    \ 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    elif len(dict) == 1:\n        return True\n    else:\n        for key in\
    \ dict:\n            if key.islower():\n                return True\n        \
    \    elif key.isupper():\n                return True\n            else:\n   \
    \             return False\n\nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'b': 'b'}))\nprint(check_dict_case({'a':\
    \ 'a', 'B': 'b'}))\nprint(check_dict_case({}))\nprint(check_dict_case({'a': 'a'}))\n\
    print(check_dict_case({'A': 'a'}))\ndef check(candidate):\n    assert candidate({\
    \ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple',\
    \ 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple',\
    \ '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John',\
    \ 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({ 'STATE':\
    \ 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste':\
    \ 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp815r3xq0.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp815r3xq0.py\", line 40,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp815r3xq0.py\", line\
    \ 32, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    True

    True

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'A': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'b': '2'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1mxw8nxg.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp1mxw8nxg.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp1mxw8nxg.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\nprint(check_dict_case({'a':\
    \ 1, 'b': 2}))\nprint(check_dict_case({'A': 1, 'B': 2}))\nprint(check_dict_case({'a':\
    \ 1, 'B': 2}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgsi3uap0.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpgsi3uap0.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpgsi3uap0.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() or key.isupper():\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 1, 'b': 2}))\nprint(check_dict_case({'a': 1, 'B':\
    \ 2}))\nprint(check_dict_case({'A': 1, 'B': 2}))\nprint(check_dict_case({'A':\
    \ 1, 'b': 2}))\nprint(check_dict_case({}))\n\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprd0z2wrr.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprd0z2wrr.py\", line 35,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmprd0z2wrr.py\", line\
    \ 27, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'A': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'a': '1', 'B': '2'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbcbo0m1o.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpbcbo0m1o.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpbcbo0m1o.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 1, 'b': 2, 'c': 3}))\nprint(check_dict_case({'A':\
    \ 1, 'B': 2, 'C': 3}))\nprint(check_dict_case({'a': 1, 'B': 2, 'c': 3}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk7pqqz8x.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpk7pqqz8x.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpk7pqqz8x.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a'}))\nprint(check_dict_case({'A': 'a'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd02nz96b.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpd02nz96b.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpd02nz96b.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    False

    False

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: 0
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if not dict:\n        return False\n    if\
    \ all(key.islower() for key in dict.keys()):\n        return True\n    elif all(key.isupper()\
    \ for key in dict.keys()):\n        return True\n    else:\n        return False\n\
    \nprint(check_dict_case({'a': '1', 'b': '2'}))\nprint(check_dict_case({'A': '1',\
    \ 'B': '2'}))\nprint(check_dict_case({'A': '1', 'b': '2'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: OK
  stderr: ''
  stdout: 'True

    True

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    elif dict.keys() == dict.keys():\n        return True\n    else:\n      \
    \  return False\n\nprint(check_dict_case({}))\nprint(check_dict_case({'A': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\ndef check(candidate):\n    assert candidate({ 'p': 'pineapple',\
    \ 'b': 'banana' }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana',\
    \ 'B': 'banana' }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana',\
    \ 'a': 'apple' }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36',\
    \ 'City': 'Houston' }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP':\
    \ '12345' }) == True\n    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet'\
    \ }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9seyzmyw.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp9seyzmyw.py\", line 31,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmp9seyzmyw.py\", line\
    \ 23, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'False

    True

    True

    True

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \nprint(check_dict_case({'a': 'a', 'b': 'b'}))\nprint(check_dict_case({'a': 'a',\
    \ 'B': 'b'}))\nprint(check_dict_case({'A': 'a', 'B': 'b'}))\nprint(check_dict_case({'A':\
    \ 'a', 'b': 'b'}))\nprint(check_dict_case({}))\ndef check(candidate):\n    assert\
    \ candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert candidate({\
    \ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n    assert candidate({\
    \ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n    assert candidate({\
    \ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n    assert candidate({\
    \ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({ 'fruit': 'Orange',\
    \ 'taste': 'Sweet' }) == True\n    assert candidate({  }) == False\n\ndef test_check():\n\
    \    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpw7yyjg3c.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpw7yyjg3c.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    False

    False

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    elif dict.keys() == dict.keys():\n        return True\n    else:\n      \
    \  return False\n\nprint(check_dict_case({'a': 'b', 'c': 'd'}))\nprint(check_dict_case({'a':\
    \ 'b', 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd'}))\nprint(check_dict_case({'A':\
    \ 'b', 'C': 'd', 'E': 'f'}))\nprint(check_dict_case({}))\n\ndef check(candidate):\n\
    \    assert candidate({ 'p': 'pineapple', 'b': 'banana' }) == True\n    assert\
    \ candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana' }) == False\n   \
    \ assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple' }) == False\n\
    \    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston' }) == False\n\
    \    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n    assert candidate({\
    \ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert candidate({  }) ==\
    \ False\n\ndef test_check():\n    check(check_dict_case)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaeqrsafq.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpaeqrsafq.py\", line 33,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpaeqrsafq.py\", line\
    \ 25, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            else:\n                return False\n\
    \ndef check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpm38llwpq.py\", line 29,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpm38llwpq.py\", line\
    \ 21, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    if dict.keys() == dict.keys():\n        return True\n    if dict.keys() ==\
    \ dict.keys():\n        return True\n    else:\n        return False\n\nprint(check_dict_case({'a':\
    \ 'b', 'c': 'd'}))\nprint(check_dict_case({'A': 'b', 'c': 'd'}))\nprint(check_dict_case({'a':\
    \ 'b', 'C': 'd'}))\nprint(check_dict_case({'A': 'b', 'C': 'd'}))\nprint(check_dict_case({}))\n\
    def check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana'\
    \ }) == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqzu4majo.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpqzu4majo.py\", line 34,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpqzu4majo.py\", line\
    \ 26, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: 'True

    True

    True

    True

    False

    '
  timestamp: 1659977049
- exit_code: -1
  program: "from typing import Dict\n\ndef check_dict_case(dict: Dict[str, str]) ->\
    \ bool:\n    \"\"\"\n    Given a dictionary, return True if all keys are strings\
    \ in lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \                        \"\"\"\n    if len(dict) == 0:\n        return False\n\
    \    else:\n        for key in dict:\n            if key.islower() == True:\n\
    \                return True\n            elif key.isupper() == True:\n      \
    \          return True\n            else:\n                return False\n\ndef\
    \ check(candidate):\n    assert candidate({ 'p': 'pineapple', 'b': 'banana' })\
    \ == True\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\n    assert candidate({ 'p': 'pineapple', '5': 'banana', 'a': 'apple'\
    \ }) == False\n    assert candidate({ 'Name': 'John', 'Age': '36', 'City': 'Houston'\
    \ }) == False\n    assert candidate({ 'STATE': 'NC', 'ZIP': '12345' }) == True\n\
    \    assert candidate({ 'fruit': 'Orange', 'taste': 'Sweet' }) == True\n    assert\
    \ candidate({  }) == False\n\ndef test_check():\n    check(check_dict_case)\n\n\
    test_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpit186w8a.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpit186w8a.py\", line 31,\
    \ in test_check\n    check(check_dict_case)\n  File \"/tmp/tmpit186w8a.py\", line\
    \ 23, in check\n    assert candidate({ 'p': 'pineapple', 'A': 'banana', 'B': 'banana'\
    \ }) == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659977049
