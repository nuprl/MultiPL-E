name: HumanEval_6_parse_nested_parens
language: py
results:
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = 0\n    for paren in paren_list:\n  \
    \      depth = 0\n        for c in paren:\n            if c == '(':\n        \
    \        depth += 1\n            elif c == ')':\n                depth -= 1\n\
    \            else:\n                raise ValueError('Invalid character in input\
    \ string')\n            if depth < 0:\n                raise ValueError('Invalid\
    \ input string')\n            max_depth = max(max_depth, depth)\n    return max_depth\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx0cpijna.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpx0cpijna.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpx0cpijna.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp13tedfdm.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp13tedfdm.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp13tedfdm.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpry859p5_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpry859p5_.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpry859p5_.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_level\
    \ = 0\n    current_level = 0\n    for paren in paren_string:\n        if paren\
    \ == '(':\n            current_level += 1\n            max_level = max(max_level,\
    \ current_level)\n        elif paren == ')':\n            current_level -= 1\n\
    \    return max_level\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoloyo89_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpoloyo89_.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpoloyo89_.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1gvt5mtb.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp1gvt5mtb.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1gvt5mtb.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr6w95n8w.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr6w95n8w.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpr6w95n8w.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe6kkyouv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpe6kkyouv.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpe6kkyouv.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_string\
    \ = paren_string.strip()\n    if not paren_string:\n        return []\n    paren_list\
    \ = paren_string.split(' ')\n    result = []\n    for paren in paren_list:\n \
    \       result.append(max_nested_parens(paren))\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsk2bublj.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpsk2bublj.py\", line 24,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsk2bublj.py\"\
    , line 19, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpsk2bublj.py\", line 15, in parse_nested_parens\n\
    \    result.append(max_nested_parens(paren))\nNameError: name 'max_nested_parens'\
    \ is not defined. Did you mean: 'parse_nested_parens'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_string\
    \ = paren_string.replace(\" \", \"\")\n    max_depth = 0\n    current_depth =\
    \ 0\n    for char in paren_string:\n        if char == \"(\":\n            current_depth\
    \ += 1\n            max_depth = max(max_depth, current_depth)\n        elif char\
    \ == \")\":\n            current_depth -= 1\n    return max_depth\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy_ykfrl1.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpy_ykfrl1.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpy_ykfrl1.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    for char in paren_string:\n        if char\
    \ == '(':\n            current_nesting += 1\n            max_nesting = max(max_nesting,\
    \ current_nesting)\n        elif char == ')':\n            current_nesting -=\
    \ 1\n    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmperuype6m.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmperuype6m.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmperuype6m.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_nesting = []\n    for paren in paren_list:\n\
    \        max_nesting.append(paren_nesting(paren))\n    return max_nesting\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpopsr7_e_.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpopsr7_e_.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpopsr7_e_.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpopsr7_e_.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(paren_nesting(paren))\nNameError: name 'paren_nesting'\
    \ is not defined. Did you mean: 'paren_string'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_string\
    \ = paren_string.strip()\n    if not paren_string:\n        return []\n    paren_list\
    \ = paren_string.split(' ')\n    result = []\n    for paren in paren_list:\n \
    \       if not paren:\n            continue\n        if paren[0] != '(' or paren[-1]\
    \ != ')':\n            raise ValueError('Invalid input string')\n        result.append(get_max_nesting(paren))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjhtnywl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqjhtnywl.py\", line 28,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqjhtnywl.py\"\
    , line 23, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpqjhtnywl.py\", line 19, in parse_nested_parens\n\
    \    result.append(get_max_nesting(paren))\nNameError: name 'get_max_nesting'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_levels = []\n    for paren in paren_list:\n\
    \        level = 0\n        max_level = 0\n        for char in paren:\n      \
    \      if char == '(':\n                level += 1\n                if level >\
    \ max_level:\n                    max_level = level\n            elif char ==\
    \ ')':\n                level -= 1\n        max_levels.append(max_level)\n   \
    \ return max_levels\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    for char in paren_string:\n        if char\
    \ == '(':\n            current_nesting += 1\n            max_nesting = max(max_nesting,\
    \ current_nesting)\n        elif char == ')':\n            current_nesting -=\
    \ 1\n    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkjibin2w.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpkjibin2w.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkjibin2w.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split(' ')\n    output_list = []\n    for paren in paren_list:\n\
    \        max_depth = 0\n        depth = 0\n        for char in paren:\n      \
    \      if char == '(':\n                depth += 1\n                max_depth\
    \ = max(max_depth, depth)\n            elif char == ')':\n                depth\
    \ -= 1\n        output_list.append(max_depth)\n    return output_list\n\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = []\n    for paren in paren_list:\n \
    \       depth = 0\n        max_depth_so_far = 0\n        for char in paren:\n\
    \            if char == '(':\n                depth += 1\n                max_depth_so_far\
    \ = max(max_depth_so_far, depth)\n            elif char == ')':\n            \
    \    depth -= 1\n        max_depth.append(max_depth_so_far)\n    return max_depth\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvvmttwpu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpvvmttwpu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpvvmttwpu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = 0\n    for paren in paren_list:\n  \
    \      depth = 0\n        for char in paren:\n            if char == '(':\n  \
    \              depth += 1\n            elif char == ')':\n                depth\
    \ -= 1\n            else:\n                raise ValueError('Invalid character\
    \ in input string')\n            if depth < 0:\n                raise ValueError('Invalid\
    \ parentheses string')\n            max_depth = max(max_depth, depth)\n    return\
    \ max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbdtbi_6i.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbdtbi_6i.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbdtbi_6i.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    paren_count = []\n    for paren in paren_list:\n\
    \        paren_count.append(paren.count('(') - paren.count(')'))\n    return paren_count\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplx25xclp.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmplx25xclp.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmplx25xclp.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfwhpyge7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfwhpyge7.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpfwhpyge7.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfa0zxc3k.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpfa0zxc3k.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpfa0zxc3k.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpue2tdje1.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpue2tdje1.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpue2tdje1.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    result\
    \ = []\n    for paren_group in paren_string.split(' '):\n        max_nesting =\
    \ 0\n        current_nesting = 0\n        for paren in paren_group:\n        \
    \    if paren == '(':\n                current_nesting += 1\n                max_nesting\
    \ = max(max_nesting, current_nesting)\n            elif paren == ')':\n      \
    \          current_nesting -= 1\n        result.append(max_nesting)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprqv4z3ir.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprqv4z3ir.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmprqv4z3ir.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvqzq7cwz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpvqzq7cwz.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpvqzq7cwz.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9lxd32kx.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp9lxd32kx.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9lxd32kx.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7gdbgw_j.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7gdbgw_j.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp7gdbgw_j.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpte9g4_qi.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpte9g4_qi.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpte9g4_qi.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split(' ')\n    max_nesting = []\n    for paren in paren_list:\n\
    \        max_nesting.append(max_nesting_parens(paren))\n    return max_nesting\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp70aucbtw.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp70aucbtw.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp70aucbtw.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp70aucbtw.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu8cp_7om.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpu8cp_7om.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpu8cp_7om.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    paren_count = []\n    for paren in paren_list:\n\
    \        paren_count.append(paren.count('(') - paren.count(')'))\n    return paren_count\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptlgo93uc.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmptlgo93uc.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmptlgo93uc.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_nesting = []\n    for paren in paren_list:\n\
    \        max_nesting.append(paren_nesting(paren))\n    return max_nesting\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3bjw6t91.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp3bjw6t91.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp3bjw6t91.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp3bjw6t91.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(paren_nesting(paren))\nNameError: name 'paren_nesting'\
    \ is not defined. Did you mean: 'paren_string'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp19u2fl_5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp19u2fl_5.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp19u2fl_5.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = []\n    for paren in paren_list:\n \
    \       depth = 0\n        max_depth_so_far = 0\n        for char in paren:\n\
    \            if char == '(':\n                depth += 1\n                max_depth_so_far\
    \ = max(max_depth_so_far, depth)\n            elif char == ')':\n            \
    \    depth -= 1\n        max_depth.append(max_depth_so_far)\n    return max_depth\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    for char in paren_string:\n        if char\
    \ == '(':\n            current_nesting += 1\n            max_nesting = max(max_nesting,\
    \ current_nesting)\n        elif char == ')':\n            current_nesting -=\
    \ 1\n    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdif5bqiz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdif5bqiz.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdif5bqiz.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_nesting = []\n    for paren in paren_list:\n\
    \        max_nesting.append(get_max_nesting(paren))\n    return max_nesting\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppn_bpd83.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmppn_bpd83.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppn_bpd83.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmppn_bpd83.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbvfpnbv3.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpbvfpnbv3.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbvfpnbv3.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_level\
    \ = 0\n    curr_level = 0\n    for char in paren_string:\n        if char == '(':\n\
    \            curr_level += 1\n            max_level = max(max_level, curr_level)\n\
    \        elif char == ')':\n            curr_level -= 1\n    return max_level\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpatbtn6h4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpatbtn6h4.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpatbtn6h4.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = 0\n    for paren in paren_list:\n  \
    \      depth = 0\n        for char in paren:\n            if char == '(':\n  \
    \              depth += 1\n            elif char == ')':\n                depth\
    \ -= 1\n            else:\n                raise ValueError(\"Invalid character\
    \ in input string\")\n            if depth < 0:\n                raise ValueError(\"\
    Invalid input string\")\n            max_depth = max(max_depth, depth)\n    return\
    \ max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr2jd944j.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpr2jd944j.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpr2jd944j.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_string\
    \ = paren_string.strip()\n    paren_groups = paren_string.split(' ')\n    max_nesting_levels\
    \ = []\n    for paren_group in paren_groups:\n        max_nesting_levels.append(get_max_nesting_level(paren_group))\n\
    \    return max_nesting_levels\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5i2ueq9w.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp5i2ueq9w.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp5i2ueq9w.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp5i2ueq9w.py\", line 13, in parse_nested_parens\n\
    \    max_nesting_levels.append(get_max_nesting_level(paren_group))\nNameError:\
    \ name 'get_max_nesting_level' is not defined. Did you mean: 'max_nesting_levels'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxvfcwzv7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxvfcwzv7.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxvfcwzv7.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphx1xfv0k.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmphx1xfv0k.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmphx1xfv0k.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    paren_list = [paren.strip() for paren in paren_list]\n\
    \    paren_list = [paren.strip('()') for paren in paren_list]\n    paren_list\
    \ = [paren.strip(')(') for paren in paren_list]\n    paren_list = [paren.strip('()')\
    \ for paren in paren_list]\n    paren_list = [paren.strip(')(') for paren in paren_list]\n\
    \    paren_list = [paren.strip('()') for paren in paren_list]\n    paren_list\
    \ = [paren.strip(')(') for paren in paren_list]\n    paren_list = [paren.strip('()')\
    \ for paren in paren_list]\n    paren_list = [paren.strip(')(') for paren in paren_list]\n\
    \    paren_list = [paren.strip('()') for paren in paren_list]\n    paren_list\
    \ = [paren.strip(')(') for paren in paren_list]\n    paren_list = [paren.strip('()')\
    \ for paren in paren_list]\n    paren_list = [paren.strip(')(') for paren in paren_list]\n\
    \    paren_list = [paren.strip('()') for paren in paren_list]\n    paren_list\
    \ = [paren.strip(')(') for paren in paren_list]\n    paren_list = [paren.strip('()')\
    \ for paren in paren_list]\n    paren_list = [paren.strip(')(') for paren in paren_list]\n\
    \    paren_list = [paren.strip('()') for paren in paren_list]\n    paren_list\
    \ = [paren.strip(')(') for paren in paren_list]\n    paren_list = [paren.strip('()')\
    \ for paren in paren_list]\n    paren_list = [paren.strip(')(') for paren in paren_list]\n\
    \    paren_list = [paren.strip('()') for paren\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpo0pm8ko2.py\", line 31\n    paren_list = [paren.strip('()')\
    \ for paren\n                 ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbwvmp3kf.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbwvmp3kf.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbwvmp3kf.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo4bdn1n0.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpo4bdn1n0.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpo4bdn1n0.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4t32y3lf.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp4t32y3lf.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp4t32y3lf.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    result = []\n    for paren in paren_list:\n    \
    \    result.append(paren_depth(paren))\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxx_br88.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpkxx_br88.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkxx_br88.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpkxx_br88.py\", line 12, in parse_nested_parens\n\
    \    result.append(paren_depth(paren))\nNameError: name 'paren_depth' is not defined.\
    \ Did you mean: 'paren_list'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwnnof7d7.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpwnnof7d7.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpwnnof7d7.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprdv8qkk6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprdv8qkk6.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmprdv8qkk6.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgkg0ppy7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpgkg0ppy7.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpgkg0ppy7.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqb1ywxob.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpqb1ywxob.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpqb1ywxob.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpian9detb.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpian9detb.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpian9detb.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyd4x2sfv.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpyd4x2sfv.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpyd4x2sfv.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp606pbe1q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp606pbe1q.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp606pbe1q.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = 0\n    for paren in paren_list:\n  \
    \      depth = 0\n        for char in paren:\n            if char == '(':\n  \
    \              depth += 1\n            elif char == ')':\n                depth\
    \ -= 1\n            if depth < 0:\n                raise ValueError('Invalid input\
    \ string')\n            max_depth = max(max_depth, depth)\n    return max_depth\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfkrf0azf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpfkrf0azf.py\", line 29,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpfkrf0azf.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    if not\
    \ paren_string:\n        return []\n\n    paren_list = paren_string.split()\n\
    \    max_nesting_list = []\n    for paren in paren_list:\n        max_nesting\
    \ = 0\n        current_nesting = 0\n        for char in paren:\n            if\
    \ char == '(':\n                current_nesting += 1\n                max_nesting\
    \ = max(max_nesting, current_nesting)\n            elif char == ')':\n       \
    \         current_nesting -= 1\n        max_nesting_list.append(max_nesting)\n\
    \    return max_nesting_list\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    for c in paren_string:\n        if c == '(':\n\
    \            current_nesting += 1\n            max_nesting = max(max_nesting,\
    \ current_nesting)\n        elif c == ')':\n            current_nesting -= 1\n\
    \    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphgdzphdm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmphgdzphdm.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmphgdzphdm.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdwaesgf0.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpdwaesgf0.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdwaesgf0.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpykw3lbz_.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpykw3lbz_.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpykw3lbz_.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    paren_levels = []\n    for paren in paren_list:\n\
    \        paren_levels.append(paren_level(paren))\n    return paren_levels\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5upxu7kc.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp5upxu7kc.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp5upxu7kc.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp5upxu7kc.py\", line 12, in parse_nested_parens\n\
    \    paren_levels.append(paren_level(paren))\nNameError: name 'paren_level' is\
    \ not defined. Did you mean: 'paren_levels'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_level\
    \ = 0\n    current_level = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_level += 1\n            max_level = max(max_level,\
    \ current_level)\n        elif char == ')':\n            current_level -= 1\n\
    \    return max_level\n\nprint(parse_nested_parens('(()())'))\nprint(parse_nested_parens('((()))'))\n\
    print(parse_nested_parens('(()())(()())'))\nprint(parse_nested_parens('(()())(()())((()()))'))\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: "2\n3\n2\n3\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprh22f2u3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmprh22f2u3.py\", line 29,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmprh22f2u3.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    if not\
    \ paren_string:\n        return []\n\n    paren_string = paren_string.strip()\n\
    \    paren_string = paren_string.replace(' ', '')\n    max_depth = 0\n    current_depth\
    \ = 0\n    for paren in paren_string:\n        if paren == '(':\n            current_depth\
    \ += 1\n            max_depth = max(max_depth, current_depth)\n        elif paren\
    \ == ')':\n            current_depth -= 1\n    return max_depth\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeksgybgv.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpeksgybgv.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpeksgybgv.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeut89kul.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpeut89kul.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpeut89kul.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpofdwbv48.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpofdwbv48.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpofdwbv48.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    paren_list = [paren.strip() for paren in paren_list]\n\
    \    paren_list = [paren.replace('(', ' ') for paren in paren_list]\n    paren_list\
    \ = [paren.replace(')', ' ') for paren in paren_list]\n    paren_list = [paren.split()\
    \ for paren in paren_list]\n    paren_list = [len(paren) for paren in paren_list]\n\
    \    return paren_list\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxojymfzq.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpxojymfzq.py\", line 23,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxojymfzq.py\"\
    , line 18, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_nesting = []\n    for paren in paren_list:\n\
    \        max_nesting.append(get_max_nesting(paren))\n    return max_nesting\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbhhr61ve.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpbhhr61ve.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbhhr61ve.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpbhhr61ve.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpph20etq4.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpph20etq4.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpph20etq4.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    curr_depth = 0\n    for char in paren_string:\n        if char == '(':\n\
    \            curr_depth += 1\n            max_depth = max(max_depth, curr_depth)\n\
    \        elif char == ')':\n            curr_depth -= 1\n    return max_depth\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeffg7hl8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpeffg7hl8.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpeffg7hl8.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0y1ocrq_.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp0y1ocrq_.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp0y1ocrq_.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjxt_4peu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpjxt_4peu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpjxt_4peu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_nesting = []\n    for paren in paren_list:\n\
    \        max_nesting.append(max_nesting_parens(paren))\n    return max_nesting\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_fr0a6ux.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp_fr0a6ux.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_fr0a6ux.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp_fr0a6ux.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkioggjr2.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpkioggjr2.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpkioggjr2.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_nesting = []\n    for paren in paren_list:\n\
    \        max_nesting.append(paren.count('(') - paren.count(')'))\n    return max_nesting\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1r9w9o1o.py\", line\
    \ 24, in <module>\n    test_check()\n  File \"/tmp/tmp1r9w9o1o.py\", line 22,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1r9w9o1o.py\"\
    , line 17, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbo65mizz.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpbo65mizz.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbo65mizz.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpic34a6v_.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpic34a6v_.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpic34a6v_.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = 0\n    for paren in paren_list:\n  \
    \      depth = 0\n        for char in paren:\n            if char == '(':\n  \
    \              depth += 1\n            elif char == ')':\n                depth\
    \ -= 1\n            else:\n                raise ValueError(\"Invalid character\
    \ in input string\")\n            if depth < 0:\n                raise ValueError(\"\
    Invalid input string\")\n            max_depth = max(max_depth, depth)\n    return\
    \ max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgnvqa5ix.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpgnvqa5ix.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpgnvqa5ix.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphz2t4c_j.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmphz2t4c_j.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmphz2t4c_j.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    if not\
    \ paren_string:\n        return []\n\n    paren_groups = paren_string.split()\n\
    \    max_nesting_levels = []\n    for paren_group in paren_groups:\n        max_nesting_levels.append(get_max_nesting_level(paren_group))\n\
    \n    return max_nesting_levels\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbj1_mxp_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbj1_mxp_.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpbj1_mxp_.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpbj1_mxp_.py\", line 15, in parse_nested_parens\n\
    \    max_nesting_levels.append(get_max_nesting_level(paren_group))\nNameError:\
    \ name 'get_max_nesting_level' is not defined. Did you mean: 'max_nesting_levels'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = 0\n    for paren in paren_list:\n  \
    \      depth = 0\n        for char in paren:\n            if char == '(':\n  \
    \              depth += 1\n            elif char == ')':\n                depth\
    \ -= 1\n        max_depth = max(max_depth, depth)\n    return max_depth\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq_4iniw4.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpq_4iniw4.py\", line 27,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpq_4iniw4.py\"\
    , line 22, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4eb4u0q_.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4eb4u0q_.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp4eb4u0q_.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3bs0rklw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3bs0rklw.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp3bs0rklw.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjhre3t81.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjhre3t81.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpjhre3t81.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = 0\n    depth = 0\n    max_depth_list\
    \ = []\n    for paren in paren_list:\n        for char in paren:\n           \
    \ if char == '(':\n                depth += 1\n                if depth > max_depth:\n\
    \                    max_depth = depth\n            elif char == ')':\n      \
    \          depth -= 1\n        max_depth_list.append(max_depth)\n        max_depth\
    \ = 0\n        depth = 0\n    return max_depth_list\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    result\
    \ = []\n    for paren_group in paren_string.split():\n        max_level = 0\n\
    \        current_level = 0\n        for paren in paren_group:\n            if\
    \ paren == '(':\n                current_level += 1\n                max_level\
    \ = max(max_level, current_level)\n            elif paren == ')':\n          \
    \      current_level -= 1\n        result.append(max_level)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_nesting = []\n    for paren in paren_list:\n\
    \        max_nesting.append(max_nesting_parens(paren))\n    return max_nesting\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzd9iao4d.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpzd9iao4d.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpzd9iao4d.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpzd9iao4d.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp577dvml0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp577dvml0.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp577dvml0.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1w2oljhz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1w2oljhz.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1w2oljhz.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = 0\n    for paren in paren_list:\n  \
    \      depth = 0\n        for c in paren:\n            if c == '(':\n        \
    \        depth += 1\n            elif c == ')':\n                depth -= 1\n\
    \            if depth < 0:\n                break\n            max_depth = max(max_depth,\
    \ depth)\n    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppr1b7jfz.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppr1b7jfz.py\", line 30,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppr1b7jfz.py\"\
    , line 25, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfvqmqmks.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpfvqmqmks.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpfvqmqmks.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split(' ')\n    result = []\n    for paren in paren_list:\n \
    \       max_level = 0\n        curr_level = 0\n        for char in paren:\n  \
    \          if char == '(':\n                curr_level += 1\n                max_level\
    \ = max(max_level, curr_level)\n            elif char == ')':\n              \
    \  curr_level -= 1\n        result.append(max_level)\n    return result\n\ndef\
    \ check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    result = []\n    for paren in paren_list:\n    \
    \    max_depth = 0\n        current_depth = 0\n        for char in paren:\n  \
    \          if char == '(':\n                current_depth += 1\n             \
    \   max_depth = max(max_depth, current_depth)\n            elif char == ')':\n\
    \                current_depth -= 1\n        result.append(max_depth)\n    return\
    \ result\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_u_7p94y.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_u_7p94y.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_u_7p94y.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = []\n    for paren in paren_list:\n \
    \       depth = 0\n        max_depth_so_far = 0\n        for char in paren:\n\
    \            if char == '(':\n                depth += 1\n                max_depth_so_far\
    \ = max(max_depth_so_far, depth)\n            elif char == ')':\n            \
    \    depth -= 1\n        max_depth.append(max_depth_so_far)\n    return max_depth\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    result = []\n    for paren in paren_list:\n    \
    \    max_depth = 0\n        depth = 0\n        for char in paren:\n          \
    \  if char == '(':\n                depth += 1\n                max_depth = max(max_depth,\
    \ depth)\n            elif char == ')':\n                depth -= 1\n        result.append(max_depth)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hireqgu.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp9hireqgu.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9hireqgu.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_nesting = []\n    for paren in paren_list:\n\
    \        max_nesting.append(paren.count('(') - paren.count(')'))\n    return max_nesting\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprfp8o1wn.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmprfp8o1wn.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmprfp8o1wn.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpid49kh94.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpid49kh94.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpid49kh94.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    curr_depth = 0\n    for c in paren_string:\n        if c == '(':\n\
    \            curr_depth += 1\n            max_depth = max(max_depth, curr_depth)\n\
    \        elif c == ')':\n            curr_depth -= 1\n    return max_depth\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo11m1zyz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpo11m1zyz.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpo11m1zyz.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppnf0__q0.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppnf0__q0.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppnf0__q0.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdlk5obn8.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpdlk5obn8.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdlk5obn8.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Write your code here\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1lyhzw2u.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp1lyhzw2u.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1lyhzw2u.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv189tc75.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpv189tc75.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv189tc75.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for paren in paren_string:\n        if paren\
    \ == '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif paren == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9r26dh_e.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp9r26dh_e.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9r26dh_e.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppgocomcm.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmppgocomcm.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmppgocomcm.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    for char in paren_string:\n        if char\
    \ == '(':\n            current_nesting += 1\n            max_nesting = max(max_nesting,\
    \ current_nesting)\n        elif char == ')':\n            current_nesting -=\
    \ 1\n    return max_nesting\n\nprint(parse_nested_parens('(()())'))\nprint(parse_nested_parens('((()))'))\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: "2\n3\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnyy_3wyo.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnyy_3wyo.py\", line 27,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpnyy_3wyo.py\"\
    , line 22, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4p1c_37m.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp4p1c_37m.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp4p1c_37m.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplfbk49dp.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplfbk49dp.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmplfbk49dp.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    result\
    \ = []\n    for paren_group in paren_string.split():\n        max_level = 0\n\
    \        current_level = 0\n        for paren in paren_group:\n            if\
    \ paren == '(':\n                current_level += 1\n                max_level\
    \ = max(max_level, current_level)\n            elif paren == ')':\n          \
    \      current_level -= 1\n        result.append(max_level)\n    return result\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    paren_depth = []\n    for paren in paren_list:\n\
    \        depth = 0\n        max_depth = 0\n        for char in paren:\n      \
    \      if char == '(':\n                depth += 1\n                max_depth\
    \ = max(max_depth, depth)\n            elif char == ')':\n                depth\
    \ -= 1\n        paren_depth.append(max_depth)\n    return paren_depth\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = []\n    for paren in paren_list:\n \
    \       depth = 0\n        max_depth_in_paren = 0\n        for char in paren:\n\
    \            if char == '(':\n                depth += 1\n                max_depth_in_paren\
    \ = max(max_depth_in_paren, depth)\n            elif char == ')':\n          \
    \      depth -= 1\n        max_depth.append(max_depth_in_paren)\n    return max_depth\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpntwj8qn5.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpntwj8qn5.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpntwj8qn5.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = 0\n    for paren in paren_list:\n  \
    \      depth = 0\n        for char in paren:\n            if char == '(':\n  \
    \              depth += 1\n            elif char == ')':\n                depth\
    \ -= 1\n            if depth < 0:\n                break\n            max_depth\
    \ = max(max_depth, depth)\n    return max_depth\n\n\ndef check(candidate):\n \
    \   assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzq6flw1j.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpzq6flw1j.py\", line 30,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpzq6flw1j.py\"\
    , line 25, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph1gsn8ra.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmph1gsn8ra.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmph1gsn8ra.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    for char in paren_string:\n        if char\
    \ == '(':\n            current_nesting += 1\n            max_nesting = max(max_nesting,\
    \ current_nesting)\n        elif char == ')':\n            current_nesting -=\
    \ 1\n    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7s_p5wmk.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7s_p5wmk.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp7s_p5wmk.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaxlhdi32.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpaxlhdi32.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpaxlhdi32.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9g2t_slj.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp9g2t_slj.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp9g2t_slj.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpko8807x8.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpko8807x8.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpko8807x8.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    result\
    \ = []\n    for paren_group in paren_string.split():\n        max_depth = 0\n\
    \        current_depth = 0\n        for paren in paren_group:\n            if\
    \ paren == '(':\n                current_depth += 1\n                max_depth\
    \ = max(max_depth, current_depth)\n            else:\n                current_depth\
    \ -= 1\n        result.append(max_depth)\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj8rneq_e.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpj8rneq_e.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpj8rneq_e.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = []\n    for paren in paren_list:\n \
    \       depth = 0\n        max_depth_so_far = 0\n        for char in paren:\n\
    \            if char == '(':\n                depth += 1\n                max_depth_so_far\
    \ = max(max_depth_so_far, depth)\n            elif char == ')':\n            \
    \    depth -= 1\n        max_depth.append(max_depth_so_far)\n    return max_depth\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1cw3pfcz.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1cw3pfcz.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1cw3pfcz.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg8dtvc2y.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg8dtvc2y.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpg8dtvc2y.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_nuok3w.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpv_nuok3w.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv_nuok3w.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiuvap6wu.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpiuvap6wu.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpiuvap6wu.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2nge78i6.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp2nge78i6.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp2nge78i6.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm1b18wnu.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpm1b18wnu.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpm1b18wnu.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_string\
    \ = paren_string.strip()\n    if not paren_string:\n        return []\n    paren_list\
    \ = paren_string.split(' ')\n    max_depth = []\n    for paren in paren_list:\n\
    \        depth = 0\n        max_depth_so_far = 0\n        for char in paren:\n\
    \            if char == '(':\n                depth += 1\n                max_depth_so_far\
    \ = max(max_depth_so_far, depth)\n            elif char == ')':\n            \
    \    depth -= 1\n        max_depth.append(max_depth_so_far)\n    return max_depth\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = 0\n    for paren in paren_list:\n  \
    \      depth = 0\n        for char in paren:\n            if char == '(':\n  \
    \              depth += 1\n            elif char == ')':\n                depth\
    \ -= 1\n            if depth < 0:\n                break\n            max_depth\
    \ = max(max_depth, depth)\n    return max_depth\n\ndef check(candidate):\n   \
    \ assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzi5kzdes.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpzi5kzdes.py\", line 29,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpzi5kzdes.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ivkeghl.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp4ivkeghl.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp4ivkeghl.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = 0\n    for paren in paren_list:\n  \
    \      depth = 0\n        for char in paren:\n            if char == '(':\n  \
    \              depth += 1\n            elif char == ')':\n                depth\
    \ -= 1\n            if depth < 0:\n                break\n            max_depth\
    \ = max(max_depth, depth)\n    return max_depth\n\ndef check(candidate):\n   \
    \ assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn7mnyzgx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpn7mnyzgx.py\", line 29,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpn7mnyzgx.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn33k0n07.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpn33k0n07.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpn33k0n07.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_nesting = []\n    for paren in paren_list:\n\
    \        max_nesting.append(max_nesting_parens(paren))\n    return max_nesting\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpup0ls58j.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpup0ls58j.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpup0ls58j.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpup0ls58j.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(max_nesting_parens(paren))\nNameError: name 'max_nesting_parens'\
    \ is not defined\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split(' ')\n    output_list = []\n    for paren in paren_list:\n\
    \        max_nesting = 0\n        current_nesting = 0\n        for p in paren:\n\
    \            if p == '(':\n                current_nesting += 1\n            \
    \    max_nesting = max(max_nesting, current_nesting)\n            elif p == ')':\n\
    \                current_nesting -= 1\n        output_list.append(max_nesting)\n\
    \    return output_list\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4zs4dn6f.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4zs4dn6f.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp4zs4dn6f.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    for char in paren_string:\n        if char\
    \ == '(':\n            current_nesting += 1\n            max_nesting = max(max_nesting,\
    \ current_nesting)\n        elif char == ')':\n            current_nesting -=\
    \ 1\n    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm86zbhmk.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpm86zbhmk.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpm86zbhmk.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptahh4tbr.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmptahh4tbr.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmptahh4tbr.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_string\
    \ = paren_string.strip()\n    if not paren_string:\n        return []\n    paren_list\
    \ = paren_string.split(' ')\n    output = []\n    for paren in paren_list:\n \
    \       if not paren:\n            continue\n        stack = []\n        max_depth\
    \ = 0\n        for char in paren:\n            if char == '(':\n             \
    \   stack.append(char)\n                max_depth = max(max_depth, len(stack))\n\
    \            elif char == ')':\n                if not stack:\n              \
    \      raise ValueError('Invalid input string')\n                stack.pop()\n\
    \            else:\n                raise ValueError('Invalid input string')\n\
    \        if stack:\n            raise ValueError('Invalid input string')\n   \
    \     output.append(max_depth)\n    return output\n\ndef check(candidate):\n \
    \   assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    if not\
    \ paren_string:\n        return []\n\n    result = []\n    for paren_group in\
    \ paren_string.split():\n        max_depth = 0\n        depth = 0\n        for\
    \ paren in paren_group:\n            if paren == '(':\n                depth +=\
    \ 1\n                max_depth = max(max_depth, depth)\n            elif paren\
    \ == ')':\n                depth -= 1\n        result.append(max_depth)\n    return\
    \ result\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    result\
    \ = []\n    for group in paren_string.split():\n        max_level = 0\n      \
    \  level = 0\n        for char in group:\n            if char == '(':\n      \
    \          level += 1\n                max_level = max(max_level, level)\n   \
    \         elif char == ')':\n                level -= 1\n        result.append(max_level)\n\
    \    return result\n\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnwoj3zwi.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpnwoj3zwi.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpnwoj3zwi.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    return\
    \ [max(paren_string.count('('), paren_string.count(')')) for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpowzdyls7.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpowzdyls7.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpowzdyls7.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5twj363v.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5twj363v.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp5twj363v.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    for char in paren_string:\n        if char\
    \ == '(':\n            current_nesting += 1\n            max_nesting = max(max_nesting,\
    \ current_nesting)\n        elif char == ')':\n            current_nesting -=\
    \ 1\n    return max_nesting\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsa4fijhb.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpsa4fijhb.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsa4fijhb.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp4oi78ey.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpp4oi78ey.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpp4oi78ey.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp017j3bvl.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp017j3bvl.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp017j3bvl.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    for char in paren_string:\n        if char\
    \ == '(':\n            current_nesting += 1\n            max_nesting = max(max_nesting,\
    \ current_nesting)\n        elif char == ')':\n            current_nesting -=\
    \ 1\n    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz_zxum7l.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpz_zxum7l.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpz_zxum7l.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_nesting = []\n    for paren in paren_list:\n\
    \        max_nesting.append(paren_nesting(paren))\n    return max_nesting\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6akfbwfk.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp6akfbwfk.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp6akfbwfk.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp6akfbwfk.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(paren_nesting(paren))\nNameError: name 'paren_nesting'\
    \ is not defined. Did you mean: 'paren_string'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_levels = []\n    for paren in paren_list:\n\
    \        level = 0\n        max_level = 0\n        for p in paren:\n         \
    \   if p == '(':\n                level += 1\n                max_level = max(max_level,\
    \ level)\n            elif p == ')':\n                level -= 1\n        max_levels.append(max_level)\n\
    \    return max_levels\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    return\
    \ [paren_string.count('(') - paren_string.count(')') for paren_string in paren_string.split()]\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsnfjtshb.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpsnfjtshb.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsnfjtshb.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    if not\
    \ paren_string:\n        return []\n\n    paren_string = paren_string.strip()\n\
    \    paren_string = paren_string.replace(' ', '')\n    paren_string = paren_string.replace('(',\
    \ ' ( ')\n    paren_string = paren_string.replace(')', ' ) ')\n    paren_string\
    \ = paren_string.split()\n\n    max_nesting = 0\n    current_nesting = 0\n   \
    \ for paren in paren_string:\n        if paren == '(':\n            current_nesting\
    \ += 1\n            max_nesting = max(max_nesting, current_nesting)\n        elif\
    \ paren == ')':\n            current_nesting -= 1\n        else:\n           \
    \ raise ValueError('Invalid input string')\n\n    return [max_nesting] * (len(paren_string)\
    \ // 2)\n\n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxvjplb4q.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpxvjplb4q.py\", line 38,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxvjplb4q.py\"\
    , line 33, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for c in paren_string:\n        if c == '(':\n\
    \            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n\
    \        elif c == ')':\n            current_depth -= 1\n    return max_depth\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5rsb41v8.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp5rsb41v8.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp5rsb41v8.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_nesting = []\n    for paren in paren_list:\n\
    \        max_nesting.append(get_max_nesting(paren))\n    return max_nesting\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeuf5hcw3.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpeuf5hcw3.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpeuf5hcw3.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpeuf5hcw3.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for c in paren_string:\n        if c == '(':\n\
    \            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n\
    \        elif c == ')':\n            current_depth -= 1\n    return max_depth\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp1as7naz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpp1as7naz.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpp1as7naz.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3brwxl3e.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmp3brwxl3e.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp3brwxl3e.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = 0\n    for paren in paren_list:\n  \
    \      depth = 0\n        for char in paren:\n            if char == '(':\n  \
    \              depth += 1\n            elif char == ')':\n                depth\
    \ -= 1\n            else:\n                raise ValueError('Invalid character\
    \ in input string')\n            if depth < 0:\n                raise ValueError('Invalid\
    \ input string')\n            max_depth = max(max_depth, depth)\n    return max_depth\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplr3t47jz.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmplr3t47jz.py\", line 31,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmplr3t47jz.py\"\
    , line 26, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_string\
    \ = paren_string.strip()\n    if not paren_string:\n        return []\n    paren_list\
    \ = paren_string.split(' ')\n    result = []\n    for paren in paren_list:\n \
    \       if not paren:\n            continue\n        max_nesting = 0\n       \
    \ nesting = 0\n        for char in paren:\n            if char == '(':\n     \
    \           nesting += 1\n                max_nesting = max(max_nesting, nesting)\n\
    \            elif char == ')':\n                nesting -= 1\n        result.append(max_nesting)\n\
    \    return result\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxnk21m8g.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpxnk21m8g.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxnk21m8g.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement me\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx4_oyywe.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpx4_oyywe.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpx4_oyywe.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split(' ')\n    result = []\n    for paren in paren_list:\n \
    \       depth = 0\n        max_depth = 0\n        for char in paren:\n       \
    \     if char == '(':\n                depth += 1\n                max_depth =\
    \ max(max_depth, depth)\n            elif char == ')':\n                depth\
    \ -= 1\n        result.append(max_depth)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyz3oo3e2.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpyz3oo3e2.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpyz3oo3e2.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_level\
    \ = 0\n    current_level = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_level += 1\n            max_level = max(max_level,\
    \ current_level)\n        elif char == ')':\n            current_level -= 1\n\
    \    return max_level\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdggchnqg.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpdggchnqg.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdggchnqg.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3rawueix.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp3rawueix.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp3rawueix.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_nesting\
    \ = 0\n    curr_nesting = 0\n    for c in paren_string:\n        if c == '(':\n\
    \            curr_nesting += 1\n            max_nesting = max(max_nesting, curr_nesting)\n\
    \        elif c == ')':\n            curr_nesting -= 1\n    return max_nesting\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsgl9jg3s.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpsgl9jg3s.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsgl9jg3s.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_mr_vqnr.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp_mr_vqnr.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp_mr_vqnr.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    output = []\n    for paren in paren_list:\n    \
    \    if paren[0] != '(' or paren[-1] != ')':\n            raise ValueError('Input\
    \ string is not valid')\n        else:\n            count = 0\n            max_count\
    \ = 0\n            for char in paren:\n                if char == '(':\n     \
    \               count += 1\n                    max_count = max(max_count, count)\n\
    \                elif char == ')':\n                    count -= 1\n         \
    \   output.append(max_count)\n    return output\n\ndef check(candidate):\n   \
    \ assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcghnch2q.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpcghnch2q.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpcghnch2q.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpca6masd9.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpca6masd9.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpca6masd9.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd4lkn5qt.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpd4lkn5qt.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpd4lkn5qt.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    curr_depth = 0\n    for char in paren_string:\n        if char == '(':\n\
    \            curr_depth += 1\n            max_depth = max(max_depth, curr_depth)\n\
    \        elif char == ')':\n            curr_depth -= 1\n    return max_depth\n\
    \nprint(parse_nested_parens('(()())'))\nprint(parse_nested_parens('((()))'))\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: "2\n3\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0lj2c2hh.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp0lj2c2hh.py\", line 27,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp0lj2c2hh.py\"\
    , line 22, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxz84cvet.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpxz84cvet.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpxz84cvet.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdw5a6_f7.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpdw5a6_f7.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpdw5a6_f7.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1mu5q25a.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmp1mu5q25a.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1mu5q25a.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv5q9li9c.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpv5q9li9c.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv5q9li9c.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpog73md_y.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpog73md_y.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpog73md_y.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_nesting = []\n    for paren in paren_list:\n\
    \        max_nesting.append(paren_nesting(paren))\n    return max_nesting\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4mq3drod.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmp4mq3drod.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp4mq3drod.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmp4mq3drod.py\", line 12, in parse_nested_parens\n\
    \    max_nesting.append(paren_nesting(paren))\nNameError: name 'paren_nesting'\
    \ is not defined. Did you mean: 'paren_string'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement me\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa2qiv5b9.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpa2qiv5b9.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpa2qiv5b9.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    if paren_string\
    \ == \"\":\n        return []\n    else:\n        return [max(map(lambda x: x.count(\"\
    (\"), paren_string.split(\" \")))]\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpozh8vud_.py\", line\
    \ 23, in <module>\n    test_check()\n  File \"/tmp/tmpozh8vud_.py\", line 21,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpozh8vud_.py\"\
    , line 16, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    curr_depth = 0\n    for char in paren_string:\n        if char == '(':\n\
    \            curr_depth += 1\n            max_depth = max(max_depth, curr_depth)\n\
    \        elif char == ')':\n            curr_depth -= 1\n    return max_depth\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3aopdvwn.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3aopdvwn.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp3aopdvwn.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    for char in paren_string:\n        if char\
    \ == '(':\n            current_nesting += 1\n            max_nesting = max(max_nesting,\
    \ current_nesting)\n        elif char == ')':\n            current_nesting -=\
    \ 1\n    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjq9ncl26.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjq9ncl26.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpjq9ncl26.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsnt4ou1n.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpsnt4ou1n.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsnt4ou1n.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    return []\n\ndef check(candidate):\n    assert\
    \ candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('()\
    \ (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk60d5nkv.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpk60d5nkv.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpk60d5nkv.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprr4wx975.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprr4wx975.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmprr4wx975.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split(' ')\n    result = []\n    for paren in paren_list:\n \
    \       count = 0\n        max_count = 0\n        for char in paren:\n       \
    \     if char == '(':\n                count += 1\n                max_count =\
    \ max(max_count, count)\n            elif char == ')':\n                count\
    \ -= 1\n        result.append(max_count)\n    return result\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy41z2dwv.py\", line\
    \ 20, in <module>\n    test_check()\n  File \"/tmp/tmpy41z2dwv.py\", line 18,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpy41z2dwv.py\"\
    , line 13, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsuy3lzn4.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpsuy3lzn4.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpsuy3lzn4.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_nesting\
    \ = 0\n    current_nesting = 0\n    for char in paren_string:\n        if char\
    \ == '(':\n            current_nesting += 1\n            max_nesting = max(max_nesting,\
    \ current_nesting)\n        elif char == ')':\n            current_nesting -=\
    \ 1\n    return max_nesting\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprxpz8drj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprxpz8drj.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmprxpz8drj.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    result\
    \ = []\n    for paren_group in paren_string.split(' '):\n        max_depth = 0\n\
    \        current_depth = 0\n        for char in paren_group:\n            if char\
    \ == '(':\n                current_depth += 1\n                max_depth = max(max_depth,\
    \ current_depth)\n            elif char == ')':\n                current_depth\
    \ -= 1\n        result.append(max_depth)\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate('(()()) ((())) () ((())()())') == [2, 3, 1, 3]\n    assert\
    \ candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))')\
    \ == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv_11ek6d.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpv_11ek6d.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpv_11ek6d.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpesto945w.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpesto945w.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpesto945w.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split()\n    max_depth = 0\n    for paren in paren_list:\n  \
    \      depth = 0\n        for char in paren:\n            if char == '(':\n  \
    \              depth += 1\n            if char == ')':\n                depth\
    \ -= 1\n            if depth > max_depth:\n                max_depth = depth\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeimb45ht.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpeimb45ht.py\", line 29,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpeimb45ht.py\"\
    , line 24, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    # TODO:\
    \ Implement this function\n    pass\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwji4vxk.py\", line\
    \ 21, in <module>\n    test_check()\n  File \"/tmp/tmpgwji4vxk.py\", line 19,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpgwji4vxk.py\"\
    , line 14, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\nprint(parse_nested_parens('(()())'))\nprint(parse_nested_parens('((()))'))\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: "2\n3\n"
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaa7qszq7.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpaa7qszq7.py\", line 27,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpaa7qszq7.py\"\
    , line 22, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuh0v9ule.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpuh0v9ule.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpuh0v9ule.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt8hn6g9v.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpt8hn6g9v.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpt8hn6g9v.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1f0hwfsa.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp1f0hwfsa.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp1f0hwfsa.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    if not\
    \ paren_string:\n        return []\n\n    paren_groups = paren_string.split()\n\
    \    max_nesting_levels = []\n    for paren_group in paren_groups:\n        max_nesting_levels.append(get_max_nesting_level(paren_group))\n\
    \n    return max_nesting_levels\n\n\ndef check(candidate):\n    assert candidate('(()())\
    \ ((())) () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((()))\
    \ (((())))') == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\n\
    def test_check():\n    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu1pswych.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu1pswych.py\", line 26,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpu1pswych.py\"\
    , line 21, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmpu1pswych.py\", line 15, in parse_nested_parens\n\
    \    max_nesting_levels.append(get_max_nesting_level(paren_group))\nNameError:\
    \ name 'get_max_nesting_level' is not defined. Did you mean: 'max_nesting_levels'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for char in paren_string:\n        if char ==\
    \ '(':\n            current_depth += 1\n            max_depth = max(max_depth,\
    \ current_depth)\n        elif char == ')':\n            current_depth -= 1\n\
    \    return max_depth\n\ndef check(candidate):\n    assert candidate('(()()) ((()))\
    \ () ((())()())') == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))')\
    \ == [1, 2, 3, 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n\
    \    check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjeu3c7os.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpjeu3c7os.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmpjeu3c7os.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_list\
    \ = paren_string.split(' ')\n    output_list = []\n    for paren in paren_list:\n\
    \        stack = []\n        max_depth = 0\n        for char in paren:\n     \
    \       if char == '(':\n                stack.append(char)\n                max_depth\
    \ = max(max_depth, len(stack))\n            elif char == ')':\n              \
    \  stack.pop()\n        output_list.append(max_depth)\n    return output_list\n\
    \n\ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())')\
    \ == [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3,\
    \ 4]\n    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n   \
    \ check(parse_nested_parens)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    paren_string\
    \ = paren_string.strip()\n    if not paren_string:\n        return []\n    paren_list\
    \ = paren_string.split()\n    max_nesting = []\n    for paren in paren_list:\n\
    \        max_nesting.append(get_max_nesting(paren))\n    return max_nesting\n\n\
    def check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphykz51yg.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmphykz51yg.py\", line 24,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmphykz51yg.py\"\
    , line 19, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\n  File \"/tmp/tmphykz51yg.py\", line 15, in parse_nested_parens\n\
    \    max_nesting.append(get_max_nesting(paren))\nNameError: name 'get_max_nesting'\
    \ is not defined. Did you mean: 'max_nesting'?\n"
  exit_code: -1
  status: Exception
- program: "from typing import List\n\ndef parse_nested_parens(paren_string: str)\
    \ -> List[int]:\n    \"\"\" Input to this function is a string represented multiple\
    \ groups for nested parentheses separated by spaces.\n    For each of the group,\
    \ output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum\
    \ two levels of nesting while ((())) has three.\n\n        \"\"\"\n    max_depth\
    \ = 0\n    current_depth = 0\n    for c in paren_string:\n        if c == '(':\n\
    \            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n\
    \        elif c == ')':\n            current_depth -= 1\n    return max_depth\n\
    \ndef check(candidate):\n    assert candidate('(()()) ((())) () ((())()())') ==\
    \ [2, 3, 1, 3]\n    assert candidate('() (()) ((())) (((())))') == [1, 2, 3, 4]\n\
    \    assert candidate('(()(())((())))') == [4]\n\ndef test_check():\n    check(parse_nested_parens)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4gt052e5.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp4gt052e5.py\", line 25,\
    \ in test_check\n    check(parse_nested_parens)\n  File \"/tmp/tmp4gt052e5.py\"\
    , line 20, in check\n    assert candidate('(()()) ((())) () ((())()())') == [2,\
    \ 3, 1, 3]\nAssertionError\n"
  exit_code: -1
  status: Exception
