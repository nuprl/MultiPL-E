name: HumanEval_153_Strongest_Extension
language: py
prompt: "from typing import List\n\ndef Strongest_Extension(class_name: str, extensions:\
  \ List[str]) -> str:\n    \"\"\"You will be given the name of a class (a string)\
  \ and a list of extensions.\n    The extensions are to be used to load additional\
  \ classes to the class. The\n    strength of the extension is as follows: Let CAP\
  \ be the number of the uppercase\n    letters in the extension's name, and let SM\
  \ be the number of lowercase letters \n    in the extension's name, the strength\
  \ is given by the fraction CAP - SM. \n    You should find the strongest extension\
  \ and return a string in this \n    format: ClassName.StrongestExtensionName.\n\
  \    If there are two or more extensions with the same strength, you should\n  \
  \  choose the one that comes first in the list.\n    For example, if you are given\
  \ \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese',\
  \ 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes'\
  \ is the strongest extension \n    (its strength is -1).\n    Example:\n       \
  \ \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Watashi', ['tEN', 'niNE', 'eIGHt8OKe'])\
  \ == 'Watashi.eIGHt8OKe'\n    assert candidate('Boku123', ['nani', 'NazeDa', 'YEs.WeCaNe',\
  \ '32145tggg']) == 'Boku123.YEs.WeCaNe'\n    assert candidate('__YESIMHERE', ['t',\
  \ 'eMptY', 'nothing', 'zeR00', 'NuLl__', '123NoooneB321']) == '__YESIMHERE.NuLl__'\n\
  \    assert candidate('K', ['Ta', 'TAR', 't234An', 'cosSo']) == 'K.TAR'\n    assert\
  \ candidate('__HAHA', ['Tab', '123', '781345', '-_-']) == '__HAHA.123'\n    assert\
  \ candidate('YameRore', ['HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-']) == 'YameRore.okIWILL123'\n\
  \    assert candidate('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) == 'finNNalLLly.WoW'\n\
  \    assert candidate('_', ['Bb', '91245']) == '_.Bb'\n    assert candidate('Sp',\
  \ ['671235', 'Bb']) == 'Sp.671235'\n\ndef test_check():\n    check(Strongest_Extension)\n\
  \ntest_check()\n"
completions: ["    # your code here\n    return \"\"\n", "    class_name = class_name.lower()\n\
    \    strongest_extension = extensions[0]\n    strongest_strength = 0\n    for\
    \ extension in extensions:\n        extension = extension.lower()\n        strength\
    \ = 0\n        for letter in extension:\n            if letter.isupper():\n  \
    \              strength += 1\n            elif letter.islower():\n           \
    \     strength -= 1\n        if strength > strongest_strength:\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n    return class_name.capitalize()\
    \ + '.' + strongest_extension.capitalize()", "    class_name = class_name.replace(\"\
    \ \", \"\")\n    extensions = [extension.replace(\" \", \"\") for extension in\
    \ extensions]\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    extension_strength += 1\n            elif letter.islower():\n           \
    \     extension_strength -= 1\n        if extension_strength > strongest_extension_strength:\n\
    \            strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name}.{strongest_extension}\"\n", "    # your\
    \ code here\n    return \"\"\n\n", "    class_name = class_name.title()\n    strongest_extension\
    \ = extensions[0]\n    strongest_strength = 0\n    for extension in extensions:\n\
    \        strength = sum(1 for c in extension if c.isupper()) - sum(1 for c in\
    \ extension if c.islower())\n        if strength > strongest_strength:\n     \
    \       strongest_strength = strength\n            strongest_extension = extension\n\
    \    return class_name + '.' + strongest_extension\n", "    strongest_extension\
    \ = extensions[0]\n    strongest_strength = 0\n    for extension in extensions:\n\
    \        strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                strength += 1\n            else:\n                strength -=\
    \ 1\n        if strength > strongest_strength:\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n    return class_name\
    \ + '.' + strongest_extension\n", "    # your code here\n    return \"\"\n\n",
  "    class_name = class_name.replace(\" \", \"\")\n    extensions = [extension.replace(\"\
    \ \", \"\") for extension in extensions]\n    strengths = [0] * len(extensions)\n\
    \    for i in range(len(extensions)):\n        for letter in extensions[i]:\n\
    \            if letter.isupper():\n                strengths[i] += 1\n       \
    \     else:\n                strengths[i] -= 1\n    max_strength = max(strengths)\n\
    \    max_index = strengths.index(max_strength)\n    return f\"{class_name}.{extensions[max_index]}\"\
    \n", "    # your code here\n    return \"\"\n\n", "    strongest_extension = extensions[0]\n\
    \    strongest_extension_strength = 0\n    for extension in extensions:\n    \
    \    extension_strength = 0\n        for letter in extension:\n            if\
    \ letter.isupper():\n                extension_strength += 1\n            else:\n\
    \                extension_strength -= 1\n        if extension_strength > strongest_extension_strength:\n\
    \            strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return class_name + '.' + strongest_extension\n", "    # Your\
    \ code here\n    pass\n", "    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    extension_strength += 1\n            else:\n                extension_strength\
    \ -= 1\n        if extension_strength > strongest_extension_strength:\n      \
    \      strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name}.{strongest_extension}\"\n\nprint(Strongest_Extension(\"\
    Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))", "    # Write your code here\n\
    \    pass\n\n", "    class_name = class_name.lower()\n    extensions = [extension.lower()\
    \ for extension in extensions]\n    strongest_extension = extensions[0]\n    strongest_strength\
    \ = 0\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    strongest_extension = extensions[0]\n    strongest_strength = 0\n  \
    \  for extension in extensions:\n        strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                strength += 1\n           \
    \ else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return class_name + '.' + strongest_extension\n\nprint(Strongest_Extension('Slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed']))", "    strongest_extension = extensions[0]\n\
    \    strongest_strength = 0\n    for extension in extensions:\n        strength\
    \ = 0\n        for letter in extension:\n            if letter.isupper():\n  \
    \              strength += 1\n            else:\n                strength -= 1\n\
    \        if strength > strongest_strength:\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n",
  "    class_name = class_name.title()\n    strongest_extension = extensions[0]\n\
    \    strongest_strength = 0\n    for extension in extensions:\n        strength\
    \ = 0\n        for letter in extension:\n            if letter.isupper():\n  \
    \              strength += 1\n            else:\n                strength -= 1\n\
    \        if strength > strongest_strength:\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\
    \n\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))",
  "    strongest_extension = extensions[0]\n    strongest_strength = 0\n    for extension\
    \ in extensions:\n        strength = 0\n        for letter in extension:\n   \
    \         if letter.isupper():\n                strength += 1\n            else:\n\
    \                strength -= 1\n        if strength > strongest_strength:\n  \
    \          strongest_strength = strength\n            strongest_extension = extension\n\
    \    return class_name + '.' + strongest_extension\n", "    strength = 0\n   \
    \ strongest_extension = \"\"\n    for extension in extensions:\n        CAP =\
    \ 0\n        SM = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                CAP += 1\n            else:\n                SM += 1\n      \
    \  if CAP - SM > strength:\n            strength = CAP - SM\n            strongest_extension\
    \ = extension\n    return class_name + \".\" + strongest_extension\n\nprint(Strongest_Extension(\"\
    Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))", "    class_name = class_name.lower()\n\
    \    extensions = [extension.lower() for extension in extensions]\n    strongest_extension\
    \ = extensions[0]\n    strongest_extension_strength = 0\n    for extension in\
    \ extensions:\n        extension_strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                extension_strength += 1\n \
    \           else:\n                extension_strength -= 1\n        if extension_strength\
    \ > strongest_extension_strength:\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension\n    return\
    \ '{}.{}'.format(class_name.title(), strongest_extension.title())\n", "    # your\
    \ code here\n    return \"\"\n", "    class_name = class_name.replace(\" \", \"\
    \")\n    extensions = [extension.replace(\" \", \"\") for extension in extensions]\n\
    \    strongest_extension = \"\"\n    strongest_extension_strength = 0\n    for\
    \ extension in extensions:\n        strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                strength += 1\n           \
    \ else:\n                strength -= 1\n        if strength > strongest_extension_strength:\n\
    \            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name}.{strongest_extension}\"\n", "    strongest_extension\
    \ = extensions[0]\n    strongest_strength = 0\n    for extension in extensions:\n\
    \        strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                strength += 1\n            else:\n                strength -=\
    \ 1\n        if strength > strongest_strength:\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n    return class_name\
    \ + '.' + strongest_extension\n", "    strongest = 0\n    strongest_extension\
    \ = ''\n    for extension in extensions:\n        CAP = 0\n        SM = 0\n  \
    \      for letter in extension:\n            if letter.isupper():\n          \
    \      CAP += 1\n            else:\n                SM += 1\n        strength\
    \ = CAP - SM\n        if strength > strongest:\n            strongest = strength\n\
    \            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n",
  "    class_name = class_name.lower()\n    extensions = [extension.lower() for extension\
    \ in extensions]\n    class_name = class_name.capitalize()\n    extensions = [extension.capitalize()\
    \ for extension in extensions]\n    strengths = []\n    for extension in extensions:\n\
    \        strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                strength += 1\n            else:\n                strength -=\
    \ 1\n        strengths.append(strength)\n    strongest_extension = extensions[strengths.index(max(strengths))]\n\
    \    return class_name + '.' + strongest_extension\n", "    strongest_extension\
    \ = \"\"\n    strongest_strength = 0\n    for extension in extensions:\n     \
    \   strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                strength += 1\n            else:\n                strength -=\
    \ 1\n        if strength > strongest_strength:\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n    return class_name\
    \ + \".\" + strongest_extension\n\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed']))", "    strongest_extension = \"\"\n    strongest_strength\
    \ = 0\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return class_name + \".\" + strongest_extension\n\nprint(Strongest_Extension(\"\
    Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))", "    class_name = class_name.lower()\n\
    \    strongest_extension = extensions[0]\n    strongest_extension_strength = 0\n\
    \    for extension in extensions:\n        extension = extension.lower()\n   \
    \     if extension.startswith(class_name):\n            extension_strength = 0\n\
    \            for char in extension:\n                if char.isupper():\n    \
    \                extension_strength += 1\n                elif char.islower():\n\
    \                    extension_strength -= 1\n            if extension_strength\
    \ > strongest_extension_strength:\n                strongest_extension_strength\
    \ = extension_strength\n                strongest_extension = extension\n    return\
    \ f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\n\nprint(Strongest_Extension(\"\
    Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))", "    class_name = class_name.lower()\n\
    \    strongest_extension = extensions[0]\n    strongest_strength = 0\n    for\
    \ extension in extensions:\n        extension = extension.lower()\n        strength\
    \ = 0\n        for letter in extension:\n            if letter.isupper():\n  \
    \              strength += 1\n            elif letter.islower():\n           \
    \     strength -= 1\n        if strength > strongest_strength:\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))",
  "    strength = 0\n    strongest_extension = \"\"\n    for extension in extensions:\n\
    \        CAP = 0\n        SM = 0\n        for letter in extension:\n         \
    \   if letter.isupper():\n                CAP += 1\n            elif letter.islower():\n\
    \                SM += 1\n        if CAP - SM > strength:\n            strength\
    \ = CAP - SM\n            strongest_extension = extension\n    return class_name\
    \ + \".\" + strongest_extension\n", "    # your code here\n    return \"\"\n",
  "    #Your code here\n    pass\n", "    # Create a list of tuples, where each tuple\
    \ contains the extension name and\n    # the strength of the extension.\n    extension_list\
    \ = []\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            else:\n                strength -= 1\n        extension_list.append((extension,\
    \ strength))\n    # Sort the list of tuples by the strength of the extension.\n\
    \    extension_list.sort(key=lambda x: x[1], reverse=True)\n    # Return the class\
    \ name and the strongest extension.\n    return f\"{class_name}.{extension_list[0][0]}\"\
    \n\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))",
  "    # Your code here\n    return \"\"\n", "    # Your code here\n    # return \"\
    ClassName.StrongestExtensionName\"\n    pass\n", "    # your code here\n    return\
    \ \"\"\n\n", "    strongest_extension = extensions[0]\n    strongest_strength\
    \ = 0\n    for extension in extensions:\n        strength = extension.count(string.ascii_uppercase)\
    \ - extension.count(string.ascii_lowercase)\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return f\"{class_name}.{strongest_extension}\"", "    # Your\
    \ code here\n    return ''\n\n", "    class_name = class_name.lower()\n    extensions\
    \ = [extension.lower() for extension in extensions]\n    strongest_extension =\
    \ extensions[0]\n    strongest_strength = 0\n    for extension in extensions:\n\
    \        strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                strength += 1\n            else:\n                strength -=\
    \ 1\n        if strength > strongest_strength:\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))",
  "    class_name = class_name.lower()\n    extensions = [extension.lower() for extension\
    \ in extensions]\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    extension_strength += 1\n            else:\n                extension_strength\
    \ -= 1\n        if extension_strength > strongest_extension_strength:\n      \
    \      strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return class_name.capitalize() + '.' + strongest_extension.capitalize()\n",
  "    class_name = class_name.lower()\n    extensions = [extension.lower() for extension\
    \ in extensions]\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = extension.count(class_name)\
    \ - len(extension)\n        if extension_strength > strongest_extension_strength:\n\
    \            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    return class_name + '.' + max(extensions, key=lambda x: (x.count(x.upper()),\
    \ x))\n", "    class_name = class_name.lower()\n    extensions = [extension.lower()\
    \ for extension in extensions]\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    extension_strength += 1\n            else:\n                extension_strength\
    \ -= 1\n        if extension_strength > strongest_extension_strength:\n      \
    \      strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    class_name = class_name.capitalize()\n    strongest_extension = extensions[0]\n\
    \    strongest_strength = 0\n    for extension in extensions:\n        strength\
    \ = 0\n        for letter in extension:\n            if letter.isupper():\n  \
    \              strength += 1\n            else:\n                strength -= 1\n\
    \        if strength > strongest_strength:\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n    return class_name + '.' + strongest_extension\n",
  "    # your code here\n    return \"\"\n\n", "    # your code here\n    return \"\
    \"\n", "    class_name = class_name.lower()\n    strongest_extension = extensions[0]\n\
    \    strongest_extension_strength = 0\n    for extension in extensions:\n    \
    \    extension = extension.lower()\n        if extension.startswith(class_name):\n\
    \            extension_strength = 0\n            for letter in extension:\n  \
    \              if letter.isupper():\n                    extension_strength +=\
    \ 1\n                elif letter.islower():\n                    extension_strength\
    \ -= 1\n            if extension_strength > strongest_extension_strength:\n  \
    \              strongest_extension_strength = extension_strength\n           \
    \     strongest_extension = extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    # write your code here\n    return class_name + '.' + max(extensions,\
    \ key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n",
  "    strongest_extension = extensions[0]\n    strongest_strength = 0\n    for extension\
    \ in extensions:\n        strength = 0\n        for char in extension:\n     \
    \       if char.isupper():\n                strength += 1\n            else:\n\
    \                strength -= 1\n        if strength > strongest_strength:\n  \
    \          strongest_strength = strength\n            strongest_extension = extension\n\
    \    return class_name + '.' + strongest_extension\n", "    class_name = class_name.title()\n\
    \    extensions = [extension.title() for extension in extensions]\n    strongest_extension\
    \ = extensions[0]\n    strongest_extension_strength = 0\n    for extension in\
    \ extensions:\n        extension_strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                extension_strength += 1\n \
    \           elif letter.islower():\n                extension_strength -= 1\n\
    \        if extension_strength > strongest_extension_strength:\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension\n    return\
    \ f\"{class_name}.{strongest_extension}\"\n", "    strengths = []\n    for extension\
    \ in extensions:\n        strengths.append(extension.count(extension.upper())\
    \ - extension.count(extension.lower()))\n    return class_name + '.' + extensions[strengths.index(max(strengths))]\n\
    \nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))",
  "    class_name = class_name.capitalize()\n    strongest_extension = extensions[0]\n\
    \    strongest_strength = 0\n    for extension in extensions:\n        strength\
    \ = 0\n        for letter in extension:\n            if letter.isupper():\n  \
    \              strength += 1\n            else:\n                strength -= 1\n\
    \        if strength > strongest_strength:\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\
    \n\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))",
  "    class_name = class_name.capitalize()\n    extensions = [extension.capitalize()\
    \ for extension in extensions]\n    strengths = []\n    for extension in extensions:\n\
    \        strengths.append(extension.count(extension.upper()) - extension.count(extension.lower()))\n\
    \    strongest_extension = extensions[strengths.index(max(strengths))]\n    return\
    \ f'{class_name}.{strongest_extension}'\n", "    class_name = class_name.capitalize()\n\
    \    extensions = [ext.capitalize() for ext in extensions]\n    strengths = [sum(1\
    \ for c in ext if c.isupper()) - sum(1 for c in ext if c.islower()) for ext in\
    \ extensions]\n    return f\"{class_name}.{extensions[strengths.index(max(strengths))]}\"",
  "    return class_name + '.' + max(extensions, key=lambda x: (sum(1 for c in x if\
    \ c.isupper()), x))\n", "    strength = 0\n    strongest_extension = \"\"\n  \
    \  for extension in extensions:\n        cap = 0\n        sm = 0\n        for\
    \ letter in extension:\n            if letter.isupper():\n                cap\
    \ += 1\n            else:\n                sm += 1\n        if cap - sm > strength:\n\
    \            strength = cap - sm\n            strongest_extension = extension\n\
    \    return f\"{class_name}.{strongest_extension}\"", "    class_name = class_name.lower()\n\
    \    extensions = [extension.lower() for extension in extensions]\n    strongest_extension\
    \ = extensions[0]\n    strongest_strength = 0\n    for extension in extensions:\n\
    \        strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                strength += 1\n            else:\n                strength -=\
    \ 1\n        if strength > strongest_strength:\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    class_name = class_name.lower()\n    strongest_extension = extensions[0]\n\
    \    strongest_extension_strength = 0\n    for extension in extensions:\n    \
    \    extension = extension.lower()\n        if extension.startswith(class_name):\n\
    \            extension_strength = extension.count(extension.upper()) - extension.count(extension.lower())\n\
    \            if extension_strength > strongest_extension_strength:\n         \
    \       strongest_extension = extension\n                strongest_extension_strength\
    \ = extension_strength\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"",
  "    # your code here\n    return \"\"\n", "    strongest_extension = ''\n    strongest_strength\
    \ = 0\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return f'{class_name}.{strongest_extension}'\n\nprint(Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"]))\nprint(Strongest_Extension(\"\
    Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\"]))\n\
    print(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"SErviNGSliCes\", \"SErviNGSliCes\"]))\nprint(Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\"]))\nprint(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\"]))\nprint(Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\", \"SErviNGSliCes\"\
    , \"SErviNGSliCes\", \"SErviNGSliCes\"]))\nprint(Strongest_Extension(\"Slices\"\
    , [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\", \"SErviNGSliCes\", \"SErviNGSliCes\"\
    , \"SErviNGS", "    strongest = 0\n    strongest_extension = ''\n    for extension\
    \ in extensions:\n        cap = sum(1 for c in extension if c.isupper())\n   \
    \     sm = sum(1 for c in extension if c.islower())\n        strength = cap -\
    \ sm\n        if strength > strongest:\n            strongest = strength\n   \
    \         strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'",
  "    # Your code here\n    return \"\"\n", "    return class_name + \".\" + max(extensions,\
    \ key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))\n",
  "    strongest_extension = ''\n    strongest_strength = -1\n    for extension in\
    \ extensions:\n        strength = 0\n        for letter in extension:\n      \
    \      if letter.isupper():\n                strength += 1\n            else:\n\
    \                strength -= 1\n        if strength > strongest_strength:\n  \
    \          strongest_strength = strength\n            strongest_extension = extension\n\
    \    return f'{class_name}.{strongest_extension}'\n", "    # your code here\n\
    \    return \"\"\n", "    # your code here\n    return \"\"\n", "    # your code\
    \ here\n    return \"\"\n", "    class_name = class_name.lower()\n    extensions\
    \ = [extension.lower() for extension in extensions]\n    strengths = []\n    for\
    \ extension in extensions:\n        strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                strength += 1\n           \
    \ else:\n                strength -= 1\n        strengths.append(strength)\n \
    \   strongest_extension = extensions[strengths.index(max(strengths))]\n    return\
    \ f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\n", "    strength\
    \ = 0\n    strongest_extension = \"\"\n    for extension in extensions:\n    \
    \    cap = 0\n        sm = 0\n        for letter in extension:\n            if\
    \ letter.isupper():\n                cap += 1\n            else:\n           \
    \     sm += 1\n        if cap - sm > strength:\n            strength = cap - sm\n\
    \            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\
    \n", "    class_name = class_name.lower()\n    extensions = [extension.lower()\
    \ for extension in extensions]\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    extension_strength += 1\n            else:\n                extension_strength\
    \ -= 1\n        if extension_strength > strongest_extension_strength:\n      \
    \      strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    strongest = 0\n    strongest_extension = \"\"\n    for extension in\
    \ extensions:\n        CAP = 0\n        SM = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                CAP += 1\n            else:\n\
    \                SM += 1\n        strength = CAP - SM\n        if strength > strongest:\n\
    \            strongest = strength\n            strongest_extension = extension\n\
    \    return f\"{class_name}.{strongest_extension}\"", "    # Your code here\n\
    \    pass\n", "    class_name = class_name.capitalize()\n    strongest_extension\
    \ = extensions[0]\n    strongest_strength = 0\n    for extension in extensions:\n\
    \        strength = extension.count(extension.upper()) - extension.count(extension.lower())\n\
    \        if strength > strongest_strength:\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"",
  "    # Your code here\n    return \"\"\n", "    class_name = class_name.lower()\n\
    \    strongest_extension = extensions[0]\n    strongest_extension_strength = 0\n\
    \    for extension in extensions:\n        extension = extension.lower()\n   \
    \     strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                strength += 1\n            else:\n                strength -=\
    \ 1\n        if strength > strongest_extension_strength:\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n    return class_name.capitalize()\
    \ + '.' + strongest_extension.capitalize()\n\nprint(Strongest_Extension(\"Slices\"\
    , ['SErviNGSliCes', 'Cheese', 'StuFfed']))", "    # Your code here\n    pass\n",
  "    class_name = class_name.capitalize()\n    extensions = [extension.capitalize()\
    \ for extension in extensions]\n    strengths = [extension.count(string.ascii_uppercase)\
    \ - extension.count(string.ascii_lowercase) for extension in extensions]\n   \
    \ strongest_extension = extensions[strengths.index(max(strengths))]\n    return\
    \ f\"{class_name}.{strongest_extension}\"\n", "    class_name = class_name.lower()\n\
    \    extensions = [ext.lower() for ext in extensions]\n    strongest_ext = extensions[0]\n\
    \    strongest_strength = 0\n    for ext in extensions:\n        strength = 0\n\
    \        for char in ext:\n            if char.isupper():\n                strength\
    \ += 1\n            else:\n                strength -= 1\n        if strength\
    \ > strongest_strength:\n            strongest_strength = strength\n         \
    \   strongest_ext = ext\n    return f\"{class_name.capitalize()}.{strongest_ext.capitalize()}\"\
    \n", "    strongest = 0\n    strongest_extension = ''\n    for extension in extensions:\n\
    \        cap = 0\n        sm = 0\n        for letter in extension:\n         \
    \   if letter.isupper():\n                cap += 1\n            else:\n      \
    \          sm += 1\n        strength = cap - sm\n        if strength > strongest:\n\
    \            strongest = strength\n            strongest_extension = extension\n\
    \    return class_name + '.' + strongest_extension\n\nprint(Strongest_Extension('Slices',\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed']))", "    # Your code here\n    return\
    \ \"\"\n", "    class_name = class_name.lower()\n    extensions = [x.lower() for\
    \ x in extensions]\n    strength = []\n    for ext in extensions:\n        cap\
    \ = 0\n        sm = 0\n        for i in ext:\n            if i.isupper():\n  \
    \              cap += 1\n            else:\n                sm += 1\n        strength.append(cap\
    \ - sm)\n    max_strength = max(strength)\n    index = strength.index(max_strength)\n\
    \    return class_name.capitalize() + '.' + extensions[index].capitalize()\n",
  "    class_name = class_name.lower()\n    extensions = [ext.lower() for ext in extensions]\n\
    \    strongest_extension = extensions[0]\n    strongest_strength = 0\n    for\
    \ ext in extensions:\n        strength = 0\n        for letter in ext:\n     \
    \       if letter.isupper():\n                strength += 1\n            else:\n\
    \                strength -= 1\n        if strength > strongest_strength:\n  \
    \          strongest_strength = strength\n            strongest_extension = ext\n\
    \    return class_name.capitalize() + '.' + strongest_extension.capitalize()\n",
  "    # your code here\n    return \"\"\n\n", "    strongest_extension = extensions[0]\n\
    \    strongest_strength = 0\n    for extension in extensions:\n        strength\
    \ = 0\n        for letter in extension:\n            if letter.isupper():\n  \
    \              strength += 1\n            else:\n                strength -= 1\n\
    \        if strength > strongest_strength:\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n    return class_name + '.' + strongest_extension",
  "    # Your code here\n    pass\n", "    class_name = class_name.lower()\n    extensions\
    \ = [extension.lower() for extension in extensions]\n    strongest_extension =\
    \ extensions[0]\n    strongest_strength = 0\n    for extension in extensions:\n\
    \        strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                strength += 1\n            else:\n                strength -=\
    \ 1\n        if strength > strongest_strength:\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"",
  "    class_name = class_name.lower()\n    extensions = [extension.lower() for extension\
    \ in extensions]\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    extension_strength += 1\n            elif letter.islower():\n           \
    \     extension_strength -= 1\n        if extension_strength > strongest_extension_strength:\n\
    \            strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    class_name = class_name.strip()\n    extensions = [ext.strip() for ext\
    \ in extensions]\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            else:\n                strength -= 1\n        if strength > strongest_extension_strength:\n\
    \            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name}.{strongest_extension}\"\n", "    # Your\
    \ code here\n    pass\n", "    strongest = 0\n    strongest_extension = ''\n \
    \   for extension in extensions:\n        CAP = 0\n        SM = 0\n        for\
    \ letter in extension:\n            if letter.isupper():\n                CAP\
    \ += 1\n            else:\n                SM += 1\n        if (CAP - SM) > strongest:\n\
    \            strongest = CAP - SM\n            strongest_extension = extension\n\
    \    return class_name + '.' + strongest_extension\n", "    strength = 0\n   \
    \ for i in extensions:\n        if i.isupper():\n            strength = strength\
    \ + 1\n        elif i.islower():\n            strength = strength - 1\n    return\
    \ class_name + \".\" + extensions[strength]\n\nprint(Strongest_Extension(\"Slices\"\
    , ['SErviNGSliCes', 'Cheese', 'StuFfed']))", "    # Your code here\n    # ...\n\
    \    pass\n", "    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    extension_strength += 1\n            elif letter.islower():\n           \
    \     extension_strength -= 1\n        if extension_strength > strongest_extension_strength:\n\
    \            strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name}.{strongest_extension}\"\n", "    # Your\
    \ code here\n    pass\n", "    # your code here\n    return \"\"\n", "    # Your\
    \ code here\n    # ...\n    # ...\n    # ...\n    return class_name + '.' + extensions[0]\n",
  "    class_name = class_name.lower()\n    extensions = [extension.lower() for extension\
    \ in extensions]\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    extension_strength += 1\n            else:\n                extension_strength\
    \ -= 1\n        if extension_strength > strongest_extension_strength:\n      \
    \      strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return class_name.capitalize() + '.' + strongest_extension.capitalize()\n",
  "    class_name = class_name.capitalize()\n    strongest_extension = extensions[0]\n\
    \    strongest_extension_strength = 0\n    for extension in extensions:\n    \
    \    extension_strength = 0\n        for letter in extension:\n            if\
    \ letter.isupper():\n                extension_strength += 1\n            else:\n\
    \                extension_strength -= 1\n        if extension_strength > strongest_extension_strength:\n\
    \            strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name}.{strongest_extension}\"\n", "    class_name\
    \ = class_name.lower()\n    extensions = [extension.lower() for extension in extensions]\n\
    \    strongest_extension = extensions[0]\n    strongest_extension_strength = 0\n\
    \    for extension in extensions:\n        extension_strength = 0\n        for\
    \ letter in extension:\n            if letter.isupper():\n                extension_strength\
    \ += 1\n            else:\n                extension_strength -= 1\n        if\
    \ extension_strength > strongest_extension_strength:\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension\n    return\
    \ class_name.capitalize() + '.' + strongest_extension.capitalize()\n", "    #\
    \ your code here\n    return \"\"\n", "    # your code here\n    return \"\"\n\
    \n", "    # your code here\n    return \"\"\n", "    # Your code here\n    # ...\n\
    \    # ...\n    # ...\n    return class_name + \".\" + extensions[0]\n", "   \
    \ class_name = class_name.lower()\n    strongest_extension = extensions[0]\n \
    \   strongest_extension_strength = 0\n    for extension in extensions:\n     \
    \   extension = extension.lower()\n        if extension.startswith(class_name):\n\
    \            extension_strength = extension.count(string.ascii_uppercase) - extension.count(string.ascii_lowercase)\n\
    \            if extension_strength > strongest_extension_strength:\n         \
    \       strongest_extension_strength = extension_strength\n                strongest_extension\
    \ = extension\n    return strongest_extension.title()\n", "    strongest_extension\
    \ = extensions[0]\n    strongest_strength = 0\n    for extension in extensions:\n\
    \        strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                strength += 1\n            else:\n                strength -=\
    \ 1\n        if strength > strongest_strength:\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\
    \n", "    class_name = class_name.lower()\n    extensions = [ext.lower() for ext\
    \ in extensions]\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = -1\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            else:\n                strength -= 1\n        if strength > strongest_extension_strength:\n\
    \            strongest_extension_strength = strength\n            strongest_extension\
    \ = extension\n    return class_name.capitalize() + '.' + strongest_extension.capitalize()",
  "    return class_name + '.' + max(extensions, key=lambda x: sum(1 for c in x if\
    \ c.isupper()) - sum(1 for c in x if c.islower()))\n", "    class_name = class_name.lower()\n\
    \    extensions = [extension.lower() for extension in extensions]\n    strongest_extension\
    \ = extensions[0]\n    strongest_extension_strength = 0\n    for extension in\
    \ extensions:\n        extension_strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                extension_strength += 1\n \
    \           else:\n                extension_strength -= 1\n        if extension_strength\
    \ > strongest_extension_strength:\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension\n    return\
    \ f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"", "    # Your\
    \ code here\n    pass\n", "    # Your code here\n    pass\n\n", "    # Your code\
    \ here\n    # ...\n    pass\n", "    class_name = class_name.lower()\n    strongest_extension\
    \ = extensions[0]\n    strongest_extension_strength = 0\n    for extension in\
    \ extensions:\n        extension = extension.lower()\n        extension_strength\
    \ = 0\n        for letter in extension:\n            if letter.isupper():\n  \
    \              extension_strength += 1\n            else:\n                extension_strength\
    \ -= 1\n        if extension_strength > strongest_extension_strength:\n      \
    \      strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return class_name.capitalize() + '.' + strongest_extension.capitalize()\n",
  "    class_name = class_name.lower()\n    strongest_extension = extensions[0]\n\
    \    strongest_strength = 0\n    for extension in extensions:\n        extension\
    \ = extension.lower()\n        strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                strength += 1\n           \
    \ elif letter.islower():\n                strength -= 1\n        if strength >\
    \ strongest_strength:\n            strongest_strength = strength\n           \
    \ strongest_extension = extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    strongest_extension = ''\n    strength = 0\n    for extension in extensions:\n\
    \        cap = 0\n        sm = 0\n        for letter in extension:\n         \
    \   if letter.isupper():\n                cap += 1\n            else:\n      \
    \          sm += 1\n        if cap - sm > strength:\n            strength = cap\
    \ - sm\n            strongest_extension = extension\n    return f'{class_name}.{strongest_extension}'\n\
    \nprint(Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed']))",
  "    # Your code here\n    return \"\"\n", "    class_name = class_name.replace(\"\
    \ \", \"\")\n    extensions = [extension.replace(\" \", \"\") for extension in\
    \ extensions]\n    strengths = [sum(1 for c in extension if c.isupper()) - sum(1\
    \ for c in extension if c.islower()) for extension in extensions]\n    return\
    \ f\"{class_name}.{extensions[strengths.index(max(strengths))]}\"\n", "    # Your\
    \ code here\n    pass\n", "    # Your code here\n    pass\n", "    # your code\
    \ here\n    return \"\"\n", "    class_name = class_name.title()\n    strongest_extension\
    \ = extensions[0]\n    strongest_extension_strength = 0\n    for extension in\
    \ extensions:\n        extension_strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                extension_strength += 1\n \
    \           else:\n                extension_strength -= 1\n        if extension_strength\
    \ > strongest_extension_strength:\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension\n    return\
    \ f\"{class_name}.{strongest_extension}\"\n\nprint(Strongest_Extension(\"Slices\"\
    , ['SErviNGSliCes', 'Cheese', 'StuFfed']))", "    class_name = class_name.lower()\n\
    \    extensions = [extension.lower() for extension in extensions]\n    strengths\
    \ = []\n    for extension in extensions:\n        cap = 0\n        sm = 0\n  \
    \      for letter in extension:\n            if letter.isupper():\n          \
    \      cap += 1\n            else:\n                sm += 1\n        strengths.append(cap\
    \ - sm)\n    strongest_extension = extensions[strengths.index(max(strengths))]\n\
    \    return class_name.capitalize() + '.' + strongest_extension.capitalize()\n",
  "    class_name = class_name.title()\n    strongest_extension = extensions[0]\n\
    \    strongest_strength = 0\n    for extension in extensions:\n        strength\
    \ = 0\n        for letter in extension:\n            if letter.isupper():\n  \
    \              strength += 1\n            else:\n                strength -= 1\n\
    \        if strength > strongest_strength:\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\
    \n", "    # Write your code here\n    pass\n", "    # Your code here\n    pass\n",
  "    class_name = class_name.lower()\n    strongest_extension = extensions[0]\n\
    \    strongest_strength = 0\n    for extension in extensions:\n        extension\
    \ = extension.lower()\n        strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                strength += 1\n           \
    \ else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return class_name.capitalize() + '.' + strongest_extension.capitalize()\n",
  "    # Your code here\n    pass\n", "    # your code here\n    return \"\"\n", " \
    \   class_name = class_name.lower()\n    extensions = [extension.lower() for extension\
    \ in extensions]\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    extension_strength += 1\n            else:\n                extension_strength\
    \ -= 1\n        if extension_strength > strongest_extension_strength:\n      \
    \      strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    class_name = class_name.lower()\n    extensions = [extension.lower()\
    \ for extension in extensions]\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    extension_strength += 1\n            else:\n                extension_strength\
    \ -= 1\n        if extension_strength > strongest_extension_strength:\n      \
    \      strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    # your code here\n    return \"\"\n\n", "    class_name = class_name.lower()\n\
    \    strongest_extension = \"\"\n    strongest_extension_strength = 0\n    for\
    \ extension in extensions:\n        extension = extension.lower()\n        if\
    \ extension.startswith(class_name):\n            extension_strength = extension.count(string.ascii_uppercase)\
    \ - extension.count(string.ascii_lowercase)\n            if extension_strength\
    \ > strongest_extension_strength:\n                strongest_extension_strength\
    \ = extension_strength\n                strongest_extension = extension\n    return\
    \ class_name.capitalize() + \".\" + strongest_extension.capitalize()\n", "   \
    \ strength = 0\n    strongest_extension = \"\"\n    for extension in extensions:\n\
    \        cap = 0\n        sm = 0\n        for letter in extension:\n         \
    \   if letter.isupper():\n                cap += 1\n            else:\n      \
    \          sm += 1\n        if cap - sm > strength:\n            strength = cap\
    \ - sm\n            strongest_extension = extension\n    return class_name + \"\
    .\" + strongest_extension\n", "    # Your code here\n    pass\n", "    # Your\
    \ code here\n    pass\n", "    # your code here\n    return \"\"\n\n", "    class_name\
    \ = class_name.lower()\n    strongest_extension = extensions[0]\n    strength\
    \ = 0\n    for extension in extensions:\n        cap = sum(1 for c in extension\
    \ if c.isupper())\n        sm = sum(1 for c in extension if c.islower())\n   \
    \     if cap - sm > strength:\n            strength = cap - sm\n            strongest_extension\
    \ = extension\n    return class_name.title() + '.' + strongest_extension\n", " \
    \   # Your code here\n    return \"\"\n\n", "    class_name = class_name.lower()\n\
    \    extensions = [x.lower() for x in extensions]\n    strengths = []\n    for\
    \ extension in extensions:\n        strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                strength += 1\n           \
    \ elif letter.islower():\n                strength -= 1\n        strengths.append(strength)\n\
    \    max_strength = max(strengths)\n    max_strength_index = strengths.index(max_strength)\n\
    \    return f\"{class_name.capitalize()}.{extensions[max_strength_index].capitalize()}\"\
    \n\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))\n\
    print(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SErviNGSliCes']))\n\
    print(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SErviNGSliCes',\
    \ 'Cheese']))\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed', 'SErviNGSliCes', 'Cheese', 'StuFfed']))\nprint(Strongest_Extension(\"\
    Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'SErviNGSliCes', 'Cheese', 'StuFfed',\
    \ 'SErviNGSliCes']))\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed', 'SErviNGSliCes', 'Cheese', 'StuFfed', 'SErviNGSliCes',\
    \ 'Cheese']))\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed', 'SErviNGSliCes', 'Cheese', 'StuFfed', 'SErviNG", "    # your code\
    \ here\n    return \"\"\n", "    class_name = class_name.capitalize()\n    extensions\
    \ = [extension.capitalize() for extension in extensions]\n    strengths = [extension.count(string.ascii_uppercase)\
    \ - extension.count(string.ascii_lowercase) for extension in extensions]\n   \
    \ return f\"{class_name}.{extensions[strengths.index(max(strengths))]}\"\n\nprint(Strongest_Extension(\"\
    Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))", "    class_name = class_name.lower()\n\
    \    extensions = [extension.lower() for extension in extensions]\n    strongest_extension\
    \ = extensions[0]\n    strongest_extension_strength = 0\n    for extension in\
    \ extensions:\n        CAP = sum(1 for letter in extension if letter.isupper())\n\
    \        SM = sum(1 for letter in extension if letter.islower())\n        strength\
    \ = CAP - SM\n        if strength > strongest_extension_strength:\n          \
    \  strongest_extension_strength = strength\n            strongest_extension =\
    \ extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    class_name = class_name.capitalize()\n    strongest_extension = extensions[0]\n\
    \    strongest_strength = 0\n    for extension in extensions:\n        strength\
    \ = 0\n        for letter in extension:\n            if letter.isupper():\n  \
    \              strength += 1\n            else:\n                strength -= 1\n\
    \        if strength > strongest_strength:\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\
    \n\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))\n\
    print(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'slices']))\n\
    print(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'slices',\
    \ 'slices']))\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed', 'slices', 'slices', 'slices']))\nprint(Strongest_Extension(\"Slices\"\
    , ['SErviNGSliCes', 'Cheese', 'StuFfed', 'slices', 'slices', 'slices', 'slices']))\n\
    print(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'slices',\
    \ 'slices', 'slices', 'slices', 'slices']))\nprint(Strongest_Extension(\"Slices\"\
    , ['SErviNGSliCes', 'Cheese', 'StuFfed', 'slices', 'slices', 'slices', 'slices',\
    \ 'slices', 'slices']))\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed', 'slices', 'slices', 'slices', 'slices', 's", "    # Your\
    \ code here\n    # return \"ClassName.StrongestExtensionName\"\n    pass\n", " \
    \   strength = 0\n    strongest_extension = ''\n    for extension in extensions:\n\
    \        current_strength = 0\n        for letter in extension:\n            if\
    \ letter.isupper():\n                current_strength += 1\n            else:\n\
    \                current_strength -= 1\n        if current_strength > strength:\n\
    \            strength = current_strength\n            strongest_extension = extension\n\
    \    return f'{class_name}.{strongest_extension}'\n", "    class_name = class_name.capitalize()\n\
    \    strongest_extension = ''\n    strongest_extension_strength = 0\n    for extension\
    \ in extensions:\n        extension_strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                extension_strength += 1\n \
    \           else:\n                extension_strength -= 1\n        if extension_strength\
    \ > strongest_extension_strength:\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension\n    return\
    \ f'{class_name}.{strongest_extension}'", "    class_name = class_name.capitalize()\n\
    \    strongest_extension = extensions[0]\n    strongest_strength = 0\n    for\
    \ extension in extensions:\n        strength = sum(1 for c in extension if c.isupper())\
    \ - sum(1 for c in extension if c.islower())\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return f\"{class_name}.{strongest_extension}\"\n", "    strength\
    \ = 0\n    strongest_extension = \"\"\n    for extension in extensions:\n    \
    \    cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for c\
    \ in extension if c.islower())\n        if cap - sm > strength:\n            strength\
    \ = cap - sm\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\
    \n", "    strongest_extension = extensions[0]\n    strongest_strength = 0\n  \
    \  for extension in extensions:\n        strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                strength += 1\n           \
    \ else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return f\"{class_name}.{strongest_extension}\"\n", "    # Your\
    \ code here\n    return \"\"\n", "    class_name = class_name.lower()\n    strongest_extension\
    \ = extensions[0]\n    strongest_extension_strength = 0\n    for extension in\
    \ extensions:\n        extension = extension.lower()\n        extension_strength\
    \ = 0\n        for letter in extension:\n            if letter.isupper():\n  \
    \              extension_strength += 1\n            elif letter.islower():\n \
    \               extension_strength -= 1\n        if extension_strength > strongest_extension_strength:\n\
    \            strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return class_name.capitalize() + '.' + strongest_extension.capitalize()\n\
    \nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))",
  "    class_name = class_name.lower()\n    extensions = [extension.lower() for extension\
    \ in extensions]\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    extension_strength += 1\n            elif letter.islower():\n           \
    \     extension_strength -= 1\n        if extension_strength > strongest_extension_strength:\n\
    \            strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return class_name.capitalize() + '.' + strongest_extension.capitalize()\n",
  "    class_name = class_name.lower()\n    strongest_extension = extensions[0]\n\
    \    strongest_extension_strength = 0\n    for extension in extensions:\n    \
    \    extension = extension.lower()\n        if extension.startswith(class_name):\n\
    \            strength = 0\n            for letter in extension:\n            \
    \    if letter.isupper():\n                    strength += 1\n               \
    \ elif letter.islower():\n                    strength -= 1\n            if strength\
    \ > strongest_extension_strength:\n                strongest_extension_strength\
    \ = strength\n                strongest_extension = extension\n    return strongest_extension.title()\n",
  "    # Your code here\n    return \"\"\n", "    class_name = class_name.lower()\n\
    \    strongest_extension = extensions[0]\n    strength = 0\n    for extension\
    \ in extensions:\n        extension = extension.lower()\n        if extension.startswith(class_name):\n\
    \            cap = sum(1 for c in extension if c.isupper())\n            sm =\
    \ sum(1 for c in extension if c.islower())\n            if cap - sm > strength:\n\
    \                strength = cap - sm\n                strongest_extension = extension\n\
    \    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"",
  "    strongest_extension = extensions[0]\n    strongest_extension_strength = 0\n\
    \    for extension in extensions:\n        extension_strength = 0\n        for\
    \ letter in extension:\n            if letter.isupper():\n                extension_strength\
    \ += 1\n            else:\n                extension_strength -= 1\n        if\
    \ extension_strength > strongest_extension_strength:\n            strongest_extension_strength\
    \ = extension_strength\n            strongest_extension = extension\n    return\
    \ f\"{class_name}.{strongest_extension}\"\n", "    class_name = class_name.lower()\n\
    \    extensions = [extension.lower() for extension in extensions]\n    strongest_extension\
    \ = extensions[0]\n    strongest_extension_strength = 0\n    for extension in\
    \ extensions:\n        extension_strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                extension_strength += 1\n \
    \           else:\n                extension_strength -= 1\n        if extension_strength\
    \ > strongest_extension_strength:\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension\n    return\
    \ class_name.capitalize() + '.' + strongest_extension.capitalize()\n", "    class_name\
    \ = class_name.lower()\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension = extension.lower()\n\
    \        extension_strength = 0\n        for letter in extension:\n          \
    \  if letter.isupper():\n                extension_strength += 1\n           \
    \ else:\n                extension_strength -= 1\n        if extension_strength\
    \ > strongest_extension_strength:\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension\n    return\
    \ class_name.capitalize() + '.' + strongest_extension.capitalize()\n", "    strongest_extension\
    \ = extensions[0]\n    strongest_strength = 0\n    for extension in extensions:\n\
    \        strength = 0\n        for letter in extension:\n            if letter.isupper():\n\
    \                strength += 1\n            else:\n                strength -=\
    \ 1\n        if strength > strongest_strength:\n            strongest_strength\
    \ = strength\n            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\
    \n", "    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    extension_strength += 1\n            else:\n                extension_strength\
    \ -= 1\n        if extension_strength > strongest_extension_strength:\n      \
    \      strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name}.{strongest_extension}\"\n", "    class_name\
    \ = class_name.lower()\n    extensions = [extension.lower() for extension in extensions]\n\
    \    strengths = []\n    for extension in extensions:\n        strength = 0\n\
    \        for letter in extension:\n            if letter.isupper():\n        \
    \        strength += 1\n            else:\n                strength -= 1\n   \
    \     strengths.append(strength)\n    strongest_extension = extensions[strengths.index(max(strengths))]\n\
    \    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\n\
    \nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))",
  "    class_name = class_name.lower()\n    extensions = [extension.lower() for extension\
    \ in extensions]\n    strengths = []\n    for extension in extensions:\n     \
    \   CAP = 0\n        SM = 0\n        for letter in extension:\n            if\
    \ letter.isupper():\n                CAP += 1\n            else:\n           \
    \     SM += 1\n        strengths.append(CAP - SM)\n    strongest_extension = extensions[strengths.index(max(strengths))]\n\
    \    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\n\
    \nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))",
  "    if not extensions:\n        return class_name\n    strongest_extension = extensions[0]\n\
    \    strongest_strength = 0\n    for extension in extensions:\n        strength\
    \ = 0\n        for letter in extension:\n            if letter.isupper():\n  \
    \              strength += 1\n            else:\n                strength -= 1\n\
    \        if strength > strongest_strength:\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\
    \n", "    # your code here\n    return \"\"\n", "    # Your code here\n    pass\n",
  "    strongest_extension = ''\n    strength = 0\n    for extension in extensions:\n\
    \        cap = sum(1 for c in extension if c.isupper())\n        sm = sum(1 for\
    \ c in extension if c.islower())\n        if cap - sm > strength:\n          \
    \  strength = cap - sm\n            strongest_extension = extension\n    return\
    \ f'{class_name}.{strongest_extension}'\n", "    # your code here\n    return\
    \ \"\"\n\n", "    strongest_extension = extensions[0]\n    strongest_strength\
    \ = 0\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return f\"{class_name}.{strongest_extension}\"\n\nprint(Strongest_Extension(\"\
    Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))", "    # your code here\n \
    \   return \"\"\n", "    # your code here\n    return \"\"\n\n", "    class_name\
    \ = class_name.lower()\n    extensions = [extension.lower() for extension in extensions]\n\
    \    strengths = [extension.count(class_name) - extension.count(class_name.upper())\
    \ for extension in extensions]\n    strongest_extension = extensions[strengths.index(max(strengths))]\n\
    \    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\n\
    \nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))",
  "    strongest_extension = extensions[0]\n    strongest_strength = 0\n    for extension\
    \ in extensions:\n        strength = 0\n        for letter in extension:\n   \
    \         if letter.isupper():\n                strength += 1\n            else:\n\
    \                strength -= 1\n        if strength > strongest_strength:\n  \
    \          strongest_strength = strength\n            strongest_extension = extension\n\
    \    return class_name + '.' + strongest_extension\n", "    # Your code here\n\
    \    pass\n", "    strongest_extension = extensions[0]\n    strongest_strength\
    \ = 0\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return class_name + '.' + strongest_extension", "    class_name\
    \ = class_name.lower()\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension = extension.lower()\n\
    \        if extension.startswith(class_name):\n            extension_strength\
    \ = extension.count(extension.upper()) - extension.count(extension.lower())\n\
    \            if extension_strength > strongest_extension_strength:\n         \
    \       strongest_extension = extension\n                strongest_extension_strength\
    \ = extension_strength\n    return class_name.capitalize() + \".\" + strongest_extension.capitalize()\n",
  "    # your code here\n    return \"\"\n", "    # your code here\n    return \"\"\
    \n\n", "    # Your code here\n    pass\n", "    # your code here\n    return \"\
    \"\n\n", "    class_name = class_name.replace(\" \", \"\")\n    extensions = [extension.replace(\"\
    \ \", \"\") for extension in extensions]\n    strongest_extension = extensions[0]\n\
    \    strongest_extension_strength = 0\n    for extension in extensions:\n    \
    \    extension_strength = 0\n        for letter in extension:\n            if\
    \ letter.isupper():\n                extension_strength += 1\n            elif\
    \ letter.islower():\n                extension_strength -= 1\n        if extension_strength\
    \ > strongest_extension_strength:\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension\n    return\
    \ f\"{class_name}.{strongest_extension}\"\n", "    class_name = class_name.lower()\n\
    \    extensions = [extension.lower() for extension in extensions]\n    strengths\
    \ = []\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            else:\n                strength -= 1\n        strengths.append(strength)\n\
    \    max_strength = max(strengths)\n    max_strength_index = strengths.index(max_strength)\n\
    \    strongest_extension = extensions[max_strength_index]\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))",
  "    class_name = class_name.lower()\n    extensions = [extension.lower() for extension\
    \ in extensions]\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = extension.count(class_name)\
    \ - extension.count(class_name.upper())\n        if extension_strength > strongest_extension_strength:\n\
    \            strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    strongest_extension = extensions[0]\n    strongest_strength = 0\n  \
    \  for extension in extensions:\n        strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                strength += 1\n           \
    \ else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return class_name + '.' + strongest_extension\n", "    class_name\
    \ = class_name.lower()\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension = extension.lower()\n\
    \        extension_strength = 0\n        for letter in extension:\n          \
    \  if letter.isupper():\n                extension_strength += 1\n           \
    \ else:\n                extension_strength -= 1\n        if extension_strength\
    \ > strongest_extension_strength:\n            strongest_extension_strength =\
    \ extension_strength\n            strongest_extension = extension\n    return\
    \ f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\n\nprint(Strongest_Extension(\"\
    Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))", "    # Your code here\n \
    \   return \"\"\n", "    class_name = class_name.lower()\n    extensions = [extension.lower()\
    \ for extension in extensions]\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    extension_strength += 1\n            else:\n                extension_strength\
    \ -= 1\n        if extension_strength > strongest_extension_strength:\n      \
    \      strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    strongest_extension = extensions[0]\n    strongest_strength = 0\n  \
    \  for extension in extensions:\n        strength = 0\n        for char in extension:\n\
    \            if char.isupper():\n                strength += 1\n            elif\
    \ char.islower():\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return f\"{class_name}.{strongest_extension}\"\n", "    class_name\
    \ = class_name.lower()\n    extensions = [extension.lower() for extension in extensions]\n\
    \    strongest_extension = extensions[0]\n    strongest_strength = 0\n    for\
    \ extension in extensions:\n        strength = 0\n        for letter in extension:\n\
    \            if letter.isupper():\n                strength += 1\n           \
    \ else:\n                strength -= 1\n        if strength > strongest_strength:\n\
    \            strongest_strength = strength\n            strongest_extension =\
    \ extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    # your code here\n    return \"\"\n", "    return f\"{class_name}.{max(extensions,\
    \ key=lambda x: (sum(1 for c in x if c.isupper()), -sum(1 for c in x if c.islower())))}\"\
    \n", "    # your code here\n    return \"\"\n\n", "    class_name = class_name.lower()\n\
    \    extensions = [extension.lower() for extension in extensions]\n    strengths\
    \ = []\n    for extension in extensions:\n        cap = 0\n        sm = 0\n  \
    \      for letter in extension:\n            if letter.isupper():\n          \
    \      cap += 1\n            else:\n                sm += 1\n        strengths.append(cap\
    \ - sm)\n    strongest_extension = extensions[strengths.index(max(strengths))]\n\
    \    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\n\
    \nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed']))\n\
    print(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'slices']))\n\
    print(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'slices',\
    \ 'Slices']))\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese',\
    \ 'StuFfed', 'slices', 'Slices', 'slices']))\nprint(Strongest_Extension(\"Slices\"\
    , ['SErviNGSliCes', 'Cheese', 'StuFfed', 'slices', 'Slices', 'slices', 'slices']))\n\
    print(Strongest_Extension(\"Slices\", ['SErviNGSliCes', 'Cheese', 'StuFfed', 'slices',\
    \ 'Slices', 'slices', 'slices', 'slices']))\nprint(Strongest_Extension(\"Slices\"\
    , ['SErviNGSliCes', 'Cheese', 'StuFfed', 'slices', 'Slices', 'slices', 'slices',\
    \ 'slices', 'slices']))\nprint(Strongest_Extension(\"Slices\", ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed',", "    # Your code here\n    pass\n", "    class_name =\
    \ class_name.lower()\n    extensions = [extension.lower() for extension in extensions]\n\
    \    strongest_extension = extensions[0]\n    strongest_extension_strength = 0\n\
    \    for extension in extensions:\n        extension_strength = 0\n        for\
    \ letter in extension:\n            if letter.isupper():\n                extension_strength\
    \ += 1\n            elif letter.islower():\n                extension_strength\
    \ -= 1\n        if extension_strength > strongest_extension_strength:\n      \
    \      strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    # Your code here\n    pass\n", "    class_name = class_name.lower()\n\
    \    strongest_extension = extensions[0]\n    strongest_strength = 0\n    for\
    \ extension in extensions:\n        extension = extension.lower()\n        if\
    \ extension.startswith(class_name):\n            strength = len(extension) - len(class_name)\n\
    \            if strength > strongest_strength:\n                strongest_strength\
    \ = strength\n                strongest_extension = extension\n    return class_name.capitalize()\
    \ + '.' + strongest_extension.capitalize()", "    class_name = class_name.lower()\n\
    \    extensions = [extension.lower() for extension in extensions]\n    strengths\
    \ = []\n    for extension in extensions:\n        strength = 0\n        for letter\
    \ in extension:\n            if letter.isupper():\n                strength +=\
    \ 1\n            else:\n                strength -= 1\n        strengths.append(strength)\n\
    \    strongest_extension = extensions[strengths.index(max(strengths))]\n    return\
    \ class_name.capitalize() + '.' + strongest_extension.capitalize()\n", "    #\
    \ your code here\n    return \"\"\n\n", "    strongest_extension = extensions[0]\n\
    \    strongest_strength = 0\n    for extension in extensions:\n        strength\
    \ = 0\n        for letter in extension:\n            if letter.isupper():\n  \
    \              strength += 1\n            else:\n                strength -= 1\n\
    \        if strength > strongest_strength:\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n    return f\"{class_name}.{strongest_extension}\"\
    \n", "    class_name = class_name.lower()\n    extensions = [extension.lower()\
    \ for extension in extensions]\n    strongest_extension = extensions[0]\n    strongest_extension_strength\
    \ = 0\n    for extension in extensions:\n        extension_strength = 0\n    \
    \    for letter in extension:\n            if letter.isupper():\n            \
    \    extension_strength += 1\n            elif letter.islower():\n           \
    \     extension_strength -= 1\n        if extension_strength > strongest_extension_strength:\n\
    \            strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return f\"{class_name.capitalize()}.{strongest_extension.capitalize()}\"\
    \n", "    class_name = class_name.lower()\n    strongest_extension = extensions[0]\n\
    \    strongest_extension_strength = 0\n    for extension in extensions:\n    \
    \    extension = extension.lower()\n        extension_strength = 0\n        for\
    \ letter in extension:\n            if letter.isupper():\n                extension_strength\
    \ += 1\n            elif letter.islower():\n                extension_strength\
    \ -= 1\n        if extension_strength > strongest_extension_strength:\n      \
    \      strongest_extension_strength = extension_strength\n            strongest_extension\
    \ = extension\n    return class_name.capitalize() + '.' + strongest_extension.capitalize()\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
