name: HumanEval_147_get_max_triples
language: py
prompt: "def get_max_triples(n: int) -> int:\n    \"\"\"\n    You are given a positive\
  \ integer n. You have to create an integer array a of length n.\n        For each\
  \ i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the\
  \ number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j]\
  \ + a[k] is a multiple of 3.\n\n    Example :\n        \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(5) == 1\n    assert candidate(6)\
  \ == 4\n    assert candidate(10) == 36\n    assert candidate(100) == 53361\n\ndef\
  \ test_check():\n    check(get_max_triples)\n\ntest_check()\n"
completions: ["    # a[i] = i * i - i + 1\n    # a[i] + a[j] + a[k] = 3 * i * i -\
    \ 3 * i + 3\n    # a[i] + a[j] + a[k] = 3 * (i * i - i + 1)\n    # a[i] + a[j]\
    \ + a[k] = 3 * a[i]\n    # a[i] + a[j] + a[k] = 3 * a[j]\n    # a[i] + a[j] +\
    \ a[k] = 3 * a[k]\n    # a[i] + a[j] + a[k] = 3 * a[i] = 3 * a[j] = 3 * a[k]\n\
    \    # a[i] = a[j] = a[k]\n    # a[i] = a[j] = a[k] = 1\n    # a[i] = a[j] = a[k]\
    \ = 2\n    # a[i] = a[j] = a[k] = 3\n    # a[i] = a[j] = a[k] = 4\n    # a[i]\
    \ = a[j] = a[k] = 5\n    # a[i] = a[j] = a[k] = 6\n    # a[i] = a[j] = a[k] =\
    \ 7\n    # a[i] = a[j] = a[k] = 8\n    # a[i] = a[j] = a[k] = 9\n    # a[i] =\
    \ a[j] = a[k] = 10\n    # a[i] = a[j] = a[k] = 11\n    # a[i] = a[j] = a[k] =\
    \ 12\n    # a[i] = a[j] = a[k] = 13\n    # a[i] = a[j] = a[k] = 14\n    # a[i]\
    \ = a[j] = a[k] = 15\n    # a[i] = a[j] = a[k] = 16\n    # a[i] =", "    a = [i\
    \ * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(len(a))\
    \ for j in range(i + 1, len(a)) for k in range(j + 1, len(a)) if (a[i] + a[j]\
    \ + a[k]) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n\
    \    return len([(i, j, k) for i in range(n) for j in range(i + 1, n) for k in\
    \ range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0])\n\n", "    a = [i * i - i\
    \ + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n \
    \       for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count\
    \ += 1\n    return count\n\n", "    return sum(1 for i in range(1, n) for j in\
    \ range(i+1, n) for k in range(j+1, n) if (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 ==\
    \ 0)\n\n", "    # a[i] = i * i - i + 1\n    # a[i] + a[j] + a[k] = 3 * i * i -\
    \ 3 * i + 1 + 3 * j * j - 3 * j + 1 + 3 * k * k - 3 * k + 1\n    # a[i] + a[j]\
    \ + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j]\
    \ + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j]\
    \ + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j]\
    \ + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j]\
    \ + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j]\
    \ + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j]\
    \ + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j]\
    \ + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j]\
    \ + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i + j + k) + 3\n    # a[i] + a[j]\
    \ + a[k] = 3 * (i * i + j * j + k * k) - 3 * (i +", "    return sum(1 for i in\
    \ range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i\
    \ + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n",
  "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum([1 for i in range(n\
    \ - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] +\
    \ a[k]) % 3 == 0])\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n \
    \   count = 0\n    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n\
    \            for k in range(j + 1, len(a)):\n                if (a[i] + a[j] +\
    \ a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n", "  \
    \  a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n\
    \ - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] +\
    \ a[k]) % 3 == 0)\n\n", "    \"\"\"\n    For n = 5, the output should be\n   \
    \ getMaxTriples(n) = 3.\n    The array a is [1, 3, 7, 13, 21].\n    There are\
    \ 3 triples that satisfy the condition: (1, 3, 7), (1, 3, 13), (1, 3, 21).\n \
    \   \"\"\"\n    \"\"\"\n    For n = 6, the output should be\n    getMaxTriples(n)\
    \ = 4.\n    The array a is [1, 3, 7, 13, 21, 31].\n    There are 4 triples that\
    \ satisfy the condition: (1, 3, 7), (1, 3, 13), (1, 3, 21), (1, 3, 31).\n    \"\
    \"\"\n    \"\"\"\n    For n = 7, the output should be\n    getMaxTriples(n) =\
    \ 4.\n    The array a is [1, 3, 7, 13, 21, 31, 43].\n    There are 4 triples that\
    \ satisfy the condition: (1, 3, 7), (1, 3, 13), (1, 3, 21), (1, 3, 31).\n    \"\
    \"\"\n    \"\"\"\n    For n = 8, the output should be\n    getMaxTriples(n) =\
    \ 5.\n    The array a is [1, 3, 7, 13, 21, 31, 43, 57].\n    There are 5 triples\
    \ that satisfy the condition: (1, 3, 7), (1, 3, 13), (1, 3, 21), (1, 3, 31), (1,\
    \ 3, 43).\n    \"\"\"\n    \"\"\"\n    For n = 9, the output should be\n    getMaxTriples(n)\
    \ = 5.\n    The array a is [1, 3, 7, 13, 21, 31, 43, 57, 73].\n    There are 5\
    \ triples that satisfy the condition: (1, 3, 7), (1, 3, 13), (1, 3, 21), (1, 3,\
    \ 31), (1, 3, 43).\n    \"\"\"\n    \"\"\"\n    For n = 10, the output should\
    \ be\n    getMaxTriples(n) = 6.\n    The array a is [1, 3, 7, 13, 21, 31, 43,\
    \ 57, 73, 91].\n   ", "    #     For n = 3, the output should be\n    #     getMaxTriples(n)\
    \ = 1.\n    #     a = [1, 3, 5].\n    #     There is only one triple (a[1], a[2],\
    \ a[3]) = (3, 5, 1) that satisfies the condition.\n    #     For n = 4, the output\
    \ should be\n    #     getMaxTriples(n) = 2.\n    #     a = [1, 3, 5, 7].\n  \
    \  #     There are two triples (a[1], a[2], a[3]) = (3, 5, 1) and (a[1], a[2],\
    \ a[4]) = (3, 5, 7) that satisfy the condition.\n    #     For n = 5, the output\
    \ should be\n    #     getMaxTriples(n) = 2.\n    #     a = [1, 3, 5, 7, 9].\n\
    \    #     There are two triples (a[1], a[2], a[3]) = (3, 5, 1) and (a[1], a[2],\
    \ a[5]) = (3, 5, 9) that satisfy the condition.\n    #     For n = 6, the output\
    \ should be\n    #     getMaxTriples(n) = 3.\n    #     a = [1, 3, 5, 7, 9, 11].\n\
    \    #     There are three triples (a[1], a[2], a[3]) = (3, 5, 1), (a[1], a[2],\
    \ a[6]) = (3, 5, 11) and (a[1], a[4], a[5]) = (3, 7, 9) that satisfy the condition.\n\
    \    #     For n = 7, the output should be\n    #     getMaxTriples(n) = 3.\n\
    \    #     a = [1, 3, 5, 7, 9, 11, 13].\n    #     There are three triples (a[1],\
    \ a[2], a[3]) = (3, 5, 1), (a[1], a[2], a[7]) = (3, 5, 13) and (a[1], a[4], a[5])",
  "    #     n = 5\n    #     a = [1, 3, 6, 10, 15]\n    #     The number of triples\
    \ is 2: (1, 3, 6) and (3, 6, 10).\n    #     \"\"\"\n    #     n = 6\n    #  \
    \   a = [1, 3, 6, 10, 15, 21]\n    #     The number of triples is 3: (1, 3, 6),\
    \ (3, 6, 10) and (6, 10, 15).\n    #     \"\"\"\n    #     n = 7\n    #     a\
    \ = [1, 3, 6, 10, 15, 21, 28]\n    #     The number of triples is 4: (1, 3, 6),\
    \ (3, 6, 10), (6, 10, 15) and (10, 15, 21).\n    #     \"\"\"\n    #     n = 8\n\
    \    #     a = [1, 3, 6, 10, 15, 21, 28, 36]\n    #     The number of triples\
    \ is 5: (1, 3, 6), (3, 6, 10), (6, 10, 15), (10, 15, 21) and (15, 21, 28).\n \
    \   #     \"\"\"\n    #     n = 9\n    #     a = [1, 3, 6, 10, 15, 21, 28, 36,\
    \ 45]\n    #     The number of triples is 6: (1, 3, 6), (3, 6, 10), (6, 10, 15),\
    \ (10, 15, 21), (15, 21, 28) and (21, 28, 36).\n    #     \"\"\"\n    #     n\
    \ = 10\n    #     a = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55]\n    #     The number\
    \ of triples is 7: (1, 3, 6), (3, 6, 10), (6, 10, 15), (10, 15, 21), (15, 21,\
    \ 28), (21, 28, 36) and (28, 36, 45).\n    #     \"\"\"\n    #     n = 11\n  \
    \  #     a = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66]\n    #     The", "    a\
    \ = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n\
    \ - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j +\
    \ 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                \
    \    count += 1\n    return count\n\n", "    a = [i*i - i + 1 for i in range(1,\
    \ n+1)]\n    count = 0\n    for i in range(n-2):\n        for j in range(i+1,\
    \ n-1):\n            for k in range(j+1, n):\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0:\n                    count += 1\n    return count\n", "  \
    \  a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n\
    \ - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] +\
    \ a[k]) % 3 == 0)\n\n", "    return sum(1 for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0)\n", "    return sum(1 for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n \
    \   return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j\
    \ + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in\
    \ range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i +\
    \ 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", " \
    \   a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n\
    \ - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] +\
    \ a[k]) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n  \
    \  count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n\
    \            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0:\n                    count += 1\n    return count\n\n", "    #   \
    \  For n = 4, the output should be\n    #     getMaxTriples(n) = 2.\n    #   \
    \  The array a will be [1, 3, 5, 7].\n    #     There are two triples that satisfy\
    \ the conditions: (1, 3, 5) and (3, 5, 7).\n    #     For n = 5, the output should\
    \ be\n    #     getMaxTriples(n) = 3.\n    #     The array a will be [1, 3, 5,\
    \ 7, 9].\n    #     There are three triples that satisfy the conditions: (1, 3,\
    \ 5), (3, 5, 7) and (5, 7, 9).\n    #     For n = 6, the output should be\n  \
    \  #     getMaxTriples(n) = 4.\n    #     The array a will be [1, 3, 5, 7, 9,\
    \ 11].\n    #     There are four triples that satisfy the conditions: (1, 3, 5),\
    \ (3, 5, 7), (5, 7, 9) and (7, 9, 11).\n    #     For n = 7, the output should\
    \ be\n    #     getMaxTriples(n) = 5.\n    #     The array a will be [1, 3, 5,\
    \ 7, 9, 11, 13].\n    #     There are five triples that satisfy the conditions:\
    \ (1, 3, 5), (3, 5, 7), (5, 7, 9), (7, 9, 11) and (9, 11, 13).\n    #     For\
    \ n = 8, the output should be\n    #     getMaxTriples(n) = 6.\n    #     The\
    \ array a will be [1, 3, 5, 7, 9, 11, 13, 15].\n    #     There are six triples\
    \ that satisfy the conditions: (1, 3, 5), (3, 5, 7), (5, 7, 9), (7, 9, 11), (9,\
    \ 11, 13) and (11, 13, 15).\n    #     For n = 9, the output should be\n    #\
    \     getMaxTriples(n) = 7.\n    #     The array a will be [1, 3, 5, 7, 9, 11,\
    \ 13, 15", "    # 1 \u2264 n \u2264 10^5\n    # 1 \u2264 a[i] \u2264 10^9\n  \
    \  # 1 \u2264 i < j < k \u2264 n\n    # a[i] + a[j] + a[k] is a multiple of 3\n\
    \    # a[i] < a[j] < a[k]\n    # a[i] + a[j] + a[k] is a multiple of 3\n    #\
    \ a[i] + a[j] + a[k] = 3 * x\n    # a[i] + a[j] = 3 * x - a[k]\n    # a[i] + a[j]\
    \ = 3 * x - a[k]\n    # a[i] + a[j] = 3 * x - a[k]\n    # a[i] + a[j] = 3 * x\
    \ - a[k]\n    # a[i] + a[j] = 3 * x - a[k]\n    # a[i] + a[j] = 3 * x - a[k]\n\
    \    # a[i] + a[j] = 3 * x - a[k]\n    # a[i] + a[j] = 3 * x - a[k]\n    # a[i]\
    \ + a[j] = 3 * x - a[k]\n    # a[i] + a[j] = 3 * x - a[k]\n    # a[i] + a[j] =\
    \ 3 * x - a[k]\n    # a[i] + a[j] = 3 * x - a[k]\n    # a[i] + a[j] = 3 * x -\
    \ a[k]\n    # a[i] + a[j] = 3 * x - a[k]\n    # a[i] + a[j] = 3 * x - a[k]\n \
    \   # a[i] + a[j] = 3 * x - a[k]\n    # a[i] + a[j] = 3 * x - a[k]\n    # a[i]\
    \ + a[j] = 3 * x - a[k]\n    # a[i] + a[j] = 3 * x -", "    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n",
  "    # a = [i * i - i + 1 for i in range(1, n + 1)]\n    # print(a)\n    # count\
    \ = 0\n    # for i in range(n - 2):\n    #     for j in range(i + 1, n - 1):\n\
    \    #         for k in range(j + 1, n):\n    #             if (a[i] + a[j] +\
    \ a[k]) % 3 == 0:\n    #                 count += 1\n    # return count\n    return\
    \ sum(sum(1 for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i +\
    \ 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0) for i in range(n - 2))\n\n", " \
    \   #     Input: n = 5\n    #     Output: 3\n    #     Explanation:\n    #   \
    \  a = [1, 3, 6, 10, 15]\n    #     There are 3 triples (1, 3, 6), (3, 6, 10),\
    \ (6, 10, 15) where a[i] + a[j] + a[k] is a multiple of 3.\n    #     \"\"\"\n\
    \    #     Input: n = 4\n    #     Output: 1\n    #     Explanation:\n    #  \
    \   a = [1, 3, 6, 10]\n    #     There is only 1 triple (1, 3, 6) where a[i] +\
    \ a[j] + a[k] is a multiple of 3.\n    #     \"\"\"\n    #     Input: n = 1\n\
    \    #     Output: 0\n    #     Explanation:\n    #     a = [1]\n    #     There\
    \ are no triples where a[i] + a[j] + a[k] is a multiple of 3.\n    #     \"\"\"\
    \n    #     Constraints:\n    #     1 <= n <= 1000\n    #     \"\"\"\n    #  \
    \   Input: n = 5\n    #     Output: 3\n    #     Explanation:\n    #     a = [1,\
    \ 3, 6, 10, 15]\n    #     There are 3 triples (1, 3, 6), (3, 6, 10), (6, 10,\
    \ 15) where a[i] + a[j] + a[k] is a multiple of 3.\n    #     \"\"\"\n    #  \
    \   Input: n = 4\n    #     Output: 1\n    #     Explanation:\n    #     a = [1,\
    \ 3, 6, 10]\n    #     There is only 1 triple (1, 3, 6) where a[i] + a[j] + a[k]\
    \ is a multiple of 3.\n    #     \"\"\"\n    #     Input: n = 1\n    #     Output:\
    \ 0\n    #     Explanation:\n    #     a = [1]\n    #     There are no triples\
    \ where a[i] + a[j] + a[k] is a multiple of 3.\n    #     \"\"\"\n    #    ",
  "    # a = [i * i - i + 1 for i in range(1, n + 1)]\n    # print(a)\n    # count\
    \ = 0\n    # for i in range(n - 2):\n    #     for j in range(i + 1, n - 1):\n\
    \    #         for k in range(j + 1, n):\n    #             if (a[i] + a[j] +\
    \ a[k]) % 3 == 0:\n    #                 count += 1\n    # return count\n    return\
    \ sum(sum(1 for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k\
    \ - k + 1) % 3 == 0) for j in range(i + 1, n - 1) for i in range(n - 2))\n\n",
  "    return sum(1 for i in range(1, n) for j in range(i + 1, n) for k in range(j\
    \ + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", " \
    \   return sum([1 for i in range(1, n) for j in range(i + 1, n) for k in range(j\
    \ + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0])\n\n",
  "    if n < 3:\n        return 0\n    elif n == 3:\n        return 1\n    else:\n\
    \        return (n - 2) * (n - 1) * (n - 2) // 6\n\n", "    # a = [i * i - i +\
    \ 1 for i in range(1, n + 1)]\n    # return sum(1 for i in range(n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n    return\
    \ sum(1 for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n)\
    \ if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    a =\
    \ [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n\
    \ - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] +\
    \ a[k]) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n  \
    \  return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j\
    \ + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    # a = [i*i - i + 1 for\
    \ i in range(1, n+1)]\n    # print(a)\n    # count = 0\n    # for i in range(n-2):\n\
    \    #     for j in range(i+1, n-1):\n    #         for k in range(j+1, n):\n\
    \    #             if (a[i] + a[j] + a[k]) % 3 == 0:\n    #                 count\
    \ += 1\n    # return count\n    return sum(1 for i in range(1, n) for j in range(i+1,\
    \ n) for k in range(j+1, n) if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 ==\
    \ 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1\
    \ for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n)\
    \ if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    # if n\
    \ == 1:\n    #     return 0\n    # elif n == 2:\n    #     return 0\n    # elif\
    \ n == 3:\n    #     return 1\n    # elif n == 4:\n    #     return 2\n    # elif\
    \ n == 5:\n    #     return 2\n    # elif n == 6:\n    #     return 3\n    # elif\
    \ n == 7:\n    #     return 4\n    # elif n == 8:\n    #     return 5\n    # elif\
    \ n == 9:\n    #     return 6\n    # elif n == 10:\n    #     return 7\n    #\
    \ elif n == 11:\n    #     return 8\n    # elif n == 12:\n    #     return 10\n\
    \    # elif n == 13:\n    #     return 11\n    # elif n == 14:\n    #     return\
    \ 13\n    # elif n == 15:\n    #     return 15\n    # elif n == 16:\n    #   \
    \  return 17\n    # elif n == 17:\n    #     return 19\n    # elif n == 18:\n\
    \    #     return 21\n    # elif n == 19:\n    #     return 24\n    # elif n ==\
    \ 20:\n    #     return 26\n    # elif n == 21:\n    #     return 29\n    # elif\
    \ n == 22:\n    #     return 32\n    # elif n == 23:\n    #     return 35\n  \
    \  # elif n == 24:\n    #     return 38\n    # elif n == 25:\n    #     return\
    \ 42\n    # elif n == 26:\n    #     return 45\n    # elif n == 27:\n    #   \
    \  return 49\n    # elif n == 28:\n    #     return 53\n    # elif n == 29:\n\
    \    #     return 57\n    # elif n == 30:\n    #     return 61\n    # elif n ==\
    \ 31:\n    #     return 66\n    # elif n == 32:\n    #     return 70\n    # elif\
    \ n == 33:\n    #     return 75\n    # elif n == 34:\n    #     return 80\n  \
    \  #", "    return sum(1 for i in range(1, n) for j in range(i + 1, n) for k in\
    \ range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\
    \n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i\
    \ in range(n - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n +\
    \ 1)]\n    print(a)\n    count = 0\n    for i in range(len(a)):\n        for j\
    \ in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\
    \    return count\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n  \
    \  return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j\
    \ + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    \"\"\"\n    For n = 5,\
    \ the output should be\n    getMaxTriples(n) = 2.\n    The array a is [1, 3, 7,\
    \ 13, 21].\n    There are two triples (a[1], a[2], a[3]) and (a[2], a[3], a[4])\
    \ that satisfy the condition.\n    \"\"\"\n    \"\"\"\n    For n = 6, the output\
    \ should be\n    getMaxTriples(n) = 3.\n    The array a is [1, 3, 7, 13, 21, 31].\n\
    \    There are three triples (a[1], a[2], a[3]), (a[1], a[2], a[4]) and (a[2],\
    \ a[3], a[4]) that satisfy the condition.\n    \"\"\"\n    \"\"\"\n    For n =\
    \ 7, the output should be\n    getMaxTriples(n) = 3.\n    The array a is [1, 3,\
    \ 7, 13, 21, 31, 43].\n    There are three triples (a[1], a[2], a[3]), (a[1],\
    \ a[2], a[4]) and (a[2], a[3], a[4]) that satisfy the condition.\n    \"\"\"\n\
    \    \"\"\"\n    For n = 8, the output should be\n    getMaxTriples(n) = 4.\n\
    \    The array a is [1, 3, 7, 13, 21, 31, 43, 57].\n    There are four triples\
    \ (a[1], a[2], a[3]), (a[1], a[2], a[4]), (a[2], a[3], a[4]) and (a[2], a[3],\
    \ a[5]) that satisfy the condition.\n    \"\"\"\n    \"\"\"\n    For n = 9, the\
    \ output should be\n    getMaxTriples(n) = 4.\n    The array a is [1, 3, 7, 13,\
    \ 21, 31, 43, 57, 73].\n    There are four triples (a[1], a[2], a[3]), (a[1],\
    \ a[2], a[4]), (a[2], a[3], a[4]) and (a[2], a[3], a", "    a = [i * i - i + 1\
    \ for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n    \
    \    for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count\
    \ += 1\n    return count\n\n", "    \"\"\"\n    For n = 5, the output should be\n\
    \    getMaxTriples(n) = 3.\n    The array a is [1, 3, 7, 13, 21].\n    There are\
    \ 3 triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is\
    \ a multiple of 3:\n    (a[1], a[2], a[3]) = (3, 7, 13),\n    (a[1], a[2], a[4])\
    \ = (3, 7, 21),\n    (a[1], a[3], a[4]) = (3, 13, 21).\n    \"\"\"\n    a = [i\
    \ * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n) for\
    \ j in range(i + 1, n) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\
    \    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n         \
    \   for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0:\n                    count += 1\n    return count\n\n", "    return sum(1\
    \ for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    #     For\
    \ n = 3, the output should be\n    #     getMaxTriples(n) = 1.\n    #     The\
    \ only triple is (1, 2, 3).\n    #     For n = 4, the output should be\n    #\
    \     getMaxTriples(n) = 2.\n    #     There are two triples: (1, 2, 3) and (2,\
    \ 3, 4).\n    #     For n = 5, the output should be\n    #     getMaxTriples(n)\
    \ = 3.\n    #     There are three triples: (1, 2, 3), (2, 3, 4) and (3, 4, 5).\n\
    \    #     For n = 6, the output should be\n    #     getMaxTriples(n) = 4.\n\
    \    #     There are four triples: (1, 2, 3), (2, 3, 4), (3, 4, 5) and (4, 5,\
    \ 6).\n    #     For n = 7, the output should be\n    #     getMaxTriples(n) =\
    \ 5.\n    #     There are five triples: (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5,\
    \ 6) and (5, 6, 7).\n    #     For n = 8, the output should be\n    #     getMaxTriples(n)\
    \ = 6.\n    #     There are six triples: (1, 2, 3), (2, 3, 4), (3, 4, 5), (4,\
    \ 5, 6), (5, 6, 7) and (6, 7, 8).\n    #     For n = 9, the output should be\n\
    \    #     getMaxTriples(n) = 7.\n    #     There are seven triples: (1, 2, 3),\
    \ (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7), (6, 7, 8) and (7, 8, 9).\n    #\
    \     For n = 10, the output should be\n    #     getMaxTriples(n) = 8.\n    #\
    \     There are eight triples: (1, 2, 3), (2, 3, 4), (3", "    #     n = 5\n \
    \   #     a = [1, 3, 6, 10, 15]\n    #     The number of triples is 2.\n    #\
    \     The triples are (1, 3, 6) and (3, 6, 10).\n    #     \"\"\"\n    #     n\
    \ = 4\n    #     a = [1, 3, 6, 10]\n    #     The number of triples is 0.\n  \
    \  #     \"\"\"\n    #     n = 3\n    #     a = [1, 3, 6]\n    #     The number\
    \ of triples is 1.\n    #     The triple is (1, 3, 6).\n    #     \"\"\"\n   \
    \ #     n = 2\n    #     a = [1, 3]\n    #     The number of triples is 0.\n \
    \   #     \"\"\"\n    #     n = 1\n    #     a = [1]\n    #     The number of\
    \ triples is 0.\n    #     \"\"\"\n    #     n = 0\n    #     a = []\n    #  \
    \   The number of triples is 0.\n    #     \"\"\"\n    #     n = 7\n    #    \
    \ a = [1, 3, 6, 10, 15, 21, 28]\n    #     The number of triples is 3.\n    #\
    \     The triples are (1, 3, 6), (3, 6, 10) and (6, 10, 15).\n    #     \"\"\"\
    \n    #     n = 8\n    #     a = [1, 3, 6, 10, 15, 21, 28, 36]\n    #     The\
    \ number of triples is 4.\n    #     The triples are (1, 3, 6), (3, 6, 10), (6,\
    \ 10, 15) and (10, 15, 21).\n    #     \"\"\"\n    #     n = 9\n    #     a =\
    \ [1, 3, 6, 10, 15, 21, 28, 36, 45]\n    #     The number of triples is 5.\n \
    \   #     The triples are (1, 3, 6), (3, 6, 10), (6, 10, 15), (10, 15, 21) and\
    \ (15, 21, 28).\n    #     \"\"\"\n    #     n = 10", "    #     n = 3\n    #\
    \     a = [1, 3, 5]\n    #     There are 2 triples: (1, 3, 5) and (3, 5, 1).\n\
    \    #     The sum of the first triple is 9, which is a multiple of 3.\n    #\
    \     The sum of the second triple is 9, which is a multiple of 3.\n    #    \
    \ The answer is 2.\n    # \"\"\"\n    #     n = 4\n    #     a = [1, 3, 5, 7]\n\
    \    #     There are 3 triples: (1, 3, 5), (1, 3, 7) and (3, 5, 7).\n    #   \
    \  The sum of the first triple is 9, which is a multiple of 3.\n    #     The\
    \ sum of the second triple is 11, which is not a multiple of 3.\n    #     The\
    \ sum of the third triple is 15, which is not a multiple of 3.\n    #     The\
    \ answer is 1.\n    # \"\"\"\n    #     n = 5\n    #     a = [1, 3, 5, 7, 9]\n\
    \    #     There are 4 triples: (1, 3, 5), (1, 3, 7), (1, 3, 9) and (3, 5, 7).\n\
    \    #     The sum of the first triple is 9, which is a multiple of 3.\n    #\
    \     The sum of the second triple is 11, which is not a multiple of 3.\n    #\
    \     The sum of the third triple is 13, which is not a multiple of 3.\n    #\
    \     The sum of the fourth triple is 15, which is not a multiple of 3.\n    #\
    \     The answer is 1.\n    # \"\"\"\n    #     n = 6\n    #     a = [1, 3, 5,\
    \ 7, 9, 11]\n    #     There are 5 triples: (1, 3, 5), (1, 3, 7), (1, 3, 9), (1,\
    \ 3, 11) and (3, 5, 7).\n    #     The sum of the first triple is 9, which is\
    \ a multiple of 3.\n    #     The sum of the second triple is 11, which is not\
    \ a multiple of 3.\n    #     The sum of the third triple is 13,", "    return\
    \ sum(1 for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n)\
    \ if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    # Write\
    \ your code here\n    return 0\n\n", "    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n", "    a = []\n    for i in range(1, n + 1):\n        a.append(i * i - i +\
    \ 1)\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1,\
    \ n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n", " \
    \   a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n\
    \ - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] +\
    \ a[k]) % 3 == 0)\n\n", "    #     Input: n = 3\n    # Output: 1\n    # Explanation:\n\
    \    # a = [1, 3, 5]\n    # There is only one triple (a[1], a[2], a[3]) where\
    \ a[1] + a[2] + a[3] is a multiple of 3.\n    # \"\"\"\n    #     Input: n = 4\n\
    \    # Output: 2\n    # Explanation:\n    # a = [1, 3, 5, 7]\n    # There are\
    \ two triples (a[1], a[2], a[3]) and (a[1], a[2], a[4]) where a[1] + a[2] + a[3]\
    \ and a[1] + a[2] + a[4] are multiples of 3.\n    # \"\"\"\n    #     Input: n\
    \ = 5\n    # Output: 3\n    # Explanation:\n    # a = [1, 3, 5, 7, 9]\n    # There\
    \ are three triples (a[1], a[2], a[3]), (a[1], a[2], a[4]) and (a[1], a[2], a[5])\
    \ where a[1] + a[2] + a[3], a[1] + a[2] + a[4] and a[1] + a[2] + a[5] are multiples\
    \ of 3.\n    # \"\"\"\n    #     Input: n = 6\n    # Output: 4\n    # Explanation:\n\
    \    # a = [1, 3, 5, 7, 9, 11]\n    # There are four triples (a[1], a[2], a[3]),\
    \ (a[1], a[2], a[4]), (a[1], a[2], a[5]) and (a[1], a[2], a[6]) where a[1] + a[2]\
    \ + a[3], a[1] + a[2] + a[4], a[1] + a[2] + a[5] and a[1] + a[2] + a[6] are multiples\
    \ of 3.\n    # \"\"\"\n    #     Input: n = 7\n    # Output: 5\n", "    a = [i\
    \ * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n -\
    \ 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1,\
    \ n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                   \
    \ count += 1\n    return count\n\n", "    \"\"\"\n    For n = 5, the output should\
    \ be\n    getMaxTriples(n) = 5.\n\n    a = [1, 3, 7, 13, 21].\n    There are 5\
    \ triples: (1, 3, 7), (1, 3, 13), (1, 3, 21), (1, 7, 13), (1, 7, 21).\n    \"\"\
    \"\n    \"\"\"\n    For n = 6, the output should be\n    getMaxTriples(n) = 8.\n\
    \n    a = [1, 3, 7, 13, 21, 31].\n    There are 8 triples: (1, 3, 7), (1, 3, 13),\
    \ (1, 3, 21), (1, 3, 31), (1, 7, 13), (1, 7, 21), (1, 7, 31), (1, 13, 21).\n \
    \   \"\"\"\n    \"\"\"\n    For n = 7, the output should be\n    getMaxTriples(n)\
    \ = 11.\n\n    a = [1, 3, 7, 13, 21, 31, 43].\n    There are 11 triples: (1, 3,\
    \ 7), (1, 3, 13), (1, 3, 21), (1, 3, 31), (1, 3, 43), (1, 7, 13), (1, 7, 21),\
    \ (1, 7, 31), (1, 7, 43), (1, 13, 21), (1, 13, 31).\n    \"\"\"\n    \"\"\"\n\
    \    For n = 8, the output should be\n    getMaxTriples(n) = 15.\n\n    a = [1,\
    \ 3, 7, 13, 21, 31, 43, 59].\n    There are 15 triples: (1, 3, 7), (1, 3, 13),\
    \ (1, 3, 21), (1, 3, 31), (1, 3, 43), (1, 3, 59), (1, 7, 13), (1, 7, 21), (1,\
    \ 7, 31), (1, 7, 43), (1, 7, 59), (1, 13, 21), (1, 13, 31), (1, 13, 43), (1, 13,\
    \ 59).\n    \"\"\"\n    \"\"\"\n    For n = 9, the output should be\n    getMaxTri",
  "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n\
    \ - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] +\
    \ a[k]) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n  \
    \  count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n\
    \            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0:\n                    count += 1\n    return count\n\n", "    # a =\
    \ [i * i - i + 1 for i in range(1, n + 1)]\n    # print(a)\n    # return sum(1\
    \ for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n) if (a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n    return sum(1 for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n \
    \   return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j\
    \ + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    a = [i * i - i + 1 for\
    \ i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for\
    \ j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n  \
    \  return count\n\n", "    a = []\n    for i in range(1, n + 1):\n        a.append(i\
    \ * i - i + 1)\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n", "    #     n = 5\n    #     a = [1, 3, 6, 10, 15]\n    #     triples = [(1,\
    \ 3, 6), (1, 3, 10), (1, 3, 15), (1, 6, 10), (1, 6, 15), (1, 10, 15), (3, 6, 10),\
    \ (3, 6, 15), (3, 10, 15), (6, 10, 15)]\n    #     The number of triples is 10.\n\
    \    #     \"\"\"\n    #     n = 10\n    #     a = [1, 4, 10, 19, 31, 46, 64,\
    \ 85, 109, 136]\n    #     triples = [(1, 4, 10), (1, 4, 19), (1, 4, 31), (1,\
    \ 4, 46), (1, 4, 64), (1, 4, 85), (1, 4, 109), (1, 4, 136), (1, 10, 19), (1, 10,\
    \ 31), (1, 10, 46), (1, 10, 64), (1, 10, 85), (1, 10, 109), (1, 10, 136), (1,\
    \ 19, 31), (1, 19, 46), (1, 19, 64), (1, 19, 85), (1, 19, 109), (1, 19, 136),\
    \ (1, 31, 46), (1, 31, 64), (1, 31, 85), (1, 31, 109), (1, 31, 136), (1, 46, 64),\
    \ (1, 46, 85), (1, 46, 109), (1, 46, 136), (1, 64, 85), (1, 64, 109), (1, 64,\
    \ 136), (1, 85, 109), (1, 85, 136), (1, 109, 136), (4, 10, 19), (4, 10, 31), (4,\
    \ 10, 46), (4, 10, 64), (4, 10, 85), (4, 10, 109), (4, 10, 136), (4, 19, 31),\
    \ (4, 19, 46), (4, 19, 64), (4, 19, 85), (4, 19, 109), (4, 19, 136), (4, 31, 46),\
    \ (4,", "    # Write your code here\n    # To print results to the standard output\
    \ you can use print\n    # Example: print \"Hello world!\"\n    a = [i * i - i\
    \ + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n \
    \       for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count\
    \ += 1\n    return count\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n\
    \    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n -\
    \ 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n", " \
    \   return sum(1 for i in range(1, n) for j in range(i + 1, n) for k in range(j\
    \ + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", " \
    \   #     For n = 4, the output should be\n    #     getMaxTriples(n) = 2.\n \
    \   #     The array a is [1, 3, 5, 7].\n    #     There are 2 triples: (1, 3,\
    \ 5) and (3, 5, 7).\n    #     Both of them are multiples of 3.\n    #     For\
    \ n = 3, the output should be\n    #     getMaxTriples(n) = 0.\n    #     The\
    \ array a is [1, 3, 5].\n    #     There are no triples that are multiples of\
    \ 3.\n    #     For n = 1, the output should be\n    #     getMaxTriples(n) =\
    \ 0.\n    #     The array a is [1].\n    #     There are no triples that are multiples\
    \ of 3.\n    #     \"\"\"\n    #     [input] integer n\n    #     A positive integer.\n\
    \    #     Guaranteed constraints:\n    #     1 \u2264 n \u2264 1000.\n    # \
    \    [output] integer\n    #     The maximum number of triples that are multiples\
    \ of 3.\n    #     \"\"\"\n    #     a = [i * i - i + 1 for i in range(1, n +\
    \ 1)]\n    #     return sum([1 for i in range(len(a)) for j in range(i + 1, len(a))\
    \ for k in range(j + 1, len(a)) if a[i] + a[j] + a[k] % 3 == 0])\n    return sum([1\
    \ for i in range(1, n + 1) for j in range(i + 1, n + 1) for k in range(j + 1,\
    \ n + 1) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0])\n\n", " \
    \   a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n\
    \ - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n)\n               if\
    \ (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    return sum(1 for i in range(1, n)\
    \ for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j\
    \ - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    # Write\
    \ your code here\n    # return 0\n    # return 1\n    # return 2\n    # return\
    \ 3\n    # return 4\n    # return 5\n    # return 6\n    # return 7\n    # return\
    \ 8\n    # return 9\n    # return 10\n    # return 11\n    # return 12\n    #\
    \ return 13\n    # return 14\n    # return 15\n    # return 16\n    # return 17\n\
    \    # return 18\n    # return 19\n    # return 20\n    # return 21\n    # return\
    \ 22\n    # return 23\n    # return 24\n    # return 25\n    # return 26\n   \
    \ # return 27\n    # return 28\n    # return 29\n    # return 30\n    # return\
    \ 31\n    # return 32\n    # return 33\n    # return 34\n    # return 35\n   \
    \ # return 36\n    # return 37\n    # return 38\n    # return 39\n    # return\
    \ 40\n    # return 41\n    # return 42\n    # return 43\n    # return 44\n   \
    \ # return 45\n    # return 46\n    # return 47\n    # return 48\n    # return\
    \ 49\n    # return 50\n    # return 51\n    # return 52\n    # return 53\n   \
    \ # return 54\n    # return 55\n    # return 56\n    # return 57\n    # return\
    \ 58\n    # return 59\n    # return 60\n    # return 61\n    # return 62\n   \
    \ # return 63\n    # return 64\n    # return 65\n    # return 66\n    # return\
    \ 67\n    # return 68\n    # return 69\n    # return 70\n    # return 71\n   \
    \ # return 72\n    # return 73\n    # return 74\n    # return 75\n    # return\
    \ 76\n    # return 77\n    # return 78\n    # return 79\n    # return 80\n   \
    \ # return 81\n    # return 82\n    # return 83\n    # return 84\n    # return\
    \ 85\n    # return 86\n    # return 87\n    # return 88\n    # return 89\n   \
    \ # return 90\n    # return 91\n    # return 92\n    # return 93\n    # return\
    \ 94\n    # return 95\n    # return 96\n    # return 97\n    # return 98\n   \
    \ # return 99\n    # return 100", "    # Write your code here\n    # return 0\n\
    \    # return sum(1 for i in range(1, n) for j in range(i + 1, n) for k in range(j\
    \ + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n    return\
    \ sum(1 for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n)\
    \ if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n", "    a = [i\
    \ * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2)\
    \ for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k])\
    \ % 3 == 0)\n\n", "    #     For n = 3, the output should be\n    #     getMaxTriples(n)\
    \ = 1.\n    #     The only triple is (1, 2, 4).\n    #     1 + 2 + 4 = 7 is a\
    \ multiple of 3.\n    #     For n = 4, the output should be\n    #     getMaxTriples(n)\
    \ = 3.\n    #     There are 3 triples: (1, 2, 4), (1, 2, 6) and (1, 4, 6).\n \
    \   #     1 + 2 + 4 = 7, 1 + 2 + 6 = 9 and 1 + 4 + 6 = 11 are all multiples of\
    \ 3.\n    #     For n = 5, the output should be\n    #     getMaxTriples(n) =\
    \ 6.\n    #     There are 6 triples: (1, 2, 4), (1, 2, 6), (1, 4, 6), (1, 2, 8),\
    \ (1, 4, 8) and (1, 6, 8).\n    #     1 + 2 + 4 = 7, 1 + 2 + 6 = 9, 1 + 4 + 6\
    \ = 11, 1 + 2 + 8 = 11, 1 + 4 + 8 = 13 and 1 + 6 + 8 = 15 are all multiples of\
    \ 3.\n    #     For n = 6, the output should be\n    #     getMaxTriples(n) =\
    \ 10.\n    #     There are 10 triples: (1, 2, 4), (1, 2, 6), (1, 4, 6), (1, 2,\
    \ 8), (1, 4, 8), (1, 6, 8), (1, 2, 10), (1, 4, 10), (1, 6, 10) and (1, 8, 10).\n\
    \    #     1 + 2 + 4 = 7, 1 + 2 + 6 = 9, 1 + 4 + 6 = 11, 1 + 2 + 8 = 11, 1 + 4\
    \ + 8 = 13, 1 + 6 + 8 = 15, 1 + 2 + 10 = 13, 1 + 4 + 10 = 15, 1 + 6 + 10 = 17\
    \ and 1 + 8 + 10 = 19 are all multiples of 3.\n    #     For n = 7, the output\
    \ should be\n    #     getMaxTriples(n)", "    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    a = [i\
    \ * i - i + 1 for i in range(1, n + 1)]\n    return sum(a[i] + a[j] + a[k] % 3\
    \ == 0 for i in range(n) for j in range(i + 1, n) for k in range(j + 1, n))\n\n",
  "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    print(a)\n    count = 0\n\
    \    for i in range(len(a)):\n        for j in range(i + 1, len(a)):\n       \
    \     for k in range(j + 1, len(a)):\n                if (a[i] + a[j] + a[k])\
    \ % 3 == 0:\n                    count += 1\n    return count\n\n", "    a = [i\
    \ * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2)\
    \ for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k])\
    \ % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return\
    \ sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j +\
    \ 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    # a = [i * i - i + 1 for\
    \ i in range(1, n + 1)]\n    # print(a)\n    # return sum([1 for i in range(n)\
    \ for j in range(i + 1, n) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) %\
    \ 3 == 0])\n    return sum([(n - i) * (n - i - 1) // 2 for i in range(n) if (i\
    \ * i - i + 1) % 3 == 0])\n\n", "    return sum([1 for i in range(n) for j in\
    \ range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 +\
    \ k * k - k + 1) % 3 == 0])\n\n", "    a = [i * i - i + 1 for i in range(1, n\
    \ + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for\
    \ k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    a = [i * i\
    \ - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for\
    \ j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) %\
    \ 3 == 0)\n\n", "    #     n = 5\n    #     a = [1, 3, 6, 10, 15]\n    #     triples\
    \ = [(1, 3, 6), (1, 3, 10), (1, 3, 15), (1, 6, 10), (1, 6, 15), (1, 10, 15), (3,\
    \ 6, 10), (3, 6, 15), (3, 10, 15), (6, 10, 15)]\n    #     sum_of_triples = [10,\
    \ 14, 18, 17, 21, 25, 19, 23, 27, 30]\n    #     number_of_triples_divisible_by_3\
    \ = 5\n    #     return 5\n    #     \"\"\"\n    #     n = 4\n    #     a = [1,\
    \ 3, 6, 10]\n    #     triples = [(1, 3, 6), (1, 3, 10), (1, 6, 10), (3, 6, 10)]\n\
    \    #     sum_of_triples = [10, 14, 17, 19]\n    #     number_of_triples_divisible_by_3\
    \ = 3\n    #     return 3\n    #     \"\"\"\n    #     n = 2\n    #     a = [1,\
    \ 3]\n    #     triples = []\n    #     sum_of_triples = []\n    #     number_of_triples_divisible_by_3\
    \ = 0\n    #     return 0\n    #     \"\"\"\n    #     n = 1\n    #     a = [1]\n\
    \    #     triples = []\n    #     sum_of_triples = []\n    #     number_of_triples_divisible_by_3\
    \ = 0\n    #     return 0\n    #     \"\"\"\n    #     n = 3\n    #     a = [1,\
    \ 3, 6]\n    #     triples = [(1, 3, 6)]\n    #     sum_of_triples = [10]\n  \
    \  #     number_of_triples_divisible_by_3 = 1\n    #     return 1\n    #     \"\
    \"\"\n    #     n = 6\n    #     a = [1, 3, 6, 10, 15, 21]\n    #    ", "    return\
    \ sum(1 for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n)\
    \ if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    a =\
    \ [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n\
    \ - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] +\
    \ a[k]) % 3 == 0)\n\n", "    # a[i] = i * i - i + 1\n    # a[i] + a[j] + a[k]\
    \ = i * i - i + 1 + j * j - j + 1 + k * k - k + 1\n    #                     =\
    \ i * i + j * j + k * k - i - j - k + 3\n    #                     = (i + j +\
    \ k) * (i + j + k) - (i + j + k) + 3\n    #                     = (i + j + k)\
    \ * (i + j + k - 1) + 3\n    #                     = (i + j + k) * (i + j + k\
    \ - 1) + 3\n    #                     = (i + j + k) * (i + j + k - 1) + 3\n  \
    \  #                     = (i + j + k) * (i + j + k - 1) + 3\n    #          \
    \           = (i + j + k) * (i + j + k - 1) + 3\n    #                     = (i\
    \ + j + k) * (i + j + k - 1) + 3\n    #                     = (i + j + k) * (i\
    \ + j + k - 1) + 3\n    #                     = (i + j + k) * (i + j + k - 1)\
    \ + 3\n    #                     = (i + j + k) * (i + j + k - 1) + 3\n    #  \
    \                   = (i + j + k) * (i + j + k - 1) + 3\n    #               \
    \      = (i + j + k) * (i + j + k - 1) + 3\n    #                     = (i + j\
    \ + k) * (i + j + k - 1) + 3\n    #                     = (i + j + k) * (i + j\
    \ + k - 1) + 3\n    #                     = (i + j + k) * (i + j + k - 1) + 3\n\
    \    #                     = (i + j + k) * (i + j + k - 1) + 3\n    #        \
    \             = (i + j + k) * (i + j + k - 1) + 3\n    #                     =\
    \ (i + j + k) * (i + j +", "    \"\"\"\n    For n = 3, the output should be\n\
    \    getMaxTriples(n) = 1.\n\n    a = [1, 3, 5].\n    There is only one triple\
    \ (a[1], a[2], a[3]) = (3, 5, 1) that satisfies the condition.\n    \"\"\"\n \
    \   \"\"\"\n    For n = 4, the output should be\n    getMaxTriples(n) = 2.\n\n\
    \    a = [1, 3, 5, 7].\n    There are two triples (a[1], a[2], a[3]) = (3, 5,\
    \ 1) and (a[1], a[2], a[4]) = (3, 5, 7) that satisfy the condition.\n    \"\"\"\
    \n    \"\"\"\n    For n = 5, the output should be\n    getMaxTriples(n) = 3.\n\
    \n    a = [1, 3, 5, 7, 9].\n    There are three triples (a[1], a[2], a[3]) = (3,\
    \ 5, 1), (a[1], a[2], a[4]) = (3, 5, 7) and (a[1], a[2], a[5]) = (3, 5, 9) that\
    \ satisfy the condition.\n    \"\"\"\n    \"\"\"\n    For n = 6, the output should\
    \ be\n    getMaxTriples(n) = 4.\n\n    a = [1, 3, 5, 7, 9, 11].\n    There are\
    \ four triples (a[1], a[2], a[3]) = (3, 5, 1), (a[1], a[2], a[4]) = (3, 5, 7),\
    \ (a[1], a[2], a[5]) = (3, 5, 9) and (a[1], a[2], a[6]) = (3, 5, 11) that satisfy\
    \ the condition.\n    \"\"\"\n    \"\"\"\n    For n = 7, the output should be\n\
    \    getMaxTriples(n) = 5.\n\n    a = [1, 3, 5, 7, 9, 11, 13].\n    There are\
    \ five triples (a[1], a[2], a[3]) = (3, 5, 1), (a[1], a", "    #     n = 5\n \
    \   #     a = [1, 3, 6, 10, 15]\n    #     The number of triples is 2.\n    #\
    \     The triples are (1, 3, 6) and (3, 6, 10).\n    #     \"\"\"\n    #     n\
    \ = 6\n    #     a = [1, 3, 6, 10, 15, 21]\n    #     The number of triples is\
    \ 3.\n    #     The triples are (1, 3, 6), (3, 6, 10) and (6, 10, 15).\n    #\
    \     \"\"\"\n    #     n = 7\n    #     a = [1, 3, 6, 10, 15, 21, 28]\n    #\
    \     The number of triples is 4.\n    #     The triples are (1, 3, 6), (3, 6,\
    \ 10), (6, 10, 15) and (10, 15, 21).\n    #     \"\"\"\n    #     n = 8\n    #\
    \     a = [1, 3, 6, 10, 15, 21, 28, 36]\n    #     The number of triples is 5.\n\
    \    #     The triples are (1, 3, 6), (3, 6, 10), (6, 10, 15), (10, 15, 21) and\
    \ (15, 21, 28).\n    #     \"\"\"\n    #     n = 9\n    #     a = [1, 3, 6, 10,\
    \ 15, 21, 28, 36, 45]\n    #     The number of triples is 6.\n    #     The triples\
    \ are (1, 3, 6), (3, 6, 10), (6, 10, 15), (10, 15, 21), (15, 21, 28) and (21,\
    \ 28, 36).\n    #     \"\"\"\n    #     n = 10\n    #     a = [1, 3, 6, 10, 15,\
    \ 21, 28, 36, 45, 55]\n    #     The number of triples is 7.\n    #     The triples\
    \ are (1, 3, 6), (3, 6, 10), (6, 10, 15), (10, 15, 21), (15, 21, 28), (21, 28,\
    \ 36) and (28, 36,", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count\
    \ = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n   \
    \         for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0:\n                    count += 1\n    return count\n\n", "    return\
    \ sum(1 for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n)\
    \ if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    return\
    \ sum(1 for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n)\
    \ if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    #  \
    \   For n = 5, the output should be\n    #     getMaxTriples(n) = 4.\n    #  \
    \   a = [1, 3, 6, 10, 15].\n    #     There are 4 triples that satisfy the condition:\
    \ (1, 3, 6), (1, 3, 10), (1, 6, 10), (3, 6, 10).\n    #     For n = 3, the output\
    \ should be\n    #     getMaxTriples(n) = 0.\n    #     a = [1, 3, 6].\n    #\
    \     There are no triples that satisfy the condition.\n    #     For n = 1, the\
    \ output should be\n    #     getMaxTriples(n) = 0.\n    #     a = [1].\n    #\
    \     There are no triples that satisfy the condition.\n    #     For n = 2, the\
    \ output should be\n    #     getMaxTriples(n) = 0.\n    #     a = [1, 3].\n \
    \   #     There are no triples that satisfy the condition.\n    #     For n =\
    \ 4, the output should be\n    #     getMaxTriples(n) = 1.\n    #     a = [1,\
    \ 3, 6, 10].\n    #     There is only one triple that satisfies the condition:\
    \ (1, 3, 6).\n    #     For n = 6, the output should be\n    #     getMaxTriples(n)\
    \ = 6.\n    #     a = [1, 3, 6, 10, 15, 21].\n    #     There are 6 triples that\
    \ satisfy the condition: (1, 3, 6), (1, 3, 10), (1, 3, 15), (1, 6, 10), (1, 6,\
    \ 15), (3, 6, 10).\n    #     For n = 7, the output should be\n    #     getMaxTriples(n)\
    \ = 9.\n    #     a = [1, 3, 6, 10, 15, 21, 28].\n    #     There are 9 triples\
    \ that satisfy the condition: (1, 3, 6), (1, 3, 10), (1, 3, 15), (1, 3, 21), (1,\
    \ 6, 10), (1, 6, 15), (", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n\
    \    return sum(\n        1\n        for i in range(n - 2)\n        for j in range(i\
    \ + 1, n - 1)\n        for k in range(j + 1, n)\n        if (a[i] + a[j] + a[k])\
    \ % 3 == 0\n    )\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n  \
    \  return sum(1 for i in range(len(a)) for j in range(i + 1, len(a)) for k in\
    \ range(j + 1, len(a)) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    a = [i * i\
    \ - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for\
    \ j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) %\
    \ 3 == 0)\n\n", "    #     For n = 5, the output should be\n    #     getMaxTriples(n)\
    \ = 2.\n    #     a = [1, 3, 6, 10, 15].\n    #     There are two triples (a[1],\
    \ a[2], a[3]) and (a[2], a[3], a[4]) that satisfy the condition.\n    #     For\
    \ n = 4, the output should be\n    #     getMaxTriples(n) = 1.\n    #     a =\
    \ [1, 3, 6, 10].\n    #     There is only one triple (a[1], a[2], a[3]) that satisfies\
    \ the condition.\n    #     For n = 3, the output should be\n    #     getMaxTriples(n)\
    \ = 0.\n    #     a = [1, 3, 6].\n    #     There are no triples that satisfy\
    \ the condition.\n    #     [input] integer n\n    #     A positive integer.\n\
    \    #     Constraints:\n    #     1 \u2264 n \u2264 1000.\n    #     [output]\
    \ integer\n    #     The maximum number of triples that satisfy the condition.\n\
    \    #     \"\"\"\n    #     a = [i * i - i + 1 for i in range(1, n + 1)]\n  \
    \  #     return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k\
    \ in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n    return sum(1 for i\
    \ in range(n - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    return sum(1\
    \ for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i\
    \ * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    a = [i * i\
    \ - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for\
    \ j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) %\
    \ 3 == 0)\n\n", "    return sum(1 for i in range(1, n) for j in range(i+1, n)\
    \ for k in range(j+1, n) if (i*i - i + 1 + j*j - j + 1 + k*k - k + 1) % 3 == 0)\n",
  "    return sum(1 for i in range(1, n) for j in range(i + 1, n) for k in range(j\
    \ + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n", " \
    \   #     n = 5\n    #     a = [1, 3, 6, 10, 15]\n    #     triples = [(1, 3,\
    \ 6), (1, 3, 10), (1, 3, 15), (1, 6, 10), (1, 6, 15), (1, 10, 15), (3, 6, 10),\
    \ (3, 6, 15), (3, 10, 15), (6, 10, 15)]\n    #     return 10\n\n    #     n =\
    \ 6\n    #     a = [1, 3, 6, 10, 15, 21]\n    #     triples = [(1, 3, 6), (1,\
    \ 3, 10), (1, 3, 15), (1, 3, 21), (1, 6, 10), (1, 6, 15), (1, 6, 21), (1, 10,\
    \ 15), (1, 10, 21), (1, 15, 21), (3, 6, 10), (3, 6, 15), (3, 6, 21), (3, 10, 15),\
    \ (3, 10, 21), (3, 15, 21), (6, 10, 15), (6, 10, 21), (6, 15, 21), (10, 15, 21)]\n\
    \    #     return 20\n\n    #     n = 7\n    #     a = [1, 3, 6, 10, 15, 21, 28]\n\
    \    #     triples = [(1, 3, 6), (1, 3, 10), (1, 3, 15), (1, 3, 21), (1, 3, 28),\
    \ (1, 6, 10), (1, 6, 15), (1, 6, 21), (1, 6, 28), (1, 10, 15), (1, 10, 21), (1,\
    \ 10, 28), (1, 15, 21), (1, 15, 28), (1, 21, 28), (3, 6, 10), (3, 6, 15), (3,\
    \ 6, 21), (3, 6, 28), (3, 10, 15), (3, 10, 21), (3, 10, 28), (3, 15, 21), (3,\
    \ 15, 28), (3, 21, 28), (6, 10, 15), (6, 10, 21), (6", "    return sum(1 for i\
    \ in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i -\
    \ i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    a = [i * i - i +\
    \ 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in\
    \ range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0)\n\n", "    return sum(1 for i in range(1, n) for j in range(i + 1, n) for\
    \ k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3\
    \ == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1\
    \ for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n)\
    \ if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    # Write\
    \ your code here\n    # To print results to the standard output you can use print\n\
    \    # Example: print \"Hello world!\"\n    a = []\n    for i in range(1, n+1):\n\
    \        a.append(i*i - i + 1)\n    count = 0\n    for i in range(0, n-2):\n \
    \       for j in range(i+1, n-1):\n            for k in range(j+1, n):\n     \
    \           if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\
    \    return count\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return\
    \ sum(1 for i in range(len(a)) for j in range(i + 1, len(a)) for k in range(j\
    \ + 1, len(a)) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    #     For n = 4, the\
    \ output should be\n    #     getMaxTriples(n) = 2.\n    #     The only possible\
    \ triples are (1, 2, 3) and (2, 3, 4).\n    #     Both of them are multiples of\
    \ 3, so the answer is 2.\n    #     \"\"\"\n    #     For n = 5, the output should\
    \ be\n    #     getMaxTriples(n) = 3.\n    #     The possible triples are (1,\
    \ 2, 3), (2, 3, 4) and (3, 4, 5).\n    #     All of them are multiples of 3, so\
    \ the answer is 3.\n    #     \"\"\"\n    #     For n = 6, the output should be\n\
    \    #     getMaxTriples(n) = 4.\n    #     The possible triples are (1, 2, 3),\
    \ (2, 3, 4), (3, 4, 5) and (4, 5, 6).\n    #     All of them are multiples of\
    \ 3, so the answer is 4.\n    #     \"\"\"\n    #     For n = 7, the output should\
    \ be\n    #     getMaxTriples(n) = 5.\n    #     The possible triples are (1,\
    \ 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6) and (5, 6, 7).\n    #     All of them\
    \ are multiples of 3, so the answer is 5.\n    #     \"\"\"\n    #     For n =\
    \ 8, the output should be\n    #     getMaxTriples(n) = 6.\n    #     The possible\
    \ triples are (1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6), (5, 6, 7) and (6, 7,\
    \ 8).\n    #     All of them are multiples of 3, so the answer is 6.\n    #  \
    \   \"\"\"\n    #     For n = 9, the output should be\n    #     getMaxTriples(n)\
    \ = 6.\n    #     The possible triples are (1, 2, 3), (2, 3, 4), (3, 4, 5), (4,\
    \ 5, 6), (5", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\
    \    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n         \
    \   for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0:\n                    count += 1\n    return count\n\n", "    \"\"\"\n   \
    \ For n = 3, the output should be\n    getMaxTriples(n) = 1.\n\n    a = [1, 3,\
    \ 7]\n    There is only one triple (a[1], a[2], a[3]), and a[1] + a[2] + a[3]\
    \ = 11 is a multiple of 3.\n    \"\"\"\n    \"\"\"\n    For n = 4, the output\
    \ should be\n    getMaxTriples(n) = 3.\n\n    a = [1, 3, 7, 13]\n    There are\
    \ three triples (a[1], a[2], a[3]), (a[1], a[2], a[4]), (a[1], a[3], a[4]), \n\
    \    and a[1] + a[2] + a[3] = 11, a[1] + a[2] + a[4] = 17, a[1] + a[3] + a[4]\
    \ = 23 are all multiples of 3.\n    \"\"\"\n    \"\"\"\n    For n = 5, the output\
    \ should be\n    getMaxTriples(n) = 6.\n\n    a = [1, 3, 7, 13, 21]\n    There\
    \ are six triples (a[1], a[2], a[3]), (a[1], a[2], a[4]), (a[1], a[2], a[5]),\
    \ \n    (a[1], a[3], a[4]), (a[1], a[3], a[5]), (a[1], a[4], a[5]), \n    and\
    \ a[1] + a[2] + a[3] = 11, a[1] + a[2] + a[4] = 17, a[1] + a[2] + a[5] = 23, \n\
    \    a[1] + a[3] + a[4] = 23, a[1] + a[3] + a[5] = 29, a[1] + a[4] + a[5] = 35\
    \ are all multiples of 3.\n    \"\"\"\n    \"\"\"\n    For n = 6, the output should\
    \ be\n    getMaxTriples(n) = 10.\n\n    a = [1,", "    a = [i * i - i + 1 for\
    \ i in range(1, n + 1)]\n    return sum(1 for i in range(len(a)) for j in range(i\
    \ + 1, len(a)) for k in range(j + 1, len(a)) if (a[i] + a[j] + a[k]) % 3 == 0)\n\
    \n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i\
    \ in range(n - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n +\
    \ 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1,\
    \ n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n", " \
    \   # a = [i * i - i + 1 for i in range(1, n + 1)]\n    # print(a)\n    # count\
    \ = 0\n    # for i in range(n - 2):\n    #     for j in range(i + 1, n - 1):\n\
    \    #         for k in range(j + 1, n):\n    #             if (a[i] + a[j] +\
    \ a[k]) % 3 == 0:\n    #                 count += 1\n    # return count\n    return\
    \ n * (n - 1) * (n - 2) // 6\n\n", "    a = [i * i - i + 1 for i in range(1, n\
    \ + 1)]\n    return sum([1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0])\n\n", "    a = []\n\
    \    for i in range(1, n + 1):\n        a.append(i * i - i + 1)\n    print(a)\n\
    \    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n -\
    \ 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j]\
    \ + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\n", " \
    \   a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n\
    \ - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] +\
    \ a[k]) % 3 == 0)\n\n", "    return sum([1 for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0])\n\n", "    return sum(1 for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n \
    \   return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j\
    \ + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    return sum(1 for i in range(1,\
    \ n) for j in range(i+1, n) for k in range(j+1, n) if (i*i - i + 1 + j*j - j +\
    \ 1 + k*k - k + 1) % 3 == 0)\n", "    return sum(1 for i in range(1, n) for j\
    \ in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j - j +\
    \ 1 + k * k - k + 1) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i\
    \ + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i]\
    \ + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count\n\
    \n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for\
    \ i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k\
    \ in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n   \
    \                 count += 1\n    return count\n\n", "    a = [i * i - i + 1 for\
    \ i in range(1, n + 1)]\n    # print(a)\n    count = 0\n    for i in range(len(a)):\n\
    \        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count\
    \ += 1\n    return count\n\n", "    #     n = 4\n    #     a = [1, 3, 6, 10]\n\
    \    #     triples = [(1, 3, 6), (1, 3, 10), (1, 6, 10), (3, 6, 10)]\n    #  \
    \   a[i] + a[j] + a[k] = 1 + 3 + 6 = 10 = 3 * 3\n    #     a[i] + a[j] + a[k]\
    \ = 1 + 3 + 10 = 14 = 3 * 4\n    #     a[i] + a[j] + a[k] = 1 + 6 + 10 = 17 =\
    \ 3 * 5\n    #     a[i] + a[j] + a[k] = 3 + 6 + 10 = 19 = 3 * 6\n    #     The\
    \ number of triples is 4.\n    #     \"\"\"\n    #     \"\"\"\n    #     Input:\n\
    \    #         n: int\n    #     Output:\n    #         int\n    #     \"\"\"\n\
    \    #     \"\"\"\n    #     Constraints:\n    #         1 \u2264 n \u2264 10^5\n\
    \    #     \"\"\"\n    #     \"\"\"\n    #     Complexity:\n    #         Time:\
    \ O(n)\n    #         Memory: O(n)\n    #     \"\"\"\n    #     \"\"\"\n    #\
    \     Idea:\n    #         -\n    #     \"\"\"\n    #     a = [i * i - i + 1 for\
    \ i in range(1, n + 1)]\n    #     count = 0\n    #     for i in range(n - 2):\n\
    \    #         for j in range(i + 1, n - 1):\n    #             for k in range(j\
    \ + 1, n):\n    #                 if (a[i] + a[j] + a[k]) % 3 == 0:\n    #   \
    \                  count += 1\n    #     return count\n    #\n    #\n    # def\
    \ get_max_triples(n: int) -> int:\n    #     \"\"\"\n    #     You are given a\
    \ positive integer n. You have to create an integer array a of length n.\n   \
    \ #         For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i +\
    \ 1", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for\
    \ i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i]\
    \ + a[j] + a[k]) % 3 == 0)\n\n", "    # a = [i * i - i + 1 for i in range(1, n\
    \ + 1)]\n    # print(a)\n    # triples = []\n    # for i in range(n - 2):\n  \
    \  #     for j in range(i + 1, n - 1):\n    #         for k in range(j + 1, n):\n\
    \    #             if (a[i] + a[j] + a[k]) % 3 == 0:\n    #                 triples.append((a[i],\
    \ a[j], a[k]))\n    # print(triples)\n    # return len(triples)\n    # return\
    \ sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j +\
    \ 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n    return\
    \ sum(1 for i in range(1, n - 1) for j in range(i + 1, n) if (i * i - i + 1 +\
    \ j * j - j + 1 + (i + j) * (i + j) - (i + j) + 1) % 3 == 0)\n\n", "    a = [i\
    \ * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2)\
    \ for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k])\
    \ % 3 == 0)\n\n", "    #     For n = 5, the output should be\n    #     getMaxTriples(n)\
    \ = 2.\n    #     a = [1, 3, 5, 7, 9].\n    #     There are 2 triples (a[1], a[2],\
    \ a[3]) and (a[2], a[3], a[4]) that satisfy the condition.\n    #     \"\"\"\n\
    \    #     For n = 4, the output should be\n    #     getMaxTriples(n) = 0.\n\
    \    #     a = [1, 3, 5, 7].\n    #     There are no triples that satisfy the\
    \ condition.\n    #     \"\"\"\n    #     For n = 3, the output should be\n  \
    \  #     getMaxTriples(n) = 0.\n    #     a = [1, 3, 5].\n    #     There are\
    \ no triples that satisfy the condition.\n    #     \"\"\"\n    #     For n =\
    \ 2, the output should be\n    #     getMaxTriples(n) = 0.\n    #     a = [1,\
    \ 3].\n    #     There are no triples that satisfy the condition.\n    #     \"\
    \"\"\n    #     For n = 1, the output should be\n    #     getMaxTriples(n) =\
    \ 0.\n    #     a = [1].\n    #     There are no triples that satisfy the condition.\n\
    \    #     \"\"\"\n    #     For n = 0, the output should be\n    #     getMaxTriples(n)\
    \ = 0.\n    #     a = [].\n    #     There are no triples that satisfy the condition.\n\
    \    #     \"\"\"\n    #     For n = 6, the output should be\n    #     getMaxTriples(n)\
    \ = 3.\n    #     a = [1, 3, 5, 7, 9, 11].\n    #     There are 3 triples (a[1],\
    \ a[2], a[3]), (a[1], a[2], a[4]) and (a[2], a[3], a[4]) that satisfy the condition.\n\
    \    #     \"\"\"\n    #     For n = 7, the output should be\n    #     getMaxTriples(n)\
    \ = 4.\n    #    ", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return\
    \ sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j +\
    \ 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i\
    \ in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for\
    \ j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n  \
    \  return count\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return\
    \ sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j +\
    \ 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    # a = [i * i - i + 1 for\
    \ i in range(1, n + 1)]\n    # print(a)\n    # count = 0\n    # for i in range(n\
    \ - 2):\n    #     for j in range(i + 1, n - 1):\n    #         for k in range(j\
    \ + 1, n):\n    #             if (a[i] + a[j] + a[k]) % 3 == 0:\n    #       \
    \          count += 1\n    # return count\n    return (n - 1) * (n - 2) * (n -\
    \ 3) // 6\n\n", "    return sum(1 for i in range(1, n) for j in range(i + 1, n)\
    \ for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1)\
    \ % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return\
    \ sum([1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j +\
    \ 1, n) if (a[i] + a[j] + a[k]) % 3 == 0])\n\n", "    # a = [i * i - i + 1 for\
    \ i in range(1, n + 1)]\n    # print(a)\n    # cnt = 0\n    # for i in range(n\
    \ - 2):\n    #     for j in range(i + 1, n - 1):\n    #         for k in range(j\
    \ + 1, n):\n    #             if (a[i] + a[j] + a[k]) % 3 == 0:\n    #       \
    \          cnt += 1\n    # return cnt\n    return sum(i * (i - 1) * (n - i) //\
    \ 6 for i in range(1, n))\n\n", "    a = [i*i - i + 1 for i in range(1, n+1)]\n\
    \    return len([(i, j, k) for i in range(n) for j in range(i+1, n) for k in range(j+1,\
    \ n) if (a[i] + a[j] + a[k]) % 3 == 0])\n\n", "    a = [i * i - i + 1 for i in\
    \ range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i +\
    \ 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", " \
    \   a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n\
    \ - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] +\
    \ a[k]) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n  \
    \  return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j\
    \ + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    # a = [i * i - i + 1 for i in\
    \ range(1, n + 1)]\n    # print(a)\n    # print(sum(a))\n    # print(sum(a) %\
    \ 3)\n    # print(sum(a) // 3)\n    # print(sum(a) // 3 * 3)\n    # print(sum(a)\
    \ // 3 * 3 + 3)\n    # print(sum(a) // 3 * 3 + 6)\n    # print(sum(a) // 3 * 3\
    \ + 9)\n    # print(sum(a) // 3 * 3 + 12)\n    # print(sum(a) // 3 * 3 + 15)\n\
    \    # print(sum(a) // 3 * 3 + 18)\n    # print(sum(a) // 3 * 3 + 21)\n    # print(sum(a)\
    \ // 3 * 3 + 24)\n    # print(sum(a) // 3 * 3 + 27)\n    # print(sum(a) // 3 *\
    \ 3 + 30)\n    # print(sum(a) // 3 * 3 + 33)\n    # print(sum(a) // 3 * 3 + 36)\n\
    \    # print(sum(a) // 3 * 3 + 39)\n    # print(sum(a) // 3 * 3 + 42)\n    # print(sum(a)\
    \ // 3 * 3 + 45)\n    # print(sum(a) // 3 * 3 + 48)\n    # print(sum(a) // 3 *\
    \ 3 + 51)\n    # print(sum(a) // 3 * 3 + 54)\n    # print(sum(a) // 3 * 3 + 57)\n\
    \    # print(sum(a) // 3 * 3 + 60)\n    # print(sum(a) // 3 * 3 + 63)\n    # print(sum(a)\
    \ // 3 * 3 + 66)\n    # print(sum(a) // 3 * 3 + 69)\n    # print(sum(a) // 3 *\
    \ 3 + 72)\n    # print(sum(a) // 3 * 3 + 75)\n    # print(sum(a) // 3 * 3 + 78)\n\
    \    # print(sum(a) // 3 * 3 + 81)\n   ", "    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(a[i] + a[j] + a[k] % 3 == 0 for i in range(n) for j\
    \ in range(i + 1, n) for k in range(j + 1, n))\n\n", "    a = [i * i - i + 1 for\
    \ i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n",
  "    return sum(1 for i in range(1, n) for j in range(i + 1, n) for k in range(j\
    \ + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", " \
    \   return sum(1 for i in range(1, n) for j in range(i + 1, n) for k in range(j\
    \ + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", " \
    \   #     For n = 5, the output should be\n    #     getMaxTriples(n) = 2.\n \
    \   #     a = [1, 3, 6, 10, 15].\n    #     There are 2 triples (1, 3, 6) and\
    \ (3, 6, 10).\n    #     Both of them have a sum of 10, which is a multiple of\
    \ 3.\n    #     For n = 4, the output should be\n    #     getMaxTriples(n) =\
    \ 0.\n    #     a = [1, 3, 6, 10].\n    #     There are no triples that have a\
    \ sum of a multiple of 3.\n    #     For n = 1, the output should be\n    #  \
    \   getMaxTriples(n) = 0.\n    #     a = [1].\n    #     There are no triples\
    \ that have a sum of a multiple of 3.\n    \"\"\"\n    Input/Output\n        [execution\
    \ time limit] 4 seconds (py3)\n        [input] integer n\n        Guaranteed constraints:\n\
    \        1 \u2264 n \u2264 105.\n        [output] integer\n        The number\
    \ of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is\
    \ a multiple of 3.\n    \"\"\"\n    # My solution\n    # a = [i * i - i + 1 for\
    \ i in range(1, n + 1)]\n    # count = 0\n    # for i in range(len(a) - 2):\n\
    \    #     for j in range(i + 1, len(a) - 1):\n    #         for k in range(j\
    \ + 1, len(a)):\n    #             if (a[i] + a[j] + a[k]) % 3 == 0:\n    #  \
    \               count += 1\n    # return count\n\n    # Solution from the site\n\
    \    # return n * (n - 1) * (n - 2) // 6\n\n    # Solution from the site\n   \
    \ # return n * (n - 1) * (n - 2) // 6\n\n    # Solution from the site\n    # return\
    \ n * (n - 1) * (n - 2) // 6\n\n    #", "    #     For n = 3, the output should\
    \ be\n    #     getMaxTriples(n) = 1.\n    #     a = [1, 2, 3].\n    #     There\
    \ is only one triple (a[1], a[2], a[3]), so the answer is 1.\n    #     For n\
    \ = 4, the output should be\n    #     getMaxTriples(n) = 2.\n    #     a = [1,\
    \ 2, 3, 4].\n    #     There are two triples (a[1], a[2], a[3]) and (a[1], a[2],\
    \ a[4]), so the answer is 2.\n    #     For n = 5, the output should be\n    #\
    \     getMaxTriples(n) = 3.\n    #     a = [1, 2, 3, 4, 5].\n    #     There are\
    \ three triples (a[1], a[2], a[3]), (a[1], a[2], a[4]) and (a[1], a[2], a[5]),\
    \ so the answer is 3.\n    #     For n = 6, the output should be\n    #     getMaxTriples(n)\
    \ = 4.\n    #     a = [1, 2, 3, 4, 5, 6].\n    #     There are four triples (a[1],\
    \ a[2], a[3]), (a[1], a[2], a[4]), (a[1], a[2], a[5]) and (a[1], a[2], a[6]),\
    \ so the answer is 4.\n    #     For n = 7, the output should be\n    #     getMaxTriples(n)\
    \ = 5.\n    #     a = [1, 2, 3, 4, 5, 6, 7].\n    #     There are five triples\
    \ (a[1], a[2], a[3]), (a[1], a[2], a[4]), (a[1], a[2], a[5]), (a[1], a[2], a[6])\
    \ and (a[1], a[2], a[7]), so the answer is 5.\n    #     For n = 8, the output\
    \ should be\n    #     get", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n\
    \    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in\
    \ range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    a = []\n    for\
    \ i in range(1, n + 1):\n        a.append(i * i - i + 1)\n    print(a)\n    count\
    \ = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n   \
    \         for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) %\
    \ 3 == 0:\n                    count += 1\n    return count\n\n", "    a = [i\
    \ * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2)\
    \ for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k])\
    \ % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return\
    \ sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j +\
    \ 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i\
    \ in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for\
    \ j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n         \
    \       if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n  \
    \  return count\n\n", "    return sum([1 for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0])\n\n", "    return sum(1 for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0)\n\n", "    return sum(1 for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n \
    \   return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j\
    \ + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    a = [i * i - i + 1 for\
    \ i in range(1, n + 1)]\n    return sum([(a[i] + a[j] + a[k]) % 3 == 0 for i in\
    \ range(n) for j in range(i + 1, n) for k in range(j + 1, n)])\n\n", "    return\
    \ n * (n - 1) * (n - 2) // 6\n\n", "    return sum(1 for i in range(1, n) for\
    \ j in range(i+1, n) for k in range(j+1, n) if (i+j+k) % 3 == 0)\n\n", "    return\
    \ sum(1 for i in range(1, n) for j in range(i + 1, n) for k in range(j + 1, n)\
    \ if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    a =\
    \ [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n\
    \ - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] +\
    \ a[k]) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n  \
    \  return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j\
    \ + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    a = [i * i - i + 1 for\
    \ i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i\
    \ + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n", " \
    \   #     n = 5\n    #     a = [1, 3, 6, 10, 15]\n    #     The number of triples\
    \ is 2.\n    #     The triples are: (1, 3, 6) and (3, 6, 10).\n    #     \"\"\"\
    \n    #     n = 4\n    #     a = [1, 3, 6, 10]\n    #     The number of triples\
    \ is 0.\n    #     \"\"\"\n    #     n = 3\n    #     a = [1, 3, 6]\n    #   \
    \  The number of triples is 1.\n    #     The triple is: (1, 3, 6).\n    #   \
    \  \"\"\"\n    #     n = 2\n    #     a = [1, 3]\n    #     The number of triples\
    \ is 0.\n    #     \"\"\"\n    #     n = 1\n    #     a = [1]\n    #     The number\
    \ of triples is 0.\n    #     \"\"\"\n    #     n = 0\n    #     a = []\n    #\
    \     The number of triples is 0.\n    #     \"\"\"\n    #     n = 6\n    #  \
    \   a = [1, 3, 6, 10, 15, 21]\n    #     The number of triples is 4.\n    #  \
    \   The triples are: (1, 3, 6), (3, 6, 10), (6, 10, 15) and (10, 15, 21).\n  \
    \  #     \"\"\"\n    #     n = 7\n    #     a = [1, 3, 6, 10, 15, 21, 28]\n  \
    \  #     The number of triples is 6.\n    #     The triples are: (1, 3, 6), (3,\
    \ 6, 10), (6, 10, 15), (10, 15, 21), (15, 21, 28) and (3, 10, 21).\n    #    \
    \ \"\"\"\n    #     n = 8\n    #     a = [1, 3, 6, 10, 15, 21, 28, 36]\n    #\
    \     The number of triples is 9.\n    #     The triples are: (1, 3, 6), (3, 6,\
    \ 10), (6, 10, 15), (10, 15, 21),", "    #     For n = 4, the output should be\n\
    \    #     getMaxTriples(n) = 2.\n    #     The array a is [1, 3, 7, 15].\n  \
    \  #     There are 2 triples (a[1], a[2], a[3]) and (a[1], a[2], a[4]) that satisfy\
    \ the condition.\n    #     For n = 5, the output should be\n    #     getMaxTriples(n)\
    \ = 4.\n    #     The array a is [1, 3, 7, 15, 31].\n    #     There are 4 triples\
    \ (a[1], a[2], a[3]), (a[1], a[2], a[4]), (a[1], a[2], a[5]) and (a[1], a[3],\
    \ a[4]) that satisfy the condition.\n    #     For n = 6, the output should be\n\
    \    #     getMaxTriples(n) = 6.\n    #     The array a is [1, 3, 7, 15, 31, 63].\n\
    \    #     There are 6 triples (a[1], a[2], a[3]), (a[1], a[2], a[4]), (a[1],\
    \ a[2], a[5]), (a[1], a[2], a[6]), (a[1], a[3], a[4]) and (a[1], a[3], a[5]) that\
    \ satisfy the condition.\n    #     For n = 7, the output should be\n    #   \
    \  getMaxTriples(n) = 8.\n    #     The array a is [1, 3, 7, 15, 31, 63, 127].\n\
    \    #     There are 8 triples (a[1], a[2], a[3]), (a[1], a[2], a[4]), (a[1],\
    \ a[2], a[5]), (a[1], a[2], a[6]), (a[1], a[2], a[7]), (a[1], a[3], a[4]), (a[1],\
    \ a[3], a[5]) and (a[1], a[3], a[6]) that satisfy the condition.\n    #    ",
  "    return sum([1 for i in range(1, n) for j in range(i + 1, n) for k in range(j\
    \ + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3 == 0])\n\n",
  "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(len(a))\
    \ for j in range(i + 1, len(a)) for k in range(j + 1, len(a)) if (a[i] + a[j]\
    \ + a[k]) % 3 == 0)\n\n", "    \"\"\"\n    For n = 3, the output should be\n \
    \   getMaxTriples(n) = 1.\n\n    a = [1, 3, 7].\n    There is only one triple\
    \ (a[1], a[2], a[3]) = (3, 7, 1) that satisfies the condition.\n    \"\"\"\n \
    \   \"\"\"\n    For n = 4, the output should be\n    getMaxTriples(n) = 3.\n\n\
    \    a = [1, 3, 7, 13].\n    There are three triples (a[1], a[2], a[3]), (a[1],\
    \ a[2], a[4]), (a[1], a[3], a[4]) \n    that satisfy the condition.\n    \"\"\"\
    \n    \"\"\"\n    For n = 5, the output should be\n    getMaxTriples(n) = 6.\n\
    \n    a = [1, 3, 7, 13, 21].\n    There are six triples (a[1], a[2], a[3]), (a[1],\
    \ a[2], a[4]), (a[1], a[2], a[5]), \n    (a[1], a[3], a[4]), (a[1], a[3], a[5]),\
    \ (a[1], a[4], a[5]) that satisfy the condition.\n    \"\"\"\n    \"\"\"\n   \
    \ For n = 6, the output should be\n    getMaxTriples(n) = 10.\n\n    a = [1, 3,\
    \ 7, 13, 21, 31].\n    There are ten triples (a[1], a[2], a[3]), (a[1], a[2],\
    \ a[4]), (a[1], a[2], a[5]), \n    (a[1], a[2], a[6]), (a[1], a[3], a[4]), (a[1],\
    \ a[3], a[5]), (a[1], a[3], a[6]), \n    (a[1], a[4], a[5]), (a[1], a[4], a[6]),\
    \ (a[1], a[5], a[6]) that satisfy the condition.\n    \"\"\"\n    \"\"\"\n   \
    \ For n = 7, the output", "    # return sum([1 for i in range(1, n) for j in range(i+1,\
    \ n) for k in range(j+1, n) if (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0])\n    return\
    \ sum([1 for i in range(1, n) for j in range(i+1, n) for k in range(j+1, n) if\
    \ (i+j+k) % 3 == 0])\n\n", "    return sum(1 for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0)\n\n", "    return sum(1 for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0)\n\n", "    return sum(1 for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n \
    \   return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j\
    \ + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    #     For n = 4, the output\
    \ should be\n    #     getMaxTriples(n) = 2.\n    #     The array a will be [1,\
    \ 3, 5, 7].\n    #     There are two triples (a[i], a[j], a[k]) that satisfy the\
    \ condition:\n    #     (a[1], a[2], a[3]) = (3, 5, 7) and (a[2], a[3], a[4])\
    \ = (5, 7, 9).\n    #     For n = 3, the output should be\n    #     getMaxTriples(n)\
    \ = 0.\n    #     The array a will be [1, 3, 5].\n    #     There are no triples\
    \ (a[i], a[j], a[k]) that satisfy the condition.\n    #     For n = 1, the output\
    \ should be\n    #     getMaxTriples(n) = 0.\n    #     The array a will be [1].\n\
    \    #     There are no triples (a[i], a[j], a[k]) that satisfy the condition.\n\
    \    #     For n = 2, the output should be\n    #     getMaxTriples(n) = 0.\n\
    \    #     The array a will be [1, 3].\n    #     There are no triples (a[i],\
    \ a[j], a[k]) that satisfy the condition.\n    #     For n = 5, the output should\
    \ be\n    #     getMaxTriples(n) = 3.\n    #     The array a will be [1, 3, 5,\
    \ 7, 9].\n    #     There are three triples (a[i], a[j], a[k]) that satisfy the\
    \ condition:\n    #     (a[1], a[2], a[3]) = (3, 5, 7), (a[1], a[2], a[4]) = (3,\
    \ 5, 9) and (a[2], a[3], a[4]) = (5, 7, 9).\n    #     For n = 6, the output should\
    \ be\n    #     getMaxTriples(n) = 4.\n    #     The array a will be [1, 3, 5,\
    \ 7, 9,", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1\
    \ for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n)\
    \ if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n\n", "    return sum(1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0)\n", "    a = [i * i - i + 1 for i in range(1,\
    \ n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i + 1, n - 1)\
    \ for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    a = [i\
    \ * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n - 2)\
    \ for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k])\
    \ % 3 == 0)\n\n", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    return\
    \ sum(1 for i in range(n - 2) for j in range(i + 1, n - 1) for k in range(j +\
    \ 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", "    return sum([1 for i in range(1,\
    \ n) for j in range(i + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j *\
    \ j - j + 1 + k * k - k + 1) % 3 == 0])\n\n", "    a = [i * i - i + 1 for i in\
    \ range(1, n + 1)]\n    return sum(1 for i in range(n - 2) for j in range(i +\
    \ 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] + a[k]) % 3 == 0)\n\n", " \
    \   a = [i * i - i + 1 for i in range(1, n + 1)]\n    return sum(1 for i in range(n\
    \ - 2) for j in range(i + 1, n - 1) for k in range(j + 1, n) if (a[i] + a[j] +\
    \ a[k]) % 3 == 0)\n\n", "    \"\"\"\n    For n = 3, the output should be\n   \
    \ getMaxTriples(n) = 1.\n\n    a = [1, 3, 7].\n    There is only one triple (a[1],\
    \ a[2], a[3]) = (3, 7, 1) that satisfies the condition.\n    \"\"\"\n    \"\"\"\
    \n    For n = 4, the output should be\n    getMaxTriples(n) = 3.\n\n    a = [1,\
    \ 3, 7, 13].\n    There are three triples (a[1], a[2], a[3]), (a[1], a[2], a[4]),\
    \ (a[1], a[3], a[4]) that satisfy the condition.\n    \"\"\"\n    \"\"\"\n   \
    \ For n = 5, the output should be\n    getMaxTriples(n) = 6.\n\n    a = [1, 3,\
    \ 7, 13, 21].\n    There are six triples (a[1], a[2], a[3]), (a[1], a[2], a[4]),\
    \ (a[1], a[2], a[5]), (a[1], a[3], a[4]), (a[1], a[3], a[5]), (a[1], a[4], a[5])\
    \ that satisfy the condition.\n    \"\"\"\n    \"\"\"\n    For n = 6, the output\
    \ should be\n    getMaxTriples(n) = 10.\n\n    a = [1, 3, 7, 13, 21, 31].\n  \
    \  There are ten triples (a[1], a[2], a[3]), (a[1], a[2], a[4]), (a[1], a[2],\
    \ a[5]), (a[1], a[2], a[6]), (a[1], a[3], a[4]), (a[1], a[3], a[5]), (a[1], a[3],\
    \ a[6]), (a[1], a[4], a[5]), (a[1], a[4], a[6]), (a[1], a[5], a[6]) that satisfy\
    \ the condition.\n    \"\"\"\n    \"\"\"\n    For n = 7, the output should be\n\
    \    getMaxTriples(n) =", "    return sum([1 for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0])\n\n", "    return sum(1 for i in range(1, n) for j in range(i\
    \ + 1, n) for k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k -\
    \ k + 1) % 3 == 0)\n\n", "    #     For n = 5, the output should be\n    #   \
    \  getMaxTriples(n) = 4.\n    #     a = [1, 3, 6, 10, 15].\n    #     There are\
    \ 4 triples: (1, 3, 6), (1, 3, 10), (1, 6, 10), (3, 6, 10).\n    #     For n =\
    \ 4, the output should be\n    #     getMaxTriples(n) = 2.\n    #     a = [1,\
    \ 3, 6, 10].\n    #     There are 2 triples: (1, 3, 6), (3, 6, 10).\n    #   \
    \  For n = 1, the output should be\n    #     getMaxTriples(n) = 0.\n    #   \
    \  a = [1].\n    #     There are no triples.\n    #     For n = 2, the output\
    \ should be\n    #     getMaxTriples(n) = 0.\n    #     a = [1, 3].\n    #   \
    \  There are no triples.\n    #     For n = 3, the output should be\n    #   \
    \  getMaxTriples(n) = 0.\n    #     a = [1, 3, 6].\n    #     There are no triples.\n\
    \    #     For n = 6, the output should be\n    #     getMaxTriples(n) = 8.\n\
    \    #     a = [1, 3, 6, 10, 15, 21].\n    #     There are 8 triples: (1, 3, 6),\
    \ (1, 3, 10), (1, 3, 15), (1, 6, 10), (1, 6, 15), (1, 10, 15), (3, 6, 10), (3,\
    \ 6, 15).\n    #     For n = 7, the output should be\n    #     getMaxTriples(n)\
    \ = 10.\n    #     a = [1, 3, 6, 10, 15, 21, 28].\n    #     There are 10 triples:\
    \ (1, 3, 6), (1, 3, 10), (1, 3, 15), (1, 3, 21), (1, 6, 10), (1, 6, 15), (1, 6,\
    \ 21), (", "    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n\
    \    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n         \
    \   for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 ==\
    \ 0:\n                    count += 1\n    return count\n\n", "    a = [i * i -\
    \ i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(len(a)):\n\
    \        for j in range(i + 1, len(a)):\n            for k in range(j + 1, len(a)):\n\
    \                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count\
    \ += 1\n    return count\n\n", "    # a = [i * i - i + 1 for i in range(1, n +\
    \ 1)]\n    # print(a)\n    # count = 0\n    # for i in range(n - 2):\n    #  \
    \   for j in range(i + 1, n - 1):\n    #         for k in range(j + 1, n):\n \
    \   #             if (a[i] + a[j] + a[k]) % 3 == 0:\n    #                 count\
    \ += 1\n    # return count\n    return sum(sum(1 for j in range(i + 1, n) for\
    \ k in range(j + 1, n) if (i * i - i + 1 + j * j - j + 1 + k * k - k + 1) % 3\
    \ == 0) for i in range(n - 2))\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
