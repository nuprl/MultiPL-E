name: HumanEval_31_is_prime
language: py
results:
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n\
    \        if n % i == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n\
    \        if n % i == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if\
    \ n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i\
    \ <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n\
    \        i += 6\n    return True\n\n\ndef check(candidate):\n    assert candidate(6)\
    \ == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n\
    \    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert\
    \ candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n\
    \    assert candidate(85) == False\n    assert candidate(77) == False\n    assert\
    \ candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n  \
    \  elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while\
    \ i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return\
    \ False\n        i += 6\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n\
    \    assert candidate(4) == False\n    assert candidate(1) == False\n    assert\
    \ candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17)\
    \ == True\n    assert candidate(85) == False\n    assert candidate(77) == False\n\
    \    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n == 1:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ else:\n        for i in range(2, n):\n            if n % i == 0:\n         \
    \       return False\n        return True\n\n\ndef check(candidate):\n    assert\
    \ candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n\
    \    assert candidate(4) == False\n    assert candidate(1) == False\n    assert\
    \ candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17)\
    \ == True\n    assert candidate(85) == False\n    assert candidate(77) == False\n\
    \    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if\
    \ n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i\
    \ <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n\
    \        i += 6\n    return True\n\n\ndef check(candidate):\n    assert candidate(6)\
    \ == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n\
    \    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert\
    \ candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n\
    \    assert candidate(85) == False\n    assert candidate(77) == False\n    assert\
    \ candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n\
    \        if n % i == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdjccc5t6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpdjccc5t6.py\", line 28,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmpdjccc5t6.py\", line 13,\
    \ in check\n    assert candidate(6) == False\n  File \"/tmp/tmpdjccc5t6.py\",\
    \ line 6, in is_prime\n    for i in range(2, int(math.sqrt(n)) + 1):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if\
    \ n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i\
    \ <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n\
    \        i += 6\n    return True\n\n\ndef check(candidate):\n    assert candidate(6)\
    \ == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n\
    \    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert\
    \ candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n\
    \    assert candidate(85) == False\n    assert candidate(77) == False\n    assert\
    \ candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return\
    \ False\n        return True\n\n\ndef check(candidate):\n    assert candidate(6)\
    \ == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n\
    \    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert\
    \ candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n\
    \    assert candidate(85) == False\n    assert candidate(77) == False\n    assert\
    \ candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp18guvm3q.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp18guvm3q.py\", line 33,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmp18guvm3q.py\", line 19,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmp18guvm3q.py\"\
    , line 11, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if\
    \ n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i\
    \ <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n\
    \        i += 6\n    return True\n\n\ndef check(candidate):\n    assert candidate(6)\
    \ == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n\
    \    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert\
    \ candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n\
    \    assert candidate(85) == False\n    assert candidate(77) == False\n    assert\
    \ candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgnyitaf4.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgnyitaf4.py\", line 32,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmpgnyitaf4.py\", line 18,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmpgnyitaf4.py\"\
    , line 10, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5z0rdqms.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5z0rdqms.py\", line 32,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmp5z0rdqms.py\", line 18,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmp5z0rdqms.py\"\
    , line 10, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfxcw0q8m.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpfxcw0q8m.py\", line 32,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmpfxcw0q8m.py\", line 18,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmpfxcw0q8m.py\"\
    , line 10, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return\
    \ False\n        return True\n\n\ndef check(candidate):\n    assert candidate(6)\
    \ == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n\
    \    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert\
    \ candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n\
    \    assert candidate(85) == False\n    assert candidate(77) == False\n    assert\
    \ candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7n4iabl0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7n4iabl0.py\", line 33,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmp7n4iabl0.py\", line 19,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmp7n4iabl0.py\"\
    , line 11, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if\
    \ n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i\
    \ <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n\
    \        i += 6\n    return True\n\n\ndef check(candidate):\n    assert candidate(6)\
    \ == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n\
    \    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert\
    \ candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n\
    \    assert candidate(85) == False\n    assert candidate(77) == False\n    assert\
    \ candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n\
    \        if n % i == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    for i in range(2, n):\n        if n %\
    \ i == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    for i in range(2, n):\n        if n %\
    \ i == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    for i in range(2, n):\n        if n %\
    \ i == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ else:\n        for i in range(2, n):\n            if n % i == 0:\n         \
    \       return False\n        return True\n\n\ndef check(candidate):\n    assert\
    \ candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n\
    \    assert candidate(4) == False\n    assert candidate(1) == False\n    assert\
    \ candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17)\
    \ == True\n    assert candidate(85) == False\n    assert candidate(77) == False\n\
    \    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n  \
    \  elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while\
    \ i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return\
    \ False\n        i += 6\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n\
    \    assert candidate(4) == False\n    assert candidate(1) == False\n    assert\
    \ candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17)\
    \ == True\n    assert candidate(85) == False\n    assert candidate(77) == False\n\
    \    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n == 1:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n\
    \        if n % i == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3uc1r1pi.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp3uc1r1pi.py\", line 32,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmp3uc1r1pi.py\", line 18,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmp3uc1r1pi.py\"\
    , line 10, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if\
    \ n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i\
    \ <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n\
    \        i += 6\n    return True\n\n\ndef check(candidate):\n    assert candidate(6)\
    \ == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n\
    \    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert\
    \ candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n\
    \    assert candidate(85) == False\n    assert candidate(77) == False\n    assert\
    \ candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    for i in range(2, n):\n        if n %\
    \ i == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ else:\n        for i in range(2, n):\n            if n % i == 0:\n         \
    \       return False\n        return True\n\n\ndef check(candidate):\n    assert\
    \ candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n\
    \    assert candidate(4) == False\n    assert candidate(1) == False\n    assert\
    \ candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17)\
    \ == True\n    assert candidate(85) == False\n    assert candidate(77) == False\n\
    \    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ else:\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i ==\
    \ 0:\n                return False\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ else:\n        for i in range(2, n):\n            if n % i == 0:\n         \
    \       return False\n        return True\n\n\ndef check(candidate):\n    assert\
    \ candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n\
    \    assert candidate(4) == False\n    assert candidate(1) == False\n    assert\
    \ candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17)\
    \ == True\n    assert candidate(85) == False\n    assert candidate(77) == False\n\
    \    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n\
    \        if n % i == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0e_5prc3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp0e_5prc3.py\", line 28,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmp0e_5prc3.py\", line 13,\
    \ in check\n    assert candidate(6) == False\n  File \"/tmp/tmp0e_5prc3.py\",\
    \ line 6, in is_prime\n    for i in range(2, int(math.sqrt(n)) + 1):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n\
    \        if n % i == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5ym77lun.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp5ym77lun.py\", line 28,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmp5ym77lun.py\", line 13,\
    \ in check\n    assert candidate(6) == False\n  File \"/tmp/tmp5ym77lun.py\",\
    \ line 6, in is_prime\n    for i in range(2, int(math.sqrt(n)) + 1):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n\
    \        if n % i == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgfio84xw.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpgfio84xw.py\", line 32,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmpgfio84xw.py\", line 18,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmpgfio84xw.py\"\
    , line 10, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbjsg1pvq.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpbjsg1pvq.py\", line 32,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmpbjsg1pvq.py\", line 18,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmpbjsg1pvq.py\"\
    , line 10, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4acao4tf.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp4acao4tf.py\", line 32,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmp4acao4tf.py\", line 18,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmp4acao4tf.py\"\
    , line 10, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n == 1:\n        return False\n    for i in range(2, n):\n        if n %\
    \ i == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if\
    \ n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i\
    \ <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n\
    \        i += 6\n    return True\n\n\ndef check(candidate):\n    assert candidate(6)\
    \ == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n\
    \    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert\
    \ candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n\
    \    assert candidate(85) == False\n    assert candidate(77) == False\n    assert\
    \ candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n == 1:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp78e7_hi1.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp78e7_hi1.py\", line 32,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmp78e7_hi1.py\", line 18,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmp78e7_hi1.py\"\
    , line 10, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n  \
    \  elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while\
    \ i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return\
    \ False\n        i += 6\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n\
    \    assert candidate(4) == False\n    assert candidate(1) == False\n    assert\
    \ candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17)\
    \ == True\n    assert candidate(85) == False\n    assert candidate(77) == False\n\
    \    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if\
    \ n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i\
    \ <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n\
    \        i += 6\n    return True\n\n\ndef check(candidate):\n    assert candidate(6)\
    \ == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n\
    \    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert\
    \ candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n\
    \    assert candidate(85) == False\n    assert candidate(77) == False\n    assert\
    \ candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n == 1:\n        return False\n    for i in range(2, n):\n        if n %\
    \ i == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if\
    \ n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i\
    \ <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n\
    \        i += 6\n    return True\n\n\ndef check(candidate):\n    assert candidate(6)\
    \ == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n\
    \    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert\
    \ candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n\
    \    assert candidate(85) == False\n    assert candidate(77) == False\n    assert\
    \ candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph6aq8oyi.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmph6aq8oyi.py\", line 32,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmph6aq8oyi.py\", line 18,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmph6aq8oyi.py\"\
    , line 10, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    elif n <= 3:\n        return True\n  \
    \  elif n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while\
    \ i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return\
    \ False\n        i += 6\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate(6) == False\n    assert candidate(101) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(13441) == True\n    assert candidate(61) == True\n\
    \    assert candidate(4) == False\n    assert candidate(1) == False\n    assert\
    \ candidate(5) == True\n    assert candidate(11) == True\n    assert candidate(17)\
    \ == True\n    assert candidate(85) == False\n    assert candidate(77) == False\n\
    \    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return\
    \ False\n        return True\n\n\ndef check(candidate):\n    assert candidate(6)\
    \ == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n\
    \    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert\
    \ candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n\
    \    assert candidate(85) == False\n    assert candidate(77) == False\n    assert\
    \ candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqme7zldn.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqme7zldn.py\", line 33,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmpqme7zldn.py\", line 19,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmpqme7zldn.py\"\
    , line 11, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if\
    \ n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i\
    \ <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n\
    \        i += 6\n    return True\n\n\ndef check(candidate):\n    assert candidate(6)\
    \ == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n\
    \    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert\
    \ candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n\
    \    assert candidate(85) == False\n    assert candidate(77) == False\n    assert\
    \ candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ for i in range(2, n):\n        if n % i == 0:\n            return False\n  \
    \  return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvdgg_j76.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpvdgg_j76.py\", line 26,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmpvdgg_j76.py\", line 17,\
    \ in check\n    assert candidate(1) == False\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    elif n == 2:\n        return True\n   \
    \ elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3,\
    \ int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n\
    \        return True\n\n\ndef check(candidate):\n    assert candidate(6) == False\n\
    \    assert candidate(101) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(13441) == True\n    assert candidate(61) == True\n    assert candidate(4)\
    \ == False\n    assert candidate(1) == False\n    assert candidate(5) == True\n\
    \    assert candidate(11) == True\n    assert candidate(17) == True\n    assert\
    \ candidate(85) == False\n    assert candidate(77) == False\n    assert candidate(255379)\
    \ == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i\
    \ == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n\
    \        if n % i == 0:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate(6) == False\n    assert candidate(101) == True\n    assert\
    \ candidate(11) == True\n    assert candidate(13441) == True\n    assert candidate(61)\
    \ == True\n    assert candidate(4) == False\n    assert candidate(1) == False\n\
    \    assert candidate(5) == True\n    assert candidate(11) == True\n    assert\
    \ candidate(17) == True\n    assert candidate(85) == False\n    assert candidate(77)\
    \ == False\n    assert candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpukr2pd4a.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpukr2pd4a.py\", line 28,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmpukr2pd4a.py\", line 13,\
    \ in check\n    assert candidate(6) == False\n  File \"/tmp/tmpukr2pd4a.py\",\
    \ line 6, in is_prime\n    for i in range(2, int(math.sqrt(n)) + 1):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvu1rg0fj.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpvu1rg0fj.py\", line 32,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmpvu1rg0fj.py\", line 18,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmpvu1rg0fj.py\"\
    , line 10, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp02jqtxge.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp02jqtxge.py\", line 32,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmp02jqtxge.py\", line 18,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmp02jqtxge.py\"\
    , line 10, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5z0b3mhp.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp5z0b3mhp.py\", line 32,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmp5z0b3mhp.py\", line 18,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmp5z0b3mhp.py\"\
    , line 10, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(n ** 0.5) + 1,\
    \ 2):\n        if n % i == 0:\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n < 2:\n        return False\n    if n == 2:\n        return True\n    if\
    \ n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) +\
    \ 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n\
    \ndef check(candidate):\n    assert candidate(6) == False\n    assert candidate(101)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(13441) == True\n\
    \    assert candidate(61) == True\n    assert candidate(4) == False\n    assert\
    \ candidate(1) == False\n    assert candidate(5) == True\n    assert candidate(11)\
    \ == True\n    assert candidate(17) == True\n    assert candidate(85) == False\n\
    \    assert candidate(77) == False\n    assert candidate(255379) == False\n\n\
    def test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzyysc8xm.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpzyysc8xm.py\", line 32,\
    \ in test_check\n    check(is_prime)\n  File \"/tmp/tmpzyysc8xm.py\", line 18,\
    \ in check\n    assert candidate(101) == True\n  File \"/tmp/tmpzyysc8xm.py\"\
    , line 10, in is_prime\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_prime(n: int) -> bool:\n    \"\"\"Return true if a given number\
    \ is prime, and false otherwise.\n                                \"\"\"\n   \
    \ if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if\
    \ n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i\
    \ <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n\
    \        i += 6\n    return True\n\n\ndef check(candidate):\n    assert candidate(6)\
    \ == False\n    assert candidate(101) == True\n    assert candidate(11) == True\n\
    \    assert candidate(13441) == True\n    assert candidate(61) == True\n    assert\
    \ candidate(4) == False\n    assert candidate(1) == False\n    assert candidate(5)\
    \ == True\n    assert candidate(11) == True\n    assert candidate(17) == True\n\
    \    assert candidate(85) == False\n    assert candidate(77) == False\n    assert\
    \ candidate(255379) == False\n\ndef test_check():\n    check(is_prime)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
