name: HumanEval_68_pluck
language: py
prompt: "from typing import List\n\ndef pluck(arr: List[int]) -> List[int]:\n    \"\
  \"\"\n    \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n    your task is to pluck one of the nodes and return it.\n   \
  \ The plucked node should be the node with the smallest even value.\n    If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n\n    The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n    If there are no even values or the given array is empty, return\
  \ [].\n\n    \n    \n        \n    \n    Constraints:\n        * 1 <= nodes.length\
  \ <= 10000\n        * 0 <= node.value\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([4, 2, 3]) == [2, 1]\n    assert\
  \ candidate([1, 2, 3]) == [2, 1]\n    assert candidate([]) == []\n    assert candidate([5,\
  \ 0, 3, 0, 4, 2]) == [0, 1]\n    assert candidate([1, 2, 3, 0, 5, 3]) == [0, 3]\n\
  \    assert candidate([5, 4, 8, 4, 8]) == [4, 1]\n    assert candidate([7, 6, 7,\
  \ 1]) == [6, 1]\n    assert candidate([7, 9, 7, 1]) == []\n\ndef test_check():\n\
  \    check(pluck)\n\ntest_check()\n"
completions: ["    if not arr:\n        return []\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]", "    if not arr:\n        return\
    \ []\n    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]", '    pass', "    if not\
    \ arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if\
    \ not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", '    pass', '    pass', '    pass', "    if not arr:\n\
    \        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n\
    \        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
  '    pass', '    pass', '    pass', "    if not arr:\n        return []\n    evens\
    \ = [n for n in arr if n % 2 == 0]\n    if not evens:\n        return []\n   \
    \ return [min(evens), arr.index(min(evens))]", '    pass', '    pass', '    pass',
  "    pass\n\n", "    if not arr:\n        return []\n    evens = [x for x in arr\
    \ if x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]", "    pass\n\n", "    pass\n\n",
  '    pass', "    evens = [i for i in arr if i % 2 == 0]\n    if evens:\n       \
    \ return [min(evens), arr.index(min(evens))]\n    return []", '    pass', "  \
    \  if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]", '    pass', '    pass', '    pass', '    pass', '    pass',
  '    pass', '    pass', '    pass', "    if not arr:\n        return []\n    evens\
    \ = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n   \
    \ min_even = min(evens)\n    return [min_even, arr.index(min_even)]", '    pass',
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", '    pass', "    if not arr:\n        return []\n   \
    \ evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n\
    \    min_even = min(evens)\n    return [min_even, arr.index(min_even)]", "   \
    \ if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", '    pass', "    if not arr:\n        return []\n   \
    \ even_nodes = [x for x in arr if x % 2 == 0]\n    if not even_nodes:\n      \
    \  return []\n    smallest_even = min(even_nodes)\n    smallest_even_index = arr.index(smallest_even)\n\
    \    return [smallest_even, smallest_even_index]", '    pass', '    pass', '    pass',
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", "    if not arr:\n        return []\n    evens = [i for\
    \ i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    smallest\
    \ = min(evens)\n    return [smallest, arr.index(smallest)]", "    pass\n\n", " \
    \   if len(arr) == 0:\n        return []\n    even_nums = [x for x in arr if x\
    \ % 2 == 0]\n    if len(even_nums) == 0:\n        return []\n    min_even = min(even_nums)\n\
    \    return [min_even, arr.index(min_even)]", '    pass', '    pass', '    pass',
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    evens.sort()\n    return [evens[0],\
    \ arr.index(evens[0])]", '    pass', '    pass', '    pass', "    pass\n\n", " \
    \   if not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]", '    pass', "    pass\n\n", '    pass', '    pass', '    pass',
  '    pass', "    if not arr:\n        return []\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]", '    pass', '    pass', "    if\
    \ not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n  \
    \  if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", '    pass', "    pass\n\n", '    pass', '    pass', '    pass',
  '    pass', "    if not arr:\n        return []\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]", "    if not arr:\n        return\
    \ []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return\
    \ []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
  '    pass', "    pass\n\n", "    if not arr:\n        return []\n    evens = [i\
    \ for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]", "    if not arr:\n        return []\n\
    \    evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]", '    pass', "    if not\
    \ arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if\
    \ not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]", '    pass', '    pass', '    pass', "    pass\n\n", '    pass',
  "    pass\n\n", '    pass', "    pass\n\n", "    if not arr:\n        return []\n\
    \    evens = []\n    for i, num in enumerate(arr):\n        if num % 2 == 0:\n\
    \            evens.append([num, i])\n    if not evens:\n        return []\n  \
    \  evens.sort()\n    return evens[0]\n", '    pass', "    pass\n\n", '    pass',
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]", '    pass', '    pass', "    evens = [node for node in\
    \ arr if node % 2 == 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n\
    \    return []", "    if not arr:\n        return []\n    evens = [x for x in\
    \ arr if x % 2 == 0]\n    if not evens:\n        return []\n    smallest = min(evens)\n\
    \    return [smallest, arr.index(smallest)]", "    pass\n\n", "    evens = [x\
    \ for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    return\
    \ [min(evens), arr.index(min(evens))]", "    evens = [x for x in arr if x % 2\
    \ == 0]\n    if len(evens) == 0:\n        return []\n    else:\n        min_even\
    \ = min(evens)\n        return [min_even, arr.index(min_even)]", "    pass\n\n",
  '    pass', "    if not arr:\n        return []\n    evens = [n for n in arr if\
    \ n % 2 == 0]\n    if not evens:\n        return []\n    smallest = min(evens)\n\
    \    return [smallest, arr.index(smallest)]", "    pass\n\n", "    if not arr:\n\
    \        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n\
    \        return []\n    evens.sort()\n    return [evens[0], arr.index(evens[0])]",
  '    pass', "    if not arr:\n        return []\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]\n", '    pass', '    pass', '    pass',
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", '    pass', "    evens = [x for x in arr if x % 2 ==\
    \ 0]\n    if len(evens) == 0:\n        return []\n    else:\n        min_even\
    \ = min(evens)\n        return [min_even, arr.index(min_even)]", "    if not arr:\n\
    \        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n\
    \        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
  '    pass', '    pass', "    pass\n\n", "    evens = [x for x in arr if x % 2 ==\
    \ 0]\n    if len(evens) == 0:\n        return []\n    else:\n        return [min(evens),\
    \ arr.index(min(evens))]", "    # your code here\n    return []\n\n", "    if\
    \ not arr:\n        return []\n    evens = [i for i in arr if i % 2 == 0]\n  \
    \  if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", '    pass', '    pass', '    pass', '    pass', '    pass',
  '    pass', "    if not arr:\n        return []\n    evens = [i for i in arr if\
    \ i % 2 == 0]\n    if not evens:\n        return []\n    evens.sort()\n    return\
    \ [evens[0], arr.index(evens[0])]", '    pass', "    if len(arr) == 0:\n     \
    \   return []\n    evens = [i for i in arr if i % 2 == 0]\n    if len(evens) ==\
    \ 0:\n        return []\n    return [min(evens), arr.index(min(evens))]", '    pass',
  "    if len(arr) == 0:\n        return []\n    evens = [n for n in arr if n % 2\
    \ == 0]\n    if len(evens) == 0:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  '    pass', "    if not arr:\n        return []\n    evens = [n for n in arr if\
    \ n % 2 == 0]\n    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  '    pass', '    pass', '    pass', "    pass\n\n", "    pass\n\n", "    pass\n\n",
  "    pass\n\n", '    pass', "    pass\n\n", '    pass', "    evens = [n for n in\
    \ arr if n % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]", '    pass', '    pass', "    pass\n\
    \n", "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2\
    \ == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n   \
    \ return [min_even, arr.index(min_even)]", '    pass', "    if not arr:\n    \
    \    return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n\
    \        return []\n    evens.sort()\n    smallest = evens[0]\n    return [smallest,\
    \ arr.index(smallest)]", '    pass', "    pass\n\n", '    pass', "    if not arr:\n\
    \        return []\n    evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n\
    \        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
  '    pass', "    evens = [node for node in arr if node % 2 == 0]\n    if not evens:\n\
    \        return []\n    min_even = min(evens)\n    return [min_even, arr.index(min_even)]",
  "    if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", '    pass', '    pass', '    pass', '    pass', "   \
    \ pass\n\n", "    pass\n\n", '    pass', '    pass', "    evens = [x for x in\
    \ arr if x % 2 == 0]\n    if len(evens) == 0:\n        return []\n    else:\n\
    \        return [min(evens), arr.index(min(evens))]", "    pass\n\n", "    pass\n\
    \n", '    pass', "    pass\n\n", "    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    min_even = min(evens)\n    return [min_even,\
    \ arr.index(min_even)]", "    if not arr:\n        return []\n    evens = [x for\
    \ x in arr if x % 2 == 0]\n    if not evens:\n        return []\n    min_even\
    \ = min(evens)\n    return [min_even, arr.index(min_even)]", '    return []',
  '    pass', '    pass', "    pass\n\n", "    if not arr:\n        return []\n  \
    \  evens = [x for x in arr if x % 2 == 0]\n    if not evens:\n        return []\n\
    \    min_even = min(evens)\n    return [min_even, arr.index(min_even)]", '    pass',
  '    pass', '    pass', '    pass', "    if not arr:\n        return []\n    evens\
    \ = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return []\n   \
    \ return [min(evens), arr.index(min(evens))]", '    pass', "    pass\n\n", " \
    \   if not arr:\n        return []\n    evens = [x for x in arr if x % 2 == 0]\n\
    \    if not evens:\n        return []\n    return [min(evens), arr.index(min(evens))]",
  "    if not arr:\n        return []\n    evens = [n for n in arr if n % 2 == 0]\n\
    \    if not evens:\n        return []\n    smallest = min(evens)\n    return [smallest,\
    \ arr.index(smallest)]", "    evens = []\n    for i, n in enumerate(arr):\n  \
    \      if n % 2 == 0:\n            evens.append([n, i])\n    if evens:\n     \
    \   return min(evens)\n    return []", "    if not arr:\n        return []\n \
    \   evens = [i for i in arr if i % 2 == 0]\n    if not evens:\n        return\
    \ []\n    return [min(evens), arr.index(min(evens))]", "    pass\n\n", '    pass',
  "    pass\n\n", '    pass', '    pass', "    evens = [i for i in arr if i % 2 ==\
    \ 0]\n    if evens:\n        return [min(evens), arr.index(min(evens))]\n    return\
    \ []", "    if not arr:\n        return []\n    evens = [x for x in arr if x %\
    \ 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n \
    \   return [min_even, arr.index(min_even)]", '    pass', "    pass\n\n", '    pass',
  '    pass', "    if not arr:\n        return []\n    evens = [x for x in arr if\
    \ x % 2 == 0]\n    if not evens:\n        return []\n    min_even = min(evens)\n\
    \    return [min_even, arr.index(min_even)]", '    pass']
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
