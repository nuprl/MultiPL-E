name: HumanEval_12_longest
language: py
results:
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest([\"a\", \"ab\", \"abc\"]))\nprint(longest([\"\
    a\", \"ab\", \"abc\", \"abcd\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\"\
    , \"abcde\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"\
    abcdef\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\",\
    \ \"abcdef\", \"abcdefg\", \"abcdefgh\"]))\nprint(longest([\"a\", \"ab\", \"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]))\n\
    print(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]))\nprint(longest([\"a\", \"ab\"\
    , \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\", \"abcdefghijk\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]))\nprint(longest([\"a\", \"ab\", \"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]))\nprint(longest([\"\
    a\", \"ab\", \"\ndef check(candidate):\n    assert candidate([]) == None\n   \
    \ assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy',\
    \ 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpnzvunqxs.py\", line 26\n    print(longest([\"a\", \"ab\"\
    , \"\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 26)\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest([\"a\", \"aa\", \"aaa\"]))\nprint(longest([]))\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: "aaa\nNone\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        longest_string = strings[0]\n\
    \        for string in strings:\n            if len(string) > len(longest_string):\n\
    \                longest_string = string\n        return longest_string\n\ndef\
    \ check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_so_far = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_so_far):\n            longest_so_far = s\n  \
    \  return longest_so_far\n\nprint(longest(['a', 'aa', 'aaa']))\nprint(longest([]))\n\
    print(longest(['aa', 'a', 'aaa']))\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: "aaa\nNone\naaa\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest(['a', 'aa', 'aaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa']))\nprint(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa',\
    \ 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa', 'aaaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\ndef check(candidate):\n    assert\
    \ candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert\
    \ candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n\
    \    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp68exz15x.py\", line 26\n    print(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa',\
    \ 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\n                  ^\nSyntaxError: '[' was never\
    \ closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest(['a', 'aa', 'aaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa']))\nprint(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa',\
    \ 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa', 'aaaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\ndef check(candidate):\n    assert\
    \ candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert\
    \ candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n\
    \    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmphq2ahkr_.py\", line 26\n    print(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa',\
    \ 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\n                  ^\nSyntaxError: '[' was never\
    \ closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    max_length = len(strings[0])\n    max_length_index =\
    \ 0\n    for i in range(1, len(strings)):\n        if len(strings[i]) > max_length:\n\
    \            max_length = len(strings[i])\n            max_length_index = i\n\
    \    return strings[max_length_index]\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        longest_string = strings[0]\n\
    \        for string in strings:\n            if len(string) > len(longest_string):\n\
    \                longest_string = string\n        return longest_string\n\ndef\
    \ check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        longest = strings[0]\n      \
    \  for string in strings:\n            if len(string) > len(longest):\n      \
    \          longest = string\n        return longest\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest(['a', 'aa', 'aaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa']))\nprint(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa',\
    \ 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa', 'aaaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\ndef check(candidate):\n    assert\
    \ candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert\
    \ candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n\
    \    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpwhytiuui.py\", line 26\n    print(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa',\
    \ 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\n                  ^\nSyntaxError: '[' was never\
    \ closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        longest_string = strings[0]\n\
    \        for string in strings:\n            if len(string) > len(longest_string):\n\
    \                longest_string = string\n        return longest_string\n\ndef\
    \ check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_so_far = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_so_far):\n            longest_so_far = s\n  \
    \  return longest_so_far\n\nprint(longest(['a', 'aa', 'aaa']))\nprint(longest([]))\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: "aaa\nNone\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest(['a', 'aa', 'aaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa']))\nprint(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa',\
    \ 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa', 'aaaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\ndef check(candidate):\n    assert\
    \ candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert\
    \ candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n\
    \    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpb28zh59o.py\", line 26\n    print(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa',\
    \ 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\n                  ^\nSyntaxError: '[' was never\
    \ closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_string):\n            longest_string = s\n  \
    \  return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_string):\n            longest_string = s\n  \
    \  return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_so_far = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_so_far):\n            longest_so_far = s\n  \
    \  return longest_so_far\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_so_far = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_so_far):\n            longest_so_far = s\n  \
    \  return longest_so_far\n\nprint(longest([\"a\", \"ab\", \"abc\"]))\nprint(longest([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\"]))\nprint(longest([\"a\", \"ab\", \"\
    abc\", \"abcd\", \"abcde\", \"abcdef\"]))\nprint(longest([\"a\", \"ab\", \"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"]))\nprint(longest([\"a\", \"ab\"\
    , \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"]))\nprint(longest([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"\
    , \"abcdefghi\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\"\
    , \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]))\nprint(longest([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"\
    , \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\"]))\nprint(longest([\"a\", \"\
    ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"\
    abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\"]))\nprint(longest([\"\
    a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\"\
    , \"abcdefghi\", \"abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"\
    ]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abc\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpt5axkyi0.py\", line 25\n    print(longest([\"a\", \"ab\"\
    , \"abc\", \"abcd\", \"abcde\", \"abc\n                                      \
    \                ^\nSyntaxError: unterminated string literal (detected at line\
    \ 25)\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_string):\n            longest_string = s\n  \
    \  return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_string):\n            longest_string = s\n  \
    \  return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_str = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_str):\n            longest_str = s\n    return\
    \ longest_str\n\ndef check(candidate):\n    assert candidate([]) == None\n   \
    \ assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy',\
    \ 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_string):\n            longest_string = s\n  \
    \  return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_so_far = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_so_far):\n            longest_so_far = s\n  \
    \  return longest_so_far\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_string):\n            longest_string = s\n  \
    \  return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest([\"a\", \"ab\", \"abc\"]))\nprint(longest([\"\
    a\", \"ab\", \"abc\", \"abcd\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\"\
    , \"abcde\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"\
    abcdef\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\",\
    \ \"abcdef\", \"abcdefg\", \"abcdefgh\"]))\nprint(longest([\"a\", \"ab\", \"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]))\n\
    print(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]))\nprint(longest([\"a\", \"ab\"\
    , \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\", \"abcdefghijk\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]))\nprint(longest([\"a\", \"ab\", \"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]))\nprint(longest([\"\
    a\", \"ab\", \"\ndef check(candidate):\n    assert candidate([]) == None\n   \
    \ assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy',\
    \ 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpj6c2t4dv.py\", line 26\n    print(longest([\"a\", \"ab\"\
    , \"\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 26)\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        longest = strings[0]\n      \
    \  for string in strings:\n            if len(string) > len(longest):\n      \
    \          longest = string\n        return longest\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_string):\n            longest_string = s\n  \
    \  return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest(['a', 'aa', 'aaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa']))\nprint(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa',\
    \ 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa', 'aaaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\ndef check(candidate):\n    assert\
    \ candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert\
    \ candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n\
    \    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpze0cjips.py\", line 26\n    print(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa',\
    \ 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\n                  ^\nSyntaxError: '[' was never\
    \ closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    else:\n        longest_string = strings[0]\n       \
    \ for string in strings:\n            if len(string) > len(longest_string):\n\
    \                longest_string = string\n        return longest_string\n\ndef\
    \ check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        longest_string = strings[0]\n\
    \        for string in strings:\n            if len(string) > len(longest_string):\n\
    \                longest_string = string\n        return longest_string\n\ndef\
    \ check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest([\"a\", \"ab\", \"abc\"]))\nprint(longest([\"\
    a\", \"ab\", \"abc\", \"abcd\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\"\
    , \"abcde\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"\
    abcdef\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\"\
    , \"abcdefg\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\",\
    \ \"abcdef\", \"abcdefg\", \"abcdefgh\"]))\nprint(longest([\"a\", \"ab\", \"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"]))\n\
    print(longest([\"a\", \"ab\", \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\"\
    , \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"]))\nprint(longest([\"a\", \"ab\"\
    , \"abc\", \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\"\
    , \"abcdefghij\", \"abcdefghijk\"]))\nprint(longest([\"a\", \"ab\", \"abc\", \"\
    abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"abcdefghij\"\
    , \"abcdefghijk\", \"abcdefghijkl\"]))\nprint(longest([\"a\", \"ab\", \"abc\"\
    , \"abcd\", \"abcde\", \"abcdef\", \"abcdefg\", \"abcdefgh\", \"abcdefghi\", \"\
    abcdefghij\", \"abcdefghijk\", \"abcdefghijkl\", \"abcdefghijklm\"]))\nprint(longest([\"\
    a\", \"ab\", \"\ndef check(candidate):\n    assert candidate([]) == None\n   \
    \ assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy',\
    \ 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpubn9k0_a.py\", line 26\n    print(longest([\"a\", \"ab\"\
    , \"\n                              ^\nSyntaxError: unterminated string literal\
    \ (detected at line 26)\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        longest_string = strings[0]\n\
    \        for string in strings:\n            if len(string) > len(longest_string):\n\
    \                longest_string = string\n        return longest_string\n\nprint(longest([\"\
    a\", \"ab\", \"abc\"]))\nprint(longest([\"abc\", \"ab\", \"a\"]))\nprint(longest([\"\
    abc\", \"ab\", \"a\", \"abcde\"]))\nprint(longest([]))\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: "abc\nabc\nabcde\nNone\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_string):\n            longest_string = s\n  \
    \  return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        longest = strings[0]\n      \
    \  for string in strings:\n            if len(string) > len(longest):\n      \
    \          longest = string\n        return longest\n\ndef check(candidate):\n\
    \    assert candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n\
    \    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\n\
    def test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest(['a', 'aa', 'aaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa']))\nprint(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa',\
    \ 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa', 'aaaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\ndef check(candidate):\n    assert\
    \ candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert\
    \ candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n\
    \    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp651iopl_.py\", line 26\n    print(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa',\
    \ 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\n                  ^\nSyntaxError: '[' was never\
    \ closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    longest_string = strings[0]\n    for string\
    \ in strings:\n        if len(string) > len(longest_string):\n            longest_string\
    \ = string\n    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest(['a', 'aa', 'aaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa']))\nprint(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa',\
    \ 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa', 'aaaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\ndef check(candidate):\n    assert\
    \ candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert\
    \ candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n\
    \    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpivdwrw8_.py\", line 26\n    print(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa',\
    \ 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\n                  ^\nSyntaxError: '[' was never\
    \ closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        longest_string = strings[0]\n\
    \        for string in strings:\n            if len(string) > len(longest_string):\n\
    \                longest_string = string\n        return longest_string\n\ndef\
    \ check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest(['a', 'aa', 'aaa']))\nprint(longest(['aa',\
    \ 'a', 'aaa']))\nprint(longest(['aa', 'aaa', 'a']))\nprint(longest(['aa', 'aaa',\
    \ 'a', 'aaaaa']))\nprint(longest([]))\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: "aaa\naaa\naaa\naaaaa\nNone\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    else:\n        longest_string = strings[0]\n       \
    \ for string in strings:\n            if len(string) > len(longest_string):\n\
    \                longest_string = string\n        return longest_string\n\ndef\
    \ check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_string):\n            longest_string = s\n  \
    \  return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        longest_string = strings[0]\n\
    \        for string in strings:\n            if len(string) > len(longest_string):\n\
    \                longest_string = string\n        return longest_string\n\ndef\
    \ check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest([\"a\", \"abc\", \"ab\"]))\nprint(longest([\"\
    a\", \"abc\", \"ab\", \"abcd\"]))\nprint(longest([\"a\", \"abc\", \"ab\", \"abcd\"\
    , \"abcde\"]))\nprint(longest([]))\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: "abc\nabcd\nabcde\nNone\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_string):\n            longest_string = s\n  \
    \  return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest(['a', 'aa', 'aaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa']))\nprint(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa']))\nprint(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa',\
    \ 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa']))\n\
    print(longest(['a', 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa',\
    \ 'aaaaaaaaa', 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa', 'aaaaaaaaaaaaa']))\nprint(longest(['a',\
    \ 'aa', 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa',\
    \ 'aaaaaaaaaa', 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\ndef check(candidate):\n    assert\
    \ candidate([]) == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert\
    \ candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n\
    \    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpzz_tddtj.py\", line 26\n    print(longest(['a', 'aa',\
    \ 'aaa', 'aaaa', 'aaaaa', 'aaaaaa', 'aaaaaaa', 'aaaaaaaa', 'aaaaaaaaa', 'aaaaaaaaaa',\
    \ 'aaaaaaaaaaa', 'aaaaaaaaaaaa',\n                  ^\nSyntaxError: '[' was never\
    \ closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_so_far = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_so_far):\n            longest_so_far = s\n  \
    \  return longest_so_far\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest([\"a\", \"aa\", \"aaa\"]))\nprint(longest([]))\n\
    print(longest([\"aa\", \"a\", \"aaa\"]))\nprint(longest([\"aa\", \"a\", \"aaa\"\
    , \"aaaa\"]))\nprint(longest([\"aa\", \"a\", \"aaa\", \"aaaa\", \"aaaaa\"]))\n\
    print(longest([\"aa\", \"a\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\"]))\nprint(longest([\"\
    aa\", \"a\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\"]))\nprint(longest([\"\
    aa\", \"a\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\"\
    ]))\nprint(longest([\"aa\", \"a\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"\
    aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\"]))\nprint(longest([\"aa\", \"a\", \"aaa\"\
    , \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"\
    aaaaaaaaaa\"]))\nprint(longest([\"aa\", \"a\", \"aaa\", \"aaaa\", \"aaaaa\", \"\
    aaaaaa\", \"aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"aaaaaaaaaa\", \"aaaaaaaaaaa\"\
    ]))\nprint(longest([\"aa\", \"a\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"\
    aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"aaaaaaaaaa\", \"aaaaaaaaaaa\", \"aaaaaaaaaaaa\"\
    ]))\nprint(longest([\"aa\", \"a\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"\
    aaaaaaa\", \"aaaaaaaa\", \"aaaaaaaaa\", \"aaaaaaaaaa\", \"aaaaaaaaaaa\", \"aaaaaaaaaaaa\"\
    , \"aaaaaaaaaaaaa\"]))\nprint(longest([\"aa\", \"a\", \"aaa\", \"aaaa\", \"aaaaa\"\
    , \"aaaaaa\", \"aaaaaaa\",\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp4mgrqzym.py\", line 28\n    print(longest([\"aa\", \"\
    a\", \"aaa\", \"aaaa\", \"aaaaa\", \"aaaaaa\", \"aaaaaaa\",\n                \
    \  ^\nSyntaxError: '[' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for s in strings:\n\
    \        if len(s) > len(longest_string):\n            longest_string = s\n  \
    \  return longest_string\n\ndef check(candidate):\n    assert candidate([]) ==\
    \ None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\nprint(longest([\"a\", \"abc\", \"ab\"]))\nprint(longest([\"\
    a\", \"abc\", \"ab\", \"abcd\"]))\nprint(longest([\"a\", \"abc\", \"ab\", \"abcd\"\
    , \"abcde\"]))\nprint(longest([]))\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: "abc\nabcd\nabcde\nNone\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if len(strings)\
    \ == 0:\n        return None\n    else:\n        return max(strings, key=len)\n\
    \ndef check(candidate):\n    assert candidate([]) == None\n    assert candidate(['x',\
    \ 'y', 'z']) == 'x'\n    assert candidate(['x', 'yyy', 'zzzz', 'www', 'kkkk',\
    \ 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "from typing import List, Optional\n\ndef longest(strings: List[str]) ->\
    \ Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return\
    \ the first one in case of multiple\n    strings of the same length. Return None\
    \ in case the input list is empty.\n                \"\"\"\n    if not strings:\n\
    \        return None\n    longest_string = strings[0]\n    for string in strings:\n\
    \        if len(string) > len(longest_string):\n            longest_string = string\n\
    \    return longest_string\n\ndef check(candidate):\n    assert candidate([])\
    \ == None\n    assert candidate(['x', 'y', 'z']) == 'x'\n    assert candidate(['x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) == 'zzzz'\n\ndef test_check():\n    check(longest)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
