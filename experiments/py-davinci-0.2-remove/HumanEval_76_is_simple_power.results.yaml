name: HumanEval_76_is_simple_power
language: py
results:
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk93bt3w2.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpk93bt3w2.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpk93bt3w2.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpk93bt3w2.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n != 0:\n       \
    \ return False\n    else:\n        return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n != 0:\n       \
    \ return False\n    else:\n        return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppbt2sz2j.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmppbt2sz2j.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmppbt2sz2j.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmppbt2sz2j.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n ** int(math.log(x,\
    \ n)):\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp697bkxwf.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp697bkxwf.py\", line 26,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp697bkxwf.py\", line\
    \ 14, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp697bkxwf.py\"\
    , line 7, in is_simple_power\n    if x == n ** int(math.log(x, n)):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x/n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    else:\n        return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsa2lyydc.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsa2lyydc.py\", line 28,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpsa2lyydc.py\", line\
    \ 16, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpsa2lyydc.py\"\
    , line 12, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqz42lm3d.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpqz42lm3d.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpqz42lm3d.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpqz42lm3d.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n != 0:\n        return False\n    return is_simple_power(x\
    \ / n, n)\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n  \
    \  assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyp103e93.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpyp103e93.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpyp103e93.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpyp103e93.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_san82yr.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp_san82yr.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp_san82yr.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp_san82yr.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    else:\n        if x % n ==\
    \ 0:\n            return is_simple_power(x / n, n)\n        else:\n          \
    \  return False\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n\
    \    assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x/n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi716uczd.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpi716uczd.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpi716uczd.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpi716uczd.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n != 0:\n        return False\n    else:\n        return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5br8s7gy.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp5br8s7gy.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp5br8s7gy.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp5br8s7gy.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwyn45y3g.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpwyn45y3g.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpwyn45y3g.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpwyn45y3g.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == 0:\n        return False\n    if x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x < n:\n        return False\n\
    \    if x % n != 0:\n        return False\n    return is_simple_power(x / n, n)\n\
    \n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpalugk9bt.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpalugk9bt.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpalugk9bt.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpalugk9bt.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x/n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n != 0:\n        return False\n    else:\n        return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n != 0:\n        return False\n    return is_simple_power(x\
    \ / n, n)\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n  \
    \  assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n)) if x > 0 else False\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyaq2yspn.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpyaq2yspn.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpyaq2yspn.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpyaq2yspn.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n)) if x >\
    \ 0 else False\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x ** (1 / n) % 1 ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_sz8je5l.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp_sz8je5l.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp_sz8je5l.py\", line\
    \ 14, in check\n    assert candidate(9, 3) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n != 0:\n        return False\n    return is_simple_power(x\
    \ // n, n)\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n \
    \   assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp39uwpmjn.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp39uwpmjn.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp39uwpmjn.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp39uwpmjn.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7pjcz9_g.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp7pjcz9_g.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp7pjcz9_g.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp7pjcz9_g.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n != 0:\n        return False\n    else:\n        return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk20nqaoc.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpk20nqaoc.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpk20nqaoc.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpk20nqaoc.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptl1uz3bm.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmptl1uz3bm.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmptl1uz3bm.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmptl1uz3bm.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu3i82uxi.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpu3i82uxi.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpu3i82uxi.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpu3i82uxi.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyvtnk1aw.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpyvtnk1aw.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpyvtnk1aw.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpyvtnk1aw.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n != 0:\n        return False\n    else:\n        return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n != 0:\n        return False\n    else:\n        return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0co6p5hq.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp0co6p5hq.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp0co6p5hq.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp0co6p5hq.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp58yjb1lg.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp58yjb1lg.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp58yjb1lg.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp58yjb1lg.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n != 0:\n       \
    \ return False\n    else:\n        return is_simple_power(x // n, n)\n\n\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n != 0:\n        return\
    \ False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n != 0:\n        return False\n    else:\n        return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n != 0:\n        return False\n    return is_simple_power(x\
    \ / n, n)\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n  \
    \  assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n ** int(math.log(x,\
    \ n)):\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgwiavck6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpgwiavck6.py\", line 26,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpgwiavck6.py\", line\
    \ 14, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpgwiavck6.py\"\
    , line 7, in is_simple_power\n    if x == n ** int(math.log(x, n)):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\nprint(is_simple_power(1, 2))\nprint(is_simple_power(2,\
    \ 2))\nprint(is_simple_power(4, 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(9,\
    \ 2))\nprint(is_simple_power(16, 2))\nprint(is_simple_power(27, 3))\nprint(is_simple_power(81,\
    \ 3))\nprint(is_simple_power(243, 3))\nprint(is_simple_power(256, 2))\nprint(is_simple_power(1024,\
    \ 2))\nprint(is_simple_power(1030, 2))\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nTrue\nFalse\nTrue\nTrue\nTrue\nTrue\nTrue\nTrue\nFalse\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n != 0:\n        return\
    \ False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n ** int(math.log(x,\
    \ n)):\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8b998g7q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8b998g7q.py\", line 26,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp8b998g7q.py\", line\
    \ 14, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp8b998g7q.py\"\
    , line 7, in is_simple_power\n    if x == n ** int(math.log(x, n)):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n != 0:\n        return False\n    return is_simple_power(x\
    \ / n, n)\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n  \
    \  assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph1kdlx1u.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmph1kdlx1u.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmph1kdlx1u.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmph1kdlx1u.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n ** int(math.log(x,\
    \ n)):\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4w8omlu.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg4w8omlu.py\", line 26,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpg4w8omlu.py\", line\
    \ 14, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpg4w8omlu.py\"\
    , line 7, in is_simple_power\n    if x == n ** int(math.log(x, n)):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x/n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n != 0:\n        return\
    \ False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n ** int(math.log(x,\
    \ n)):\n        return True\n    else:\n        return False\n\n\nprint(is_simple_power(4,\
    \ 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(9, 3))\nprint(is_simple_power(27,\
    \ 3))\nprint(is_simple_power(28, 3))\nprint(is_simple_power(25, 5))\nprint(is_simple_power(125,\
    \ 5))\nprint(is_simple_power(126, 5))\nprint(is_simple_power(625, 5))\nprint(is_simple_power(626,\
    \ 5))\nprint(is_simple_power(625, 5))\nprint(is_simple_power(626, 5))\nprint(is_simple_power(625,\
    \ 5))\nprint(is_simple_power(626, 5))\nprint(is_simple_power(625, 5))\nprint(is_simple_power(626,\
    \ 5))\nprint(is_simple_power(625, 5))\nprint(is_simple_power(626, 5))\nprint(is_simple_power(625,\
    \ 5))\nprint(is_simple_power(626, 5))\nprint(is_simple_power(625, 5))\nprint(is_simple_power(626,\
    \ 5))\nprint(is_simple_power(625, 5))\nprint(is_simple_power(626, 5))\nprint(is_simple_power(625,\
    \ 5))\nprint(is_simple_power(626, 5))\nprint(is_simple_power(625, 5))\nprint(is_simple_power(626,\
    \ 5))\nprint(is_simple_power(625, 5))\nprint(is_simple_power(626, 5))\nprint(is_simple_power(625,\
    \ 5))\nprint(is_simple_power(626, 5))\nprint(is_simple_power(625, 5))\nprint(is_simple_power(626,\
    \ 5))\nprint(is_simple_power(625, 5))\nprint(is_simple_power(626, 5))\nprint(is_simple_power(625,\
    \ 5))\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1_500aay.py\", line\
    \ 13, in <module>\n    print(is_simple_power(4, 2))\n  File \"/tmp/tmp1_500aay.py\"\
    , line 7, in is_simple_power\n    if x == n ** int(math.log(x, n)):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x/n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp37ioxya2.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp37ioxya2.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp37ioxya2.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp37ioxya2.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\nprint(is_simple_power(4, 2))\nprint(is_simple_power(125, 5))\nprint(is_simple_power(72,\
    \ 3))\nprint(is_simple_power(100, 2))\nprint(is_simple_power(100, 3))\nprint(is_simple_power(100,\
    \ 4))\nprint(is_simple_power(100, 5))\nprint(is_simple_power(100, 6))\nprint(is_simple_power(100,\
    \ 7))\nprint(is_simple_power(100, 8))\nprint(is_simple_power(100, 9))\nprint(is_simple_power(100,\
    \ 10))\nprint(is_simple_power(100, 11))\nprint(is_simple_power(100, 12))\nprint(is_simple_power(100,\
    \ 13))\nprint(is_simple_power(100, 14))\nprint(is_simple_power(100, 15))\nprint(is_simple_power(100,\
    \ 16))\nprint(is_simple_power(100, 17))\nprint(is_simple_power(100, 18))\nprint(is_simple_power(100,\
    \ 19))\nprint(is_simple_power(100, 20))\nprint(is_simple_power(100, 21))\nprint(is_simple_power(100,\
    \ 22))\nprint(is_simple_power(100, 23))\nprint(is_simple_power(100, 24))\nprint(is_simple_power(100,\
    \ 25))\nprint(is_simple_power(100, 26))\nprint(is_simple_power(100, 27))\nprint(is_simple_power(100,\
    \ 28))\nprint(is_simple_power(100, 29))\nprint(is_simple_power(100, 30))\nprint(is_simple_power(100,\
    \ 31))\nprint(is_simple_power(100, 32))\nprint(is_simple_power(100, 33))\nprint(is_simple_power(100,\
    \ 34))\nprint(is_simple_power(100, 35))\nprint(is_simple_power(100, 36))\ndef\
    \ check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjwpityvu.py\", line\
    \ 9, in <module>\n    print(is_simple_power(4, 2))\n  File \"/tmp/tmpjwpityvu.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnawbwjcr.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpnawbwjcr.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpnawbwjcr.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpnawbwjcr.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0iiiutty.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp0iiiutty.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp0iiiutty.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp0iiiutty.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpytsmt4n2.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpytsmt4n2.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpytsmt4n2.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpytsmt4n2.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_5ap7o78.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp_5ap7o78.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp_5ap7o78.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp_5ap7o78.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    else:\n        while x % n\
    \ == 0:\n            x = x / n\n        return x == 1\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n != 0:\n        return\
    \ False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n:\n        return\
    \ True\n    elif x % n != 0:\n        return False\n    else:\n        return\
    \ is_simple_power(x/n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx7740x24.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpx7740x24.py\", line 28,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpx7740x24.py\", line\
    \ 25, in check\n    assert candidate(1, 12) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == 0:\n        return False\n    if x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbxpl93lq.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpbxpl93lq.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpbxpl93lq.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpbxpl93lq.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n != 0:\n        return False\n    return is_simple_power(x\
    \ / n, n)\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n  \
    \  assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2q00af23.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp2q00af23.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp2q00af23.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp2q00af23.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(log(x, n))\nNameError:\
    \ name 'log' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    else:\n        return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa_kttcwl.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpa_kttcwl.py\", line 28,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpa_kttcwl.py\", line\
    \ 16, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpa_kttcwl.py\"\
    , line 12, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x/n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_iq91w5f.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp_iq91w5f.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp_iq91w5f.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp_iq91w5f.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == 0:\n        return False\n    if x % n == 0:\n        return\
    \ is_simple_power(x/n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt3p_xa7q.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpt3p_xa7q.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpt3p_xa7q.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpt3p_xa7q.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n ** int(math.log(x,\
    \ n)):\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2vp1datl.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2vp1datl.py\", line 26,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp2vp1datl.py\", line\
    \ 14, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp2vp1datl.py\"\
    , line 7, in is_simple_power\n    if x == n ** int(math.log(x, n)):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n != 0:\n        return\
    \ False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n != 0:\n        return False\n    else:\n        return\
    \ is_simple_power(x/n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x/n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n != 0:\n        return False\n    else:\n        return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n != 0:\n        return False\n    else:\n        return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n ** int(math.log(x,\
    \ n)):\n        return True\n    else:\n        return False\n\n\nprint(is_simple_power(4,\
    \ 2))\nprint(is_simple_power(125, 5))\nprint(is_simple_power(256, 4))\nprint(is_simple_power(1024,\
    \ 10))\nprint(is_simple_power(1024, 2))\nprint(is_simple_power(1024, 3))\nprint(is_simple_power(1024,\
    \ 4))\nprint(is_simple_power(1024, 5))\nprint(is_simple_power(1024, 6))\nprint(is_simple_power(1024,\
    \ 7))\nprint(is_simple_power(1024, 8))\nprint(is_simple_power(1024, 9))\nprint(is_simple_power(1024,\
    \ 10))\nprint(is_simple_power(1024, 11))\nprint(is_simple_power(1024, 12))\nprint(is_simple_power(1024,\
    \ 13))\nprint(is_simple_power(1024, 14))\nprint(is_simple_power(1024, 15))\nprint(is_simple_power(1024,\
    \ 16))\nprint(is_simple_power(1024, 17))\nprint(is_simple_power(1024, 18))\nprint(is_simple_power(1024,\
    \ 19))\nprint(is_simple_power(1024, 20))\nprint(is_simple_power(1024, 21))\nprint(is_simple_power(1024,\
    \ 22))\nprint(is_simple_power(1024, 23))\nprint(is_simple_power(1024, 24))\nprint(is_simple_power(1024,\
    \ 25))\nprint(is_simple_power(1024, 26))\nprint(is_simple_power(1024, 27))\nprint(is_simple_power(1024,\
    \ 28))\nprint(is_simple_power(1024, 29))\nprint(is_simple_power(1024, 30))\nprint(is_simple_power(1024,\
    \ 31))\nprint(is_simple_power(1024, 32))\nprint(is_simple_power(1024, 33))\nprint(is_simple_power(1024,\
    \ 34))\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpku2wcnu7.py\", line\
    \ 13, in <module>\n    print(is_simple_power(4, 2))\n  File \"/tmp/tmpku2wcnu7.py\"\
    , line 7, in is_simple_power\n    if x == n ** int(math.log(x, n)):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n != 0:\n        return False\n    else:\n        return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return\
    \ is_simple_power(x/n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4np3d8n7.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp4np3d8n7.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp4np3d8n7.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp4np3d8n7.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4suyqdvf.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp4suyqdvf.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp4suyqdvf.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp4suyqdvf.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n ** int(math.log(x,\
    \ n)):\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps4hy9clb.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmps4hy9clb.py\", line 26,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmps4hy9clb.py\", line\
    \ 14, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmps4hy9clb.py\"\
    , line 7, in is_simple_power\n    if x == n ** int(math.log(x, n)):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpogbllx5r.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpogbllx5r.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpogbllx5r.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpogbllx5r.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps5n5o7fi.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmps5n5o7fi.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmps5n5o7fi.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmps5n5o7fi.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x < 0:\n        return\
    \ False\n    else:\n        return x % n == 0 and is_simple_power(x / n, n)\n\n\
    \ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n ** int(math.log(x,\
    \ n)):\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy41zwv51.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpy41zwv51.py\", line 26,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpy41zwv51.py\", line\
    \ 14, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpy41zwv51.py\"\
    , line 7, in is_simple_power\n    if x == n ** int(math.log(x, n)):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif n == 1:\n        return False\n    elif x == n:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n != 0:\n        return\
    \ False\n    return is_simple_power(x/n, n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x < 1:\n        return False\n    if x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n != 0:\n        return\
    \ False\n    return is_simple_power(x/n, n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp638y65_8.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp638y65_8.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp638y65_8.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp638y65_8.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return n ** int(math.log(x,\
    \ n)) == x\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n \
    \   assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4bk89lj7.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp4bk89lj7.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp4bk89lj7.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp4bk89lj7.py\"\
    , line 7, in is_simple_power\n    return n ** int(math.log(x, n)) == x\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqn2uzlxk.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpqn2uzlxk.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpqn2uzlxk.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpqn2uzlxk.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n != 0:\n        return\
    \ False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x < 1:\n        return False\n    while x > 1:\n        if x %\
    \ n != 0:\n            return False\n        x = x / n\n    return True\n\n\n\
    def check(candidate):\n    assert candidate(16, 2) == True\n    assert candidate(143214,\
    \ 16) == False\n    assert candidate(4, 2) == True\n    assert candidate(9, 3)\
    \ == True\n    assert candidate(16, 4) == True\n    assert candidate(24, 2) ==\
    \ False\n    assert candidate(128, 4) == False\n    assert candidate(12, 6) ==\
    \ False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12) == True\n\
    \ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoyk5t9xu.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpoyk5t9xu.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpoyk5t9xu.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpoyk5t9xu.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphmsrwtyf.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmphmsrwtyf.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmphmsrwtyf.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmphmsrwtyf.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1wz3cac4.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp1wz3cac4.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp1wz3cac4.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp1wz3cac4.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n != 0:\n        return\
    \ False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n)) if x > 0 else False\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp01rwkb30.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp01rwkb30.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp01rwkb30.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp01rwkb30.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n)) if x >\
    \ 0 else False\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x // n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x/n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkal2g1_w.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpkal2g1_w.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpkal2g1_w.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpkal2g1_w.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n ** 2:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkbf8uvc6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpkbf8uvc6.py\", line 26,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpkbf8uvc6.py\", line\
    \ 14, in check\n    assert candidate(16, 2) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxkdw9a7n.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpxkdw9a7n.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpxkdw9a7n.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpxkdw9a7n.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n ** int(math.log(x,\
    \ n)):\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprmwhnd62.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmprmwhnd62.py\", line 26,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmprmwhnd62.py\", line\
    \ 14, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmprmwhnd62.py\"\
    , line 7, in is_simple_power\n    if x == n ** int(math.log(x, n)):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n ** int(math.log(x,\
    \ n)):\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpliijv96q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpliijv96q.py\", line 26,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpliijv96q.py\", line\
    \ 14, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpliijv96q.py\"\
    , line 7, in is_simple_power\n    if x == n ** int(math.log(x, n)):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2tlslue3.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp2tlslue3.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp2tlslue3.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp2tlslue3.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    else:\n        return x ==\
    \ n ** int(math.log(x, n))\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplfowbe21.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmplfowbe21.py\", line 28,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmplfowbe21.py\", line\
    \ 16, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmplfowbe21.py\"\
    , line 12, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n ** int(math.log(x,\
    \ n)):\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe8e2lo52.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpe8e2lo52.py\", line 26,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpe8e2lo52.py\", line\
    \ 14, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpe8e2lo52.py\"\
    , line 7, in is_simple_power\n    if x == n ** int(math.log(x, n)):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n != 0:\n        return False\n    return is_simple_power(x\
    \ / n, n)\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n  \
    \  assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x < 1:\n        return False\n    if x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    return False\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n == 0:\n        return is_simple_power(x / n, n)\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n != 0:\n        return\
    \ False\n    return is_simple_power(x/n, n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_wd7fs0.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpp_wd7fs0.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpp_wd7fs0.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpp_wd7fs0.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n != 0:\n        return False\n    return is_simple_power(x\
    \ / n, n)\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n  \
    \  assert candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n\
    \    assert candidate(9, 3) == True\n    assert candidate(16, 4) == True\n   \
    \ assert candidate(24, 2) == False\n    assert candidate(128, 4) == False\n  \
    \  assert candidate(12, 6) == False\n    assert candidate(1, 1) == True\n    assert\
    \ candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\n\
    test_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgbvgo76j.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpgbvgo76j.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpgbvgo76j.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpgbvgo76j.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n != 0:\n        return False\n    else:\n        return\
    \ is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return\
    \ is_simple_power(x/n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n:\n        return\
    \ True\n    elif x % n != 0:\n        return False\n    else:\n        return\
    \ is_simple_power(x/n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp254yu3qr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp254yu3qr.py\", line 28,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp254yu3qr.py\", line\
    \ 25, in check\n    assert candidate(1, 12) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return\
    \ is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n != 0:\n        return\
    \ False\n    return is_simple_power(x / n, n)\n\n\nprint(is_simple_power(1, 2))\n\
    print(is_simple_power(2, 2))\nprint(is_simple_power(4, 2))\nprint(is_simple_power(5,\
    \ 2))\nprint(is_simple_power(8, 2))\nprint(is_simple_power(9, 3))\nprint(is_simple_power(27,\
    \ 3))\nprint(is_simple_power(28, 3))\nprint(is_simple_power(81, 3))\nprint(is_simple_power(82,\
    \ 3))\nprint(is_simple_power(243, 3))\nprint(is_simple_power(244, 3))\nprint(is_simple_power(729,\
    \ 3))\nprint(is_simple_power(730, 3))\nprint(is_simple_power(2187, 3))\nprint(is_simple_power(2188,\
    \ 3))\nprint(is_simple_power(6561, 3))\nprint(is_simple_power(6562, 3))\nprint(is_simple_power(19683,\
    \ 3))\nprint(is_simple_power(19684, 3))\nprint(is_simple_power(59049, 3))\nprint(is_simple_power(59050,\
    \ 3))\nprint(is_simple_power(177147, 3))\nprint(is_simple_power(177148, 3))\n\
    print(is_simple_power(531441, 3))\nprint(is_simple_power(531442, 3))\nprint(is_simple_power(1594323,\
    \ 3))\nprint(is_simple_power(1594324, 3))\nprint(is_simple_power(4782969, 3))\n\
    print(is_simple_power(4782970, 3))\nprint(is_simple_power(14348907, 3))\nprint(is_simple_power(14348908,\
    \ 3))\nprint(is_simple_power(43046721, 3))\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: "True\nTrue\nTrue\nFalse\nTrue\nTrue\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\n\
    True\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\n\
    True\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\nFalse\nTrue\n"
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn2y4xm5m.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpn2y4xm5m.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpn2y4xm5m.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpn2y4xm5m.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyenx83fv.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpyenx83fv.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpyenx83fv.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpyenx83fv.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2uesh4uf.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp2uesh4uf.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp2uesh4uf.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp2uesh4uf.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x % n == 0:\n        return is_simple_power(x/n, n)\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n != 0:\n        return\
    \ False\n    return is_simple_power(x / n, n)\n\n\ndef check(candidate):\n   \
    \ assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == 0:\n        return False\n    elif x % n == 0:\n       \
    \ return is_simple_power(x / n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\nprint(is_simple_power(4, 2))\nprint(is_simple_power(125, 5))\nprint(is_simple_power(1024000000,\
    \ 2))\nprint(is_simple_power(1, 1))\nprint(is_simple_power(1, 2))\nprint(is_simple_power(1,\
    \ 3))\nprint(is_simple_power(1, 4))\nprint(is_simple_power(1, 5))\nprint(is_simple_power(1,\
    \ 6))\nprint(is_simple_power(1, 7))\nprint(is_simple_power(1, 8))\nprint(is_simple_power(1,\
    \ 9))\nprint(is_simple_power(1, 10))\nprint(is_simple_power(1, 11))\nprint(is_simple_power(1,\
    \ 12))\nprint(is_simple_power(1, 13))\nprint(is_simple_power(1, 14))\nprint(is_simple_power(1,\
    \ 15))\nprint(is_simple_power(1, 16))\nprint(is_simple_power(1, 17))\nprint(is_simple_power(1,\
    \ 18))\nprint(is_simple_power(1, 19))\nprint(is_simple_power(1, 20))\nprint(is_simple_power(1,\
    \ 21))\nprint(is_simple_power(1, 22))\nprint(is_simple_power(1, 23))\nprint(is_simple_power(1,\
    \ 24))\nprint(is_simple_power(1, 25))\nprint(is_simple_power(1, 26))\nprint(is_simple_power(1,\
    \ 27))\nprint(is_simple_power(1, 28))\nprint(is_simple_power(1, 29))\nprint(is_simple_power(1,\
    \ 30))\nprint(is_simple_power(1, 31))\nprint(is_simple_power(1, 32))\nprint(is_simple_power(1,\
    \ 33))\nprint(is_simple_power(1, 34))\nprint(is_simple_power(1, 35\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmpi0u4dmqt.py\", line 47\n    print(is_simple_power(1, 35\n\
    \                         ^\nSyntaxError: '(' was never closed\n"
  exit_code: 1
  status: SyntaxError
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgioq708g.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpgioq708g.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpgioq708g.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpgioq708g.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n ** int(math.log(x,\
    \ n)):\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupi2nogg.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpupi2nogg.py\", line 26,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpupi2nogg.py\", line\
    \ 14, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpupi2nogg.py\"\
    , line 7, in is_simple_power\n    if x == n ** int(math.log(x, n)):\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx5ael7kb.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpx5ael7kb.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpx5ael7kb.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpx5ael7kb.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == n:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwhil8ucr.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwhil8ucr.py\", line 28,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpwhil8ucr.py\", line\
    \ 25, in check\n    assert candidate(1, 12) == True\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n)) if n > 0 else x == n ** int(math.log(x, -n))\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpikxzl3vt.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpikxzl3vt.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmpikxzl3vt.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmpikxzl3vt.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n)) if n >\
    \ 0 else x == n ** int(math.log(x, -n))\nNameError: name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x < 1:\n        return False\n    else:\n        return x % n\
    \ == 0 and is_simple_power(x / n, n)\n\n\ndef check(candidate):\n    assert candidate(16,\
    \ 2) == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0nhi8em4.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp0nhi8em4.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp0nhi8em4.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp0nhi8em4.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x == n:\n        return True\n    elif x % n == 0:\n        return\
    \ is_simple_power(x/n, n)\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n\
    \    assert candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert\
    \ candidate(16, 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    return x == n ** int(math.log(x,\
    \ n))\n\n\ndef check(candidate):\n    assert candidate(16, 2) == True\n    assert\
    \ candidate(143214, 16) == False\n    assert candidate(4, 2) == True\n    assert\
    \ candidate(9, 3) == True\n    assert candidate(16, 4) == True\n    assert candidate(24,\
    \ 2) == False\n    assert candidate(128, 4) == False\n    assert candidate(12,\
    \ 6) == False\n    assert candidate(1, 1) == True\n    assert candidate(1, 12)\
    \ == True\n\ndef test_check():\n    check(is_simple_power)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0jexjlhi.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmp0jexjlhi.py\", line 23,\
    \ in test_check\n    check(is_simple_power)\n  File \"/tmp/tmp0jexjlhi.py\", line\
    \ 11, in check\n    assert candidate(16, 2) == True\n  File \"/tmp/tmp0jexjlhi.py\"\
    , line 7, in is_simple_power\n    return x == n ** int(math.log(x, n))\nNameError:\
    \ name 'math' is not defined\n"
  exit_code: -1
  status: Exception
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    elif x % n == 0:\n        return is_simple_power(x / n, n)\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate(16, 2)\
    \ == True\n    assert candidate(143214, 16) == False\n    assert candidate(4,\
    \ 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16, 4)\
    \ == True\n    assert candidate(24, 2) == False\n    assert candidate(128, 4)\
    \ == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1) ==\
    \ True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def is_simple_power(x: int, n: int) -> bool:\n    \"\"\"Your task is to\
    \ write a function that returns true if a number x is a simple\n    power of n\
    \ and false in other cases.\n    x is a simple power of n if n**int=x\n    For\
    \ example:\n                            \"\"\"\n    if x == 1:\n        return\
    \ True\n    if x == n:\n        return True\n    if x % n != 0:\n        return\
    \ False\n    return is_simple_power(x/n, n)\n\n\ndef check(candidate):\n    assert\
    \ candidate(16, 2) == True\n    assert candidate(143214, 16) == False\n    assert\
    \ candidate(4, 2) == True\n    assert candidate(9, 3) == True\n    assert candidate(16,\
    \ 4) == True\n    assert candidate(24, 2) == False\n    assert candidate(128,\
    \ 4) == False\n    assert candidate(12, 6) == False\n    assert candidate(1, 1)\
    \ == True\n    assert candidate(1, 12) == True\n\ndef test_check():\n    check(is_simple_power)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
