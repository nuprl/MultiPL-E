name: HumanEval_99_closest_integer
language: py
results:
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmply7ql081.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmply7ql081.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmply7ql081.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxzd93j1b.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxzd93j1b.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxzd93j1b.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpckog4dbe.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpckog4dbe.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpckog4dbe.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[-1] == \"5\":\n        return int(value[:-1])\
    \ + 1\n    return int(value)\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9hfrhsxx.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp9hfrhsxx.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp9hfrhsxx.py\", line\
    \ 22, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmp9hfrhsxx.py\"\
    , line 16, in closest_integer\n    return int(value[:-1]) + 1\nValueError: invalid\
    \ literal for int() with base 10: '14.'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.find(\".\") == -1:\n        return\
    \ int(value)\n    else:\n        if float(value) > 0:\n            return int(value.split(\"\
    .\")[0]) + 1\n        else:\n            return int(value.split(\".\")[0]) - 1\n\
    \n\ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprj7rhkje.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmprj7rhkje.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmprj7rhkje.py\", line\
    \ 28, in check\n    assert candidate('15.3') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu35k1fbv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu35k1fbv.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpu35k1fbv.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptcrl49je.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptcrl49je.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmptcrl49je.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc_3gm_2m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpc_3gm_2m.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpc_3gm_2m.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplslrab5h.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplslrab5h.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmplslrab5h.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuafbwtw2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpuafbwtw2.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpuafbwtw2.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value)\
    \ - 1\n    else:\n        return int(value) + 1\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpulujow8e.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpulujow8e.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpulujow8e.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdi_ptibf.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpdi_ptibf.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpdi_ptibf.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5f1bg6ty.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5f1bg6ty.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp5f1bg6ty.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgompeygp.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpgompeygp.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpgompeygp.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.count('.') > 1:\n        raise\
    \ ValueError('Invalid input')\n    elif value.count('.') == 1:\n        integer,\
    \ decimal = value.split('.')\n        if decimal[0] == '0':\n            return\
    \ int(integer)\n        elif decimal[0] == '5':\n            return int(integer)\
    \ + 1\n        else:\n            return int(integer) + 1\n    else:\n       \
    \ return int(value)\n\n\ndef check(candidate):\n    assert candidate('10') ==\
    \ 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n\
    \    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq0sctb7s.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpq0sctb7s.py\", line 37,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpq0sctb7s.py\", line\
    \ 32, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4z67mdp7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp4z67mdp7.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4z67mdp7.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_x5avd4u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_x5avd4u.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_x5avd4u.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpix6pel57.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpix6pel57.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpix6pel57.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpecyj23qz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpecyj23qz.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpecyj23qz.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5eqfcyy2.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5eqfcyy2.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp5eqfcyy2.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value)\
    \ - 1\n    else:\n        return int(value) + 1\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4y66saqn.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4y66saqn.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4y66saqn.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7h4_0m1o.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7h4_0m1o.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7h4_0m1o.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp62wtwg9_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp62wtwg9_.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp62wtwg9_.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0om97g_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu0om97g_.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpu0om97g_.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.startswith(\"-\"):\n        return\
    \ int(value) - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj79vqeis.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpj79vqeis.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpj79vqeis.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpulu3llds.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpulu3llds.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpulu3llds.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp33l8ink1.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp33l8ink1.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp33l8ink1.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp81gljijg.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp81gljijg.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp81gljijg.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsbp7itu6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpsbp7itu6.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpsbp7itu6.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6gy73d0g.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp6gy73d0g.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6gy73d0g.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmcbllide.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpmcbllide.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpmcbllide.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcfyulyef.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpcfyulyef.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpcfyulyef.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.find(\".\") == -1:\n        return\
    \ int(value)\n    else:\n        return int(round(float(value)))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy20afk4i.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpy20afk4i.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpy20afk4i.py\", line\
    \ 23, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value[0]\
    \ + str(int(value[1:]) + 1))\n    else:\n        return int(value) + 1\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8usp9tik.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp8usp9tik.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp8usp9tik.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp08fhame5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp08fhame5.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp08fhame5.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.startswith(\"-\"):\n        return\
    \ int(value) - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbv7li4og.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpbv7li4og.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpbv7li4og.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp43zhs0m1.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp43zhs0m1.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp43zhs0m1.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.find(\".\") == -1:\n        return\
    \ int(value)\n    else:\n        if value[-1] == \"5\":\n            if value[0]\
    \ == \"-\":\n                return int(value[:-2]) - 1\n            else:\n \
    \               return int(value[:-2]) + 1\n        else:\n            return\
    \ int(value[:-2])\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n\
    \    assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n  \
    \  assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8t0ei36z.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8t0ei36z.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp8t0ei36z.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcfbwvcot.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpcfbwvcot.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpcfbwvcot.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp43kl46ti.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp43kl46ti.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp43kl46ti.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1li9us5r.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1li9us5r.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1li9us5r.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == '-':\n        return int(value[0]\
    \ + str(int(value[1:]) + 1))\n    else:\n        return int(value) + 1\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgnyufz_h.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpgnyufz_h.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpgnyufz_h.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_rf4ph3q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_rf4ph3q.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_rf4ph3q.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsprew_9e.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpsprew_9e.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpsprew_9e.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpaevpargg.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpaevpargg.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpaevpargg.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp50h8fej0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp50h8fej0.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp50h8fej0.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbj7ck31z.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbj7ck31z.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpbj7ck31z.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfa4_0__m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfa4_0__m.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpfa4_0__m.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuptfow10.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpuptfow10.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpuptfow10.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.find(\".\") == -1:\n        return\
    \ int(value)\n    else:\n        return int(round(float(value)))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps2sqkahi.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmps2sqkahi.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmps2sqkahi.py\", line\
    \ 23, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8iio2h_q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8iio2h_q.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp8iio2h_q.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpai5qmsj_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpai5qmsj_.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpai5qmsj_.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp5v_p780.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpp5v_p780.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpp5v_p780.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmfb5ak2k.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpmfb5ak2k.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpmfb5ak2k.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7pzdnvs8.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp7pzdnvs8.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp7pzdnvs8.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.startswith(\"-\"):\n        return\
    \ int(value) - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo66ygj8r.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpo66ygj8r.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpo66ygj8r.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpncmtnq06.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpncmtnq06.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpncmtnq06.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptc2iv71_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptc2iv71_.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmptc2iv71_.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7ejs8tt.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu7ejs8tt.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpu7ejs8tt.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5zsqj3c6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5zsqj3c6.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp5zsqj3c6.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwh0_2swh.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpwh0_2swh.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwh0_2swh.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwnxiqu_s.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpwnxiqu_s.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwnxiqu_s.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == '-':\n        return int(value)\
    \ - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpygdf2_yg.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpygdf2_yg.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpygdf2_yg.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxii1qqjj.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxii1qqjj.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxii1qqjj.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == '-':\n        return int(value[1:])\
    \ - 1\n    else:\n        return int(value) + 1\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp8zgklrw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpp8zgklrw.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpp8zgklrw.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value)\
    \ - 1\n    else:\n        return int(value) + 1\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5u__p4y6.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp5u__p4y6.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp5u__p4y6.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmperebyu80.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmperebyu80.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmperebyu80.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcsyngrbn.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpcsyngrbn.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpcsyngrbn.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value[1:])\
    \ - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8llc4xrj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp8llc4xrj.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp8llc4xrj.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3din0n_m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3din0n_m.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp3din0n_m.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == '-':\n        return int(value[1:])\
    \ - 1\n    else:\n        return int(value) + 1\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4jr9rdth.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp4jr9rdth.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4jr9rdth.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8qpotsus.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8qpotsus.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp8qpotsus.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.startswith(\"-\"):\n        return\
    \ int(value) - 1\n    else:\n        return int(value) + 1\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr0gfdf36.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpr0gfdf36.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpr0gfdf36.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.find(\".\") == -1:\n        return\
    \ int(value)\n    else:\n        return int(round(float(value)))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjew130oe.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpjew130oe.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpjew130oe.py\", line\
    \ 23, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.startswith(\"-\"):\n        return\
    \ int(value) - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd1zfw47f.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpd1zfw47f.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpd1zfw47f.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxw4w_kz3.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpxw4w_kz3.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpxw4w_kz3.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == '-':\n        return int(value)\
    \ - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfnli53e6.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfnli53e6.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpfnli53e6.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value)\
    \ - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4tzg592z.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp4tzg592z.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4tzg592z.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value)\
    \ - 1\n    else:\n        return int(value) + 1\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw1_zzfqe.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpw1_zzfqe.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpw1_zzfqe.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[-1] == \".\":\n        return int(value[:-1])\n\
    \    else:\n        return int(round(float(value)))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp51ro9cad.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp51ro9cad.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp51ro9cad.py\", line\
    \ 23, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuexqdwai.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpuexqdwai.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpuexqdwai.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    # TODO: Implement me\n    pass\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjymi_biu.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpjymi_biu.py\", line 27,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpjymi_biu.py\", line\
    \ 20, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm7q8jggn.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpm7q8jggn.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpm7q8jggn.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkpfmj55c.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpkpfmj55c.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpkpfmj55c.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0n0llbvu.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0n0llbvu.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0n0llbvu.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value)\
    \ - 1\n    else:\n        return int(value) + 1\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvakp1atl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpvakp1atl.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpvakp1atl.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_aja8w7m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_aja8w7m.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_aja8w7m.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp52eyxcp_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp52eyxcp_.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp52eyxcp_.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8u83bafl.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp8u83bafl.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp8u83bafl.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp44wzdte_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp44wzdte_.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp44wzdte_.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppadfj8h6.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmppadfj8h6.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppadfj8h6.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpme4fttz0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpme4fttz0.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpme4fttz0.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.isdigit():\n        return int(value)\n\
    \    else:\n        return int(round(float(value)))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw29vwaqj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpw29vwaqj.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpw29vwaqj.py\", line\
    \ 23, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.find(\".\") == -1:\n        return\
    \ int(value)\n    else:\n        return int(value[:value.find(\".\")]) + 1\n\n\
    \ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6yt9rvj3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp6yt9rvj3.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6yt9rvj3.py\", line\
    \ 24, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_jod4_rl.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_jod4_rl.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_jod4_rl.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbco9k0he.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbco9k0he.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpbco9k0he.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.find(\".\") == -1:\n        return\
    \ int(value)\n    else:\n        return int(round(float(value)))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdkhnj9e7.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdkhnj9e7.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpdkhnj9e7.py\", line\
    \ 23, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwi1v6ln7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpwi1v6ln7.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwi1v6ln7.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw0ilo1_n.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpw0ilo1_n.py\", line 24,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpw0ilo1_n.py\", line\
    \ 18, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj2a44oxp.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpj2a44oxp.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpj2a44oxp.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2mt35d9t.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2mt35d9t.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2mt35d9t.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpytwf7ns7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpytwf7ns7.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpytwf7ns7.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value)\
    \ - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfrg1v3bz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpfrg1v3bz.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpfrg1v3bz.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj7viuzzz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpj7viuzzz.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpj7viuzzz.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.startswith(\"-\"):\n        return\
    \ int(value) - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcst3ixll.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpcst3ixll.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpcst3ixll.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkl05ow13.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpkl05ow13.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpkl05ow13.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.startswith(\"-\"):\n        return\
    \ int(value) - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsq44eov3.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpsq44eov3.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpsq44eov3.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.startswith(\"-\"):\n        return\
    \ int(value) - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptke__a13.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptke__a13.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmptke__a13.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0urx060h.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0urx060h.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0urx060h.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpirx8amt5.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpirx8amt5.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpirx8amt5.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[-1] == \".\":\n        return int(value[:-1])\n\
    \    elif value[-1] in \"123456789\":\n        return int(value) + 1\n    elif\
    \ value[-1] in \"0123456789\":\n        return int(value)\n    elif value[-1]\
    \ in \"0123456789\":\n        return int(value)\n    elif value[-1] in \"0123456789\"\
    :\n        return int(value)\n    elif value[-1] in \"0123456789\":\n        return\
    \ int(value)\n    elif value[-1] in \"0123456789\":\n        return int(value)\n\
    \    elif value[-1] in \"0123456789\":\n        return int(value)\n    elif value[-1]\
    \ in \"0123456789\":\n        return int(value)\n    elif value[-1] in \"0123456789\"\
    :\n        return int(value)\n    elif value[-1] in \"0123456789\":\n        return\
    \ int(value)\n    elif value[-1] in \"0123456789\":\n        return int(value)\n\
    \    elif value[-1] in \"0123456789\":\n        return int(value)\n    elif value[-1]\
    \ in \"0123456789\":\n        return int(value)\n    elif value[-1] in \"0123456789\"\
    :\n        return int(value)\n    elif value[-1] in \"0123456789\":\n        return\
    \ int(value)\n    elif value[-1] in \"0123456789\":\n        return int(value)\n\
    \    elif value[-1] in \"0123456789\":\n        return int(value)\n    elif value[-1]\
    \ in \"0123456789\":\n        return int(value)\n    elif value[-1] in \"0123456789\"\
    :\n        return int(value)\n    elif value[-1] in \"0123456789\":\n        return\
    \ int(value)\n    elif value[-1]\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "  File \"/tmp/tmp39n5tyu5.py\", line 57\n    elif value[-1]\n         \
    \         ^\nSyntaxError: expected ':'\n"
  exit_code: 1
  status: SyntaxError
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.find(\".\") == -1:\n        return\
    \ int(value)\n    else:\n        return int(round(float(value)))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz2huakej.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpz2huakej.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpz2huakej.py\", line\
    \ 23, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphxnzowgc.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmphxnzowgc.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphxnzowgc.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp26j8a2ot.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp26j8a2ot.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp26j8a2ot.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbe1l4fel.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbe1l4fel.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpbe1l4fel.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0blg7a5k.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp0blg7a5k.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp0blg7a5k.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu9t1i6n7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu9t1i6n7.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpu9t1i6n7.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value)\
    \ - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgzj7xyre.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpgzj7xyre.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpgzj7xyre.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmiy3vdwm.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpmiy3vdwm.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpmiy3vdwm.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa5rsi046.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpa5rsi046.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpa5rsi046.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjuvizo91.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjuvizo91.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpjuvizo91.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == '-':\n        return int(value)\
    \ - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpurshbssd.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpurshbssd.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpurshbssd.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp35kkce2t.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp35kkce2t.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp35kkce2t.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvaece3_9.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpvaece3_9.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpvaece3_9.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpps9x3ost.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpps9x3ost.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpps9x3ost.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg626y34q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpg626y34q.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpg626y34q.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt_vm1075.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpt_vm1075.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpt_vm1075.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfv7nw5u9.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfv7nw5u9.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpfv7nw5u9.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2sxh9qpw.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2sxh9qpw.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2sxh9qpw.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp42bxy3ty.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp42bxy3ty.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp42bxy3ty.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpofc6n435.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpofc6n435.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpofc6n435.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe9s9i62u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpe9s9i62u.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpe9s9i62u.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz5f4x9tg.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpz5f4x9tg.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpz5f4x9tg.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.startswith(\"-\"):\n        return\
    \ int(value) - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2x3gaqv5.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp2x3gaqv5.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2x3gaqv5.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu0xvjfdl.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpu0xvjfdl.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpu0xvjfdl.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.find(\".\") == -1:\n        return\
    \ int(value)\n    else:\n        return int(value[:value.find(\".\")]) + 1\n\n\
    \ndef check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplw477ty5.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmplw477ty5.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmplw477ty5.py\", line\
    \ 24, in check\n    assert candidate('-15.5') == -16\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.startswith(\"-\"):\n        return\
    \ int(value) - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3vsz8hlj.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp3vsz8hlj.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp3vsz8hlj.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value)\
    \ - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_94hlbla.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp_94hlbla.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_94hlbla.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value)\
    \ - 1\n    else:\n        return int(value) + 1\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdesusbxp.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpdesusbxp.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpdesusbxp.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_cm_c73r.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp_cm_c73r.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp_cm_c73r.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzqrl_7lf.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpzqrl_7lf.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpzqrl_7lf.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.endswith(\".5\"):\n        return\
    \ int(value[:-2]) + 1 if value[0] != \"-\" else int(value[:-2]) - 1\n    return\
    \ int(value)\n\n\ndef check(candidate):\n    assert candidate('10') == 10\n  \
    \  assert candidate('14.5') == 15\n    assert candidate('-15.5') == -16\n    assert\
    \ candidate('15.3') == 15\n    assert candidate('0') == 0\n\ndef test_check():\n\
    \    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc6f33ohe.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpc6f33ohe.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpc6f33ohe.py\", line\
    \ 24, in check\n    assert candidate('15.3') == 15\n  File \"/tmp/tmpc6f33ohe.py\"\
    , line 17, in closest_integer\n    return int(value)\nValueError: invalid literal\
    \ for int() with base 10: '15.3'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmparhxy9g0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmparhxy9g0.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmparhxy9g0.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkr9ryosy.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpkr9ryosy.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpkr9ryosy.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.isdigit():\n        return int(value)\n\
    \    else:\n        return int(round(float(value)))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuh8v4nda.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpuh8v4nda.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpuh8v4nda.py\", line\
    \ 23, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo1hox1qg.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpo1hox1qg.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpo1hox1qg.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.find(\".\") == -1:\n        return\
    \ int(value)\n    else:\n        if value[-1] == \"5\":\n            return int(value[:-1])\
    \ + 1\n        else:\n            return int(value)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppiaju7sd.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmppiaju7sd.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppiaju7sd.py\", line\
    \ 26, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmppiaju7sd.py\"\
    , line 19, in closest_integer\n    return int(value[:-1]) + 1\nValueError: invalid\
    \ literal for int() with base 10: '14.'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnn8af9v8.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpnn8af9v8.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpnn8af9v8.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvo9zi98x.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpvo9zi98x.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpvo9zi98x.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz2ydm85q.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpz2ydm85q.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpz2ydm85q.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt34nwa25.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpt34nwa25.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpt34nwa25.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqai0o69e.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpqai0o69e.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpqai0o69e.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3tdemdxc.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3tdemdxc.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp3tdemdxc.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4ibhqicp.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp4ibhqicp.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4ibhqicp.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf4zs5xoa.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpf4zs5xoa.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpf4zs5xoa.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppyzrp632.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmppyzrp632.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppyzrp632.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpccd_her0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpccd_her0.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpccd_her0.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj9af6b3r.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpj9af6b3r.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpj9af6b3r.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx28qtm3p.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpx28qtm3p.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpx28qtm3p.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value)\
    \ - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwynw2_7m.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpwynw2_7m.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpwynw2_7m.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptvv0wl3p.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmptvv0wl3p.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmptvv0wl3p.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi76m1n_s.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpi76m1n_s.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpi76m1n_s.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5f8j6kwv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5f8j6kwv.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp5f8j6kwv.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfvy04wpu.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfvy04wpu.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpfvy04wpu.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw_sxyndx.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpw_sxyndx.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpw_sxyndx.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfnuggzcd.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpfnuggzcd.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpfnuggzcd.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.isdigit():\n        return int(value)\n\
    \    else:\n        return int(round(float(value)))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiejh75z_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpiejh75z_.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpiejh75z_.py\", line\
    \ 23, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpohg796on.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpohg796on.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpohg796on.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value[1:])\
    \ - 1\n    else:\n        return int(value) + 1\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqvqt3ws1.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpqvqt3ws1.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpqvqt3ws1.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpco_se8zk.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpco_se8zk.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpco_se8zk.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyxr14igl.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpyxr14igl.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpyxr14igl.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplukgvc_3.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmplukgvc_3.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmplukgvc_3.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.find(\".\") == -1:\n        return\
    \ int(value)\n    else:\n        return int(round(float(value)))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpi1xe0zo_.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpi1xe0zo_.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpi1xe0zo_.py\", line\
    \ 23, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.startswith(\"-\"):\n        return\
    \ int(value) - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert\
    \ candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5')\
    \ == -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\
    \ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvytqcwys.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpvytqcwys.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpvytqcwys.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6i2ekncd.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp6i2ekncd.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp6i2ekncd.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa0_uzp74.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpa0_uzp74.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpa0_uzp74.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp50_oi05u.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp50_oi05u.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp50_oi05u.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd8hkrh9p.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpd8hkrh9p.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpd8hkrh9p.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz2tsmvr3.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpz2tsmvr3.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpz2tsmvr3.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value.find(\".\") == -1:\n        return\
    \ int(value)\n    else:\n        if value[-1] == \"5\":\n            return int(value[:-1])\
    \ + 1\n        else:\n            return int(value)\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp84bd8izv.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp84bd8izv.py\", line 32,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp84bd8izv.py\", line\
    \ 26, in check\n    assert candidate('14.5') == 15\n  File \"/tmp/tmp84bd8izv.py\"\
    , line 19, in closest_integer\n    return int(value[:-1]) + 1\nValueError: invalid\
    \ literal for int() with base 10: '14.'\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpd24bgb5m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpd24bgb5m.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpd24bgb5m.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpw4ogy8y7.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpw4ogy8y7.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpw4ogy8y7.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1s3s2030.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp1s3s2030.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1s3s2030.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp86x5rvkv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp86x5rvkv.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp86x5rvkv.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpispg_f0f.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpispg_f0f.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpispg_f0f.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjyxzxk12.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpjyxzxk12.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpjyxzxk12.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphauibppr.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmphauibppr.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphauibppr.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5rfaxr13.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp5rfaxr13.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp5rfaxr13.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == '-':\n        return int(value)\
    \ - 1\n    else:\n        return int(value) + 1\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiicp3xj3.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpiicp3xj3.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpiicp3xj3.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value)\
    \ - 1\n    return int(value) + 1\n\n\ndef check(candidate):\n    assert candidate('10')\
    \ == 10\n    assert candidate('14.5') == 15\n    assert candidate('-15.5') ==\
    \ -16\n    assert candidate('15.3') == 15\n    assert candidate('0') == 0\n\n\
    def test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpt6dea_mi.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpt6dea_mi.py\", line 28,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpt6dea_mi.py\", line\
    \ 21, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4jmyet3a.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp4jmyet3a.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp4jmyet3a.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value)\
    \ - 1\n    else:\n        return int(value) + 1\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1lfixwcl.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp1lfixwcl.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp1lfixwcl.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpclus511m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpclus511m.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpclus511m.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    # your code here\n    return None\n\n\n\
    def check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphxnc6wmd.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmphxnc6wmd.py\", line 27,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmphxnc6wmd.py\", line\
    \ 20, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbb978_eo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpbb978_eo.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpbb978_eo.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value)\
    \ - 1\n    else:\n        return int(value) + 1\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoy622a7k.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpoy622a7k.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpoy622a7k.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return round(float(value))\n\n\ndef check(candidate):\n\
    \    assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppxcazolh.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmppxcazolh.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmppxcazolh.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    if value[0] == \"-\":\n        return int(value)\
    \ - 1\n    else:\n        return int(value) + 1\n\n\ndef check(candidate):\n \
    \   assert candidate('10') == 10\n    assert candidate('14.5') == 15\n    assert\
    \ candidate('-15.5') == -16\n    assert candidate('15.3') == 15\n    assert candidate('0')\
    \ == 0\n\ndef test_check():\n    check(closest_integer)\n\ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpz0wjymdc.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpz0wjymdc.py\", line 29,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmpz0wjymdc.py\", line\
    \ 22, in check\n    assert candidate('10') == 10\nAssertionError\n"
  exit_code: -1
  status: Exception
- program: "def closest_integer(value: str) -> int:\n    \"\"\"\n    Create a function\
    \ that takes a value (string) representing a number\n    and returns the closest\
    \ integer to it. If the number is equidistant\n    from two integers, round it\
    \ away from zero.\n\n    Examples\n        \n    Note:\n    Rounding away from\
    \ zero means that if the given number is equidistant\n    from two integers, the\
    \ one you should return is the one that is the\n    farthest from zero. For example\
    \ closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\"\
    ) should return -15.\n    \"\"\"\n    return int(round(float(value)))\n\n\ndef\
    \ check(candidate):\n    assert candidate('10') == 10\n    assert candidate('14.5')\
    \ == 15\n    assert candidate('-15.5') == -16\n    assert candidate('15.3') ==\
    \ 15\n    assert candidate('0') == 0\n\ndef test_check():\n    check(closest_integer)\n\
    \ntest_check()\n"
  stdout: ''
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ehc6zyv.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp2ehc6zyv.py\", line 26,\
    \ in test_check\n    check(closest_integer)\n  File \"/tmp/tmp2ehc6zyv.py\", line\
    \ 20, in check\n    assert candidate('14.5') == 15\nAssertionError\n"
  exit_code: -1
  status: Exception
